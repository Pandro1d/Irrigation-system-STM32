
Irrigation System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e368  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800e428  0800e428  0001e428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb44  0800eb44  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb44  0800eb44  0001eb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb4c  0800eb4c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb4c  0800eb4c  0001eb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb50  0800eb50  0001eb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800eb54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200001e0  0800ed34  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  0800ed34  000206e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e24a  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fbd  00000000  00000000  0003e452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00042410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  00043790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cc8  00000000  00000000  00044948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a190  00000000  00000000  0005e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092048  00000000  00000000  000787a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010a7e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058e0  00000000  00000000  0010a83c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e410 	.word	0x0800e410

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800e410 	.word	0x0800e410

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	1c10      	adds	r0, r2, #0
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	1c19      	adds	r1, r3, #0
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 f8b7 	bl	80015c4 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f801 	bl	8001468 <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f8a9 	bl	80015c4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f89f 	bl	80015c4 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f823 	bl	80014e0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f819 	bl	80014e0 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	1c08      	adds	r0, r1, #0
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	; (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	ffffff5d 	.word	0xffffff5d
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f89e 	bl	800062c <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			; (mov r8, r8)

080004fc <__aeabi_lmul>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	0415      	lsls	r5, r2, #16
 8000500:	0c2d      	lsrs	r5, r5, #16
 8000502:	000f      	movs	r7, r1
 8000504:	0001      	movs	r1, r0
 8000506:	002e      	movs	r6, r5
 8000508:	46c6      	mov	lr, r8
 800050a:	4684      	mov	ip, r0
 800050c:	0400      	lsls	r0, r0, #16
 800050e:	0c14      	lsrs	r4, r2, #16
 8000510:	0c00      	lsrs	r0, r0, #16
 8000512:	0c09      	lsrs	r1, r1, #16
 8000514:	4346      	muls	r6, r0
 8000516:	434d      	muls	r5, r1
 8000518:	4360      	muls	r0, r4
 800051a:	4361      	muls	r1, r4
 800051c:	1940      	adds	r0, r0, r5
 800051e:	0c34      	lsrs	r4, r6, #16
 8000520:	1824      	adds	r4, r4, r0
 8000522:	b500      	push	{lr}
 8000524:	42a5      	cmp	r5, r4
 8000526:	d903      	bls.n	8000530 <__aeabi_lmul+0x34>
 8000528:	2080      	movs	r0, #128	; 0x80
 800052a:	0240      	lsls	r0, r0, #9
 800052c:	4680      	mov	r8, r0
 800052e:	4441      	add	r1, r8
 8000530:	0c25      	lsrs	r5, r4, #16
 8000532:	186d      	adds	r5, r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4359      	muls	r1, r3
 8000538:	437a      	muls	r2, r7
 800053a:	0430      	lsls	r0, r6, #16
 800053c:	1949      	adds	r1, r1, r5
 800053e:	0424      	lsls	r4, r4, #16
 8000540:	0c00      	lsrs	r0, r0, #16
 8000542:	1820      	adds	r0, r4, r0
 8000544:	1889      	adds	r1, r1, r2
 8000546:	bc80      	pop	{r7}
 8000548:	46b8      	mov	r8, r7
 800054a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800054c <__aeabi_d2uiz>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	2200      	movs	r2, #0
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <__aeabi_d2uiz+0x38>)
 8000552:	0004      	movs	r4, r0
 8000554:	000d      	movs	r5, r1
 8000556:	f7ff ffa7 	bl	80004a8 <__aeabi_dcmpge>
 800055a:	2800      	cmp	r0, #0
 800055c:	d104      	bne.n	8000568 <__aeabi_d2uiz+0x1c>
 800055e:	0020      	movs	r0, r4
 8000560:	0029      	movs	r1, r5
 8000562:	f001 febb 	bl	80022dc <__aeabi_d2iz>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_d2uiz+0x38>)
 800056a:	2200      	movs	r2, #0
 800056c:	0020      	movs	r0, r4
 800056e:	0029      	movs	r1, r5
 8000570:	f001 fb04 	bl	8001b7c <__aeabi_dsub>
 8000574:	f001 feb2 	bl	80022dc <__aeabi_d2iz>
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	469c      	mov	ip, r3
 800057e:	4460      	add	r0, ip
 8000580:	e7f1      	b.n	8000566 <__aeabi_d2uiz+0x1a>
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41e00000 	.word	0x41e00000

08000588 <__aeabi_d2lz>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	0005      	movs	r5, r0
 800058c:	000c      	movs	r4, r1
 800058e:	2200      	movs	r2, #0
 8000590:	2300      	movs	r3, #0
 8000592:	0028      	movs	r0, r5
 8000594:	0021      	movs	r1, r4
 8000596:	f7ff ff69 	bl	800046c <__aeabi_dcmplt>
 800059a:	2800      	cmp	r0, #0
 800059c:	d108      	bne.n	80005b0 <__aeabi_d2lz+0x28>
 800059e:	0028      	movs	r0, r5
 80005a0:	0021      	movs	r1, r4
 80005a2:	f000 f80f 	bl	80005c4 <__aeabi_d2ulz>
 80005a6:	0002      	movs	r2, r0
 80005a8:	000b      	movs	r3, r1
 80005aa:	0010      	movs	r0, r2
 80005ac:	0019      	movs	r1, r3
 80005ae:	bd70      	pop	{r4, r5, r6, pc}
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	061b      	lsls	r3, r3, #24
 80005b4:	18e1      	adds	r1, r4, r3
 80005b6:	0028      	movs	r0, r5
 80005b8:	f000 f804 	bl	80005c4 <__aeabi_d2ulz>
 80005bc:	2300      	movs	r3, #0
 80005be:	4242      	negs	r2, r0
 80005c0:	418b      	sbcs	r3, r1
 80005c2:	e7f2      	b.n	80005aa <__aeabi_d2lz+0x22>

080005c4 <__aeabi_d2ulz>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	2200      	movs	r2, #0
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <__aeabi_d2ulz+0x34>)
 80005ca:	000d      	movs	r5, r1
 80005cc:	0004      	movs	r4, r0
 80005ce:	f001 f869 	bl	80016a4 <__aeabi_dmul>
 80005d2:	f7ff ffbb 	bl	800054c <__aeabi_d2uiz>
 80005d6:	0006      	movs	r6, r0
 80005d8:	f001 fee6 	bl	80023a8 <__aeabi_ui2d>
 80005dc:	2200      	movs	r2, #0
 80005de:	4b07      	ldr	r3, [pc, #28]	; (80005fc <__aeabi_d2ulz+0x38>)
 80005e0:	f001 f860 	bl	80016a4 <__aeabi_dmul>
 80005e4:	0002      	movs	r2, r0
 80005e6:	000b      	movs	r3, r1
 80005e8:	0020      	movs	r0, r4
 80005ea:	0029      	movs	r1, r5
 80005ec:	f001 fac6 	bl	8001b7c <__aeabi_dsub>
 80005f0:	f7ff ffac 	bl	800054c <__aeabi_d2uiz>
 80005f4:	0031      	movs	r1, r6
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	3df00000 	.word	0x3df00000
 80005fc:	41f00000 	.word	0x41f00000

08000600 <__aeabi_l2d>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	0006      	movs	r6, r0
 8000604:	0008      	movs	r0, r1
 8000606:	f001 fe9f 	bl	8002348 <__aeabi_i2d>
 800060a:	2200      	movs	r2, #0
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_l2d+0x28>)
 800060e:	f001 f849 	bl	80016a4 <__aeabi_dmul>
 8000612:	000d      	movs	r5, r1
 8000614:	0004      	movs	r4, r0
 8000616:	0030      	movs	r0, r6
 8000618:	f001 fec6 	bl	80023a8 <__aeabi_ui2d>
 800061c:	002b      	movs	r3, r5
 800061e:	0022      	movs	r2, r4
 8000620:	f000 f8d0 	bl	80007c4 <__aeabi_dadd>
 8000624:	bd70      	pop	{r4, r5, r6, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41f00000 	.word	0x41f00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	4657      	mov	r7, sl
 8000630:	464e      	mov	r6, r9
 8000632:	4645      	mov	r5, r8
 8000634:	46de      	mov	lr, fp
 8000636:	b5e0      	push	{r5, r6, r7, lr}
 8000638:	0004      	movs	r4, r0
 800063a:	000d      	movs	r5, r1
 800063c:	4692      	mov	sl, r2
 800063e:	4699      	mov	r9, r3
 8000640:	b083      	sub	sp, #12
 8000642:	428b      	cmp	r3, r1
 8000644:	d830      	bhi.n	80006a8 <__udivmoddi4+0x7c>
 8000646:	d02d      	beq.n	80006a4 <__udivmoddi4+0x78>
 8000648:	4649      	mov	r1, r9
 800064a:	4650      	mov	r0, sl
 800064c:	f001 fef0 	bl	8002430 <__clzdi2>
 8000650:	0029      	movs	r1, r5
 8000652:	0006      	movs	r6, r0
 8000654:	0020      	movs	r0, r4
 8000656:	f001 feeb 	bl	8002430 <__clzdi2>
 800065a:	1a33      	subs	r3, r6, r0
 800065c:	4698      	mov	r8, r3
 800065e:	3b20      	subs	r3, #32
 8000660:	469b      	mov	fp, r3
 8000662:	d433      	bmi.n	80006cc <__udivmoddi4+0xa0>
 8000664:	465a      	mov	r2, fp
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	4642      	mov	r2, r8
 800066c:	001f      	movs	r7, r3
 800066e:	4653      	mov	r3, sl
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d83a      	bhi.n	80006ee <__udivmoddi4+0xc2>
 8000678:	42af      	cmp	r7, r5
 800067a:	d100      	bne.n	800067e <__udivmoddi4+0x52>
 800067c:	e078      	b.n	8000770 <__udivmoddi4+0x144>
 800067e:	465b      	mov	r3, fp
 8000680:	1ba4      	subs	r4, r4, r6
 8000682:	41bd      	sbcs	r5, r7
 8000684:	2b00      	cmp	r3, #0
 8000686:	da00      	bge.n	800068a <__udivmoddi4+0x5e>
 8000688:	e075      	b.n	8000776 <__udivmoddi4+0x14a>
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	9200      	str	r2, [sp, #0]
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	465a      	mov	r2, fp
 8000696:	4093      	lsls	r3, r2
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	2301      	movs	r3, #1
 800069c:	4642      	mov	r2, r8
 800069e:	4093      	lsls	r3, r2
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	e028      	b.n	80006f6 <__udivmoddi4+0xca>
 80006a4:	4282      	cmp	r2, r0
 80006a6:	d9cf      	bls.n	8000648 <__udivmoddi4+0x1c>
 80006a8:	2200      	movs	r2, #0
 80006aa:	2300      	movs	r3, #0
 80006ac:	9200      	str	r2, [sp, #0]
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <__udivmoddi4+0x8e>
 80006b6:	601c      	str	r4, [r3, #0]
 80006b8:	605d      	str	r5, [r3, #4]
 80006ba:	9800      	ldr	r0, [sp, #0]
 80006bc:	9901      	ldr	r1, [sp, #4]
 80006be:	b003      	add	sp, #12
 80006c0:	bcf0      	pop	{r4, r5, r6, r7}
 80006c2:	46bb      	mov	fp, r7
 80006c4:	46b2      	mov	sl, r6
 80006c6:	46a9      	mov	r9, r5
 80006c8:	46a0      	mov	r8, r4
 80006ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006cc:	4642      	mov	r2, r8
 80006ce:	2320      	movs	r3, #32
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	4652      	mov	r2, sl
 80006d4:	40da      	lsrs	r2, r3
 80006d6:	4641      	mov	r1, r8
 80006d8:	0013      	movs	r3, r2
 80006da:	464a      	mov	r2, r9
 80006dc:	408a      	lsls	r2, r1
 80006de:	0017      	movs	r7, r2
 80006e0:	4642      	mov	r2, r8
 80006e2:	431f      	orrs	r7, r3
 80006e4:	4653      	mov	r3, sl
 80006e6:	4093      	lsls	r3, r2
 80006e8:	001e      	movs	r6, r3
 80006ea:	42af      	cmp	r7, r5
 80006ec:	d9c4      	bls.n	8000678 <__udivmoddi4+0x4c>
 80006ee:	2200      	movs	r2, #0
 80006f0:	2300      	movs	r3, #0
 80006f2:	9200      	str	r2, [sp, #0]
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	4643      	mov	r3, r8
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0d9      	beq.n	80006b0 <__udivmoddi4+0x84>
 80006fc:	07fb      	lsls	r3, r7, #31
 80006fe:	0872      	lsrs	r2, r6, #1
 8000700:	431a      	orrs	r2, r3
 8000702:	4646      	mov	r6, r8
 8000704:	087b      	lsrs	r3, r7, #1
 8000706:	e00e      	b.n	8000726 <__udivmoddi4+0xfa>
 8000708:	42ab      	cmp	r3, r5
 800070a:	d101      	bne.n	8000710 <__udivmoddi4+0xe4>
 800070c:	42a2      	cmp	r2, r4
 800070e:	d80c      	bhi.n	800072a <__udivmoddi4+0xfe>
 8000710:	1aa4      	subs	r4, r4, r2
 8000712:	419d      	sbcs	r5, r3
 8000714:	2001      	movs	r0, #1
 8000716:	1924      	adds	r4, r4, r4
 8000718:	416d      	adcs	r5, r5
 800071a:	2100      	movs	r1, #0
 800071c:	3e01      	subs	r6, #1
 800071e:	1824      	adds	r4, r4, r0
 8000720:	414d      	adcs	r5, r1
 8000722:	2e00      	cmp	r6, #0
 8000724:	d006      	beq.n	8000734 <__udivmoddi4+0x108>
 8000726:	42ab      	cmp	r3, r5
 8000728:	d9ee      	bls.n	8000708 <__udivmoddi4+0xdc>
 800072a:	3e01      	subs	r6, #1
 800072c:	1924      	adds	r4, r4, r4
 800072e:	416d      	adcs	r5, r5
 8000730:	2e00      	cmp	r6, #0
 8000732:	d1f8      	bne.n	8000726 <__udivmoddi4+0xfa>
 8000734:	9800      	ldr	r0, [sp, #0]
 8000736:	9901      	ldr	r1, [sp, #4]
 8000738:	465b      	mov	r3, fp
 800073a:	1900      	adds	r0, r0, r4
 800073c:	4169      	adcs	r1, r5
 800073e:	2b00      	cmp	r3, #0
 8000740:	db24      	blt.n	800078c <__udivmoddi4+0x160>
 8000742:	002b      	movs	r3, r5
 8000744:	465a      	mov	r2, fp
 8000746:	4644      	mov	r4, r8
 8000748:	40d3      	lsrs	r3, r2
 800074a:	002a      	movs	r2, r5
 800074c:	40e2      	lsrs	r2, r4
 800074e:	001c      	movs	r4, r3
 8000750:	465b      	mov	r3, fp
 8000752:	0015      	movs	r5, r2
 8000754:	2b00      	cmp	r3, #0
 8000756:	db2a      	blt.n	80007ae <__udivmoddi4+0x182>
 8000758:	0026      	movs	r6, r4
 800075a:	409e      	lsls	r6, r3
 800075c:	0033      	movs	r3, r6
 800075e:	0026      	movs	r6, r4
 8000760:	4647      	mov	r7, r8
 8000762:	40be      	lsls	r6, r7
 8000764:	0032      	movs	r2, r6
 8000766:	1a80      	subs	r0, r0, r2
 8000768:	4199      	sbcs	r1, r3
 800076a:	9000      	str	r0, [sp, #0]
 800076c:	9101      	str	r1, [sp, #4]
 800076e:	e79f      	b.n	80006b0 <__udivmoddi4+0x84>
 8000770:	42a3      	cmp	r3, r4
 8000772:	d8bc      	bhi.n	80006ee <__udivmoddi4+0xc2>
 8000774:	e783      	b.n	800067e <__udivmoddi4+0x52>
 8000776:	4642      	mov	r2, r8
 8000778:	2320      	movs	r3, #32
 800077a:	2100      	movs	r1, #0
 800077c:	1a9b      	subs	r3, r3, r2
 800077e:	2200      	movs	r2, #0
 8000780:	9100      	str	r1, [sp, #0]
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	2201      	movs	r2, #1
 8000786:	40da      	lsrs	r2, r3
 8000788:	9201      	str	r2, [sp, #4]
 800078a:	e786      	b.n	800069a <__udivmoddi4+0x6e>
 800078c:	4642      	mov	r2, r8
 800078e:	2320      	movs	r3, #32
 8000790:	1a9b      	subs	r3, r3, r2
 8000792:	002a      	movs	r2, r5
 8000794:	4646      	mov	r6, r8
 8000796:	409a      	lsls	r2, r3
 8000798:	0023      	movs	r3, r4
 800079a:	40f3      	lsrs	r3, r6
 800079c:	4644      	mov	r4, r8
 800079e:	4313      	orrs	r3, r2
 80007a0:	002a      	movs	r2, r5
 80007a2:	40e2      	lsrs	r2, r4
 80007a4:	001c      	movs	r4, r3
 80007a6:	465b      	mov	r3, fp
 80007a8:	0015      	movs	r5, r2
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	dad4      	bge.n	8000758 <__udivmoddi4+0x12c>
 80007ae:	4642      	mov	r2, r8
 80007b0:	002f      	movs	r7, r5
 80007b2:	2320      	movs	r3, #32
 80007b4:	0026      	movs	r6, r4
 80007b6:	4097      	lsls	r7, r2
 80007b8:	1a9b      	subs	r3, r3, r2
 80007ba:	40de      	lsrs	r6, r3
 80007bc:	003b      	movs	r3, r7
 80007be:	4333      	orrs	r3, r6
 80007c0:	e7cd      	b.n	800075e <__udivmoddi4+0x132>
 80007c2:	46c0      	nop			; (mov r8, r8)

080007c4 <__aeabi_dadd>:
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	464f      	mov	r7, r9
 80007c8:	46d6      	mov	lr, sl
 80007ca:	4646      	mov	r6, r8
 80007cc:	000d      	movs	r5, r1
 80007ce:	0001      	movs	r1, r0
 80007d0:	0018      	movs	r0, r3
 80007d2:	b5c0      	push	{r6, r7, lr}
 80007d4:	0017      	movs	r7, r2
 80007d6:	032b      	lsls	r3, r5, #12
 80007d8:	0a5a      	lsrs	r2, r3, #9
 80007da:	0f4b      	lsrs	r3, r1, #29
 80007dc:	4313      	orrs	r3, r2
 80007de:	00ca      	lsls	r2, r1, #3
 80007e0:	4691      	mov	r9, r2
 80007e2:	0302      	lsls	r2, r0, #12
 80007e4:	006e      	lsls	r6, r5, #1
 80007e6:	0041      	lsls	r1, r0, #1
 80007e8:	0a52      	lsrs	r2, r2, #9
 80007ea:	0fec      	lsrs	r4, r5, #31
 80007ec:	0f7d      	lsrs	r5, r7, #29
 80007ee:	4315      	orrs	r5, r2
 80007f0:	0d76      	lsrs	r6, r6, #21
 80007f2:	0d49      	lsrs	r1, r1, #21
 80007f4:	0fc0      	lsrs	r0, r0, #31
 80007f6:	4682      	mov	sl, r0
 80007f8:	46ac      	mov	ip, r5
 80007fa:	00ff      	lsls	r7, r7, #3
 80007fc:	1a72      	subs	r2, r6, r1
 80007fe:	4284      	cmp	r4, r0
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x40>
 8000802:	e098      	b.n	8000936 <__aeabi_dadd+0x172>
 8000804:	2a00      	cmp	r2, #0
 8000806:	dc00      	bgt.n	800080a <__aeabi_dadd+0x46>
 8000808:	e081      	b.n	800090e <__aeabi_dadd+0x14a>
 800080a:	2900      	cmp	r1, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x4c>
 800080e:	e0b6      	b.n	800097e <__aeabi_dadd+0x1ba>
 8000810:	49c9      	ldr	r1, [pc, #804]	; (8000b38 <__aeabi_dadd+0x374>)
 8000812:	428e      	cmp	r6, r1
 8000814:	d100      	bne.n	8000818 <__aeabi_dadd+0x54>
 8000816:	e172      	b.n	8000afe <__aeabi_dadd+0x33a>
 8000818:	2180      	movs	r1, #128	; 0x80
 800081a:	0028      	movs	r0, r5
 800081c:	0409      	lsls	r1, r1, #16
 800081e:	4308      	orrs	r0, r1
 8000820:	4684      	mov	ip, r0
 8000822:	2a38      	cmp	r2, #56	; 0x38
 8000824:	dd00      	ble.n	8000828 <__aeabi_dadd+0x64>
 8000826:	e15e      	b.n	8000ae6 <__aeabi_dadd+0x322>
 8000828:	2a1f      	cmp	r2, #31
 800082a:	dd00      	ble.n	800082e <__aeabi_dadd+0x6a>
 800082c:	e1ee      	b.n	8000c0c <__aeabi_dadd+0x448>
 800082e:	2020      	movs	r0, #32
 8000830:	0039      	movs	r1, r7
 8000832:	4665      	mov	r5, ip
 8000834:	1a80      	subs	r0, r0, r2
 8000836:	4087      	lsls	r7, r0
 8000838:	40d1      	lsrs	r1, r2
 800083a:	4085      	lsls	r5, r0
 800083c:	430d      	orrs	r5, r1
 800083e:	0039      	movs	r1, r7
 8000840:	1e4f      	subs	r7, r1, #1
 8000842:	41b9      	sbcs	r1, r7
 8000844:	4667      	mov	r7, ip
 8000846:	40d7      	lsrs	r7, r2
 8000848:	4329      	orrs	r1, r5
 800084a:	1bdb      	subs	r3, r3, r7
 800084c:	464a      	mov	r2, r9
 800084e:	1a55      	subs	r5, r2, r1
 8000850:	45a9      	cmp	r9, r5
 8000852:	4189      	sbcs	r1, r1
 8000854:	4249      	negs	r1, r1
 8000856:	1a5b      	subs	r3, r3, r1
 8000858:	4698      	mov	r8, r3
 800085a:	4643      	mov	r3, r8
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	d400      	bmi.n	8000862 <__aeabi_dadd+0x9e>
 8000860:	e0cc      	b.n	80009fc <__aeabi_dadd+0x238>
 8000862:	4643      	mov	r3, r8
 8000864:	025b      	lsls	r3, r3, #9
 8000866:	0a5b      	lsrs	r3, r3, #9
 8000868:	4698      	mov	r8, r3
 800086a:	4643      	mov	r3, r8
 800086c:	2b00      	cmp	r3, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0xae>
 8000870:	e12c      	b.n	8000acc <__aeabi_dadd+0x308>
 8000872:	4640      	mov	r0, r8
 8000874:	f001 fdbe 	bl	80023f4 <__clzsi2>
 8000878:	0001      	movs	r1, r0
 800087a:	3908      	subs	r1, #8
 800087c:	2220      	movs	r2, #32
 800087e:	0028      	movs	r0, r5
 8000880:	4643      	mov	r3, r8
 8000882:	1a52      	subs	r2, r2, r1
 8000884:	408b      	lsls	r3, r1
 8000886:	40d0      	lsrs	r0, r2
 8000888:	408d      	lsls	r5, r1
 800088a:	4303      	orrs	r3, r0
 800088c:	428e      	cmp	r6, r1
 800088e:	dd00      	ble.n	8000892 <__aeabi_dadd+0xce>
 8000890:	e117      	b.n	8000ac2 <__aeabi_dadd+0x2fe>
 8000892:	1b8e      	subs	r6, r1, r6
 8000894:	1c72      	adds	r2, r6, #1
 8000896:	2a1f      	cmp	r2, #31
 8000898:	dd00      	ble.n	800089c <__aeabi_dadd+0xd8>
 800089a:	e1a7      	b.n	8000bec <__aeabi_dadd+0x428>
 800089c:	2120      	movs	r1, #32
 800089e:	0018      	movs	r0, r3
 80008a0:	002e      	movs	r6, r5
 80008a2:	1a89      	subs	r1, r1, r2
 80008a4:	408d      	lsls	r5, r1
 80008a6:	4088      	lsls	r0, r1
 80008a8:	40d6      	lsrs	r6, r2
 80008aa:	40d3      	lsrs	r3, r2
 80008ac:	1e69      	subs	r1, r5, #1
 80008ae:	418d      	sbcs	r5, r1
 80008b0:	4330      	orrs	r0, r6
 80008b2:	4698      	mov	r8, r3
 80008b4:	2600      	movs	r6, #0
 80008b6:	4305      	orrs	r5, r0
 80008b8:	076b      	lsls	r3, r5, #29
 80008ba:	d009      	beq.n	80008d0 <__aeabi_dadd+0x10c>
 80008bc:	230f      	movs	r3, #15
 80008be:	402b      	ands	r3, r5
 80008c0:	2b04      	cmp	r3, #4
 80008c2:	d005      	beq.n	80008d0 <__aeabi_dadd+0x10c>
 80008c4:	1d2b      	adds	r3, r5, #4
 80008c6:	42ab      	cmp	r3, r5
 80008c8:	41ad      	sbcs	r5, r5
 80008ca:	426d      	negs	r5, r5
 80008cc:	44a8      	add	r8, r5
 80008ce:	001d      	movs	r5, r3
 80008d0:	4643      	mov	r3, r8
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	d400      	bmi.n	80008d8 <__aeabi_dadd+0x114>
 80008d6:	e094      	b.n	8000a02 <__aeabi_dadd+0x23e>
 80008d8:	4b97      	ldr	r3, [pc, #604]	; (8000b38 <__aeabi_dadd+0x374>)
 80008da:	1c72      	adds	r2, r6, #1
 80008dc:	429a      	cmp	r2, r3
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x11e>
 80008e0:	e09d      	b.n	8000a1e <__aeabi_dadd+0x25a>
 80008e2:	4641      	mov	r1, r8
 80008e4:	4b95      	ldr	r3, [pc, #596]	; (8000b3c <__aeabi_dadd+0x378>)
 80008e6:	08ed      	lsrs	r5, r5, #3
 80008e8:	4019      	ands	r1, r3
 80008ea:	000b      	movs	r3, r1
 80008ec:	0552      	lsls	r2, r2, #21
 80008ee:	0749      	lsls	r1, r1, #29
 80008f0:	025b      	lsls	r3, r3, #9
 80008f2:	4329      	orrs	r1, r5
 80008f4:	0b1b      	lsrs	r3, r3, #12
 80008f6:	0d52      	lsrs	r2, r2, #21
 80008f8:	0512      	lsls	r2, r2, #20
 80008fa:	4313      	orrs	r3, r2
 80008fc:	07e4      	lsls	r4, r4, #31
 80008fe:	4323      	orrs	r3, r4
 8000900:	0008      	movs	r0, r1
 8000902:	0019      	movs	r1, r3
 8000904:	bce0      	pop	{r5, r6, r7}
 8000906:	46ba      	mov	sl, r7
 8000908:	46b1      	mov	r9, r6
 800090a:	46a8      	mov	r8, r5
 800090c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800090e:	2a00      	cmp	r2, #0
 8000910:	d043      	beq.n	800099a <__aeabi_dadd+0x1d6>
 8000912:	1b8a      	subs	r2, r1, r6
 8000914:	2e00      	cmp	r6, #0
 8000916:	d000      	beq.n	800091a <__aeabi_dadd+0x156>
 8000918:	e12a      	b.n	8000b70 <__aeabi_dadd+0x3ac>
 800091a:	464c      	mov	r4, r9
 800091c:	431c      	orrs	r4, r3
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x15e>
 8000920:	e1d1      	b.n	8000cc6 <__aeabi_dadd+0x502>
 8000922:	1e54      	subs	r4, r2, #1
 8000924:	2a01      	cmp	r2, #1
 8000926:	d100      	bne.n	800092a <__aeabi_dadd+0x166>
 8000928:	e21f      	b.n	8000d6a <__aeabi_dadd+0x5a6>
 800092a:	4d83      	ldr	r5, [pc, #524]	; (8000b38 <__aeabi_dadd+0x374>)
 800092c:	42aa      	cmp	r2, r5
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x16e>
 8000930:	e272      	b.n	8000e18 <__aeabi_dadd+0x654>
 8000932:	0022      	movs	r2, r4
 8000934:	e123      	b.n	8000b7e <__aeabi_dadd+0x3ba>
 8000936:	2a00      	cmp	r2, #0
 8000938:	dc00      	bgt.n	800093c <__aeabi_dadd+0x178>
 800093a:	e098      	b.n	8000a6e <__aeabi_dadd+0x2aa>
 800093c:	2900      	cmp	r1, #0
 800093e:	d042      	beq.n	80009c6 <__aeabi_dadd+0x202>
 8000940:	497d      	ldr	r1, [pc, #500]	; (8000b38 <__aeabi_dadd+0x374>)
 8000942:	428e      	cmp	r6, r1
 8000944:	d100      	bne.n	8000948 <__aeabi_dadd+0x184>
 8000946:	e0da      	b.n	8000afe <__aeabi_dadd+0x33a>
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	0028      	movs	r0, r5
 800094c:	0409      	lsls	r1, r1, #16
 800094e:	4308      	orrs	r0, r1
 8000950:	4684      	mov	ip, r0
 8000952:	2a38      	cmp	r2, #56	; 0x38
 8000954:	dd00      	ble.n	8000958 <__aeabi_dadd+0x194>
 8000956:	e129      	b.n	8000bac <__aeabi_dadd+0x3e8>
 8000958:	2a1f      	cmp	r2, #31
 800095a:	dc00      	bgt.n	800095e <__aeabi_dadd+0x19a>
 800095c:	e187      	b.n	8000c6e <__aeabi_dadd+0x4aa>
 800095e:	0011      	movs	r1, r2
 8000960:	4665      	mov	r5, ip
 8000962:	3920      	subs	r1, #32
 8000964:	40cd      	lsrs	r5, r1
 8000966:	2a20      	cmp	r2, #32
 8000968:	d004      	beq.n	8000974 <__aeabi_dadd+0x1b0>
 800096a:	2040      	movs	r0, #64	; 0x40
 800096c:	4661      	mov	r1, ip
 800096e:	1a82      	subs	r2, r0, r2
 8000970:	4091      	lsls	r1, r2
 8000972:	430f      	orrs	r7, r1
 8000974:	0039      	movs	r1, r7
 8000976:	1e4f      	subs	r7, r1, #1
 8000978:	41b9      	sbcs	r1, r7
 800097a:	430d      	orrs	r5, r1
 800097c:	e11b      	b.n	8000bb6 <__aeabi_dadd+0x3f2>
 800097e:	0029      	movs	r1, r5
 8000980:	4339      	orrs	r1, r7
 8000982:	d100      	bne.n	8000986 <__aeabi_dadd+0x1c2>
 8000984:	e0b5      	b.n	8000af2 <__aeabi_dadd+0x32e>
 8000986:	1e51      	subs	r1, r2, #1
 8000988:	2a01      	cmp	r2, #1
 800098a:	d100      	bne.n	800098e <__aeabi_dadd+0x1ca>
 800098c:	e1ab      	b.n	8000ce6 <__aeabi_dadd+0x522>
 800098e:	486a      	ldr	r0, [pc, #424]	; (8000b38 <__aeabi_dadd+0x374>)
 8000990:	4282      	cmp	r2, r0
 8000992:	d100      	bne.n	8000996 <__aeabi_dadd+0x1d2>
 8000994:	e1b2      	b.n	8000cfc <__aeabi_dadd+0x538>
 8000996:	000a      	movs	r2, r1
 8000998:	e743      	b.n	8000822 <__aeabi_dadd+0x5e>
 800099a:	4969      	ldr	r1, [pc, #420]	; (8000b40 <__aeabi_dadd+0x37c>)
 800099c:	1c75      	adds	r5, r6, #1
 800099e:	420d      	tst	r5, r1
 80009a0:	d000      	beq.n	80009a4 <__aeabi_dadd+0x1e0>
 80009a2:	e0cf      	b.n	8000b44 <__aeabi_dadd+0x380>
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d000      	beq.n	80009aa <__aeabi_dadd+0x1e6>
 80009a8:	e193      	b.n	8000cd2 <__aeabi_dadd+0x50e>
 80009aa:	4649      	mov	r1, r9
 80009ac:	4319      	orrs	r1, r3
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x1ee>
 80009b0:	e1d1      	b.n	8000d56 <__aeabi_dadd+0x592>
 80009b2:	4661      	mov	r1, ip
 80009b4:	4339      	orrs	r1, r7
 80009b6:	d000      	beq.n	80009ba <__aeabi_dadd+0x1f6>
 80009b8:	e1e3      	b.n	8000d82 <__aeabi_dadd+0x5be>
 80009ba:	4649      	mov	r1, r9
 80009bc:	0758      	lsls	r0, r3, #29
 80009be:	08c9      	lsrs	r1, r1, #3
 80009c0:	4301      	orrs	r1, r0
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	e026      	b.n	8000a14 <__aeabi_dadd+0x250>
 80009c6:	0029      	movs	r1, r5
 80009c8:	4339      	orrs	r1, r7
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x20a>
 80009cc:	e091      	b.n	8000af2 <__aeabi_dadd+0x32e>
 80009ce:	1e51      	subs	r1, r2, #1
 80009d0:	2a01      	cmp	r2, #1
 80009d2:	d005      	beq.n	80009e0 <__aeabi_dadd+0x21c>
 80009d4:	4858      	ldr	r0, [pc, #352]	; (8000b38 <__aeabi_dadd+0x374>)
 80009d6:	4282      	cmp	r2, r0
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x218>
 80009da:	e18f      	b.n	8000cfc <__aeabi_dadd+0x538>
 80009dc:	000a      	movs	r2, r1
 80009de:	e7b8      	b.n	8000952 <__aeabi_dadd+0x18e>
 80009e0:	003d      	movs	r5, r7
 80009e2:	444d      	add	r5, r9
 80009e4:	454d      	cmp	r5, r9
 80009e6:	4189      	sbcs	r1, r1
 80009e8:	4463      	add	r3, ip
 80009ea:	4698      	mov	r8, r3
 80009ec:	4249      	negs	r1, r1
 80009ee:	4488      	add	r8, r1
 80009f0:	4643      	mov	r3, r8
 80009f2:	2602      	movs	r6, #2
 80009f4:	021b      	lsls	r3, r3, #8
 80009f6:	d500      	bpl.n	80009fa <__aeabi_dadd+0x236>
 80009f8:	e0eb      	b.n	8000bd2 <__aeabi_dadd+0x40e>
 80009fa:	3e01      	subs	r6, #1
 80009fc:	076b      	lsls	r3, r5, #29
 80009fe:	d000      	beq.n	8000a02 <__aeabi_dadd+0x23e>
 8000a00:	e75c      	b.n	80008bc <__aeabi_dadd+0xf8>
 8000a02:	4643      	mov	r3, r8
 8000a04:	08e9      	lsrs	r1, r5, #3
 8000a06:	075a      	lsls	r2, r3, #29
 8000a08:	4311      	orrs	r1, r2
 8000a0a:	0032      	movs	r2, r6
 8000a0c:	08db      	lsrs	r3, r3, #3
 8000a0e:	484a      	ldr	r0, [pc, #296]	; (8000b38 <__aeabi_dadd+0x374>)
 8000a10:	4282      	cmp	r2, r0
 8000a12:	d021      	beq.n	8000a58 <__aeabi_dadd+0x294>
 8000a14:	031b      	lsls	r3, r3, #12
 8000a16:	0552      	lsls	r2, r2, #21
 8000a18:	0b1b      	lsrs	r3, r3, #12
 8000a1a:	0d52      	lsrs	r2, r2, #21
 8000a1c:	e76c      	b.n	80008f8 <__aeabi_dadd+0x134>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	e769      	b.n	80008f8 <__aeabi_dadd+0x134>
 8000a24:	002a      	movs	r2, r5
 8000a26:	433a      	orrs	r2, r7
 8000a28:	d069      	beq.n	8000afe <__aeabi_dadd+0x33a>
 8000a2a:	464a      	mov	r2, r9
 8000a2c:	0758      	lsls	r0, r3, #29
 8000a2e:	08d1      	lsrs	r1, r2, #3
 8000a30:	08da      	lsrs	r2, r3, #3
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	031b      	lsls	r3, r3, #12
 8000a36:	4308      	orrs	r0, r1
 8000a38:	421a      	tst	r2, r3
 8000a3a:	d007      	beq.n	8000a4c <__aeabi_dadd+0x288>
 8000a3c:	0029      	movs	r1, r5
 8000a3e:	08ed      	lsrs	r5, r5, #3
 8000a40:	421d      	tst	r5, r3
 8000a42:	d103      	bne.n	8000a4c <__aeabi_dadd+0x288>
 8000a44:	002a      	movs	r2, r5
 8000a46:	08ff      	lsrs	r7, r7, #3
 8000a48:	0748      	lsls	r0, r1, #29
 8000a4a:	4338      	orrs	r0, r7
 8000a4c:	0f43      	lsrs	r3, r0, #29
 8000a4e:	00c1      	lsls	r1, r0, #3
 8000a50:	075b      	lsls	r3, r3, #29
 8000a52:	08c9      	lsrs	r1, r1, #3
 8000a54:	4319      	orrs	r1, r3
 8000a56:	0013      	movs	r3, r2
 8000a58:	000a      	movs	r2, r1
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_dadd+0x29c>
 8000a5e:	e213      	b.n	8000e88 <__aeabi_dadd+0x6c4>
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	0312      	lsls	r2, r2, #12
 8000a64:	4313      	orrs	r3, r2
 8000a66:	031b      	lsls	r3, r3, #12
 8000a68:	4a33      	ldr	r2, [pc, #204]	; (8000b38 <__aeabi_dadd+0x374>)
 8000a6a:	0b1b      	lsrs	r3, r3, #12
 8000a6c:	e744      	b.n	80008f8 <__aeabi_dadd+0x134>
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	d04b      	beq.n	8000b0a <__aeabi_dadd+0x346>
 8000a72:	1b8a      	subs	r2, r1, r6
 8000a74:	2e00      	cmp	r6, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x2b6>
 8000a78:	e0e7      	b.n	8000c4a <__aeabi_dadd+0x486>
 8000a7a:	482f      	ldr	r0, [pc, #188]	; (8000b38 <__aeabi_dadd+0x374>)
 8000a7c:	4281      	cmp	r1, r0
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x2be>
 8000a80:	e195      	b.n	8000dae <__aeabi_dadd+0x5ea>
 8000a82:	2080      	movs	r0, #128	; 0x80
 8000a84:	0400      	lsls	r0, r0, #16
 8000a86:	4303      	orrs	r3, r0
 8000a88:	2a38      	cmp	r2, #56	; 0x38
 8000a8a:	dd00      	ble.n	8000a8e <__aeabi_dadd+0x2ca>
 8000a8c:	e143      	b.n	8000d16 <__aeabi_dadd+0x552>
 8000a8e:	2a1f      	cmp	r2, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x2d0>
 8000a92:	e1db      	b.n	8000e4c <__aeabi_dadd+0x688>
 8000a94:	2020      	movs	r0, #32
 8000a96:	001d      	movs	r5, r3
 8000a98:	464e      	mov	r6, r9
 8000a9a:	1a80      	subs	r0, r0, r2
 8000a9c:	4085      	lsls	r5, r0
 8000a9e:	40d6      	lsrs	r6, r2
 8000aa0:	4335      	orrs	r5, r6
 8000aa2:	464e      	mov	r6, r9
 8000aa4:	4086      	lsls	r6, r0
 8000aa6:	0030      	movs	r0, r6
 8000aa8:	40d3      	lsrs	r3, r2
 8000aaa:	1e46      	subs	r6, r0, #1
 8000aac:	41b0      	sbcs	r0, r6
 8000aae:	449c      	add	ip, r3
 8000ab0:	4305      	orrs	r5, r0
 8000ab2:	19ed      	adds	r5, r5, r7
 8000ab4:	42bd      	cmp	r5, r7
 8000ab6:	419b      	sbcs	r3, r3
 8000ab8:	425b      	negs	r3, r3
 8000aba:	4463      	add	r3, ip
 8000abc:	4698      	mov	r8, r3
 8000abe:	000e      	movs	r6, r1
 8000ac0:	e07f      	b.n	8000bc2 <__aeabi_dadd+0x3fe>
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <__aeabi_dadd+0x378>)
 8000ac4:	1a76      	subs	r6, r6, r1
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	4698      	mov	r8, r3
 8000aca:	e6f5      	b.n	80008b8 <__aeabi_dadd+0xf4>
 8000acc:	0028      	movs	r0, r5
 8000ace:	f001 fc91 	bl	80023f4 <__clzsi2>
 8000ad2:	0001      	movs	r1, r0
 8000ad4:	3118      	adds	r1, #24
 8000ad6:	291f      	cmp	r1, #31
 8000ad8:	dc00      	bgt.n	8000adc <__aeabi_dadd+0x318>
 8000ada:	e6cf      	b.n	800087c <__aeabi_dadd+0xb8>
 8000adc:	002b      	movs	r3, r5
 8000ade:	3808      	subs	r0, #8
 8000ae0:	4083      	lsls	r3, r0
 8000ae2:	2500      	movs	r5, #0
 8000ae4:	e6d2      	b.n	800088c <__aeabi_dadd+0xc8>
 8000ae6:	4662      	mov	r2, ip
 8000ae8:	433a      	orrs	r2, r7
 8000aea:	0011      	movs	r1, r2
 8000aec:	1e4f      	subs	r7, r1, #1
 8000aee:	41b9      	sbcs	r1, r7
 8000af0:	e6ac      	b.n	800084c <__aeabi_dadd+0x88>
 8000af2:	4649      	mov	r1, r9
 8000af4:	0758      	lsls	r0, r3, #29
 8000af6:	08c9      	lsrs	r1, r1, #3
 8000af8:	4301      	orrs	r1, r0
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	e787      	b.n	8000a0e <__aeabi_dadd+0x24a>
 8000afe:	4649      	mov	r1, r9
 8000b00:	075a      	lsls	r2, r3, #29
 8000b02:	08c9      	lsrs	r1, r1, #3
 8000b04:	4311      	orrs	r1, r2
 8000b06:	08db      	lsrs	r3, r3, #3
 8000b08:	e7a6      	b.n	8000a58 <__aeabi_dadd+0x294>
 8000b0a:	490d      	ldr	r1, [pc, #52]	; (8000b40 <__aeabi_dadd+0x37c>)
 8000b0c:	1c70      	adds	r0, r6, #1
 8000b0e:	4208      	tst	r0, r1
 8000b10:	d000      	beq.n	8000b14 <__aeabi_dadd+0x350>
 8000b12:	e0bb      	b.n	8000c8c <__aeabi_dadd+0x4c8>
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d000      	beq.n	8000b1a <__aeabi_dadd+0x356>
 8000b18:	e114      	b.n	8000d44 <__aeabi_dadd+0x580>
 8000b1a:	4649      	mov	r1, r9
 8000b1c:	4319      	orrs	r1, r3
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_dadd+0x35e>
 8000b20:	e175      	b.n	8000e0e <__aeabi_dadd+0x64a>
 8000b22:	0029      	movs	r1, r5
 8000b24:	4339      	orrs	r1, r7
 8000b26:	d000      	beq.n	8000b2a <__aeabi_dadd+0x366>
 8000b28:	e17e      	b.n	8000e28 <__aeabi_dadd+0x664>
 8000b2a:	4649      	mov	r1, r9
 8000b2c:	0758      	lsls	r0, r3, #29
 8000b2e:	08c9      	lsrs	r1, r1, #3
 8000b30:	4301      	orrs	r1, r0
 8000b32:	08db      	lsrs	r3, r3, #3
 8000b34:	e76e      	b.n	8000a14 <__aeabi_dadd+0x250>
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	000007ff 	.word	0x000007ff
 8000b3c:	ff7fffff 	.word	0xff7fffff
 8000b40:	000007fe 	.word	0x000007fe
 8000b44:	4649      	mov	r1, r9
 8000b46:	1bcd      	subs	r5, r1, r7
 8000b48:	4661      	mov	r1, ip
 8000b4a:	1a58      	subs	r0, r3, r1
 8000b4c:	45a9      	cmp	r9, r5
 8000b4e:	4189      	sbcs	r1, r1
 8000b50:	4249      	negs	r1, r1
 8000b52:	4688      	mov	r8, r1
 8000b54:	0001      	movs	r1, r0
 8000b56:	4640      	mov	r0, r8
 8000b58:	1a09      	subs	r1, r1, r0
 8000b5a:	4688      	mov	r8, r1
 8000b5c:	0209      	lsls	r1, r1, #8
 8000b5e:	d500      	bpl.n	8000b62 <__aeabi_dadd+0x39e>
 8000b60:	e0a6      	b.n	8000cb0 <__aeabi_dadd+0x4ec>
 8000b62:	4641      	mov	r1, r8
 8000b64:	4329      	orrs	r1, r5
 8000b66:	d000      	beq.n	8000b6a <__aeabi_dadd+0x3a6>
 8000b68:	e67f      	b.n	800086a <__aeabi_dadd+0xa6>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	2400      	movs	r4, #0
 8000b6e:	e751      	b.n	8000a14 <__aeabi_dadd+0x250>
 8000b70:	4cc7      	ldr	r4, [pc, #796]	; (8000e90 <__aeabi_dadd+0x6cc>)
 8000b72:	42a1      	cmp	r1, r4
 8000b74:	d100      	bne.n	8000b78 <__aeabi_dadd+0x3b4>
 8000b76:	e0c7      	b.n	8000d08 <__aeabi_dadd+0x544>
 8000b78:	2480      	movs	r4, #128	; 0x80
 8000b7a:	0424      	lsls	r4, r4, #16
 8000b7c:	4323      	orrs	r3, r4
 8000b7e:	2a38      	cmp	r2, #56	; 0x38
 8000b80:	dc54      	bgt.n	8000c2c <__aeabi_dadd+0x468>
 8000b82:	2a1f      	cmp	r2, #31
 8000b84:	dd00      	ble.n	8000b88 <__aeabi_dadd+0x3c4>
 8000b86:	e0cc      	b.n	8000d22 <__aeabi_dadd+0x55e>
 8000b88:	2420      	movs	r4, #32
 8000b8a:	4648      	mov	r0, r9
 8000b8c:	1aa4      	subs	r4, r4, r2
 8000b8e:	001d      	movs	r5, r3
 8000b90:	464e      	mov	r6, r9
 8000b92:	40a0      	lsls	r0, r4
 8000b94:	40d6      	lsrs	r6, r2
 8000b96:	40a5      	lsls	r5, r4
 8000b98:	0004      	movs	r4, r0
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	4335      	orrs	r5, r6
 8000ba0:	1e66      	subs	r6, r4, #1
 8000ba2:	41b4      	sbcs	r4, r6
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	469c      	mov	ip, r3
 8000ba8:	4325      	orrs	r5, r4
 8000baa:	e044      	b.n	8000c36 <__aeabi_dadd+0x472>
 8000bac:	4662      	mov	r2, ip
 8000bae:	433a      	orrs	r2, r7
 8000bb0:	0015      	movs	r5, r2
 8000bb2:	1e6f      	subs	r7, r5, #1
 8000bb4:	41bd      	sbcs	r5, r7
 8000bb6:	444d      	add	r5, r9
 8000bb8:	454d      	cmp	r5, r9
 8000bba:	4189      	sbcs	r1, r1
 8000bbc:	4249      	negs	r1, r1
 8000bbe:	4688      	mov	r8, r1
 8000bc0:	4498      	add	r8, r3
 8000bc2:	4643      	mov	r3, r8
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	d400      	bmi.n	8000bca <__aeabi_dadd+0x406>
 8000bc8:	e718      	b.n	80009fc <__aeabi_dadd+0x238>
 8000bca:	4bb1      	ldr	r3, [pc, #708]	; (8000e90 <__aeabi_dadd+0x6cc>)
 8000bcc:	3601      	adds	r6, #1
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	d049      	beq.n	8000c66 <__aeabi_dadd+0x4a2>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	4baf      	ldr	r3, [pc, #700]	; (8000e94 <__aeabi_dadd+0x6d0>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	401a      	ands	r2, r3
 8000bda:	0013      	movs	r3, r2
 8000bdc:	086a      	lsrs	r2, r5, #1
 8000bde:	400d      	ands	r5, r1
 8000be0:	4315      	orrs	r5, r2
 8000be2:	07d9      	lsls	r1, r3, #31
 8000be4:	085b      	lsrs	r3, r3, #1
 8000be6:	4698      	mov	r8, r3
 8000be8:	430d      	orrs	r5, r1
 8000bea:	e665      	b.n	80008b8 <__aeabi_dadd+0xf4>
 8000bec:	0018      	movs	r0, r3
 8000bee:	3e1f      	subs	r6, #31
 8000bf0:	40f0      	lsrs	r0, r6
 8000bf2:	2a20      	cmp	r2, #32
 8000bf4:	d003      	beq.n	8000bfe <__aeabi_dadd+0x43a>
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	1a8a      	subs	r2, r1, r2
 8000bfa:	4093      	lsls	r3, r2
 8000bfc:	431d      	orrs	r5, r3
 8000bfe:	1e69      	subs	r1, r5, #1
 8000c00:	418d      	sbcs	r5, r1
 8000c02:	2300      	movs	r3, #0
 8000c04:	2600      	movs	r6, #0
 8000c06:	4698      	mov	r8, r3
 8000c08:	4305      	orrs	r5, r0
 8000c0a:	e6f7      	b.n	80009fc <__aeabi_dadd+0x238>
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	4665      	mov	r5, ip
 8000c10:	3920      	subs	r1, #32
 8000c12:	40cd      	lsrs	r5, r1
 8000c14:	2a20      	cmp	r2, #32
 8000c16:	d004      	beq.n	8000c22 <__aeabi_dadd+0x45e>
 8000c18:	2040      	movs	r0, #64	; 0x40
 8000c1a:	4661      	mov	r1, ip
 8000c1c:	1a82      	subs	r2, r0, r2
 8000c1e:	4091      	lsls	r1, r2
 8000c20:	430f      	orrs	r7, r1
 8000c22:	0039      	movs	r1, r7
 8000c24:	1e4f      	subs	r7, r1, #1
 8000c26:	41b9      	sbcs	r1, r7
 8000c28:	4329      	orrs	r1, r5
 8000c2a:	e60f      	b.n	800084c <__aeabi_dadd+0x88>
 8000c2c:	464a      	mov	r2, r9
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	001d      	movs	r5, r3
 8000c32:	1e6b      	subs	r3, r5, #1
 8000c34:	419d      	sbcs	r5, r3
 8000c36:	1b7d      	subs	r5, r7, r5
 8000c38:	42af      	cmp	r7, r5
 8000c3a:	419b      	sbcs	r3, r3
 8000c3c:	4662      	mov	r2, ip
 8000c3e:	425b      	negs	r3, r3
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	4698      	mov	r8, r3
 8000c44:	4654      	mov	r4, sl
 8000c46:	000e      	movs	r6, r1
 8000c48:	e607      	b.n	800085a <__aeabi_dadd+0x96>
 8000c4a:	4648      	mov	r0, r9
 8000c4c:	4318      	orrs	r0, r3
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_dadd+0x48e>
 8000c50:	e0b3      	b.n	8000dba <__aeabi_dadd+0x5f6>
 8000c52:	1e50      	subs	r0, r2, #1
 8000c54:	2a01      	cmp	r2, #1
 8000c56:	d100      	bne.n	8000c5a <__aeabi_dadd+0x496>
 8000c58:	e10d      	b.n	8000e76 <__aeabi_dadd+0x6b2>
 8000c5a:	4d8d      	ldr	r5, [pc, #564]	; (8000e90 <__aeabi_dadd+0x6cc>)
 8000c5c:	42aa      	cmp	r2, r5
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_dadd+0x49e>
 8000c60:	e0a5      	b.n	8000dae <__aeabi_dadd+0x5ea>
 8000c62:	0002      	movs	r2, r0
 8000c64:	e710      	b.n	8000a88 <__aeabi_dadd+0x2c4>
 8000c66:	0032      	movs	r2, r6
 8000c68:	2300      	movs	r3, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	e644      	b.n	80008f8 <__aeabi_dadd+0x134>
 8000c6e:	2120      	movs	r1, #32
 8000c70:	0038      	movs	r0, r7
 8000c72:	1a89      	subs	r1, r1, r2
 8000c74:	4665      	mov	r5, ip
 8000c76:	408f      	lsls	r7, r1
 8000c78:	408d      	lsls	r5, r1
 8000c7a:	40d0      	lsrs	r0, r2
 8000c7c:	1e79      	subs	r1, r7, #1
 8000c7e:	418f      	sbcs	r7, r1
 8000c80:	4305      	orrs	r5, r0
 8000c82:	433d      	orrs	r5, r7
 8000c84:	4667      	mov	r7, ip
 8000c86:	40d7      	lsrs	r7, r2
 8000c88:	19db      	adds	r3, r3, r7
 8000c8a:	e794      	b.n	8000bb6 <__aeabi_dadd+0x3f2>
 8000c8c:	4a80      	ldr	r2, [pc, #512]	; (8000e90 <__aeabi_dadd+0x6cc>)
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	d100      	bne.n	8000c94 <__aeabi_dadd+0x4d0>
 8000c92:	e0ec      	b.n	8000e6e <__aeabi_dadd+0x6aa>
 8000c94:	0039      	movs	r1, r7
 8000c96:	4449      	add	r1, r9
 8000c98:	4549      	cmp	r1, r9
 8000c9a:	4192      	sbcs	r2, r2
 8000c9c:	4463      	add	r3, ip
 8000c9e:	4252      	negs	r2, r2
 8000ca0:	189b      	adds	r3, r3, r2
 8000ca2:	07dd      	lsls	r5, r3, #31
 8000ca4:	0849      	lsrs	r1, r1, #1
 8000ca6:	085b      	lsrs	r3, r3, #1
 8000ca8:	4698      	mov	r8, r3
 8000caa:	0006      	movs	r6, r0
 8000cac:	430d      	orrs	r5, r1
 8000cae:	e6a5      	b.n	80009fc <__aeabi_dadd+0x238>
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	1abd      	subs	r5, r7, r2
 8000cb4:	42af      	cmp	r7, r5
 8000cb6:	4189      	sbcs	r1, r1
 8000cb8:	4662      	mov	r2, ip
 8000cba:	4249      	negs	r1, r1
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	1a5b      	subs	r3, r3, r1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	4654      	mov	r4, sl
 8000cc4:	e5d1      	b.n	800086a <__aeabi_dadd+0xa6>
 8000cc6:	076c      	lsls	r4, r5, #29
 8000cc8:	08f9      	lsrs	r1, r7, #3
 8000cca:	4321      	orrs	r1, r4
 8000ccc:	08eb      	lsrs	r3, r5, #3
 8000cce:	0004      	movs	r4, r0
 8000cd0:	e69d      	b.n	8000a0e <__aeabi_dadd+0x24a>
 8000cd2:	464a      	mov	r2, r9
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	d175      	bne.n	8000dc4 <__aeabi_dadd+0x600>
 8000cd8:	4661      	mov	r1, ip
 8000cda:	4339      	orrs	r1, r7
 8000cdc:	d114      	bne.n	8000d08 <__aeabi_dadd+0x544>
 8000cde:	2380      	movs	r3, #128	; 0x80
 8000ce0:	2400      	movs	r4, #0
 8000ce2:	031b      	lsls	r3, r3, #12
 8000ce4:	e6bc      	b.n	8000a60 <__aeabi_dadd+0x29c>
 8000ce6:	464a      	mov	r2, r9
 8000ce8:	1bd5      	subs	r5, r2, r7
 8000cea:	45a9      	cmp	r9, r5
 8000cec:	4189      	sbcs	r1, r1
 8000cee:	4662      	mov	r2, ip
 8000cf0:	4249      	negs	r1, r1
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	1a5b      	subs	r3, r3, r1
 8000cf6:	4698      	mov	r8, r3
 8000cf8:	2601      	movs	r6, #1
 8000cfa:	e5ae      	b.n	800085a <__aeabi_dadd+0x96>
 8000cfc:	464a      	mov	r2, r9
 8000cfe:	08d1      	lsrs	r1, r2, #3
 8000d00:	075a      	lsls	r2, r3, #29
 8000d02:	4311      	orrs	r1, r2
 8000d04:	08db      	lsrs	r3, r3, #3
 8000d06:	e6a7      	b.n	8000a58 <__aeabi_dadd+0x294>
 8000d08:	4663      	mov	r3, ip
 8000d0a:	08f9      	lsrs	r1, r7, #3
 8000d0c:	075a      	lsls	r2, r3, #29
 8000d0e:	4654      	mov	r4, sl
 8000d10:	4311      	orrs	r1, r2
 8000d12:	08db      	lsrs	r3, r3, #3
 8000d14:	e6a0      	b.n	8000a58 <__aeabi_dadd+0x294>
 8000d16:	464a      	mov	r2, r9
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	001d      	movs	r5, r3
 8000d1c:	1e6b      	subs	r3, r5, #1
 8000d1e:	419d      	sbcs	r5, r3
 8000d20:	e6c7      	b.n	8000ab2 <__aeabi_dadd+0x2ee>
 8000d22:	0014      	movs	r4, r2
 8000d24:	001e      	movs	r6, r3
 8000d26:	3c20      	subs	r4, #32
 8000d28:	40e6      	lsrs	r6, r4
 8000d2a:	2a20      	cmp	r2, #32
 8000d2c:	d005      	beq.n	8000d3a <__aeabi_dadd+0x576>
 8000d2e:	2440      	movs	r4, #64	; 0x40
 8000d30:	1aa2      	subs	r2, r4, r2
 8000d32:	4093      	lsls	r3, r2
 8000d34:	464a      	mov	r2, r9
 8000d36:	431a      	orrs	r2, r3
 8000d38:	4691      	mov	r9, r2
 8000d3a:	464d      	mov	r5, r9
 8000d3c:	1e6b      	subs	r3, r5, #1
 8000d3e:	419d      	sbcs	r5, r3
 8000d40:	4335      	orrs	r5, r6
 8000d42:	e778      	b.n	8000c36 <__aeabi_dadd+0x472>
 8000d44:	464a      	mov	r2, r9
 8000d46:	431a      	orrs	r2, r3
 8000d48:	d000      	beq.n	8000d4c <__aeabi_dadd+0x588>
 8000d4a:	e66b      	b.n	8000a24 <__aeabi_dadd+0x260>
 8000d4c:	076b      	lsls	r3, r5, #29
 8000d4e:	08f9      	lsrs	r1, r7, #3
 8000d50:	4319      	orrs	r1, r3
 8000d52:	08eb      	lsrs	r3, r5, #3
 8000d54:	e680      	b.n	8000a58 <__aeabi_dadd+0x294>
 8000d56:	4661      	mov	r1, ip
 8000d58:	4339      	orrs	r1, r7
 8000d5a:	d054      	beq.n	8000e06 <__aeabi_dadd+0x642>
 8000d5c:	4663      	mov	r3, ip
 8000d5e:	08f9      	lsrs	r1, r7, #3
 8000d60:	075c      	lsls	r4, r3, #29
 8000d62:	4321      	orrs	r1, r4
 8000d64:	08db      	lsrs	r3, r3, #3
 8000d66:	0004      	movs	r4, r0
 8000d68:	e654      	b.n	8000a14 <__aeabi_dadd+0x250>
 8000d6a:	464a      	mov	r2, r9
 8000d6c:	1abd      	subs	r5, r7, r2
 8000d6e:	42af      	cmp	r7, r5
 8000d70:	4189      	sbcs	r1, r1
 8000d72:	4662      	mov	r2, ip
 8000d74:	4249      	negs	r1, r1
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	4698      	mov	r8, r3
 8000d7c:	0004      	movs	r4, r0
 8000d7e:	2601      	movs	r6, #1
 8000d80:	e56b      	b.n	800085a <__aeabi_dadd+0x96>
 8000d82:	464a      	mov	r2, r9
 8000d84:	1bd5      	subs	r5, r2, r7
 8000d86:	45a9      	cmp	r9, r5
 8000d88:	4189      	sbcs	r1, r1
 8000d8a:	4662      	mov	r2, ip
 8000d8c:	4249      	negs	r1, r1
 8000d8e:	1a9a      	subs	r2, r3, r2
 8000d90:	1a52      	subs	r2, r2, r1
 8000d92:	4690      	mov	r8, r2
 8000d94:	0212      	lsls	r2, r2, #8
 8000d96:	d532      	bpl.n	8000dfe <__aeabi_dadd+0x63a>
 8000d98:	464a      	mov	r2, r9
 8000d9a:	1abd      	subs	r5, r7, r2
 8000d9c:	42af      	cmp	r7, r5
 8000d9e:	4189      	sbcs	r1, r1
 8000da0:	4662      	mov	r2, ip
 8000da2:	4249      	negs	r1, r1
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	1a5b      	subs	r3, r3, r1
 8000da8:	4698      	mov	r8, r3
 8000daa:	0004      	movs	r4, r0
 8000dac:	e584      	b.n	80008b8 <__aeabi_dadd+0xf4>
 8000dae:	4663      	mov	r3, ip
 8000db0:	08f9      	lsrs	r1, r7, #3
 8000db2:	075a      	lsls	r2, r3, #29
 8000db4:	4311      	orrs	r1, r2
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	e64e      	b.n	8000a58 <__aeabi_dadd+0x294>
 8000dba:	08f9      	lsrs	r1, r7, #3
 8000dbc:	0768      	lsls	r0, r5, #29
 8000dbe:	4301      	orrs	r1, r0
 8000dc0:	08eb      	lsrs	r3, r5, #3
 8000dc2:	e624      	b.n	8000a0e <__aeabi_dadd+0x24a>
 8000dc4:	4662      	mov	r2, ip
 8000dc6:	433a      	orrs	r2, r7
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_dadd+0x608>
 8000dca:	e698      	b.n	8000afe <__aeabi_dadd+0x33a>
 8000dcc:	464a      	mov	r2, r9
 8000dce:	08d1      	lsrs	r1, r2, #3
 8000dd0:	075a      	lsls	r2, r3, #29
 8000dd2:	4311      	orrs	r1, r2
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	031b      	lsls	r3, r3, #12
 8000dda:	421a      	tst	r2, r3
 8000ddc:	d008      	beq.n	8000df0 <__aeabi_dadd+0x62c>
 8000dde:	4660      	mov	r0, ip
 8000de0:	08c5      	lsrs	r5, r0, #3
 8000de2:	421d      	tst	r5, r3
 8000de4:	d104      	bne.n	8000df0 <__aeabi_dadd+0x62c>
 8000de6:	4654      	mov	r4, sl
 8000de8:	002a      	movs	r2, r5
 8000dea:	08f9      	lsrs	r1, r7, #3
 8000dec:	0743      	lsls	r3, r0, #29
 8000dee:	4319      	orrs	r1, r3
 8000df0:	0f4b      	lsrs	r3, r1, #29
 8000df2:	00c9      	lsls	r1, r1, #3
 8000df4:	075b      	lsls	r3, r3, #29
 8000df6:	08c9      	lsrs	r1, r1, #3
 8000df8:	4319      	orrs	r1, r3
 8000dfa:	0013      	movs	r3, r2
 8000dfc:	e62c      	b.n	8000a58 <__aeabi_dadd+0x294>
 8000dfe:	4641      	mov	r1, r8
 8000e00:	4329      	orrs	r1, r5
 8000e02:	d000      	beq.n	8000e06 <__aeabi_dadd+0x642>
 8000e04:	e5fa      	b.n	80009fc <__aeabi_dadd+0x238>
 8000e06:	2300      	movs	r3, #0
 8000e08:	000a      	movs	r2, r1
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	e602      	b.n	8000a14 <__aeabi_dadd+0x250>
 8000e0e:	076b      	lsls	r3, r5, #29
 8000e10:	08f9      	lsrs	r1, r7, #3
 8000e12:	4319      	orrs	r1, r3
 8000e14:	08eb      	lsrs	r3, r5, #3
 8000e16:	e5fd      	b.n	8000a14 <__aeabi_dadd+0x250>
 8000e18:	4663      	mov	r3, ip
 8000e1a:	08f9      	lsrs	r1, r7, #3
 8000e1c:	075b      	lsls	r3, r3, #29
 8000e1e:	4319      	orrs	r1, r3
 8000e20:	4663      	mov	r3, ip
 8000e22:	0004      	movs	r4, r0
 8000e24:	08db      	lsrs	r3, r3, #3
 8000e26:	e617      	b.n	8000a58 <__aeabi_dadd+0x294>
 8000e28:	003d      	movs	r5, r7
 8000e2a:	444d      	add	r5, r9
 8000e2c:	4463      	add	r3, ip
 8000e2e:	454d      	cmp	r5, r9
 8000e30:	4189      	sbcs	r1, r1
 8000e32:	4698      	mov	r8, r3
 8000e34:	4249      	negs	r1, r1
 8000e36:	4488      	add	r8, r1
 8000e38:	4643      	mov	r3, r8
 8000e3a:	021b      	lsls	r3, r3, #8
 8000e3c:	d400      	bmi.n	8000e40 <__aeabi_dadd+0x67c>
 8000e3e:	e5dd      	b.n	80009fc <__aeabi_dadd+0x238>
 8000e40:	4642      	mov	r2, r8
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <__aeabi_dadd+0x6d0>)
 8000e44:	2601      	movs	r6, #1
 8000e46:	401a      	ands	r2, r3
 8000e48:	4690      	mov	r8, r2
 8000e4a:	e5d7      	b.n	80009fc <__aeabi_dadd+0x238>
 8000e4c:	0010      	movs	r0, r2
 8000e4e:	001e      	movs	r6, r3
 8000e50:	3820      	subs	r0, #32
 8000e52:	40c6      	lsrs	r6, r0
 8000e54:	2a20      	cmp	r2, #32
 8000e56:	d005      	beq.n	8000e64 <__aeabi_dadd+0x6a0>
 8000e58:	2040      	movs	r0, #64	; 0x40
 8000e5a:	1a82      	subs	r2, r0, r2
 8000e5c:	4093      	lsls	r3, r2
 8000e5e:	464a      	mov	r2, r9
 8000e60:	431a      	orrs	r2, r3
 8000e62:	4691      	mov	r9, r2
 8000e64:	464d      	mov	r5, r9
 8000e66:	1e6b      	subs	r3, r5, #1
 8000e68:	419d      	sbcs	r5, r3
 8000e6a:	4335      	orrs	r5, r6
 8000e6c:	e621      	b.n	8000ab2 <__aeabi_dadd+0x2ee>
 8000e6e:	0002      	movs	r2, r0
 8000e70:	2300      	movs	r3, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	e540      	b.n	80008f8 <__aeabi_dadd+0x134>
 8000e76:	464a      	mov	r2, r9
 8000e78:	19d5      	adds	r5, r2, r7
 8000e7a:	42bd      	cmp	r5, r7
 8000e7c:	4189      	sbcs	r1, r1
 8000e7e:	4463      	add	r3, ip
 8000e80:	4698      	mov	r8, r3
 8000e82:	4249      	negs	r1, r1
 8000e84:	4488      	add	r8, r1
 8000e86:	e5b3      	b.n	80009f0 <__aeabi_dadd+0x22c>
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4a01      	ldr	r2, [pc, #4]	; (8000e90 <__aeabi_dadd+0x6cc>)
 8000e8c:	000b      	movs	r3, r1
 8000e8e:	e533      	b.n	80008f8 <__aeabi_dadd+0x134>
 8000e90:	000007ff 	.word	0x000007ff
 8000e94:	ff7fffff 	.word	0xff7fffff

08000e98 <__aeabi_ddiv>:
 8000e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9a:	4657      	mov	r7, sl
 8000e9c:	464e      	mov	r6, r9
 8000e9e:	4645      	mov	r5, r8
 8000ea0:	46de      	mov	lr, fp
 8000ea2:	b5e0      	push	{r5, r6, r7, lr}
 8000ea4:	4681      	mov	r9, r0
 8000ea6:	0005      	movs	r5, r0
 8000ea8:	030c      	lsls	r4, r1, #12
 8000eaa:	0048      	lsls	r0, r1, #1
 8000eac:	4692      	mov	sl, r2
 8000eae:	001f      	movs	r7, r3
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	0b24      	lsrs	r4, r4, #12
 8000eb4:	0d40      	lsrs	r0, r0, #21
 8000eb6:	0fce      	lsrs	r6, r1, #31
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	d059      	beq.n	8000f70 <__aeabi_ddiv+0xd8>
 8000ebc:	4b87      	ldr	r3, [pc, #540]	; (80010dc <__aeabi_ddiv+0x244>)
 8000ebe:	4298      	cmp	r0, r3
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_ddiv+0x2c>
 8000ec2:	e098      	b.n	8000ff6 <__aeabi_ddiv+0x15e>
 8000ec4:	0f6b      	lsrs	r3, r5, #29
 8000ec6:	00e4      	lsls	r4, r4, #3
 8000ec8:	431c      	orrs	r4, r3
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	4323      	orrs	r3, r4
 8000ed0:	4698      	mov	r8, r3
 8000ed2:	4b83      	ldr	r3, [pc, #524]	; (80010e0 <__aeabi_ddiv+0x248>)
 8000ed4:	00ed      	lsls	r5, r5, #3
 8000ed6:	469b      	mov	fp, r3
 8000ed8:	2300      	movs	r3, #0
 8000eda:	4699      	mov	r9, r3
 8000edc:	4483      	add	fp, r0
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	033c      	lsls	r4, r7, #12
 8000ee2:	007b      	lsls	r3, r7, #1
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	0b24      	lsrs	r4, r4, #12
 8000ee8:	0d5b      	lsrs	r3, r3, #21
 8000eea:	0fff      	lsrs	r7, r7, #31
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d067      	beq.n	8000fc0 <__aeabi_ddiv+0x128>
 8000ef0:	4a7a      	ldr	r2, [pc, #488]	; (80010dc <__aeabi_ddiv+0x244>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d018      	beq.n	8000f28 <__aeabi_ddiv+0x90>
 8000ef6:	497a      	ldr	r1, [pc, #488]	; (80010e0 <__aeabi_ddiv+0x248>)
 8000ef8:	0f42      	lsrs	r2, r0, #29
 8000efa:	468c      	mov	ip, r1
 8000efc:	00e4      	lsls	r4, r4, #3
 8000efe:	4659      	mov	r1, fp
 8000f00:	4314      	orrs	r4, r2
 8000f02:	2280      	movs	r2, #128	; 0x80
 8000f04:	4463      	add	r3, ip
 8000f06:	0412      	lsls	r2, r2, #16
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	4314      	orrs	r4, r2
 8000f0c:	469b      	mov	fp, r3
 8000f0e:	00c2      	lsls	r2, r0, #3
 8000f10:	2000      	movs	r0, #0
 8000f12:	0033      	movs	r3, r6
 8000f14:	407b      	eors	r3, r7
 8000f16:	469a      	mov	sl, r3
 8000f18:	464b      	mov	r3, r9
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	d900      	bls.n	8000f20 <__aeabi_ddiv+0x88>
 8000f1e:	e0ef      	b.n	8001100 <__aeabi_ddiv+0x268>
 8000f20:	4970      	ldr	r1, [pc, #448]	; (80010e4 <__aeabi_ddiv+0x24c>)
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	58cb      	ldr	r3, [r1, r3]
 8000f26:	469f      	mov	pc, r3
 8000f28:	4b6f      	ldr	r3, [pc, #444]	; (80010e8 <__aeabi_ddiv+0x250>)
 8000f2a:	4652      	mov	r2, sl
 8000f2c:	469c      	mov	ip, r3
 8000f2e:	4322      	orrs	r2, r4
 8000f30:	44e3      	add	fp, ip
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d000      	beq.n	8000f38 <__aeabi_ddiv+0xa0>
 8000f36:	e095      	b.n	8001064 <__aeabi_ddiv+0x1cc>
 8000f38:	4649      	mov	r1, r9
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	4319      	orrs	r1, r3
 8000f3e:	4689      	mov	r9, r1
 8000f40:	2400      	movs	r4, #0
 8000f42:	2002      	movs	r0, #2
 8000f44:	e7e5      	b.n	8000f12 <__aeabi_ddiv+0x7a>
 8000f46:	2300      	movs	r3, #0
 8000f48:	2400      	movs	r4, #0
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	4652      	mov	r2, sl
 8000f4e:	051b      	lsls	r3, r3, #20
 8000f50:	4323      	orrs	r3, r4
 8000f52:	07d2      	lsls	r2, r2, #31
 8000f54:	4313      	orrs	r3, r2
 8000f56:	0028      	movs	r0, r5
 8000f58:	0019      	movs	r1, r3
 8000f5a:	b005      	add	sp, #20
 8000f5c:	bcf0      	pop	{r4, r5, r6, r7}
 8000f5e:	46bb      	mov	fp, r7
 8000f60:	46b2      	mov	sl, r6
 8000f62:	46a9      	mov	r9, r5
 8000f64:	46a0      	mov	r8, r4
 8000f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f68:	2400      	movs	r4, #0
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	4b5b      	ldr	r3, [pc, #364]	; (80010dc <__aeabi_ddiv+0x244>)
 8000f6e:	e7ed      	b.n	8000f4c <__aeabi_ddiv+0xb4>
 8000f70:	464b      	mov	r3, r9
 8000f72:	4323      	orrs	r3, r4
 8000f74:	4698      	mov	r8, r3
 8000f76:	d100      	bne.n	8000f7a <__aeabi_ddiv+0xe2>
 8000f78:	e089      	b.n	800108e <__aeabi_ddiv+0x1f6>
 8000f7a:	2c00      	cmp	r4, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_ddiv+0xe8>
 8000f7e:	e1e0      	b.n	8001342 <__aeabi_ddiv+0x4aa>
 8000f80:	0020      	movs	r0, r4
 8000f82:	f001 fa37 	bl	80023f4 <__clzsi2>
 8000f86:	0001      	movs	r1, r0
 8000f88:	0002      	movs	r2, r0
 8000f8a:	390b      	subs	r1, #11
 8000f8c:	231d      	movs	r3, #29
 8000f8e:	1a5b      	subs	r3, r3, r1
 8000f90:	4649      	mov	r1, r9
 8000f92:	0010      	movs	r0, r2
 8000f94:	40d9      	lsrs	r1, r3
 8000f96:	3808      	subs	r0, #8
 8000f98:	4084      	lsls	r4, r0
 8000f9a:	000b      	movs	r3, r1
 8000f9c:	464d      	mov	r5, r9
 8000f9e:	4323      	orrs	r3, r4
 8000fa0:	4698      	mov	r8, r3
 8000fa2:	4085      	lsls	r5, r0
 8000fa4:	4851      	ldr	r0, [pc, #324]	; (80010ec <__aeabi_ddiv+0x254>)
 8000fa6:	033c      	lsls	r4, r7, #12
 8000fa8:	1a83      	subs	r3, r0, r2
 8000faa:	469b      	mov	fp, r3
 8000fac:	2300      	movs	r3, #0
 8000fae:	4699      	mov	r9, r3
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	007b      	lsls	r3, r7, #1
 8000fb4:	4650      	mov	r0, sl
 8000fb6:	0b24      	lsrs	r4, r4, #12
 8000fb8:	0d5b      	lsrs	r3, r3, #21
 8000fba:	0fff      	lsrs	r7, r7, #31
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d197      	bne.n	8000ef0 <__aeabi_ddiv+0x58>
 8000fc0:	4652      	mov	r2, sl
 8000fc2:	4322      	orrs	r2, r4
 8000fc4:	d055      	beq.n	8001072 <__aeabi_ddiv+0x1da>
 8000fc6:	2c00      	cmp	r4, #0
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_ddiv+0x134>
 8000fca:	e1ca      	b.n	8001362 <__aeabi_ddiv+0x4ca>
 8000fcc:	0020      	movs	r0, r4
 8000fce:	f001 fa11 	bl	80023f4 <__clzsi2>
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	3a0b      	subs	r2, #11
 8000fd6:	231d      	movs	r3, #29
 8000fd8:	0001      	movs	r1, r0
 8000fda:	1a9b      	subs	r3, r3, r2
 8000fdc:	4652      	mov	r2, sl
 8000fde:	3908      	subs	r1, #8
 8000fe0:	40da      	lsrs	r2, r3
 8000fe2:	408c      	lsls	r4, r1
 8000fe4:	4314      	orrs	r4, r2
 8000fe6:	4652      	mov	r2, sl
 8000fe8:	408a      	lsls	r2, r1
 8000fea:	4b41      	ldr	r3, [pc, #260]	; (80010f0 <__aeabi_ddiv+0x258>)
 8000fec:	4458      	add	r0, fp
 8000fee:	469b      	mov	fp, r3
 8000ff0:	4483      	add	fp, r0
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	e78d      	b.n	8000f12 <__aeabi_ddiv+0x7a>
 8000ff6:	464b      	mov	r3, r9
 8000ff8:	4323      	orrs	r3, r4
 8000ffa:	4698      	mov	r8, r3
 8000ffc:	d140      	bne.n	8001080 <__aeabi_ddiv+0x1e8>
 8000ffe:	2308      	movs	r3, #8
 8001000:	4699      	mov	r9, r3
 8001002:	3b06      	subs	r3, #6
 8001004:	2500      	movs	r5, #0
 8001006:	4683      	mov	fp, r0
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	e769      	b.n	8000ee0 <__aeabi_ddiv+0x48>
 800100c:	46b2      	mov	sl, r6
 800100e:	9b00      	ldr	r3, [sp, #0]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d0a9      	beq.n	8000f68 <__aeabi_ddiv+0xd0>
 8001014:	2b03      	cmp	r3, #3
 8001016:	d100      	bne.n	800101a <__aeabi_ddiv+0x182>
 8001018:	e211      	b.n	800143e <__aeabi_ddiv+0x5a6>
 800101a:	2b01      	cmp	r3, #1
 800101c:	d093      	beq.n	8000f46 <__aeabi_ddiv+0xae>
 800101e:	4a35      	ldr	r2, [pc, #212]	; (80010f4 <__aeabi_ddiv+0x25c>)
 8001020:	445a      	add	r2, fp
 8001022:	2a00      	cmp	r2, #0
 8001024:	dc00      	bgt.n	8001028 <__aeabi_ddiv+0x190>
 8001026:	e13c      	b.n	80012a2 <__aeabi_ddiv+0x40a>
 8001028:	076b      	lsls	r3, r5, #29
 800102a:	d000      	beq.n	800102e <__aeabi_ddiv+0x196>
 800102c:	e1a7      	b.n	800137e <__aeabi_ddiv+0x4e6>
 800102e:	08ed      	lsrs	r5, r5, #3
 8001030:	4643      	mov	r3, r8
 8001032:	01db      	lsls	r3, r3, #7
 8001034:	d506      	bpl.n	8001044 <__aeabi_ddiv+0x1ac>
 8001036:	4642      	mov	r2, r8
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <__aeabi_ddiv+0x260>)
 800103a:	401a      	ands	r2, r3
 800103c:	4690      	mov	r8, r2
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	00d2      	lsls	r2, r2, #3
 8001042:	445a      	add	r2, fp
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <__aeabi_ddiv+0x264>)
 8001046:	429a      	cmp	r2, r3
 8001048:	dc8e      	bgt.n	8000f68 <__aeabi_ddiv+0xd0>
 800104a:	4643      	mov	r3, r8
 800104c:	0552      	lsls	r2, r2, #21
 800104e:	0758      	lsls	r0, r3, #29
 8001050:	025c      	lsls	r4, r3, #9
 8001052:	4305      	orrs	r5, r0
 8001054:	0b24      	lsrs	r4, r4, #12
 8001056:	0d53      	lsrs	r3, r2, #21
 8001058:	e778      	b.n	8000f4c <__aeabi_ddiv+0xb4>
 800105a:	46ba      	mov	sl, r7
 800105c:	46a0      	mov	r8, r4
 800105e:	0015      	movs	r5, r2
 8001060:	9000      	str	r0, [sp, #0]
 8001062:	e7d4      	b.n	800100e <__aeabi_ddiv+0x176>
 8001064:	464a      	mov	r2, r9
 8001066:	2303      	movs	r3, #3
 8001068:	431a      	orrs	r2, r3
 800106a:	4691      	mov	r9, r2
 800106c:	2003      	movs	r0, #3
 800106e:	4652      	mov	r2, sl
 8001070:	e74f      	b.n	8000f12 <__aeabi_ddiv+0x7a>
 8001072:	4649      	mov	r1, r9
 8001074:	2301      	movs	r3, #1
 8001076:	4319      	orrs	r1, r3
 8001078:	4689      	mov	r9, r1
 800107a:	2400      	movs	r4, #0
 800107c:	2001      	movs	r0, #1
 800107e:	e748      	b.n	8000f12 <__aeabi_ddiv+0x7a>
 8001080:	230c      	movs	r3, #12
 8001082:	4699      	mov	r9, r3
 8001084:	3b09      	subs	r3, #9
 8001086:	46a0      	mov	r8, r4
 8001088:	4683      	mov	fp, r0
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	e728      	b.n	8000ee0 <__aeabi_ddiv+0x48>
 800108e:	2304      	movs	r3, #4
 8001090:	4699      	mov	r9, r3
 8001092:	2300      	movs	r3, #0
 8001094:	469b      	mov	fp, r3
 8001096:	3301      	adds	r3, #1
 8001098:	2500      	movs	r5, #0
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	e720      	b.n	8000ee0 <__aeabi_ddiv+0x48>
 800109e:	2300      	movs	r3, #0
 80010a0:	2480      	movs	r4, #128	; 0x80
 80010a2:	469a      	mov	sl, r3
 80010a4:	2500      	movs	r5, #0
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <__aeabi_ddiv+0x244>)
 80010a8:	0324      	lsls	r4, r4, #12
 80010aa:	e74f      	b.n	8000f4c <__aeabi_ddiv+0xb4>
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	4641      	mov	r1, r8
 80010b0:	031b      	lsls	r3, r3, #12
 80010b2:	4219      	tst	r1, r3
 80010b4:	d008      	beq.n	80010c8 <__aeabi_ddiv+0x230>
 80010b6:	421c      	tst	r4, r3
 80010b8:	d106      	bne.n	80010c8 <__aeabi_ddiv+0x230>
 80010ba:	431c      	orrs	r4, r3
 80010bc:	0324      	lsls	r4, r4, #12
 80010be:	46ba      	mov	sl, r7
 80010c0:	0015      	movs	r5, r2
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <__aeabi_ddiv+0x244>)
 80010c4:	0b24      	lsrs	r4, r4, #12
 80010c6:	e741      	b.n	8000f4c <__aeabi_ddiv+0xb4>
 80010c8:	2480      	movs	r4, #128	; 0x80
 80010ca:	4643      	mov	r3, r8
 80010cc:	0324      	lsls	r4, r4, #12
 80010ce:	431c      	orrs	r4, r3
 80010d0:	0324      	lsls	r4, r4, #12
 80010d2:	46b2      	mov	sl, r6
 80010d4:	4b01      	ldr	r3, [pc, #4]	; (80010dc <__aeabi_ddiv+0x244>)
 80010d6:	0b24      	lsrs	r4, r4, #12
 80010d8:	e738      	b.n	8000f4c <__aeabi_ddiv+0xb4>
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	000007ff 	.word	0x000007ff
 80010e0:	fffffc01 	.word	0xfffffc01
 80010e4:	0800e5ac 	.word	0x0800e5ac
 80010e8:	fffff801 	.word	0xfffff801
 80010ec:	fffffc0d 	.word	0xfffffc0d
 80010f0:	000003f3 	.word	0x000003f3
 80010f4:	000003ff 	.word	0x000003ff
 80010f8:	feffffff 	.word	0xfeffffff
 80010fc:	000007fe 	.word	0x000007fe
 8001100:	4544      	cmp	r4, r8
 8001102:	d200      	bcs.n	8001106 <__aeabi_ddiv+0x26e>
 8001104:	e116      	b.n	8001334 <__aeabi_ddiv+0x49c>
 8001106:	d100      	bne.n	800110a <__aeabi_ddiv+0x272>
 8001108:	e111      	b.n	800132e <__aeabi_ddiv+0x496>
 800110a:	2301      	movs	r3, #1
 800110c:	425b      	negs	r3, r3
 800110e:	469c      	mov	ip, r3
 8001110:	002e      	movs	r6, r5
 8001112:	4640      	mov	r0, r8
 8001114:	2500      	movs	r5, #0
 8001116:	44e3      	add	fp, ip
 8001118:	0223      	lsls	r3, r4, #8
 800111a:	0e14      	lsrs	r4, r2, #24
 800111c:	431c      	orrs	r4, r3
 800111e:	0c1b      	lsrs	r3, r3, #16
 8001120:	4699      	mov	r9, r3
 8001122:	0423      	lsls	r3, r4, #16
 8001124:	0c1f      	lsrs	r7, r3, #16
 8001126:	0212      	lsls	r2, r2, #8
 8001128:	4649      	mov	r1, r9
 800112a:	9200      	str	r2, [sp, #0]
 800112c:	9701      	str	r7, [sp, #4]
 800112e:	f7ff f897 	bl	8000260 <__aeabi_uidivmod>
 8001132:	0002      	movs	r2, r0
 8001134:	437a      	muls	r2, r7
 8001136:	040b      	lsls	r3, r1, #16
 8001138:	0c31      	lsrs	r1, r6, #16
 800113a:	4680      	mov	r8, r0
 800113c:	4319      	orrs	r1, r3
 800113e:	428a      	cmp	r2, r1
 8001140:	d90b      	bls.n	800115a <__aeabi_ddiv+0x2c2>
 8001142:	2301      	movs	r3, #1
 8001144:	425b      	negs	r3, r3
 8001146:	469c      	mov	ip, r3
 8001148:	1909      	adds	r1, r1, r4
 800114a:	44e0      	add	r8, ip
 800114c:	428c      	cmp	r4, r1
 800114e:	d804      	bhi.n	800115a <__aeabi_ddiv+0x2c2>
 8001150:	428a      	cmp	r2, r1
 8001152:	d902      	bls.n	800115a <__aeabi_ddiv+0x2c2>
 8001154:	1e83      	subs	r3, r0, #2
 8001156:	4698      	mov	r8, r3
 8001158:	1909      	adds	r1, r1, r4
 800115a:	1a88      	subs	r0, r1, r2
 800115c:	4649      	mov	r1, r9
 800115e:	f7ff f87f 	bl	8000260 <__aeabi_uidivmod>
 8001162:	0409      	lsls	r1, r1, #16
 8001164:	468c      	mov	ip, r1
 8001166:	0431      	lsls	r1, r6, #16
 8001168:	4666      	mov	r6, ip
 800116a:	9a01      	ldr	r2, [sp, #4]
 800116c:	0c09      	lsrs	r1, r1, #16
 800116e:	4342      	muls	r2, r0
 8001170:	0003      	movs	r3, r0
 8001172:	4331      	orrs	r1, r6
 8001174:	428a      	cmp	r2, r1
 8001176:	d904      	bls.n	8001182 <__aeabi_ddiv+0x2ea>
 8001178:	1909      	adds	r1, r1, r4
 800117a:	3b01      	subs	r3, #1
 800117c:	428c      	cmp	r4, r1
 800117e:	d800      	bhi.n	8001182 <__aeabi_ddiv+0x2ea>
 8001180:	e111      	b.n	80013a6 <__aeabi_ddiv+0x50e>
 8001182:	1a89      	subs	r1, r1, r2
 8001184:	4642      	mov	r2, r8
 8001186:	9e00      	ldr	r6, [sp, #0]
 8001188:	0412      	lsls	r2, r2, #16
 800118a:	431a      	orrs	r2, r3
 800118c:	0c33      	lsrs	r3, r6, #16
 800118e:	001f      	movs	r7, r3
 8001190:	0c10      	lsrs	r0, r2, #16
 8001192:	4690      	mov	r8, r2
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	0413      	lsls	r3, r2, #16
 8001198:	0432      	lsls	r2, r6, #16
 800119a:	0c16      	lsrs	r6, r2, #16
 800119c:	0032      	movs	r2, r6
 800119e:	0c1b      	lsrs	r3, r3, #16
 80011a0:	435a      	muls	r2, r3
 80011a2:	9603      	str	r6, [sp, #12]
 80011a4:	437b      	muls	r3, r7
 80011a6:	4346      	muls	r6, r0
 80011a8:	4378      	muls	r0, r7
 80011aa:	0c17      	lsrs	r7, r2, #16
 80011ac:	46bc      	mov	ip, r7
 80011ae:	199b      	adds	r3, r3, r6
 80011b0:	4463      	add	r3, ip
 80011b2:	429e      	cmp	r6, r3
 80011b4:	d903      	bls.n	80011be <__aeabi_ddiv+0x326>
 80011b6:	2680      	movs	r6, #128	; 0x80
 80011b8:	0276      	lsls	r6, r6, #9
 80011ba:	46b4      	mov	ip, r6
 80011bc:	4460      	add	r0, ip
 80011be:	0c1e      	lsrs	r6, r3, #16
 80011c0:	1830      	adds	r0, r6, r0
 80011c2:	0416      	lsls	r6, r2, #16
 80011c4:	041b      	lsls	r3, r3, #16
 80011c6:	0c36      	lsrs	r6, r6, #16
 80011c8:	199e      	adds	r6, r3, r6
 80011ca:	4281      	cmp	r1, r0
 80011cc:	d200      	bcs.n	80011d0 <__aeabi_ddiv+0x338>
 80011ce:	e09c      	b.n	800130a <__aeabi_ddiv+0x472>
 80011d0:	d100      	bne.n	80011d4 <__aeabi_ddiv+0x33c>
 80011d2:	e097      	b.n	8001304 <__aeabi_ddiv+0x46c>
 80011d4:	1bae      	subs	r6, r5, r6
 80011d6:	1a09      	subs	r1, r1, r0
 80011d8:	42b5      	cmp	r5, r6
 80011da:	4180      	sbcs	r0, r0
 80011dc:	4240      	negs	r0, r0
 80011de:	1a08      	subs	r0, r1, r0
 80011e0:	4284      	cmp	r4, r0
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x34e>
 80011e4:	e111      	b.n	800140a <__aeabi_ddiv+0x572>
 80011e6:	4649      	mov	r1, r9
 80011e8:	f7ff f83a 	bl	8000260 <__aeabi_uidivmod>
 80011ec:	9a01      	ldr	r2, [sp, #4]
 80011ee:	040b      	lsls	r3, r1, #16
 80011f0:	4342      	muls	r2, r0
 80011f2:	0c31      	lsrs	r1, r6, #16
 80011f4:	0005      	movs	r5, r0
 80011f6:	4319      	orrs	r1, r3
 80011f8:	428a      	cmp	r2, r1
 80011fa:	d907      	bls.n	800120c <__aeabi_ddiv+0x374>
 80011fc:	1909      	adds	r1, r1, r4
 80011fe:	3d01      	subs	r5, #1
 8001200:	428c      	cmp	r4, r1
 8001202:	d803      	bhi.n	800120c <__aeabi_ddiv+0x374>
 8001204:	428a      	cmp	r2, r1
 8001206:	d901      	bls.n	800120c <__aeabi_ddiv+0x374>
 8001208:	1e85      	subs	r5, r0, #2
 800120a:	1909      	adds	r1, r1, r4
 800120c:	1a88      	subs	r0, r1, r2
 800120e:	4649      	mov	r1, r9
 8001210:	f7ff f826 	bl	8000260 <__aeabi_uidivmod>
 8001214:	0409      	lsls	r1, r1, #16
 8001216:	468c      	mov	ip, r1
 8001218:	0431      	lsls	r1, r6, #16
 800121a:	4666      	mov	r6, ip
 800121c:	9a01      	ldr	r2, [sp, #4]
 800121e:	0c09      	lsrs	r1, r1, #16
 8001220:	4342      	muls	r2, r0
 8001222:	0003      	movs	r3, r0
 8001224:	4331      	orrs	r1, r6
 8001226:	428a      	cmp	r2, r1
 8001228:	d907      	bls.n	800123a <__aeabi_ddiv+0x3a2>
 800122a:	1909      	adds	r1, r1, r4
 800122c:	3b01      	subs	r3, #1
 800122e:	428c      	cmp	r4, r1
 8001230:	d803      	bhi.n	800123a <__aeabi_ddiv+0x3a2>
 8001232:	428a      	cmp	r2, r1
 8001234:	d901      	bls.n	800123a <__aeabi_ddiv+0x3a2>
 8001236:	1e83      	subs	r3, r0, #2
 8001238:	1909      	adds	r1, r1, r4
 800123a:	9e03      	ldr	r6, [sp, #12]
 800123c:	1a89      	subs	r1, r1, r2
 800123e:	0032      	movs	r2, r6
 8001240:	042d      	lsls	r5, r5, #16
 8001242:	431d      	orrs	r5, r3
 8001244:	9f02      	ldr	r7, [sp, #8]
 8001246:	042b      	lsls	r3, r5, #16
 8001248:	0c1b      	lsrs	r3, r3, #16
 800124a:	435a      	muls	r2, r3
 800124c:	437b      	muls	r3, r7
 800124e:	469c      	mov	ip, r3
 8001250:	0c28      	lsrs	r0, r5, #16
 8001252:	4346      	muls	r6, r0
 8001254:	0c13      	lsrs	r3, r2, #16
 8001256:	44b4      	add	ip, r6
 8001258:	4463      	add	r3, ip
 800125a:	4378      	muls	r0, r7
 800125c:	429e      	cmp	r6, r3
 800125e:	d903      	bls.n	8001268 <__aeabi_ddiv+0x3d0>
 8001260:	2680      	movs	r6, #128	; 0x80
 8001262:	0276      	lsls	r6, r6, #9
 8001264:	46b4      	mov	ip, r6
 8001266:	4460      	add	r0, ip
 8001268:	0c1e      	lsrs	r6, r3, #16
 800126a:	0412      	lsls	r2, r2, #16
 800126c:	041b      	lsls	r3, r3, #16
 800126e:	0c12      	lsrs	r2, r2, #16
 8001270:	1830      	adds	r0, r6, r0
 8001272:	189b      	adds	r3, r3, r2
 8001274:	4281      	cmp	r1, r0
 8001276:	d306      	bcc.n	8001286 <__aeabi_ddiv+0x3ee>
 8001278:	d002      	beq.n	8001280 <__aeabi_ddiv+0x3e8>
 800127a:	2301      	movs	r3, #1
 800127c:	431d      	orrs	r5, r3
 800127e:	e6ce      	b.n	800101e <__aeabi_ddiv+0x186>
 8001280:	2b00      	cmp	r3, #0
 8001282:	d100      	bne.n	8001286 <__aeabi_ddiv+0x3ee>
 8001284:	e6cb      	b.n	800101e <__aeabi_ddiv+0x186>
 8001286:	1861      	adds	r1, r4, r1
 8001288:	1e6e      	subs	r6, r5, #1
 800128a:	42a1      	cmp	r1, r4
 800128c:	d200      	bcs.n	8001290 <__aeabi_ddiv+0x3f8>
 800128e:	e0a4      	b.n	80013da <__aeabi_ddiv+0x542>
 8001290:	4281      	cmp	r1, r0
 8001292:	d200      	bcs.n	8001296 <__aeabi_ddiv+0x3fe>
 8001294:	e0c9      	b.n	800142a <__aeabi_ddiv+0x592>
 8001296:	d100      	bne.n	800129a <__aeabi_ddiv+0x402>
 8001298:	e0d9      	b.n	800144e <__aeabi_ddiv+0x5b6>
 800129a:	0035      	movs	r5, r6
 800129c:	e7ed      	b.n	800127a <__aeabi_ddiv+0x3e2>
 800129e:	2501      	movs	r5, #1
 80012a0:	426d      	negs	r5, r5
 80012a2:	2101      	movs	r1, #1
 80012a4:	1a89      	subs	r1, r1, r2
 80012a6:	2938      	cmp	r1, #56	; 0x38
 80012a8:	dd00      	ble.n	80012ac <__aeabi_ddiv+0x414>
 80012aa:	e64c      	b.n	8000f46 <__aeabi_ddiv+0xae>
 80012ac:	291f      	cmp	r1, #31
 80012ae:	dc00      	bgt.n	80012b2 <__aeabi_ddiv+0x41a>
 80012b0:	e07f      	b.n	80013b2 <__aeabi_ddiv+0x51a>
 80012b2:	231f      	movs	r3, #31
 80012b4:	425b      	negs	r3, r3
 80012b6:	1a9a      	subs	r2, r3, r2
 80012b8:	4643      	mov	r3, r8
 80012ba:	40d3      	lsrs	r3, r2
 80012bc:	2920      	cmp	r1, #32
 80012be:	d004      	beq.n	80012ca <__aeabi_ddiv+0x432>
 80012c0:	4644      	mov	r4, r8
 80012c2:	4a65      	ldr	r2, [pc, #404]	; (8001458 <__aeabi_ddiv+0x5c0>)
 80012c4:	445a      	add	r2, fp
 80012c6:	4094      	lsls	r4, r2
 80012c8:	4325      	orrs	r5, r4
 80012ca:	1e6a      	subs	r2, r5, #1
 80012cc:	4195      	sbcs	r5, r2
 80012ce:	2207      	movs	r2, #7
 80012d0:	432b      	orrs	r3, r5
 80012d2:	0015      	movs	r5, r2
 80012d4:	2400      	movs	r4, #0
 80012d6:	401d      	ands	r5, r3
 80012d8:	421a      	tst	r2, r3
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0x446>
 80012dc:	e0a1      	b.n	8001422 <__aeabi_ddiv+0x58a>
 80012de:	220f      	movs	r2, #15
 80012e0:	2400      	movs	r4, #0
 80012e2:	401a      	ands	r2, r3
 80012e4:	2a04      	cmp	r2, #4
 80012e6:	d100      	bne.n	80012ea <__aeabi_ddiv+0x452>
 80012e8:	e098      	b.n	800141c <__aeabi_ddiv+0x584>
 80012ea:	1d1a      	adds	r2, r3, #4
 80012ec:	429a      	cmp	r2, r3
 80012ee:	419b      	sbcs	r3, r3
 80012f0:	425b      	negs	r3, r3
 80012f2:	18e4      	adds	r4, r4, r3
 80012f4:	0013      	movs	r3, r2
 80012f6:	0222      	lsls	r2, r4, #8
 80012f8:	d400      	bmi.n	80012fc <__aeabi_ddiv+0x464>
 80012fa:	e08f      	b.n	800141c <__aeabi_ddiv+0x584>
 80012fc:	2301      	movs	r3, #1
 80012fe:	2400      	movs	r4, #0
 8001300:	2500      	movs	r5, #0
 8001302:	e623      	b.n	8000f4c <__aeabi_ddiv+0xb4>
 8001304:	42b5      	cmp	r5, r6
 8001306:	d300      	bcc.n	800130a <__aeabi_ddiv+0x472>
 8001308:	e764      	b.n	80011d4 <__aeabi_ddiv+0x33c>
 800130a:	4643      	mov	r3, r8
 800130c:	1e5a      	subs	r2, r3, #1
 800130e:	9b00      	ldr	r3, [sp, #0]
 8001310:	469c      	mov	ip, r3
 8001312:	4465      	add	r5, ip
 8001314:	001f      	movs	r7, r3
 8001316:	429d      	cmp	r5, r3
 8001318:	419b      	sbcs	r3, r3
 800131a:	425b      	negs	r3, r3
 800131c:	191b      	adds	r3, r3, r4
 800131e:	18c9      	adds	r1, r1, r3
 8001320:	428c      	cmp	r4, r1
 8001322:	d23a      	bcs.n	800139a <__aeabi_ddiv+0x502>
 8001324:	4288      	cmp	r0, r1
 8001326:	d863      	bhi.n	80013f0 <__aeabi_ddiv+0x558>
 8001328:	d060      	beq.n	80013ec <__aeabi_ddiv+0x554>
 800132a:	4690      	mov	r8, r2
 800132c:	e752      	b.n	80011d4 <__aeabi_ddiv+0x33c>
 800132e:	42aa      	cmp	r2, r5
 8001330:	d900      	bls.n	8001334 <__aeabi_ddiv+0x49c>
 8001332:	e6ea      	b.n	800110a <__aeabi_ddiv+0x272>
 8001334:	4643      	mov	r3, r8
 8001336:	07de      	lsls	r6, r3, #31
 8001338:	0858      	lsrs	r0, r3, #1
 800133a:	086b      	lsrs	r3, r5, #1
 800133c:	431e      	orrs	r6, r3
 800133e:	07ed      	lsls	r5, r5, #31
 8001340:	e6ea      	b.n	8001118 <__aeabi_ddiv+0x280>
 8001342:	4648      	mov	r0, r9
 8001344:	f001 f856 	bl	80023f4 <__clzsi2>
 8001348:	0001      	movs	r1, r0
 800134a:	0002      	movs	r2, r0
 800134c:	3115      	adds	r1, #21
 800134e:	3220      	adds	r2, #32
 8001350:	291c      	cmp	r1, #28
 8001352:	dc00      	bgt.n	8001356 <__aeabi_ddiv+0x4be>
 8001354:	e61a      	b.n	8000f8c <__aeabi_ddiv+0xf4>
 8001356:	464b      	mov	r3, r9
 8001358:	3808      	subs	r0, #8
 800135a:	4083      	lsls	r3, r0
 800135c:	2500      	movs	r5, #0
 800135e:	4698      	mov	r8, r3
 8001360:	e620      	b.n	8000fa4 <__aeabi_ddiv+0x10c>
 8001362:	f001 f847 	bl	80023f4 <__clzsi2>
 8001366:	0003      	movs	r3, r0
 8001368:	001a      	movs	r2, r3
 800136a:	3215      	adds	r2, #21
 800136c:	3020      	adds	r0, #32
 800136e:	2a1c      	cmp	r2, #28
 8001370:	dc00      	bgt.n	8001374 <__aeabi_ddiv+0x4dc>
 8001372:	e630      	b.n	8000fd6 <__aeabi_ddiv+0x13e>
 8001374:	4654      	mov	r4, sl
 8001376:	3b08      	subs	r3, #8
 8001378:	2200      	movs	r2, #0
 800137a:	409c      	lsls	r4, r3
 800137c:	e635      	b.n	8000fea <__aeabi_ddiv+0x152>
 800137e:	230f      	movs	r3, #15
 8001380:	402b      	ands	r3, r5
 8001382:	2b04      	cmp	r3, #4
 8001384:	d100      	bne.n	8001388 <__aeabi_ddiv+0x4f0>
 8001386:	e652      	b.n	800102e <__aeabi_ddiv+0x196>
 8001388:	2305      	movs	r3, #5
 800138a:	425b      	negs	r3, r3
 800138c:	42ab      	cmp	r3, r5
 800138e:	419b      	sbcs	r3, r3
 8001390:	3504      	adds	r5, #4
 8001392:	425b      	negs	r3, r3
 8001394:	08ed      	lsrs	r5, r5, #3
 8001396:	4498      	add	r8, r3
 8001398:	e64a      	b.n	8001030 <__aeabi_ddiv+0x198>
 800139a:	428c      	cmp	r4, r1
 800139c:	d1c5      	bne.n	800132a <__aeabi_ddiv+0x492>
 800139e:	42af      	cmp	r7, r5
 80013a0:	d9c0      	bls.n	8001324 <__aeabi_ddiv+0x48c>
 80013a2:	4690      	mov	r8, r2
 80013a4:	e716      	b.n	80011d4 <__aeabi_ddiv+0x33c>
 80013a6:	428a      	cmp	r2, r1
 80013a8:	d800      	bhi.n	80013ac <__aeabi_ddiv+0x514>
 80013aa:	e6ea      	b.n	8001182 <__aeabi_ddiv+0x2ea>
 80013ac:	1e83      	subs	r3, r0, #2
 80013ae:	1909      	adds	r1, r1, r4
 80013b0:	e6e7      	b.n	8001182 <__aeabi_ddiv+0x2ea>
 80013b2:	4a2a      	ldr	r2, [pc, #168]	; (800145c <__aeabi_ddiv+0x5c4>)
 80013b4:	0028      	movs	r0, r5
 80013b6:	445a      	add	r2, fp
 80013b8:	4643      	mov	r3, r8
 80013ba:	4095      	lsls	r5, r2
 80013bc:	4093      	lsls	r3, r2
 80013be:	40c8      	lsrs	r0, r1
 80013c0:	1e6a      	subs	r2, r5, #1
 80013c2:	4195      	sbcs	r5, r2
 80013c4:	4644      	mov	r4, r8
 80013c6:	4303      	orrs	r3, r0
 80013c8:	432b      	orrs	r3, r5
 80013ca:	40cc      	lsrs	r4, r1
 80013cc:	075a      	lsls	r2, r3, #29
 80013ce:	d092      	beq.n	80012f6 <__aeabi_ddiv+0x45e>
 80013d0:	220f      	movs	r2, #15
 80013d2:	401a      	ands	r2, r3
 80013d4:	2a04      	cmp	r2, #4
 80013d6:	d188      	bne.n	80012ea <__aeabi_ddiv+0x452>
 80013d8:	e78d      	b.n	80012f6 <__aeabi_ddiv+0x45e>
 80013da:	0035      	movs	r5, r6
 80013dc:	4281      	cmp	r1, r0
 80013de:	d000      	beq.n	80013e2 <__aeabi_ddiv+0x54a>
 80013e0:	e74b      	b.n	800127a <__aeabi_ddiv+0x3e2>
 80013e2:	9a00      	ldr	r2, [sp, #0]
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d000      	beq.n	80013ea <__aeabi_ddiv+0x552>
 80013e8:	e747      	b.n	800127a <__aeabi_ddiv+0x3e2>
 80013ea:	e618      	b.n	800101e <__aeabi_ddiv+0x186>
 80013ec:	42ae      	cmp	r6, r5
 80013ee:	d99c      	bls.n	800132a <__aeabi_ddiv+0x492>
 80013f0:	2302      	movs	r3, #2
 80013f2:	425b      	negs	r3, r3
 80013f4:	469c      	mov	ip, r3
 80013f6:	9b00      	ldr	r3, [sp, #0]
 80013f8:	44e0      	add	r8, ip
 80013fa:	469c      	mov	ip, r3
 80013fc:	4465      	add	r5, ip
 80013fe:	429d      	cmp	r5, r3
 8001400:	419b      	sbcs	r3, r3
 8001402:	425b      	negs	r3, r3
 8001404:	191b      	adds	r3, r3, r4
 8001406:	18c9      	adds	r1, r1, r3
 8001408:	e6e4      	b.n	80011d4 <__aeabi_ddiv+0x33c>
 800140a:	4a15      	ldr	r2, [pc, #84]	; (8001460 <__aeabi_ddiv+0x5c8>)
 800140c:	445a      	add	r2, fp
 800140e:	2a00      	cmp	r2, #0
 8001410:	dc00      	bgt.n	8001414 <__aeabi_ddiv+0x57c>
 8001412:	e744      	b.n	800129e <__aeabi_ddiv+0x406>
 8001414:	2301      	movs	r3, #1
 8001416:	2500      	movs	r5, #0
 8001418:	4498      	add	r8, r3
 800141a:	e609      	b.n	8001030 <__aeabi_ddiv+0x198>
 800141c:	0765      	lsls	r5, r4, #29
 800141e:	0264      	lsls	r4, r4, #9
 8001420:	0b24      	lsrs	r4, r4, #12
 8001422:	08db      	lsrs	r3, r3, #3
 8001424:	431d      	orrs	r5, r3
 8001426:	2300      	movs	r3, #0
 8001428:	e590      	b.n	8000f4c <__aeabi_ddiv+0xb4>
 800142a:	9e00      	ldr	r6, [sp, #0]
 800142c:	3d02      	subs	r5, #2
 800142e:	0072      	lsls	r2, r6, #1
 8001430:	42b2      	cmp	r2, r6
 8001432:	41bf      	sbcs	r7, r7
 8001434:	427f      	negs	r7, r7
 8001436:	193c      	adds	r4, r7, r4
 8001438:	1909      	adds	r1, r1, r4
 800143a:	9200      	str	r2, [sp, #0]
 800143c:	e7ce      	b.n	80013dc <__aeabi_ddiv+0x544>
 800143e:	2480      	movs	r4, #128	; 0x80
 8001440:	4643      	mov	r3, r8
 8001442:	0324      	lsls	r4, r4, #12
 8001444:	431c      	orrs	r4, r3
 8001446:	0324      	lsls	r4, r4, #12
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <__aeabi_ddiv+0x5cc>)
 800144a:	0b24      	lsrs	r4, r4, #12
 800144c:	e57e      	b.n	8000f4c <__aeabi_ddiv+0xb4>
 800144e:	9a00      	ldr	r2, [sp, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d3ea      	bcc.n	800142a <__aeabi_ddiv+0x592>
 8001454:	0035      	movs	r5, r6
 8001456:	e7c4      	b.n	80013e2 <__aeabi_ddiv+0x54a>
 8001458:	0000043e 	.word	0x0000043e
 800145c:	0000041e 	.word	0x0000041e
 8001460:	000003ff 	.word	0x000003ff
 8001464:	000007ff 	.word	0x000007ff

08001468 <__eqdf2>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	464f      	mov	r7, r9
 800146c:	4646      	mov	r6, r8
 800146e:	46d6      	mov	lr, sl
 8001470:	4694      	mov	ip, r2
 8001472:	4691      	mov	r9, r2
 8001474:	031a      	lsls	r2, r3, #12
 8001476:	0b12      	lsrs	r2, r2, #12
 8001478:	4d18      	ldr	r5, [pc, #96]	; (80014dc <__eqdf2+0x74>)
 800147a:	b5c0      	push	{r6, r7, lr}
 800147c:	004c      	lsls	r4, r1, #1
 800147e:	030f      	lsls	r7, r1, #12
 8001480:	4692      	mov	sl, r2
 8001482:	005a      	lsls	r2, r3, #1
 8001484:	0006      	movs	r6, r0
 8001486:	4680      	mov	r8, r0
 8001488:	0b3f      	lsrs	r7, r7, #12
 800148a:	2001      	movs	r0, #1
 800148c:	0d64      	lsrs	r4, r4, #21
 800148e:	0fc9      	lsrs	r1, r1, #31
 8001490:	0d52      	lsrs	r2, r2, #21
 8001492:	0fdb      	lsrs	r3, r3, #31
 8001494:	42ac      	cmp	r4, r5
 8001496:	d00a      	beq.n	80014ae <__eqdf2+0x46>
 8001498:	42aa      	cmp	r2, r5
 800149a:	d003      	beq.n	80014a4 <__eqdf2+0x3c>
 800149c:	4294      	cmp	r4, r2
 800149e:	d101      	bne.n	80014a4 <__eqdf2+0x3c>
 80014a0:	4557      	cmp	r7, sl
 80014a2:	d00d      	beq.n	80014c0 <__eqdf2+0x58>
 80014a4:	bce0      	pop	{r5, r6, r7}
 80014a6:	46ba      	mov	sl, r7
 80014a8:	46b1      	mov	r9, r6
 80014aa:	46a8      	mov	r8, r5
 80014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ae:	003d      	movs	r5, r7
 80014b0:	4335      	orrs	r5, r6
 80014b2:	d1f7      	bne.n	80014a4 <__eqdf2+0x3c>
 80014b4:	42a2      	cmp	r2, r4
 80014b6:	d1f5      	bne.n	80014a4 <__eqdf2+0x3c>
 80014b8:	4652      	mov	r2, sl
 80014ba:	4665      	mov	r5, ip
 80014bc:	432a      	orrs	r2, r5
 80014be:	d1f1      	bne.n	80014a4 <__eqdf2+0x3c>
 80014c0:	2001      	movs	r0, #1
 80014c2:	45c8      	cmp	r8, r9
 80014c4:	d1ee      	bne.n	80014a4 <__eqdf2+0x3c>
 80014c6:	4299      	cmp	r1, r3
 80014c8:	d006      	beq.n	80014d8 <__eqdf2+0x70>
 80014ca:	2c00      	cmp	r4, #0
 80014cc:	d1ea      	bne.n	80014a4 <__eqdf2+0x3c>
 80014ce:	433e      	orrs	r6, r7
 80014d0:	0030      	movs	r0, r6
 80014d2:	1e46      	subs	r6, r0, #1
 80014d4:	41b0      	sbcs	r0, r6
 80014d6:	e7e5      	b.n	80014a4 <__eqdf2+0x3c>
 80014d8:	2000      	movs	r0, #0
 80014da:	e7e3      	b.n	80014a4 <__eqdf2+0x3c>
 80014dc:	000007ff 	.word	0x000007ff

080014e0 <__gedf2>:
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	464e      	mov	r6, r9
 80014e4:	4645      	mov	r5, r8
 80014e6:	4657      	mov	r7, sl
 80014e8:	46de      	mov	lr, fp
 80014ea:	0004      	movs	r4, r0
 80014ec:	0018      	movs	r0, r3
 80014ee:	b5e0      	push	{r5, r6, r7, lr}
 80014f0:	0016      	movs	r6, r2
 80014f2:	031b      	lsls	r3, r3, #12
 80014f4:	0b1b      	lsrs	r3, r3, #12
 80014f6:	4d32      	ldr	r5, [pc, #200]	; (80015c0 <__gedf2+0xe0>)
 80014f8:	030f      	lsls	r7, r1, #12
 80014fa:	004a      	lsls	r2, r1, #1
 80014fc:	4699      	mov	r9, r3
 80014fe:	0043      	lsls	r3, r0, #1
 8001500:	46a4      	mov	ip, r4
 8001502:	46b0      	mov	r8, r6
 8001504:	0b3f      	lsrs	r7, r7, #12
 8001506:	0d52      	lsrs	r2, r2, #21
 8001508:	0fc9      	lsrs	r1, r1, #31
 800150a:	0d5b      	lsrs	r3, r3, #21
 800150c:	0fc0      	lsrs	r0, r0, #31
 800150e:	42aa      	cmp	r2, r5
 8001510:	d029      	beq.n	8001566 <__gedf2+0x86>
 8001512:	42ab      	cmp	r3, r5
 8001514:	d018      	beq.n	8001548 <__gedf2+0x68>
 8001516:	2a00      	cmp	r2, #0
 8001518:	d12a      	bne.n	8001570 <__gedf2+0x90>
 800151a:	433c      	orrs	r4, r7
 800151c:	46a3      	mov	fp, r4
 800151e:	4265      	negs	r5, r4
 8001520:	4165      	adcs	r5, r4
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <__gedf2+0x4c>
 8001526:	464c      	mov	r4, r9
 8001528:	4326      	orrs	r6, r4
 800152a:	d027      	beq.n	800157c <__gedf2+0x9c>
 800152c:	2d00      	cmp	r5, #0
 800152e:	d115      	bne.n	800155c <__gedf2+0x7c>
 8001530:	4281      	cmp	r1, r0
 8001532:	d028      	beq.n	8001586 <__gedf2+0xa6>
 8001534:	2002      	movs	r0, #2
 8001536:	3901      	subs	r1, #1
 8001538:	4008      	ands	r0, r1
 800153a:	3801      	subs	r0, #1
 800153c:	bcf0      	pop	{r4, r5, r6, r7}
 800153e:	46bb      	mov	fp, r7
 8001540:	46b2      	mov	sl, r6
 8001542:	46a9      	mov	r9, r5
 8001544:	46a0      	mov	r8, r4
 8001546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001548:	464d      	mov	r5, r9
 800154a:	432e      	orrs	r6, r5
 800154c:	d12f      	bne.n	80015ae <__gedf2+0xce>
 800154e:	2a00      	cmp	r2, #0
 8001550:	d1ee      	bne.n	8001530 <__gedf2+0x50>
 8001552:	433c      	orrs	r4, r7
 8001554:	4265      	negs	r5, r4
 8001556:	4165      	adcs	r5, r4
 8001558:	2d00      	cmp	r5, #0
 800155a:	d0e9      	beq.n	8001530 <__gedf2+0x50>
 800155c:	2800      	cmp	r0, #0
 800155e:	d1ed      	bne.n	800153c <__gedf2+0x5c>
 8001560:	2001      	movs	r0, #1
 8001562:	4240      	negs	r0, r0
 8001564:	e7ea      	b.n	800153c <__gedf2+0x5c>
 8001566:	003d      	movs	r5, r7
 8001568:	4325      	orrs	r5, r4
 800156a:	d120      	bne.n	80015ae <__gedf2+0xce>
 800156c:	4293      	cmp	r3, r2
 800156e:	d0eb      	beq.n	8001548 <__gedf2+0x68>
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1dd      	bne.n	8001530 <__gedf2+0x50>
 8001574:	464c      	mov	r4, r9
 8001576:	4326      	orrs	r6, r4
 8001578:	d1da      	bne.n	8001530 <__gedf2+0x50>
 800157a:	e7db      	b.n	8001534 <__gedf2+0x54>
 800157c:	465b      	mov	r3, fp
 800157e:	2000      	movs	r0, #0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0db      	beq.n	800153c <__gedf2+0x5c>
 8001584:	e7d6      	b.n	8001534 <__gedf2+0x54>
 8001586:	429a      	cmp	r2, r3
 8001588:	dc0a      	bgt.n	80015a0 <__gedf2+0xc0>
 800158a:	dbe7      	blt.n	800155c <__gedf2+0x7c>
 800158c:	454f      	cmp	r7, r9
 800158e:	d8d1      	bhi.n	8001534 <__gedf2+0x54>
 8001590:	d010      	beq.n	80015b4 <__gedf2+0xd4>
 8001592:	2000      	movs	r0, #0
 8001594:	454f      	cmp	r7, r9
 8001596:	d2d1      	bcs.n	800153c <__gedf2+0x5c>
 8001598:	2900      	cmp	r1, #0
 800159a:	d0e1      	beq.n	8001560 <__gedf2+0x80>
 800159c:	0008      	movs	r0, r1
 800159e:	e7cd      	b.n	800153c <__gedf2+0x5c>
 80015a0:	4243      	negs	r3, r0
 80015a2:	4158      	adcs	r0, r3
 80015a4:	2302      	movs	r3, #2
 80015a6:	4240      	negs	r0, r0
 80015a8:	4018      	ands	r0, r3
 80015aa:	3801      	subs	r0, #1
 80015ac:	e7c6      	b.n	800153c <__gedf2+0x5c>
 80015ae:	2002      	movs	r0, #2
 80015b0:	4240      	negs	r0, r0
 80015b2:	e7c3      	b.n	800153c <__gedf2+0x5c>
 80015b4:	45c4      	cmp	ip, r8
 80015b6:	d8bd      	bhi.n	8001534 <__gedf2+0x54>
 80015b8:	2000      	movs	r0, #0
 80015ba:	45c4      	cmp	ip, r8
 80015bc:	d2be      	bcs.n	800153c <__gedf2+0x5c>
 80015be:	e7eb      	b.n	8001598 <__gedf2+0xb8>
 80015c0:	000007ff 	.word	0x000007ff

080015c4 <__ledf2>:
 80015c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c6:	464e      	mov	r6, r9
 80015c8:	4645      	mov	r5, r8
 80015ca:	4657      	mov	r7, sl
 80015cc:	46de      	mov	lr, fp
 80015ce:	0004      	movs	r4, r0
 80015d0:	0018      	movs	r0, r3
 80015d2:	b5e0      	push	{r5, r6, r7, lr}
 80015d4:	0016      	movs	r6, r2
 80015d6:	031b      	lsls	r3, r3, #12
 80015d8:	0b1b      	lsrs	r3, r3, #12
 80015da:	4d31      	ldr	r5, [pc, #196]	; (80016a0 <__ledf2+0xdc>)
 80015dc:	030f      	lsls	r7, r1, #12
 80015de:	004a      	lsls	r2, r1, #1
 80015e0:	4699      	mov	r9, r3
 80015e2:	0043      	lsls	r3, r0, #1
 80015e4:	46a4      	mov	ip, r4
 80015e6:	46b0      	mov	r8, r6
 80015e8:	0b3f      	lsrs	r7, r7, #12
 80015ea:	0d52      	lsrs	r2, r2, #21
 80015ec:	0fc9      	lsrs	r1, r1, #31
 80015ee:	0d5b      	lsrs	r3, r3, #21
 80015f0:	0fc0      	lsrs	r0, r0, #31
 80015f2:	42aa      	cmp	r2, r5
 80015f4:	d011      	beq.n	800161a <__ledf2+0x56>
 80015f6:	42ab      	cmp	r3, r5
 80015f8:	d014      	beq.n	8001624 <__ledf2+0x60>
 80015fa:	2a00      	cmp	r2, #0
 80015fc:	d12f      	bne.n	800165e <__ledf2+0x9a>
 80015fe:	433c      	orrs	r4, r7
 8001600:	46a3      	mov	fp, r4
 8001602:	4265      	negs	r5, r4
 8001604:	4165      	adcs	r5, r4
 8001606:	2b00      	cmp	r3, #0
 8001608:	d114      	bne.n	8001634 <__ledf2+0x70>
 800160a:	464c      	mov	r4, r9
 800160c:	4326      	orrs	r6, r4
 800160e:	d111      	bne.n	8001634 <__ledf2+0x70>
 8001610:	465b      	mov	r3, fp
 8001612:	2000      	movs	r0, #0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d017      	beq.n	8001648 <__ledf2+0x84>
 8001618:	e010      	b.n	800163c <__ledf2+0x78>
 800161a:	003d      	movs	r5, r7
 800161c:	4325      	orrs	r5, r4
 800161e:	d112      	bne.n	8001646 <__ledf2+0x82>
 8001620:	4293      	cmp	r3, r2
 8001622:	d11c      	bne.n	800165e <__ledf2+0x9a>
 8001624:	464d      	mov	r5, r9
 8001626:	432e      	orrs	r6, r5
 8001628:	d10d      	bne.n	8001646 <__ledf2+0x82>
 800162a:	2a00      	cmp	r2, #0
 800162c:	d104      	bne.n	8001638 <__ledf2+0x74>
 800162e:	433c      	orrs	r4, r7
 8001630:	4265      	negs	r5, r4
 8001632:	4165      	adcs	r5, r4
 8001634:	2d00      	cmp	r5, #0
 8001636:	d10d      	bne.n	8001654 <__ledf2+0x90>
 8001638:	4281      	cmp	r1, r0
 800163a:	d016      	beq.n	800166a <__ledf2+0xa6>
 800163c:	2002      	movs	r0, #2
 800163e:	3901      	subs	r1, #1
 8001640:	4008      	ands	r0, r1
 8001642:	3801      	subs	r0, #1
 8001644:	e000      	b.n	8001648 <__ledf2+0x84>
 8001646:	2002      	movs	r0, #2
 8001648:	bcf0      	pop	{r4, r5, r6, r7}
 800164a:	46bb      	mov	fp, r7
 800164c:	46b2      	mov	sl, r6
 800164e:	46a9      	mov	r9, r5
 8001650:	46a0      	mov	r8, r4
 8001652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001654:	2800      	cmp	r0, #0
 8001656:	d1f7      	bne.n	8001648 <__ledf2+0x84>
 8001658:	2001      	movs	r0, #1
 800165a:	4240      	negs	r0, r0
 800165c:	e7f4      	b.n	8001648 <__ledf2+0x84>
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1ea      	bne.n	8001638 <__ledf2+0x74>
 8001662:	464c      	mov	r4, r9
 8001664:	4326      	orrs	r6, r4
 8001666:	d1e7      	bne.n	8001638 <__ledf2+0x74>
 8001668:	e7e8      	b.n	800163c <__ledf2+0x78>
 800166a:	429a      	cmp	r2, r3
 800166c:	dd06      	ble.n	800167c <__ledf2+0xb8>
 800166e:	4243      	negs	r3, r0
 8001670:	4158      	adcs	r0, r3
 8001672:	2302      	movs	r3, #2
 8001674:	4240      	negs	r0, r0
 8001676:	4018      	ands	r0, r3
 8001678:	3801      	subs	r0, #1
 800167a:	e7e5      	b.n	8001648 <__ledf2+0x84>
 800167c:	429a      	cmp	r2, r3
 800167e:	dbe9      	blt.n	8001654 <__ledf2+0x90>
 8001680:	454f      	cmp	r7, r9
 8001682:	d8db      	bhi.n	800163c <__ledf2+0x78>
 8001684:	d006      	beq.n	8001694 <__ledf2+0xd0>
 8001686:	2000      	movs	r0, #0
 8001688:	454f      	cmp	r7, r9
 800168a:	d2dd      	bcs.n	8001648 <__ledf2+0x84>
 800168c:	2900      	cmp	r1, #0
 800168e:	d0e3      	beq.n	8001658 <__ledf2+0x94>
 8001690:	0008      	movs	r0, r1
 8001692:	e7d9      	b.n	8001648 <__ledf2+0x84>
 8001694:	45c4      	cmp	ip, r8
 8001696:	d8d1      	bhi.n	800163c <__ledf2+0x78>
 8001698:	2000      	movs	r0, #0
 800169a:	45c4      	cmp	ip, r8
 800169c:	d2d4      	bcs.n	8001648 <__ledf2+0x84>
 800169e:	e7f5      	b.n	800168c <__ledf2+0xc8>
 80016a0:	000007ff 	.word	0x000007ff

080016a4 <__aeabi_dmul>:
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	4657      	mov	r7, sl
 80016a8:	464e      	mov	r6, r9
 80016aa:	4645      	mov	r5, r8
 80016ac:	46de      	mov	lr, fp
 80016ae:	b5e0      	push	{r5, r6, r7, lr}
 80016b0:	4698      	mov	r8, r3
 80016b2:	030c      	lsls	r4, r1, #12
 80016b4:	004b      	lsls	r3, r1, #1
 80016b6:	0006      	movs	r6, r0
 80016b8:	4692      	mov	sl, r2
 80016ba:	b087      	sub	sp, #28
 80016bc:	0b24      	lsrs	r4, r4, #12
 80016be:	0d5b      	lsrs	r3, r3, #21
 80016c0:	0fcf      	lsrs	r7, r1, #31
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d06c      	beq.n	80017a0 <__aeabi_dmul+0xfc>
 80016c6:	4add      	ldr	r2, [pc, #884]	; (8001a3c <__aeabi_dmul+0x398>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d100      	bne.n	80016ce <__aeabi_dmul+0x2a>
 80016cc:	e086      	b.n	80017dc <__aeabi_dmul+0x138>
 80016ce:	0f42      	lsrs	r2, r0, #29
 80016d0:	00e4      	lsls	r4, r4, #3
 80016d2:	4314      	orrs	r4, r2
 80016d4:	2280      	movs	r2, #128	; 0x80
 80016d6:	0412      	lsls	r2, r2, #16
 80016d8:	4314      	orrs	r4, r2
 80016da:	4ad9      	ldr	r2, [pc, #868]	; (8001a40 <__aeabi_dmul+0x39c>)
 80016dc:	00c5      	lsls	r5, r0, #3
 80016de:	4694      	mov	ip, r2
 80016e0:	4463      	add	r3, ip
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2300      	movs	r3, #0
 80016e6:	4699      	mov	r9, r3
 80016e8:	469b      	mov	fp, r3
 80016ea:	4643      	mov	r3, r8
 80016ec:	4642      	mov	r2, r8
 80016ee:	031e      	lsls	r6, r3, #12
 80016f0:	0fd2      	lsrs	r2, r2, #31
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4650      	mov	r0, sl
 80016f6:	4690      	mov	r8, r2
 80016f8:	0b36      	lsrs	r6, r6, #12
 80016fa:	0d5b      	lsrs	r3, r3, #21
 80016fc:	d100      	bne.n	8001700 <__aeabi_dmul+0x5c>
 80016fe:	e078      	b.n	80017f2 <__aeabi_dmul+0x14e>
 8001700:	4ace      	ldr	r2, [pc, #824]	; (8001a3c <__aeabi_dmul+0x398>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d01d      	beq.n	8001742 <__aeabi_dmul+0x9e>
 8001706:	49ce      	ldr	r1, [pc, #824]	; (8001a40 <__aeabi_dmul+0x39c>)
 8001708:	0f42      	lsrs	r2, r0, #29
 800170a:	468c      	mov	ip, r1
 800170c:	9900      	ldr	r1, [sp, #0]
 800170e:	4463      	add	r3, ip
 8001710:	00f6      	lsls	r6, r6, #3
 8001712:	468c      	mov	ip, r1
 8001714:	4316      	orrs	r6, r2
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	449c      	add	ip, r3
 800171a:	0412      	lsls	r2, r2, #16
 800171c:	4663      	mov	r3, ip
 800171e:	4316      	orrs	r6, r2
 8001720:	00c2      	lsls	r2, r0, #3
 8001722:	2000      	movs	r0, #0
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	9900      	ldr	r1, [sp, #0]
 8001728:	4643      	mov	r3, r8
 800172a:	3101      	adds	r1, #1
 800172c:	468c      	mov	ip, r1
 800172e:	4649      	mov	r1, r9
 8001730:	407b      	eors	r3, r7
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	290f      	cmp	r1, #15
 8001736:	d900      	bls.n	800173a <__aeabi_dmul+0x96>
 8001738:	e07e      	b.n	8001838 <__aeabi_dmul+0x194>
 800173a:	4bc2      	ldr	r3, [pc, #776]	; (8001a44 <__aeabi_dmul+0x3a0>)
 800173c:	0089      	lsls	r1, r1, #2
 800173e:	5859      	ldr	r1, [r3, r1]
 8001740:	468f      	mov	pc, r1
 8001742:	4652      	mov	r2, sl
 8001744:	9b00      	ldr	r3, [sp, #0]
 8001746:	4332      	orrs	r2, r6
 8001748:	d000      	beq.n	800174c <__aeabi_dmul+0xa8>
 800174a:	e156      	b.n	80019fa <__aeabi_dmul+0x356>
 800174c:	49bb      	ldr	r1, [pc, #748]	; (8001a3c <__aeabi_dmul+0x398>)
 800174e:	2600      	movs	r6, #0
 8001750:	468c      	mov	ip, r1
 8001752:	4463      	add	r3, ip
 8001754:	4649      	mov	r1, r9
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2302      	movs	r3, #2
 800175a:	4319      	orrs	r1, r3
 800175c:	4689      	mov	r9, r1
 800175e:	2002      	movs	r0, #2
 8001760:	e7e1      	b.n	8001726 <__aeabi_dmul+0x82>
 8001762:	4643      	mov	r3, r8
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	0034      	movs	r4, r6
 8001768:	0015      	movs	r5, r2
 800176a:	4683      	mov	fp, r0
 800176c:	465b      	mov	r3, fp
 800176e:	2b02      	cmp	r3, #2
 8001770:	d05e      	beq.n	8001830 <__aeabi_dmul+0x18c>
 8001772:	2b03      	cmp	r3, #3
 8001774:	d100      	bne.n	8001778 <__aeabi_dmul+0xd4>
 8001776:	e1f3      	b.n	8001b60 <__aeabi_dmul+0x4bc>
 8001778:	2b01      	cmp	r3, #1
 800177a:	d000      	beq.n	800177e <__aeabi_dmul+0xda>
 800177c:	e118      	b.n	80019b0 <__aeabi_dmul+0x30c>
 800177e:	2200      	movs	r2, #0
 8001780:	2400      	movs	r4, #0
 8001782:	2500      	movs	r5, #0
 8001784:	9b01      	ldr	r3, [sp, #4]
 8001786:	0512      	lsls	r2, r2, #20
 8001788:	4322      	orrs	r2, r4
 800178a:	07db      	lsls	r3, r3, #31
 800178c:	431a      	orrs	r2, r3
 800178e:	0028      	movs	r0, r5
 8001790:	0011      	movs	r1, r2
 8001792:	b007      	add	sp, #28
 8001794:	bcf0      	pop	{r4, r5, r6, r7}
 8001796:	46bb      	mov	fp, r7
 8001798:	46b2      	mov	sl, r6
 800179a:	46a9      	mov	r9, r5
 800179c:	46a0      	mov	r8, r4
 800179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017a0:	0025      	movs	r5, r4
 80017a2:	4305      	orrs	r5, r0
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dmul+0x104>
 80017a6:	e141      	b.n	8001a2c <__aeabi_dmul+0x388>
 80017a8:	2c00      	cmp	r4, #0
 80017aa:	d100      	bne.n	80017ae <__aeabi_dmul+0x10a>
 80017ac:	e1ad      	b.n	8001b0a <__aeabi_dmul+0x466>
 80017ae:	0020      	movs	r0, r4
 80017b0:	f000 fe20 	bl	80023f4 <__clzsi2>
 80017b4:	0001      	movs	r1, r0
 80017b6:	0002      	movs	r2, r0
 80017b8:	390b      	subs	r1, #11
 80017ba:	231d      	movs	r3, #29
 80017bc:	0010      	movs	r0, r2
 80017be:	1a5b      	subs	r3, r3, r1
 80017c0:	0031      	movs	r1, r6
 80017c2:	0035      	movs	r5, r6
 80017c4:	3808      	subs	r0, #8
 80017c6:	4084      	lsls	r4, r0
 80017c8:	40d9      	lsrs	r1, r3
 80017ca:	4085      	lsls	r5, r0
 80017cc:	430c      	orrs	r4, r1
 80017ce:	489e      	ldr	r0, [pc, #632]	; (8001a48 <__aeabi_dmul+0x3a4>)
 80017d0:	1a83      	subs	r3, r0, r2
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	4699      	mov	r9, r3
 80017d8:	469b      	mov	fp, r3
 80017da:	e786      	b.n	80016ea <__aeabi_dmul+0x46>
 80017dc:	0005      	movs	r5, r0
 80017de:	4325      	orrs	r5, r4
 80017e0:	d000      	beq.n	80017e4 <__aeabi_dmul+0x140>
 80017e2:	e11c      	b.n	8001a1e <__aeabi_dmul+0x37a>
 80017e4:	2208      	movs	r2, #8
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2302      	movs	r3, #2
 80017ea:	2400      	movs	r4, #0
 80017ec:	4691      	mov	r9, r2
 80017ee:	469b      	mov	fp, r3
 80017f0:	e77b      	b.n	80016ea <__aeabi_dmul+0x46>
 80017f2:	4652      	mov	r2, sl
 80017f4:	4332      	orrs	r2, r6
 80017f6:	d100      	bne.n	80017fa <__aeabi_dmul+0x156>
 80017f8:	e10a      	b.n	8001a10 <__aeabi_dmul+0x36c>
 80017fa:	2e00      	cmp	r6, #0
 80017fc:	d100      	bne.n	8001800 <__aeabi_dmul+0x15c>
 80017fe:	e176      	b.n	8001aee <__aeabi_dmul+0x44a>
 8001800:	0030      	movs	r0, r6
 8001802:	f000 fdf7 	bl	80023f4 <__clzsi2>
 8001806:	0002      	movs	r2, r0
 8001808:	3a0b      	subs	r2, #11
 800180a:	231d      	movs	r3, #29
 800180c:	0001      	movs	r1, r0
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	4652      	mov	r2, sl
 8001812:	3908      	subs	r1, #8
 8001814:	40da      	lsrs	r2, r3
 8001816:	408e      	lsls	r6, r1
 8001818:	4316      	orrs	r6, r2
 800181a:	4652      	mov	r2, sl
 800181c:	408a      	lsls	r2, r1
 800181e:	9b00      	ldr	r3, [sp, #0]
 8001820:	4989      	ldr	r1, [pc, #548]	; (8001a48 <__aeabi_dmul+0x3a4>)
 8001822:	1a18      	subs	r0, r3, r0
 8001824:	0003      	movs	r3, r0
 8001826:	468c      	mov	ip, r1
 8001828:	4463      	add	r3, ip
 800182a:	2000      	movs	r0, #0
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	e77a      	b.n	8001726 <__aeabi_dmul+0x82>
 8001830:	2400      	movs	r4, #0
 8001832:	2500      	movs	r5, #0
 8001834:	4a81      	ldr	r2, [pc, #516]	; (8001a3c <__aeabi_dmul+0x398>)
 8001836:	e7a5      	b.n	8001784 <__aeabi_dmul+0xe0>
 8001838:	0c2f      	lsrs	r7, r5, #16
 800183a:	042d      	lsls	r5, r5, #16
 800183c:	0c2d      	lsrs	r5, r5, #16
 800183e:	002b      	movs	r3, r5
 8001840:	0c11      	lsrs	r1, r2, #16
 8001842:	0412      	lsls	r2, r2, #16
 8001844:	0c12      	lsrs	r2, r2, #16
 8001846:	4353      	muls	r3, r2
 8001848:	4698      	mov	r8, r3
 800184a:	0013      	movs	r3, r2
 800184c:	0028      	movs	r0, r5
 800184e:	437b      	muls	r3, r7
 8001850:	4699      	mov	r9, r3
 8001852:	4348      	muls	r0, r1
 8001854:	4448      	add	r0, r9
 8001856:	4683      	mov	fp, r0
 8001858:	4640      	mov	r0, r8
 800185a:	000b      	movs	r3, r1
 800185c:	0c00      	lsrs	r0, r0, #16
 800185e:	4682      	mov	sl, r0
 8001860:	4658      	mov	r0, fp
 8001862:	437b      	muls	r3, r7
 8001864:	4450      	add	r0, sl
 8001866:	9302      	str	r3, [sp, #8]
 8001868:	4581      	cmp	r9, r0
 800186a:	d906      	bls.n	800187a <__aeabi_dmul+0x1d6>
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	025b      	lsls	r3, r3, #9
 8001872:	4699      	mov	r9, r3
 8001874:	44ca      	add	sl, r9
 8001876:	4653      	mov	r3, sl
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	0c03      	lsrs	r3, r0, #16
 800187c:	469b      	mov	fp, r3
 800187e:	4643      	mov	r3, r8
 8001880:	041b      	lsls	r3, r3, #16
 8001882:	0400      	lsls	r0, r0, #16
 8001884:	0c1b      	lsrs	r3, r3, #16
 8001886:	4698      	mov	r8, r3
 8001888:	0003      	movs	r3, r0
 800188a:	4443      	add	r3, r8
 800188c:	9304      	str	r3, [sp, #16]
 800188e:	0c33      	lsrs	r3, r6, #16
 8001890:	4699      	mov	r9, r3
 8001892:	002b      	movs	r3, r5
 8001894:	0436      	lsls	r6, r6, #16
 8001896:	0c36      	lsrs	r6, r6, #16
 8001898:	4373      	muls	r3, r6
 800189a:	4698      	mov	r8, r3
 800189c:	0033      	movs	r3, r6
 800189e:	437b      	muls	r3, r7
 80018a0:	469a      	mov	sl, r3
 80018a2:	464b      	mov	r3, r9
 80018a4:	435d      	muls	r5, r3
 80018a6:	435f      	muls	r7, r3
 80018a8:	4643      	mov	r3, r8
 80018aa:	4455      	add	r5, sl
 80018ac:	0c18      	lsrs	r0, r3, #16
 80018ae:	1940      	adds	r0, r0, r5
 80018b0:	4582      	cmp	sl, r0
 80018b2:	d903      	bls.n	80018bc <__aeabi_dmul+0x218>
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	025b      	lsls	r3, r3, #9
 80018b8:	469a      	mov	sl, r3
 80018ba:	4457      	add	r7, sl
 80018bc:	0c05      	lsrs	r5, r0, #16
 80018be:	19eb      	adds	r3, r5, r7
 80018c0:	9305      	str	r3, [sp, #20]
 80018c2:	4643      	mov	r3, r8
 80018c4:	041d      	lsls	r5, r3, #16
 80018c6:	0c2d      	lsrs	r5, r5, #16
 80018c8:	0400      	lsls	r0, r0, #16
 80018ca:	1940      	adds	r0, r0, r5
 80018cc:	0c25      	lsrs	r5, r4, #16
 80018ce:	0424      	lsls	r4, r4, #16
 80018d0:	0c24      	lsrs	r4, r4, #16
 80018d2:	0027      	movs	r7, r4
 80018d4:	4357      	muls	r7, r2
 80018d6:	436a      	muls	r2, r5
 80018d8:	4690      	mov	r8, r2
 80018da:	002a      	movs	r2, r5
 80018dc:	0c3b      	lsrs	r3, r7, #16
 80018de:	469a      	mov	sl, r3
 80018e0:	434a      	muls	r2, r1
 80018e2:	4361      	muls	r1, r4
 80018e4:	4441      	add	r1, r8
 80018e6:	4451      	add	r1, sl
 80018e8:	4483      	add	fp, r0
 80018ea:	4588      	cmp	r8, r1
 80018ec:	d903      	bls.n	80018f6 <__aeabi_dmul+0x252>
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	025b      	lsls	r3, r3, #9
 80018f2:	4698      	mov	r8, r3
 80018f4:	4442      	add	r2, r8
 80018f6:	043f      	lsls	r7, r7, #16
 80018f8:	0c0b      	lsrs	r3, r1, #16
 80018fa:	0c3f      	lsrs	r7, r7, #16
 80018fc:	0409      	lsls	r1, r1, #16
 80018fe:	19c9      	adds	r1, r1, r7
 8001900:	0027      	movs	r7, r4
 8001902:	4698      	mov	r8, r3
 8001904:	464b      	mov	r3, r9
 8001906:	4377      	muls	r7, r6
 8001908:	435c      	muls	r4, r3
 800190a:	436e      	muls	r6, r5
 800190c:	435d      	muls	r5, r3
 800190e:	0c3b      	lsrs	r3, r7, #16
 8001910:	4699      	mov	r9, r3
 8001912:	19a4      	adds	r4, r4, r6
 8001914:	444c      	add	r4, r9
 8001916:	4442      	add	r2, r8
 8001918:	9503      	str	r5, [sp, #12]
 800191a:	42a6      	cmp	r6, r4
 800191c:	d904      	bls.n	8001928 <__aeabi_dmul+0x284>
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	025b      	lsls	r3, r3, #9
 8001922:	4698      	mov	r8, r3
 8001924:	4445      	add	r5, r8
 8001926:	9503      	str	r5, [sp, #12]
 8001928:	9b02      	ldr	r3, [sp, #8]
 800192a:	043f      	lsls	r7, r7, #16
 800192c:	445b      	add	r3, fp
 800192e:	001e      	movs	r6, r3
 8001930:	4283      	cmp	r3, r0
 8001932:	4180      	sbcs	r0, r0
 8001934:	0423      	lsls	r3, r4, #16
 8001936:	4698      	mov	r8, r3
 8001938:	9b05      	ldr	r3, [sp, #20]
 800193a:	0c3f      	lsrs	r7, r7, #16
 800193c:	4447      	add	r7, r8
 800193e:	4698      	mov	r8, r3
 8001940:	1876      	adds	r6, r6, r1
 8001942:	428e      	cmp	r6, r1
 8001944:	4189      	sbcs	r1, r1
 8001946:	4447      	add	r7, r8
 8001948:	4240      	negs	r0, r0
 800194a:	183d      	adds	r5, r7, r0
 800194c:	46a8      	mov	r8, r5
 800194e:	4693      	mov	fp, r2
 8001950:	4249      	negs	r1, r1
 8001952:	468a      	mov	sl, r1
 8001954:	44c3      	add	fp, r8
 8001956:	429f      	cmp	r7, r3
 8001958:	41bf      	sbcs	r7, r7
 800195a:	4580      	cmp	r8, r0
 800195c:	4180      	sbcs	r0, r0
 800195e:	9b03      	ldr	r3, [sp, #12]
 8001960:	44da      	add	sl, fp
 8001962:	4698      	mov	r8, r3
 8001964:	4653      	mov	r3, sl
 8001966:	4240      	negs	r0, r0
 8001968:	427f      	negs	r7, r7
 800196a:	4307      	orrs	r7, r0
 800196c:	0c24      	lsrs	r4, r4, #16
 800196e:	4593      	cmp	fp, r2
 8001970:	4192      	sbcs	r2, r2
 8001972:	458a      	cmp	sl, r1
 8001974:	4189      	sbcs	r1, r1
 8001976:	193f      	adds	r7, r7, r4
 8001978:	0ddc      	lsrs	r4, r3, #23
 800197a:	9b04      	ldr	r3, [sp, #16]
 800197c:	0275      	lsls	r5, r6, #9
 800197e:	431d      	orrs	r5, r3
 8001980:	1e68      	subs	r0, r5, #1
 8001982:	4185      	sbcs	r5, r0
 8001984:	4653      	mov	r3, sl
 8001986:	4252      	negs	r2, r2
 8001988:	4249      	negs	r1, r1
 800198a:	430a      	orrs	r2, r1
 800198c:	18bf      	adds	r7, r7, r2
 800198e:	4447      	add	r7, r8
 8001990:	0df6      	lsrs	r6, r6, #23
 8001992:	027f      	lsls	r7, r7, #9
 8001994:	4335      	orrs	r5, r6
 8001996:	025a      	lsls	r2, r3, #9
 8001998:	433c      	orrs	r4, r7
 800199a:	4315      	orrs	r5, r2
 800199c:	01fb      	lsls	r3, r7, #7
 800199e:	d400      	bmi.n	80019a2 <__aeabi_dmul+0x2fe>
 80019a0:	e0c1      	b.n	8001b26 <__aeabi_dmul+0x482>
 80019a2:	2101      	movs	r1, #1
 80019a4:	086a      	lsrs	r2, r5, #1
 80019a6:	400d      	ands	r5, r1
 80019a8:	4315      	orrs	r5, r2
 80019aa:	07e2      	lsls	r2, r4, #31
 80019ac:	4315      	orrs	r5, r2
 80019ae:	0864      	lsrs	r4, r4, #1
 80019b0:	4926      	ldr	r1, [pc, #152]	; (8001a4c <__aeabi_dmul+0x3a8>)
 80019b2:	4461      	add	r1, ip
 80019b4:	2900      	cmp	r1, #0
 80019b6:	dd56      	ble.n	8001a66 <__aeabi_dmul+0x3c2>
 80019b8:	076b      	lsls	r3, r5, #29
 80019ba:	d009      	beq.n	80019d0 <__aeabi_dmul+0x32c>
 80019bc:	220f      	movs	r2, #15
 80019be:	402a      	ands	r2, r5
 80019c0:	2a04      	cmp	r2, #4
 80019c2:	d005      	beq.n	80019d0 <__aeabi_dmul+0x32c>
 80019c4:	1d2a      	adds	r2, r5, #4
 80019c6:	42aa      	cmp	r2, r5
 80019c8:	41ad      	sbcs	r5, r5
 80019ca:	426d      	negs	r5, r5
 80019cc:	1964      	adds	r4, r4, r5
 80019ce:	0015      	movs	r5, r2
 80019d0:	01e3      	lsls	r3, r4, #7
 80019d2:	d504      	bpl.n	80019de <__aeabi_dmul+0x33a>
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <__aeabi_dmul+0x3ac>)
 80019d8:	00c9      	lsls	r1, r1, #3
 80019da:	4014      	ands	r4, r2
 80019dc:	4461      	add	r1, ip
 80019de:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <__aeabi_dmul+0x3b0>)
 80019e0:	4291      	cmp	r1, r2
 80019e2:	dd00      	ble.n	80019e6 <__aeabi_dmul+0x342>
 80019e4:	e724      	b.n	8001830 <__aeabi_dmul+0x18c>
 80019e6:	0762      	lsls	r2, r4, #29
 80019e8:	08ed      	lsrs	r5, r5, #3
 80019ea:	0264      	lsls	r4, r4, #9
 80019ec:	0549      	lsls	r1, r1, #21
 80019ee:	4315      	orrs	r5, r2
 80019f0:	0b24      	lsrs	r4, r4, #12
 80019f2:	0d4a      	lsrs	r2, r1, #21
 80019f4:	e6c6      	b.n	8001784 <__aeabi_dmul+0xe0>
 80019f6:	9701      	str	r7, [sp, #4]
 80019f8:	e6b8      	b.n	800176c <__aeabi_dmul+0xc8>
 80019fa:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <__aeabi_dmul+0x398>)
 80019fc:	2003      	movs	r0, #3
 80019fe:	4694      	mov	ip, r2
 8001a00:	4463      	add	r3, ip
 8001a02:	464a      	mov	r2, r9
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	2303      	movs	r3, #3
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	4691      	mov	r9, r2
 8001a0c:	4652      	mov	r2, sl
 8001a0e:	e68a      	b.n	8001726 <__aeabi_dmul+0x82>
 8001a10:	4649      	mov	r1, r9
 8001a12:	2301      	movs	r3, #1
 8001a14:	4319      	orrs	r1, r3
 8001a16:	4689      	mov	r9, r1
 8001a18:	2600      	movs	r6, #0
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	e683      	b.n	8001726 <__aeabi_dmul+0x82>
 8001a1e:	220c      	movs	r2, #12
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2303      	movs	r3, #3
 8001a24:	0005      	movs	r5, r0
 8001a26:	4691      	mov	r9, r2
 8001a28:	469b      	mov	fp, r3
 8001a2a:	e65e      	b.n	80016ea <__aeabi_dmul+0x46>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	4699      	mov	r9, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	2400      	movs	r4, #0
 8001a38:	469b      	mov	fp, r3
 8001a3a:	e656      	b.n	80016ea <__aeabi_dmul+0x46>
 8001a3c:	000007ff 	.word	0x000007ff
 8001a40:	fffffc01 	.word	0xfffffc01
 8001a44:	0800e5ec 	.word	0x0800e5ec
 8001a48:	fffffc0d 	.word	0xfffffc0d
 8001a4c:	000003ff 	.word	0x000003ff
 8001a50:	feffffff 	.word	0xfeffffff
 8001a54:	000007fe 	.word	0x000007fe
 8001a58:	2300      	movs	r3, #0
 8001a5a:	2480      	movs	r4, #128	; 0x80
 8001a5c:	2500      	movs	r5, #0
 8001a5e:	4a44      	ldr	r2, [pc, #272]	; (8001b70 <__aeabi_dmul+0x4cc>)
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	0324      	lsls	r4, r4, #12
 8001a64:	e68e      	b.n	8001784 <__aeabi_dmul+0xe0>
 8001a66:	2001      	movs	r0, #1
 8001a68:	1a40      	subs	r0, r0, r1
 8001a6a:	2838      	cmp	r0, #56	; 0x38
 8001a6c:	dd00      	ble.n	8001a70 <__aeabi_dmul+0x3cc>
 8001a6e:	e686      	b.n	800177e <__aeabi_dmul+0xda>
 8001a70:	281f      	cmp	r0, #31
 8001a72:	dd5b      	ble.n	8001b2c <__aeabi_dmul+0x488>
 8001a74:	221f      	movs	r2, #31
 8001a76:	0023      	movs	r3, r4
 8001a78:	4252      	negs	r2, r2
 8001a7a:	1a51      	subs	r1, r2, r1
 8001a7c:	40cb      	lsrs	r3, r1
 8001a7e:	0019      	movs	r1, r3
 8001a80:	2820      	cmp	r0, #32
 8001a82:	d003      	beq.n	8001a8c <__aeabi_dmul+0x3e8>
 8001a84:	4a3b      	ldr	r2, [pc, #236]	; (8001b74 <__aeabi_dmul+0x4d0>)
 8001a86:	4462      	add	r2, ip
 8001a88:	4094      	lsls	r4, r2
 8001a8a:	4325      	orrs	r5, r4
 8001a8c:	1e6a      	subs	r2, r5, #1
 8001a8e:	4195      	sbcs	r5, r2
 8001a90:	002a      	movs	r2, r5
 8001a92:	430a      	orrs	r2, r1
 8001a94:	2107      	movs	r1, #7
 8001a96:	000d      	movs	r5, r1
 8001a98:	2400      	movs	r4, #0
 8001a9a:	4015      	ands	r5, r2
 8001a9c:	4211      	tst	r1, r2
 8001a9e:	d05b      	beq.n	8001b58 <__aeabi_dmul+0x4b4>
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	2400      	movs	r4, #0
 8001aa4:	4011      	ands	r1, r2
 8001aa6:	2904      	cmp	r1, #4
 8001aa8:	d053      	beq.n	8001b52 <__aeabi_dmul+0x4ae>
 8001aaa:	1d11      	adds	r1, r2, #4
 8001aac:	4291      	cmp	r1, r2
 8001aae:	4192      	sbcs	r2, r2
 8001ab0:	4252      	negs	r2, r2
 8001ab2:	18a4      	adds	r4, r4, r2
 8001ab4:	000a      	movs	r2, r1
 8001ab6:	0223      	lsls	r3, r4, #8
 8001ab8:	d54b      	bpl.n	8001b52 <__aeabi_dmul+0x4ae>
 8001aba:	2201      	movs	r2, #1
 8001abc:	2400      	movs	r4, #0
 8001abe:	2500      	movs	r5, #0
 8001ac0:	e660      	b.n	8001784 <__aeabi_dmul+0xe0>
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	031b      	lsls	r3, r3, #12
 8001ac6:	421c      	tst	r4, r3
 8001ac8:	d009      	beq.n	8001ade <__aeabi_dmul+0x43a>
 8001aca:	421e      	tst	r6, r3
 8001acc:	d107      	bne.n	8001ade <__aeabi_dmul+0x43a>
 8001ace:	4333      	orrs	r3, r6
 8001ad0:	031c      	lsls	r4, r3, #12
 8001ad2:	4643      	mov	r3, r8
 8001ad4:	0015      	movs	r5, r2
 8001ad6:	0b24      	lsrs	r4, r4, #12
 8001ad8:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <__aeabi_dmul+0x4cc>)
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	e652      	b.n	8001784 <__aeabi_dmul+0xe0>
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	0312      	lsls	r2, r2, #12
 8001ae2:	4314      	orrs	r4, r2
 8001ae4:	0324      	lsls	r4, r4, #12
 8001ae6:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <__aeabi_dmul+0x4cc>)
 8001ae8:	0b24      	lsrs	r4, r4, #12
 8001aea:	9701      	str	r7, [sp, #4]
 8001aec:	e64a      	b.n	8001784 <__aeabi_dmul+0xe0>
 8001aee:	f000 fc81 	bl	80023f4 <__clzsi2>
 8001af2:	0003      	movs	r3, r0
 8001af4:	001a      	movs	r2, r3
 8001af6:	3215      	adds	r2, #21
 8001af8:	3020      	adds	r0, #32
 8001afa:	2a1c      	cmp	r2, #28
 8001afc:	dc00      	bgt.n	8001b00 <__aeabi_dmul+0x45c>
 8001afe:	e684      	b.n	800180a <__aeabi_dmul+0x166>
 8001b00:	4656      	mov	r6, sl
 8001b02:	3b08      	subs	r3, #8
 8001b04:	2200      	movs	r2, #0
 8001b06:	409e      	lsls	r6, r3
 8001b08:	e689      	b.n	800181e <__aeabi_dmul+0x17a>
 8001b0a:	f000 fc73 	bl	80023f4 <__clzsi2>
 8001b0e:	0001      	movs	r1, r0
 8001b10:	0002      	movs	r2, r0
 8001b12:	3115      	adds	r1, #21
 8001b14:	3220      	adds	r2, #32
 8001b16:	291c      	cmp	r1, #28
 8001b18:	dc00      	bgt.n	8001b1c <__aeabi_dmul+0x478>
 8001b1a:	e64e      	b.n	80017ba <__aeabi_dmul+0x116>
 8001b1c:	0034      	movs	r4, r6
 8001b1e:	3808      	subs	r0, #8
 8001b20:	2500      	movs	r5, #0
 8001b22:	4084      	lsls	r4, r0
 8001b24:	e653      	b.n	80017ce <__aeabi_dmul+0x12a>
 8001b26:	9b00      	ldr	r3, [sp, #0]
 8001b28:	469c      	mov	ip, r3
 8001b2a:	e741      	b.n	80019b0 <__aeabi_dmul+0x30c>
 8001b2c:	4912      	ldr	r1, [pc, #72]	; (8001b78 <__aeabi_dmul+0x4d4>)
 8001b2e:	0022      	movs	r2, r4
 8001b30:	4461      	add	r1, ip
 8001b32:	002e      	movs	r6, r5
 8001b34:	408d      	lsls	r5, r1
 8001b36:	408a      	lsls	r2, r1
 8001b38:	40c6      	lsrs	r6, r0
 8001b3a:	1e69      	subs	r1, r5, #1
 8001b3c:	418d      	sbcs	r5, r1
 8001b3e:	4332      	orrs	r2, r6
 8001b40:	432a      	orrs	r2, r5
 8001b42:	40c4      	lsrs	r4, r0
 8001b44:	0753      	lsls	r3, r2, #29
 8001b46:	d0b6      	beq.n	8001ab6 <__aeabi_dmul+0x412>
 8001b48:	210f      	movs	r1, #15
 8001b4a:	4011      	ands	r1, r2
 8001b4c:	2904      	cmp	r1, #4
 8001b4e:	d1ac      	bne.n	8001aaa <__aeabi_dmul+0x406>
 8001b50:	e7b1      	b.n	8001ab6 <__aeabi_dmul+0x412>
 8001b52:	0765      	lsls	r5, r4, #29
 8001b54:	0264      	lsls	r4, r4, #9
 8001b56:	0b24      	lsrs	r4, r4, #12
 8001b58:	08d2      	lsrs	r2, r2, #3
 8001b5a:	4315      	orrs	r5, r2
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	e611      	b.n	8001784 <__aeabi_dmul+0xe0>
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	0312      	lsls	r2, r2, #12
 8001b64:	4314      	orrs	r4, r2
 8001b66:	0324      	lsls	r4, r4, #12
 8001b68:	4a01      	ldr	r2, [pc, #4]	; (8001b70 <__aeabi_dmul+0x4cc>)
 8001b6a:	0b24      	lsrs	r4, r4, #12
 8001b6c:	e60a      	b.n	8001784 <__aeabi_dmul+0xe0>
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	000007ff 	.word	0x000007ff
 8001b74:	0000043e 	.word	0x0000043e
 8001b78:	0000041e 	.word	0x0000041e

08001b7c <__aeabi_dsub>:
 8001b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7e:	4657      	mov	r7, sl
 8001b80:	464e      	mov	r6, r9
 8001b82:	4645      	mov	r5, r8
 8001b84:	46de      	mov	lr, fp
 8001b86:	0004      	movs	r4, r0
 8001b88:	b5e0      	push	{r5, r6, r7, lr}
 8001b8a:	001f      	movs	r7, r3
 8001b8c:	0010      	movs	r0, r2
 8001b8e:	030b      	lsls	r3, r1, #12
 8001b90:	0f62      	lsrs	r2, r4, #29
 8001b92:	004e      	lsls	r6, r1, #1
 8001b94:	0fcd      	lsrs	r5, r1, #31
 8001b96:	0a5b      	lsrs	r3, r3, #9
 8001b98:	0339      	lsls	r1, r7, #12
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	0a49      	lsrs	r1, r1, #9
 8001b9e:	00e2      	lsls	r2, r4, #3
 8001ba0:	0f44      	lsrs	r4, r0, #29
 8001ba2:	4321      	orrs	r1, r4
 8001ba4:	4cc2      	ldr	r4, [pc, #776]	; (8001eb0 <__aeabi_dsub+0x334>)
 8001ba6:	4691      	mov	r9, r2
 8001ba8:	4692      	mov	sl, r2
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	007a      	lsls	r2, r7, #1
 8001bae:	4680      	mov	r8, r0
 8001bb0:	0d76      	lsrs	r6, r6, #21
 8001bb2:	0d52      	lsrs	r2, r2, #21
 8001bb4:	0fff      	lsrs	r7, r7, #31
 8001bb6:	42a2      	cmp	r2, r4
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dsub+0x40>
 8001bba:	e0b4      	b.n	8001d26 <__aeabi_dsub+0x1aa>
 8001bbc:	2401      	movs	r4, #1
 8001bbe:	4067      	eors	r7, r4
 8001bc0:	46bb      	mov	fp, r7
 8001bc2:	42bd      	cmp	r5, r7
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x4c>
 8001bc6:	e088      	b.n	8001cda <__aeabi_dsub+0x15e>
 8001bc8:	1ab4      	subs	r4, r6, r2
 8001bca:	46a4      	mov	ip, r4
 8001bcc:	2c00      	cmp	r4, #0
 8001bce:	dc00      	bgt.n	8001bd2 <__aeabi_dsub+0x56>
 8001bd0:	e0b2      	b.n	8001d38 <__aeabi_dsub+0x1bc>
 8001bd2:	2a00      	cmp	r2, #0
 8001bd4:	d100      	bne.n	8001bd8 <__aeabi_dsub+0x5c>
 8001bd6:	e0c5      	b.n	8001d64 <__aeabi_dsub+0x1e8>
 8001bd8:	4ab5      	ldr	r2, [pc, #724]	; (8001eb0 <__aeabi_dsub+0x334>)
 8001bda:	4296      	cmp	r6, r2
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x64>
 8001bde:	e28b      	b.n	80020f8 <__aeabi_dsub+0x57c>
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	0412      	lsls	r2, r2, #16
 8001be4:	4311      	orrs	r1, r2
 8001be6:	4662      	mov	r2, ip
 8001be8:	2a38      	cmp	r2, #56	; 0x38
 8001bea:	dd00      	ble.n	8001bee <__aeabi_dsub+0x72>
 8001bec:	e1a1      	b.n	8001f32 <__aeabi_dsub+0x3b6>
 8001bee:	2a1f      	cmp	r2, #31
 8001bf0:	dd00      	ble.n	8001bf4 <__aeabi_dsub+0x78>
 8001bf2:	e216      	b.n	8002022 <__aeabi_dsub+0x4a6>
 8001bf4:	2720      	movs	r7, #32
 8001bf6:	000c      	movs	r4, r1
 8001bf8:	1abf      	subs	r7, r7, r2
 8001bfa:	40bc      	lsls	r4, r7
 8001bfc:	0002      	movs	r2, r0
 8001bfe:	46a0      	mov	r8, r4
 8001c00:	4664      	mov	r4, ip
 8001c02:	40b8      	lsls	r0, r7
 8001c04:	40e2      	lsrs	r2, r4
 8001c06:	4644      	mov	r4, r8
 8001c08:	4314      	orrs	r4, r2
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	1e50      	subs	r0, r2, #1
 8001c0e:	4182      	sbcs	r2, r0
 8001c10:	4660      	mov	r0, ip
 8001c12:	40c1      	lsrs	r1, r0
 8001c14:	4322      	orrs	r2, r4
 8001c16:	1a5b      	subs	r3, r3, r1
 8001c18:	4649      	mov	r1, r9
 8001c1a:	1a8c      	subs	r4, r1, r2
 8001c1c:	45a1      	cmp	r9, r4
 8001c1e:	4192      	sbcs	r2, r2
 8001c20:	4252      	negs	r2, r2
 8001c22:	1a9b      	subs	r3, r3, r2
 8001c24:	4698      	mov	r8, r3
 8001c26:	4643      	mov	r3, r8
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	d400      	bmi.n	8001c2e <__aeabi_dsub+0xb2>
 8001c2c:	e117      	b.n	8001e5e <__aeabi_dsub+0x2e2>
 8001c2e:	4643      	mov	r3, r8
 8001c30:	025b      	lsls	r3, r3, #9
 8001c32:	0a5b      	lsrs	r3, r3, #9
 8001c34:	4698      	mov	r8, r3
 8001c36:	4643      	mov	r3, r8
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d100      	bne.n	8001c3e <__aeabi_dsub+0xc2>
 8001c3c:	e16c      	b.n	8001f18 <__aeabi_dsub+0x39c>
 8001c3e:	4640      	mov	r0, r8
 8001c40:	f000 fbd8 	bl	80023f4 <__clzsi2>
 8001c44:	0002      	movs	r2, r0
 8001c46:	3a08      	subs	r2, #8
 8001c48:	2120      	movs	r1, #32
 8001c4a:	0020      	movs	r0, r4
 8001c4c:	4643      	mov	r3, r8
 8001c4e:	1a89      	subs	r1, r1, r2
 8001c50:	4093      	lsls	r3, r2
 8001c52:	40c8      	lsrs	r0, r1
 8001c54:	4094      	lsls	r4, r2
 8001c56:	4303      	orrs	r3, r0
 8001c58:	4296      	cmp	r6, r2
 8001c5a:	dd00      	ble.n	8001c5e <__aeabi_dsub+0xe2>
 8001c5c:	e157      	b.n	8001f0e <__aeabi_dsub+0x392>
 8001c5e:	1b96      	subs	r6, r2, r6
 8001c60:	1c71      	adds	r1, r6, #1
 8001c62:	291f      	cmp	r1, #31
 8001c64:	dd00      	ble.n	8001c68 <__aeabi_dsub+0xec>
 8001c66:	e1cb      	b.n	8002000 <__aeabi_dsub+0x484>
 8001c68:	2220      	movs	r2, #32
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	0026      	movs	r6, r4
 8001c6e:	1a52      	subs	r2, r2, r1
 8001c70:	4094      	lsls	r4, r2
 8001c72:	4090      	lsls	r0, r2
 8001c74:	40ce      	lsrs	r6, r1
 8001c76:	40cb      	lsrs	r3, r1
 8001c78:	1e62      	subs	r2, r4, #1
 8001c7a:	4194      	sbcs	r4, r2
 8001c7c:	4330      	orrs	r0, r6
 8001c7e:	4698      	mov	r8, r3
 8001c80:	2600      	movs	r6, #0
 8001c82:	4304      	orrs	r4, r0
 8001c84:	0763      	lsls	r3, r4, #29
 8001c86:	d009      	beq.n	8001c9c <__aeabi_dsub+0x120>
 8001c88:	230f      	movs	r3, #15
 8001c8a:	4023      	ands	r3, r4
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d005      	beq.n	8001c9c <__aeabi_dsub+0x120>
 8001c90:	1d23      	adds	r3, r4, #4
 8001c92:	42a3      	cmp	r3, r4
 8001c94:	41a4      	sbcs	r4, r4
 8001c96:	4264      	negs	r4, r4
 8001c98:	44a0      	add	r8, r4
 8001c9a:	001c      	movs	r4, r3
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	d400      	bmi.n	8001ca4 <__aeabi_dsub+0x128>
 8001ca2:	e0df      	b.n	8001e64 <__aeabi_dsub+0x2e8>
 8001ca4:	4b82      	ldr	r3, [pc, #520]	; (8001eb0 <__aeabi_dsub+0x334>)
 8001ca6:	3601      	adds	r6, #1
 8001ca8:	429e      	cmp	r6, r3
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x132>
 8001cac:	e0fb      	b.n	8001ea6 <__aeabi_dsub+0x32a>
 8001cae:	4642      	mov	r2, r8
 8001cb0:	4b80      	ldr	r3, [pc, #512]	; (8001eb4 <__aeabi_dsub+0x338>)
 8001cb2:	08e4      	lsrs	r4, r4, #3
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	0013      	movs	r3, r2
 8001cb8:	0571      	lsls	r1, r6, #21
 8001cba:	0752      	lsls	r2, r2, #29
 8001cbc:	025b      	lsls	r3, r3, #9
 8001cbe:	4322      	orrs	r2, r4
 8001cc0:	0b1b      	lsrs	r3, r3, #12
 8001cc2:	0d49      	lsrs	r1, r1, #21
 8001cc4:	0509      	lsls	r1, r1, #20
 8001cc6:	07ed      	lsls	r5, r5, #31
 8001cc8:	4319      	orrs	r1, r3
 8001cca:	4329      	orrs	r1, r5
 8001ccc:	0010      	movs	r0, r2
 8001cce:	bcf0      	pop	{r4, r5, r6, r7}
 8001cd0:	46bb      	mov	fp, r7
 8001cd2:	46b2      	mov	sl, r6
 8001cd4:	46a9      	mov	r9, r5
 8001cd6:	46a0      	mov	r8, r4
 8001cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cda:	1ab4      	subs	r4, r6, r2
 8001cdc:	46a4      	mov	ip, r4
 8001cde:	2c00      	cmp	r4, #0
 8001ce0:	dd58      	ble.n	8001d94 <__aeabi_dsub+0x218>
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_dsub+0x16c>
 8001ce6:	e09e      	b.n	8001e26 <__aeabi_dsub+0x2aa>
 8001ce8:	4a71      	ldr	r2, [pc, #452]	; (8001eb0 <__aeabi_dsub+0x334>)
 8001cea:	4296      	cmp	r6, r2
 8001cec:	d100      	bne.n	8001cf0 <__aeabi_dsub+0x174>
 8001cee:	e13b      	b.n	8001f68 <__aeabi_dsub+0x3ec>
 8001cf0:	2280      	movs	r2, #128	; 0x80
 8001cf2:	0412      	lsls	r2, r2, #16
 8001cf4:	4311      	orrs	r1, r2
 8001cf6:	4662      	mov	r2, ip
 8001cf8:	2a38      	cmp	r2, #56	; 0x38
 8001cfa:	dd00      	ble.n	8001cfe <__aeabi_dsub+0x182>
 8001cfc:	e0c1      	b.n	8001e82 <__aeabi_dsub+0x306>
 8001cfe:	2a1f      	cmp	r2, #31
 8001d00:	dc00      	bgt.n	8001d04 <__aeabi_dsub+0x188>
 8001d02:	e1bb      	b.n	800207c <__aeabi_dsub+0x500>
 8001d04:	000c      	movs	r4, r1
 8001d06:	3a20      	subs	r2, #32
 8001d08:	40d4      	lsrs	r4, r2
 8001d0a:	0022      	movs	r2, r4
 8001d0c:	4664      	mov	r4, ip
 8001d0e:	2c20      	cmp	r4, #32
 8001d10:	d004      	beq.n	8001d1c <__aeabi_dsub+0x1a0>
 8001d12:	2740      	movs	r7, #64	; 0x40
 8001d14:	1b3f      	subs	r7, r7, r4
 8001d16:	40b9      	lsls	r1, r7
 8001d18:	4308      	orrs	r0, r1
 8001d1a:	4680      	mov	r8, r0
 8001d1c:	4644      	mov	r4, r8
 8001d1e:	1e61      	subs	r1, r4, #1
 8001d20:	418c      	sbcs	r4, r1
 8001d22:	4314      	orrs	r4, r2
 8001d24:	e0b1      	b.n	8001e8a <__aeabi_dsub+0x30e>
 8001d26:	000c      	movs	r4, r1
 8001d28:	4304      	orrs	r4, r0
 8001d2a:	d02a      	beq.n	8001d82 <__aeabi_dsub+0x206>
 8001d2c:	46bb      	mov	fp, r7
 8001d2e:	42bd      	cmp	r5, r7
 8001d30:	d02d      	beq.n	8001d8e <__aeabi_dsub+0x212>
 8001d32:	4c61      	ldr	r4, [pc, #388]	; (8001eb8 <__aeabi_dsub+0x33c>)
 8001d34:	46a4      	mov	ip, r4
 8001d36:	44b4      	add	ip, r6
 8001d38:	4664      	mov	r4, ip
 8001d3a:	2c00      	cmp	r4, #0
 8001d3c:	d05c      	beq.n	8001df8 <__aeabi_dsub+0x27c>
 8001d3e:	1b94      	subs	r4, r2, r6
 8001d40:	46a4      	mov	ip, r4
 8001d42:	2e00      	cmp	r6, #0
 8001d44:	d000      	beq.n	8001d48 <__aeabi_dsub+0x1cc>
 8001d46:	e115      	b.n	8001f74 <__aeabi_dsub+0x3f8>
 8001d48:	464d      	mov	r5, r9
 8001d4a:	431d      	orrs	r5, r3
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x1d4>
 8001d4e:	e1c3      	b.n	80020d8 <__aeabi_dsub+0x55c>
 8001d50:	1e65      	subs	r5, r4, #1
 8001d52:	2c01      	cmp	r4, #1
 8001d54:	d100      	bne.n	8001d58 <__aeabi_dsub+0x1dc>
 8001d56:	e20c      	b.n	8002172 <__aeabi_dsub+0x5f6>
 8001d58:	4e55      	ldr	r6, [pc, #340]	; (8001eb0 <__aeabi_dsub+0x334>)
 8001d5a:	42b4      	cmp	r4, r6
 8001d5c:	d100      	bne.n	8001d60 <__aeabi_dsub+0x1e4>
 8001d5e:	e1f8      	b.n	8002152 <__aeabi_dsub+0x5d6>
 8001d60:	46ac      	mov	ip, r5
 8001d62:	e10e      	b.n	8001f82 <__aeabi_dsub+0x406>
 8001d64:	000a      	movs	r2, r1
 8001d66:	4302      	orrs	r2, r0
 8001d68:	d100      	bne.n	8001d6c <__aeabi_dsub+0x1f0>
 8001d6a:	e136      	b.n	8001fda <__aeabi_dsub+0x45e>
 8001d6c:	0022      	movs	r2, r4
 8001d6e:	3a01      	subs	r2, #1
 8001d70:	2c01      	cmp	r4, #1
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x1fa>
 8001d74:	e1c6      	b.n	8002104 <__aeabi_dsub+0x588>
 8001d76:	4c4e      	ldr	r4, [pc, #312]	; (8001eb0 <__aeabi_dsub+0x334>)
 8001d78:	45a4      	cmp	ip, r4
 8001d7a:	d100      	bne.n	8001d7e <__aeabi_dsub+0x202>
 8001d7c:	e0f4      	b.n	8001f68 <__aeabi_dsub+0x3ec>
 8001d7e:	4694      	mov	ip, r2
 8001d80:	e731      	b.n	8001be6 <__aeabi_dsub+0x6a>
 8001d82:	2401      	movs	r4, #1
 8001d84:	4067      	eors	r7, r4
 8001d86:	46bb      	mov	fp, r7
 8001d88:	42bd      	cmp	r5, r7
 8001d8a:	d000      	beq.n	8001d8e <__aeabi_dsub+0x212>
 8001d8c:	e71c      	b.n	8001bc8 <__aeabi_dsub+0x4c>
 8001d8e:	4c4a      	ldr	r4, [pc, #296]	; (8001eb8 <__aeabi_dsub+0x33c>)
 8001d90:	46a4      	mov	ip, r4
 8001d92:	44b4      	add	ip, r6
 8001d94:	4664      	mov	r4, ip
 8001d96:	2c00      	cmp	r4, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dsub+0x220>
 8001d9a:	e0cf      	b.n	8001f3c <__aeabi_dsub+0x3c0>
 8001d9c:	1b94      	subs	r4, r2, r6
 8001d9e:	46a4      	mov	ip, r4
 8001da0:	2e00      	cmp	r6, #0
 8001da2:	d100      	bne.n	8001da6 <__aeabi_dsub+0x22a>
 8001da4:	e15c      	b.n	8002060 <__aeabi_dsub+0x4e4>
 8001da6:	4e42      	ldr	r6, [pc, #264]	; (8001eb0 <__aeabi_dsub+0x334>)
 8001da8:	42b2      	cmp	r2, r6
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0x232>
 8001dac:	e1ec      	b.n	8002188 <__aeabi_dsub+0x60c>
 8001dae:	2680      	movs	r6, #128	; 0x80
 8001db0:	0436      	lsls	r6, r6, #16
 8001db2:	4333      	orrs	r3, r6
 8001db4:	4664      	mov	r4, ip
 8001db6:	2c38      	cmp	r4, #56	; 0x38
 8001db8:	dd00      	ble.n	8001dbc <__aeabi_dsub+0x240>
 8001dba:	e1b3      	b.n	8002124 <__aeabi_dsub+0x5a8>
 8001dbc:	2c1f      	cmp	r4, #31
 8001dbe:	dd00      	ble.n	8001dc2 <__aeabi_dsub+0x246>
 8001dc0:	e238      	b.n	8002234 <__aeabi_dsub+0x6b8>
 8001dc2:	2620      	movs	r6, #32
 8001dc4:	1b36      	subs	r6, r6, r4
 8001dc6:	001c      	movs	r4, r3
 8001dc8:	40b4      	lsls	r4, r6
 8001dca:	464f      	mov	r7, r9
 8001dcc:	46a0      	mov	r8, r4
 8001dce:	4664      	mov	r4, ip
 8001dd0:	40e7      	lsrs	r7, r4
 8001dd2:	4644      	mov	r4, r8
 8001dd4:	433c      	orrs	r4, r7
 8001dd6:	464f      	mov	r7, r9
 8001dd8:	40b7      	lsls	r7, r6
 8001dda:	003e      	movs	r6, r7
 8001ddc:	1e77      	subs	r7, r6, #1
 8001dde:	41be      	sbcs	r6, r7
 8001de0:	4334      	orrs	r4, r6
 8001de2:	4666      	mov	r6, ip
 8001de4:	40f3      	lsrs	r3, r6
 8001de6:	18c9      	adds	r1, r1, r3
 8001de8:	1824      	adds	r4, r4, r0
 8001dea:	4284      	cmp	r4, r0
 8001dec:	419b      	sbcs	r3, r3
 8001dee:	425b      	negs	r3, r3
 8001df0:	4698      	mov	r8, r3
 8001df2:	0016      	movs	r6, r2
 8001df4:	4488      	add	r8, r1
 8001df6:	e04e      	b.n	8001e96 <__aeabi_dsub+0x31a>
 8001df8:	4a30      	ldr	r2, [pc, #192]	; (8001ebc <__aeabi_dsub+0x340>)
 8001dfa:	1c74      	adds	r4, r6, #1
 8001dfc:	4214      	tst	r4, r2
 8001dfe:	d000      	beq.n	8001e02 <__aeabi_dsub+0x286>
 8001e00:	e0d6      	b.n	8001fb0 <__aeabi_dsub+0x434>
 8001e02:	464a      	mov	r2, r9
 8001e04:	431a      	orrs	r2, r3
 8001e06:	2e00      	cmp	r6, #0
 8001e08:	d000      	beq.n	8001e0c <__aeabi_dsub+0x290>
 8001e0a:	e15b      	b.n	80020c4 <__aeabi_dsub+0x548>
 8001e0c:	2a00      	cmp	r2, #0
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_dsub+0x296>
 8001e10:	e1a5      	b.n	800215e <__aeabi_dsub+0x5e2>
 8001e12:	000a      	movs	r2, r1
 8001e14:	4302      	orrs	r2, r0
 8001e16:	d000      	beq.n	8001e1a <__aeabi_dsub+0x29e>
 8001e18:	e1bb      	b.n	8002192 <__aeabi_dsub+0x616>
 8001e1a:	464a      	mov	r2, r9
 8001e1c:	0759      	lsls	r1, r3, #29
 8001e1e:	08d2      	lsrs	r2, r2, #3
 8001e20:	430a      	orrs	r2, r1
 8001e22:	08db      	lsrs	r3, r3, #3
 8001e24:	e027      	b.n	8001e76 <__aeabi_dsub+0x2fa>
 8001e26:	000a      	movs	r2, r1
 8001e28:	4302      	orrs	r2, r0
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dsub+0x2b2>
 8001e2c:	e174      	b.n	8002118 <__aeabi_dsub+0x59c>
 8001e2e:	0022      	movs	r2, r4
 8001e30:	3a01      	subs	r2, #1
 8001e32:	2c01      	cmp	r4, #1
 8001e34:	d005      	beq.n	8001e42 <__aeabi_dsub+0x2c6>
 8001e36:	4c1e      	ldr	r4, [pc, #120]	; (8001eb0 <__aeabi_dsub+0x334>)
 8001e38:	45a4      	cmp	ip, r4
 8001e3a:	d100      	bne.n	8001e3e <__aeabi_dsub+0x2c2>
 8001e3c:	e094      	b.n	8001f68 <__aeabi_dsub+0x3ec>
 8001e3e:	4694      	mov	ip, r2
 8001e40:	e759      	b.n	8001cf6 <__aeabi_dsub+0x17a>
 8001e42:	4448      	add	r0, r9
 8001e44:	4548      	cmp	r0, r9
 8001e46:	4192      	sbcs	r2, r2
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4698      	mov	r8, r3
 8001e4c:	0004      	movs	r4, r0
 8001e4e:	4252      	negs	r2, r2
 8001e50:	4490      	add	r8, r2
 8001e52:	4643      	mov	r3, r8
 8001e54:	2602      	movs	r6, #2
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	d500      	bpl.n	8001e5c <__aeabi_dsub+0x2e0>
 8001e5a:	e0c4      	b.n	8001fe6 <__aeabi_dsub+0x46a>
 8001e5c:	3e01      	subs	r6, #1
 8001e5e:	0763      	lsls	r3, r4, #29
 8001e60:	d000      	beq.n	8001e64 <__aeabi_dsub+0x2e8>
 8001e62:	e711      	b.n	8001c88 <__aeabi_dsub+0x10c>
 8001e64:	4643      	mov	r3, r8
 8001e66:	46b4      	mov	ip, r6
 8001e68:	0759      	lsls	r1, r3, #29
 8001e6a:	08e2      	lsrs	r2, r4, #3
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	08db      	lsrs	r3, r3, #3
 8001e70:	490f      	ldr	r1, [pc, #60]	; (8001eb0 <__aeabi_dsub+0x334>)
 8001e72:	458c      	cmp	ip, r1
 8001e74:	d040      	beq.n	8001ef8 <__aeabi_dsub+0x37c>
 8001e76:	4661      	mov	r1, ip
 8001e78:	031b      	lsls	r3, r3, #12
 8001e7a:	0549      	lsls	r1, r1, #21
 8001e7c:	0b1b      	lsrs	r3, r3, #12
 8001e7e:	0d49      	lsrs	r1, r1, #21
 8001e80:	e720      	b.n	8001cc4 <__aeabi_dsub+0x148>
 8001e82:	4301      	orrs	r1, r0
 8001e84:	000c      	movs	r4, r1
 8001e86:	1e61      	subs	r1, r4, #1
 8001e88:	418c      	sbcs	r4, r1
 8001e8a:	444c      	add	r4, r9
 8001e8c:	454c      	cmp	r4, r9
 8001e8e:	4192      	sbcs	r2, r2
 8001e90:	4252      	negs	r2, r2
 8001e92:	4690      	mov	r8, r2
 8001e94:	4498      	add	r8, r3
 8001e96:	4643      	mov	r3, r8
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	d5e0      	bpl.n	8001e5e <__aeabi_dsub+0x2e2>
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <__aeabi_dsub+0x334>)
 8001e9e:	3601      	adds	r6, #1
 8001ea0:	429e      	cmp	r6, r3
 8001ea2:	d000      	beq.n	8001ea6 <__aeabi_dsub+0x32a>
 8001ea4:	e09f      	b.n	8001fe6 <__aeabi_dsub+0x46a>
 8001ea6:	0031      	movs	r1, r6
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	2200      	movs	r2, #0
 8001eac:	e70a      	b.n	8001cc4 <__aeabi_dsub+0x148>
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	000007ff 	.word	0x000007ff
 8001eb4:	ff7fffff 	.word	0xff7fffff
 8001eb8:	fffff801 	.word	0xfffff801
 8001ebc:	000007fe 	.word	0x000007fe
 8001ec0:	2a00      	cmp	r2, #0
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_dsub+0x34a>
 8001ec4:	e160      	b.n	8002188 <__aeabi_dsub+0x60c>
 8001ec6:	000a      	movs	r2, r1
 8001ec8:	4302      	orrs	r2, r0
 8001eca:	d04d      	beq.n	8001f68 <__aeabi_dsub+0x3ec>
 8001ecc:	464a      	mov	r2, r9
 8001ece:	075c      	lsls	r4, r3, #29
 8001ed0:	08d2      	lsrs	r2, r2, #3
 8001ed2:	4322      	orrs	r2, r4
 8001ed4:	2480      	movs	r4, #128	; 0x80
 8001ed6:	08db      	lsrs	r3, r3, #3
 8001ed8:	0324      	lsls	r4, r4, #12
 8001eda:	4223      	tst	r3, r4
 8001edc:	d007      	beq.n	8001eee <__aeabi_dsub+0x372>
 8001ede:	08ce      	lsrs	r6, r1, #3
 8001ee0:	4226      	tst	r6, r4
 8001ee2:	d104      	bne.n	8001eee <__aeabi_dsub+0x372>
 8001ee4:	465d      	mov	r5, fp
 8001ee6:	0033      	movs	r3, r6
 8001ee8:	08c2      	lsrs	r2, r0, #3
 8001eea:	0749      	lsls	r1, r1, #29
 8001eec:	430a      	orrs	r2, r1
 8001eee:	0f51      	lsrs	r1, r2, #29
 8001ef0:	00d2      	lsls	r2, r2, #3
 8001ef2:	08d2      	lsrs	r2, r2, #3
 8001ef4:	0749      	lsls	r1, r1, #29
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	0011      	movs	r1, r2
 8001efa:	4319      	orrs	r1, r3
 8001efc:	d100      	bne.n	8001f00 <__aeabi_dsub+0x384>
 8001efe:	e1c8      	b.n	8002292 <__aeabi_dsub+0x716>
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	0309      	lsls	r1, r1, #12
 8001f04:	430b      	orrs	r3, r1
 8001f06:	031b      	lsls	r3, r3, #12
 8001f08:	49d5      	ldr	r1, [pc, #852]	; (8002260 <__aeabi_dsub+0x6e4>)
 8001f0a:	0b1b      	lsrs	r3, r3, #12
 8001f0c:	e6da      	b.n	8001cc4 <__aeabi_dsub+0x148>
 8001f0e:	49d5      	ldr	r1, [pc, #852]	; (8002264 <__aeabi_dsub+0x6e8>)
 8001f10:	1ab6      	subs	r6, r6, r2
 8001f12:	400b      	ands	r3, r1
 8001f14:	4698      	mov	r8, r3
 8001f16:	e6b5      	b.n	8001c84 <__aeabi_dsub+0x108>
 8001f18:	0020      	movs	r0, r4
 8001f1a:	f000 fa6b 	bl	80023f4 <__clzsi2>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	3218      	adds	r2, #24
 8001f22:	2a1f      	cmp	r2, #31
 8001f24:	dc00      	bgt.n	8001f28 <__aeabi_dsub+0x3ac>
 8001f26:	e68f      	b.n	8001c48 <__aeabi_dsub+0xcc>
 8001f28:	0023      	movs	r3, r4
 8001f2a:	3808      	subs	r0, #8
 8001f2c:	4083      	lsls	r3, r0
 8001f2e:	2400      	movs	r4, #0
 8001f30:	e692      	b.n	8001c58 <__aeabi_dsub+0xdc>
 8001f32:	4308      	orrs	r0, r1
 8001f34:	0002      	movs	r2, r0
 8001f36:	1e50      	subs	r0, r2, #1
 8001f38:	4182      	sbcs	r2, r0
 8001f3a:	e66d      	b.n	8001c18 <__aeabi_dsub+0x9c>
 8001f3c:	4cca      	ldr	r4, [pc, #808]	; (8002268 <__aeabi_dsub+0x6ec>)
 8001f3e:	1c72      	adds	r2, r6, #1
 8001f40:	4222      	tst	r2, r4
 8001f42:	d000      	beq.n	8001f46 <__aeabi_dsub+0x3ca>
 8001f44:	e0ad      	b.n	80020a2 <__aeabi_dsub+0x526>
 8001f46:	464a      	mov	r2, r9
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	2e00      	cmp	r6, #0
 8001f4c:	d1b8      	bne.n	8001ec0 <__aeabi_dsub+0x344>
 8001f4e:	2a00      	cmp	r2, #0
 8001f50:	d100      	bne.n	8001f54 <__aeabi_dsub+0x3d8>
 8001f52:	e158      	b.n	8002206 <__aeabi_dsub+0x68a>
 8001f54:	000a      	movs	r2, r1
 8001f56:	4302      	orrs	r2, r0
 8001f58:	d000      	beq.n	8001f5c <__aeabi_dsub+0x3e0>
 8001f5a:	e159      	b.n	8002210 <__aeabi_dsub+0x694>
 8001f5c:	464a      	mov	r2, r9
 8001f5e:	0759      	lsls	r1, r3, #29
 8001f60:	08d2      	lsrs	r2, r2, #3
 8001f62:	430a      	orrs	r2, r1
 8001f64:	08db      	lsrs	r3, r3, #3
 8001f66:	e786      	b.n	8001e76 <__aeabi_dsub+0x2fa>
 8001f68:	464a      	mov	r2, r9
 8001f6a:	0759      	lsls	r1, r3, #29
 8001f6c:	08d2      	lsrs	r2, r2, #3
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	08db      	lsrs	r3, r3, #3
 8001f72:	e7c1      	b.n	8001ef8 <__aeabi_dsub+0x37c>
 8001f74:	4dba      	ldr	r5, [pc, #744]	; (8002260 <__aeabi_dsub+0x6e4>)
 8001f76:	42aa      	cmp	r2, r5
 8001f78:	d100      	bne.n	8001f7c <__aeabi_dsub+0x400>
 8001f7a:	e11e      	b.n	80021ba <__aeabi_dsub+0x63e>
 8001f7c:	2580      	movs	r5, #128	; 0x80
 8001f7e:	042d      	lsls	r5, r5, #16
 8001f80:	432b      	orrs	r3, r5
 8001f82:	4664      	mov	r4, ip
 8001f84:	2c38      	cmp	r4, #56	; 0x38
 8001f86:	dc5d      	bgt.n	8002044 <__aeabi_dsub+0x4c8>
 8001f88:	2c1f      	cmp	r4, #31
 8001f8a:	dd00      	ble.n	8001f8e <__aeabi_dsub+0x412>
 8001f8c:	e0d0      	b.n	8002130 <__aeabi_dsub+0x5b4>
 8001f8e:	2520      	movs	r5, #32
 8001f90:	4667      	mov	r7, ip
 8001f92:	1b2d      	subs	r5, r5, r4
 8001f94:	464e      	mov	r6, r9
 8001f96:	001c      	movs	r4, r3
 8001f98:	40fe      	lsrs	r6, r7
 8001f9a:	40ac      	lsls	r4, r5
 8001f9c:	4334      	orrs	r4, r6
 8001f9e:	464e      	mov	r6, r9
 8001fa0:	40ae      	lsls	r6, r5
 8001fa2:	0035      	movs	r5, r6
 8001fa4:	40fb      	lsrs	r3, r7
 8001fa6:	1e6e      	subs	r6, r5, #1
 8001fa8:	41b5      	sbcs	r5, r6
 8001faa:	1ac9      	subs	r1, r1, r3
 8001fac:	432c      	orrs	r4, r5
 8001fae:	e04e      	b.n	800204e <__aeabi_dsub+0x4d2>
 8001fb0:	464a      	mov	r2, r9
 8001fb2:	1a14      	subs	r4, r2, r0
 8001fb4:	45a1      	cmp	r9, r4
 8001fb6:	4192      	sbcs	r2, r2
 8001fb8:	4252      	negs	r2, r2
 8001fba:	4690      	mov	r8, r2
 8001fbc:	1a5f      	subs	r7, r3, r1
 8001fbe:	003a      	movs	r2, r7
 8001fc0:	4647      	mov	r7, r8
 8001fc2:	1bd2      	subs	r2, r2, r7
 8001fc4:	4690      	mov	r8, r2
 8001fc6:	0212      	lsls	r2, r2, #8
 8001fc8:	d500      	bpl.n	8001fcc <__aeabi_dsub+0x450>
 8001fca:	e08b      	b.n	80020e4 <__aeabi_dsub+0x568>
 8001fcc:	4642      	mov	r2, r8
 8001fce:	4322      	orrs	r2, r4
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dsub+0x458>
 8001fd2:	e630      	b.n	8001c36 <__aeabi_dsub+0xba>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2500      	movs	r5, #0
 8001fd8:	e74d      	b.n	8001e76 <__aeabi_dsub+0x2fa>
 8001fda:	464a      	mov	r2, r9
 8001fdc:	0759      	lsls	r1, r3, #29
 8001fde:	08d2      	lsrs	r2, r2, #3
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	08db      	lsrs	r3, r3, #3
 8001fe4:	e744      	b.n	8001e70 <__aeabi_dsub+0x2f4>
 8001fe6:	4642      	mov	r2, r8
 8001fe8:	4b9e      	ldr	r3, [pc, #632]	; (8002264 <__aeabi_dsub+0x6e8>)
 8001fea:	0861      	lsrs	r1, r4, #1
 8001fec:	401a      	ands	r2, r3
 8001fee:	0013      	movs	r3, r2
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4014      	ands	r4, r2
 8001ff4:	430c      	orrs	r4, r1
 8001ff6:	07da      	lsls	r2, r3, #31
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	4698      	mov	r8, r3
 8001ffc:	4314      	orrs	r4, r2
 8001ffe:	e641      	b.n	8001c84 <__aeabi_dsub+0x108>
 8002000:	001a      	movs	r2, r3
 8002002:	3e1f      	subs	r6, #31
 8002004:	40f2      	lsrs	r2, r6
 8002006:	0016      	movs	r6, r2
 8002008:	2920      	cmp	r1, #32
 800200a:	d003      	beq.n	8002014 <__aeabi_dsub+0x498>
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	1a51      	subs	r1, r2, r1
 8002010:	408b      	lsls	r3, r1
 8002012:	431c      	orrs	r4, r3
 8002014:	1e62      	subs	r2, r4, #1
 8002016:	4194      	sbcs	r4, r2
 8002018:	2300      	movs	r3, #0
 800201a:	4334      	orrs	r4, r6
 800201c:	4698      	mov	r8, r3
 800201e:	2600      	movs	r6, #0
 8002020:	e71d      	b.n	8001e5e <__aeabi_dsub+0x2e2>
 8002022:	000c      	movs	r4, r1
 8002024:	3a20      	subs	r2, #32
 8002026:	40d4      	lsrs	r4, r2
 8002028:	0022      	movs	r2, r4
 800202a:	4664      	mov	r4, ip
 800202c:	2c20      	cmp	r4, #32
 800202e:	d004      	beq.n	800203a <__aeabi_dsub+0x4be>
 8002030:	2740      	movs	r7, #64	; 0x40
 8002032:	1b3f      	subs	r7, r7, r4
 8002034:	40b9      	lsls	r1, r7
 8002036:	4308      	orrs	r0, r1
 8002038:	4680      	mov	r8, r0
 800203a:	4644      	mov	r4, r8
 800203c:	1e61      	subs	r1, r4, #1
 800203e:	418c      	sbcs	r4, r1
 8002040:	4322      	orrs	r2, r4
 8002042:	e5e9      	b.n	8001c18 <__aeabi_dsub+0x9c>
 8002044:	464c      	mov	r4, r9
 8002046:	4323      	orrs	r3, r4
 8002048:	001c      	movs	r4, r3
 800204a:	1e63      	subs	r3, r4, #1
 800204c:	419c      	sbcs	r4, r3
 800204e:	1b04      	subs	r4, r0, r4
 8002050:	42a0      	cmp	r0, r4
 8002052:	419b      	sbcs	r3, r3
 8002054:	425b      	negs	r3, r3
 8002056:	1acb      	subs	r3, r1, r3
 8002058:	4698      	mov	r8, r3
 800205a:	465d      	mov	r5, fp
 800205c:	0016      	movs	r6, r2
 800205e:	e5e2      	b.n	8001c26 <__aeabi_dsub+0xaa>
 8002060:	464e      	mov	r6, r9
 8002062:	431e      	orrs	r6, r3
 8002064:	d100      	bne.n	8002068 <__aeabi_dsub+0x4ec>
 8002066:	e0ae      	b.n	80021c6 <__aeabi_dsub+0x64a>
 8002068:	1e66      	subs	r6, r4, #1
 800206a:	2c01      	cmp	r4, #1
 800206c:	d100      	bne.n	8002070 <__aeabi_dsub+0x4f4>
 800206e:	e0fd      	b.n	800226c <__aeabi_dsub+0x6f0>
 8002070:	4f7b      	ldr	r7, [pc, #492]	; (8002260 <__aeabi_dsub+0x6e4>)
 8002072:	42bc      	cmp	r4, r7
 8002074:	d100      	bne.n	8002078 <__aeabi_dsub+0x4fc>
 8002076:	e107      	b.n	8002288 <__aeabi_dsub+0x70c>
 8002078:	46b4      	mov	ip, r6
 800207a:	e69b      	b.n	8001db4 <__aeabi_dsub+0x238>
 800207c:	4664      	mov	r4, ip
 800207e:	2220      	movs	r2, #32
 8002080:	1b12      	subs	r2, r2, r4
 8002082:	000c      	movs	r4, r1
 8002084:	4094      	lsls	r4, r2
 8002086:	0007      	movs	r7, r0
 8002088:	4090      	lsls	r0, r2
 800208a:	46a0      	mov	r8, r4
 800208c:	4664      	mov	r4, ip
 800208e:	1e42      	subs	r2, r0, #1
 8002090:	4190      	sbcs	r0, r2
 8002092:	4662      	mov	r2, ip
 8002094:	40e7      	lsrs	r7, r4
 8002096:	4644      	mov	r4, r8
 8002098:	40d1      	lsrs	r1, r2
 800209a:	433c      	orrs	r4, r7
 800209c:	4304      	orrs	r4, r0
 800209e:	185b      	adds	r3, r3, r1
 80020a0:	e6f3      	b.n	8001e8a <__aeabi_dsub+0x30e>
 80020a2:	4c6f      	ldr	r4, [pc, #444]	; (8002260 <__aeabi_dsub+0x6e4>)
 80020a4:	42a2      	cmp	r2, r4
 80020a6:	d100      	bne.n	80020aa <__aeabi_dsub+0x52e>
 80020a8:	e0d5      	b.n	8002256 <__aeabi_dsub+0x6da>
 80020aa:	4448      	add	r0, r9
 80020ac:	185b      	adds	r3, r3, r1
 80020ae:	4548      	cmp	r0, r9
 80020b0:	4189      	sbcs	r1, r1
 80020b2:	4249      	negs	r1, r1
 80020b4:	185b      	adds	r3, r3, r1
 80020b6:	07dc      	lsls	r4, r3, #31
 80020b8:	0840      	lsrs	r0, r0, #1
 80020ba:	085b      	lsrs	r3, r3, #1
 80020bc:	4698      	mov	r8, r3
 80020be:	0016      	movs	r6, r2
 80020c0:	4304      	orrs	r4, r0
 80020c2:	e6cc      	b.n	8001e5e <__aeabi_dsub+0x2e2>
 80020c4:	2a00      	cmp	r2, #0
 80020c6:	d000      	beq.n	80020ca <__aeabi_dsub+0x54e>
 80020c8:	e082      	b.n	80021d0 <__aeabi_dsub+0x654>
 80020ca:	000a      	movs	r2, r1
 80020cc:	4302      	orrs	r2, r0
 80020ce:	d140      	bne.n	8002152 <__aeabi_dsub+0x5d6>
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	2500      	movs	r5, #0
 80020d4:	031b      	lsls	r3, r3, #12
 80020d6:	e713      	b.n	8001f00 <__aeabi_dsub+0x384>
 80020d8:	074b      	lsls	r3, r1, #29
 80020da:	08c2      	lsrs	r2, r0, #3
 80020dc:	431a      	orrs	r2, r3
 80020de:	465d      	mov	r5, fp
 80020e0:	08cb      	lsrs	r3, r1, #3
 80020e2:	e6c5      	b.n	8001e70 <__aeabi_dsub+0x2f4>
 80020e4:	464a      	mov	r2, r9
 80020e6:	1a84      	subs	r4, r0, r2
 80020e8:	42a0      	cmp	r0, r4
 80020ea:	4192      	sbcs	r2, r2
 80020ec:	1acb      	subs	r3, r1, r3
 80020ee:	4252      	negs	r2, r2
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	4698      	mov	r8, r3
 80020f4:	465d      	mov	r5, fp
 80020f6:	e59e      	b.n	8001c36 <__aeabi_dsub+0xba>
 80020f8:	464a      	mov	r2, r9
 80020fa:	0759      	lsls	r1, r3, #29
 80020fc:	08d2      	lsrs	r2, r2, #3
 80020fe:	430a      	orrs	r2, r1
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	e6f9      	b.n	8001ef8 <__aeabi_dsub+0x37c>
 8002104:	464a      	mov	r2, r9
 8002106:	1a14      	subs	r4, r2, r0
 8002108:	45a1      	cmp	r9, r4
 800210a:	4192      	sbcs	r2, r2
 800210c:	1a5b      	subs	r3, r3, r1
 800210e:	4252      	negs	r2, r2
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	4698      	mov	r8, r3
 8002114:	2601      	movs	r6, #1
 8002116:	e586      	b.n	8001c26 <__aeabi_dsub+0xaa>
 8002118:	464a      	mov	r2, r9
 800211a:	0759      	lsls	r1, r3, #29
 800211c:	08d2      	lsrs	r2, r2, #3
 800211e:	430a      	orrs	r2, r1
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	e6a5      	b.n	8001e70 <__aeabi_dsub+0x2f4>
 8002124:	464c      	mov	r4, r9
 8002126:	4323      	orrs	r3, r4
 8002128:	001c      	movs	r4, r3
 800212a:	1e63      	subs	r3, r4, #1
 800212c:	419c      	sbcs	r4, r3
 800212e:	e65b      	b.n	8001de8 <__aeabi_dsub+0x26c>
 8002130:	4665      	mov	r5, ip
 8002132:	001e      	movs	r6, r3
 8002134:	3d20      	subs	r5, #32
 8002136:	40ee      	lsrs	r6, r5
 8002138:	2c20      	cmp	r4, #32
 800213a:	d005      	beq.n	8002148 <__aeabi_dsub+0x5cc>
 800213c:	2540      	movs	r5, #64	; 0x40
 800213e:	1b2d      	subs	r5, r5, r4
 8002140:	40ab      	lsls	r3, r5
 8002142:	464c      	mov	r4, r9
 8002144:	431c      	orrs	r4, r3
 8002146:	46a2      	mov	sl, r4
 8002148:	4654      	mov	r4, sl
 800214a:	1e63      	subs	r3, r4, #1
 800214c:	419c      	sbcs	r4, r3
 800214e:	4334      	orrs	r4, r6
 8002150:	e77d      	b.n	800204e <__aeabi_dsub+0x4d2>
 8002152:	074b      	lsls	r3, r1, #29
 8002154:	08c2      	lsrs	r2, r0, #3
 8002156:	431a      	orrs	r2, r3
 8002158:	465d      	mov	r5, fp
 800215a:	08cb      	lsrs	r3, r1, #3
 800215c:	e6cc      	b.n	8001ef8 <__aeabi_dsub+0x37c>
 800215e:	000a      	movs	r2, r1
 8002160:	4302      	orrs	r2, r0
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0x5ea>
 8002164:	e736      	b.n	8001fd4 <__aeabi_dsub+0x458>
 8002166:	074b      	lsls	r3, r1, #29
 8002168:	08c2      	lsrs	r2, r0, #3
 800216a:	431a      	orrs	r2, r3
 800216c:	465d      	mov	r5, fp
 800216e:	08cb      	lsrs	r3, r1, #3
 8002170:	e681      	b.n	8001e76 <__aeabi_dsub+0x2fa>
 8002172:	464a      	mov	r2, r9
 8002174:	1a84      	subs	r4, r0, r2
 8002176:	42a0      	cmp	r0, r4
 8002178:	4192      	sbcs	r2, r2
 800217a:	1acb      	subs	r3, r1, r3
 800217c:	4252      	negs	r2, r2
 800217e:	1a9b      	subs	r3, r3, r2
 8002180:	4698      	mov	r8, r3
 8002182:	465d      	mov	r5, fp
 8002184:	2601      	movs	r6, #1
 8002186:	e54e      	b.n	8001c26 <__aeabi_dsub+0xaa>
 8002188:	074b      	lsls	r3, r1, #29
 800218a:	08c2      	lsrs	r2, r0, #3
 800218c:	431a      	orrs	r2, r3
 800218e:	08cb      	lsrs	r3, r1, #3
 8002190:	e6b2      	b.n	8001ef8 <__aeabi_dsub+0x37c>
 8002192:	464a      	mov	r2, r9
 8002194:	1a14      	subs	r4, r2, r0
 8002196:	45a1      	cmp	r9, r4
 8002198:	4192      	sbcs	r2, r2
 800219a:	1a5f      	subs	r7, r3, r1
 800219c:	4252      	negs	r2, r2
 800219e:	1aba      	subs	r2, r7, r2
 80021a0:	4690      	mov	r8, r2
 80021a2:	0212      	lsls	r2, r2, #8
 80021a4:	d56b      	bpl.n	800227e <__aeabi_dsub+0x702>
 80021a6:	464a      	mov	r2, r9
 80021a8:	1a84      	subs	r4, r0, r2
 80021aa:	42a0      	cmp	r0, r4
 80021ac:	4192      	sbcs	r2, r2
 80021ae:	1acb      	subs	r3, r1, r3
 80021b0:	4252      	negs	r2, r2
 80021b2:	1a9b      	subs	r3, r3, r2
 80021b4:	4698      	mov	r8, r3
 80021b6:	465d      	mov	r5, fp
 80021b8:	e564      	b.n	8001c84 <__aeabi_dsub+0x108>
 80021ba:	074b      	lsls	r3, r1, #29
 80021bc:	08c2      	lsrs	r2, r0, #3
 80021be:	431a      	orrs	r2, r3
 80021c0:	465d      	mov	r5, fp
 80021c2:	08cb      	lsrs	r3, r1, #3
 80021c4:	e698      	b.n	8001ef8 <__aeabi_dsub+0x37c>
 80021c6:	074b      	lsls	r3, r1, #29
 80021c8:	08c2      	lsrs	r2, r0, #3
 80021ca:	431a      	orrs	r2, r3
 80021cc:	08cb      	lsrs	r3, r1, #3
 80021ce:	e64f      	b.n	8001e70 <__aeabi_dsub+0x2f4>
 80021d0:	000a      	movs	r2, r1
 80021d2:	4302      	orrs	r2, r0
 80021d4:	d090      	beq.n	80020f8 <__aeabi_dsub+0x57c>
 80021d6:	464a      	mov	r2, r9
 80021d8:	075c      	lsls	r4, r3, #29
 80021da:	08d2      	lsrs	r2, r2, #3
 80021dc:	4314      	orrs	r4, r2
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	08db      	lsrs	r3, r3, #3
 80021e2:	0312      	lsls	r2, r2, #12
 80021e4:	4213      	tst	r3, r2
 80021e6:	d008      	beq.n	80021fa <__aeabi_dsub+0x67e>
 80021e8:	08ce      	lsrs	r6, r1, #3
 80021ea:	4216      	tst	r6, r2
 80021ec:	d105      	bne.n	80021fa <__aeabi_dsub+0x67e>
 80021ee:	08c0      	lsrs	r0, r0, #3
 80021f0:	0749      	lsls	r1, r1, #29
 80021f2:	4308      	orrs	r0, r1
 80021f4:	0004      	movs	r4, r0
 80021f6:	465d      	mov	r5, fp
 80021f8:	0033      	movs	r3, r6
 80021fa:	0f61      	lsrs	r1, r4, #29
 80021fc:	00e2      	lsls	r2, r4, #3
 80021fe:	0749      	lsls	r1, r1, #29
 8002200:	08d2      	lsrs	r2, r2, #3
 8002202:	430a      	orrs	r2, r1
 8002204:	e678      	b.n	8001ef8 <__aeabi_dsub+0x37c>
 8002206:	074b      	lsls	r3, r1, #29
 8002208:	08c2      	lsrs	r2, r0, #3
 800220a:	431a      	orrs	r2, r3
 800220c:	08cb      	lsrs	r3, r1, #3
 800220e:	e632      	b.n	8001e76 <__aeabi_dsub+0x2fa>
 8002210:	4448      	add	r0, r9
 8002212:	185b      	adds	r3, r3, r1
 8002214:	4548      	cmp	r0, r9
 8002216:	4192      	sbcs	r2, r2
 8002218:	4698      	mov	r8, r3
 800221a:	4252      	negs	r2, r2
 800221c:	4490      	add	r8, r2
 800221e:	4643      	mov	r3, r8
 8002220:	0004      	movs	r4, r0
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	d400      	bmi.n	8002228 <__aeabi_dsub+0x6ac>
 8002226:	e61a      	b.n	8001e5e <__aeabi_dsub+0x2e2>
 8002228:	4642      	mov	r2, r8
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <__aeabi_dsub+0x6e8>)
 800222c:	2601      	movs	r6, #1
 800222e:	401a      	ands	r2, r3
 8002230:	4690      	mov	r8, r2
 8002232:	e614      	b.n	8001e5e <__aeabi_dsub+0x2e2>
 8002234:	4666      	mov	r6, ip
 8002236:	001f      	movs	r7, r3
 8002238:	3e20      	subs	r6, #32
 800223a:	40f7      	lsrs	r7, r6
 800223c:	2c20      	cmp	r4, #32
 800223e:	d005      	beq.n	800224c <__aeabi_dsub+0x6d0>
 8002240:	2640      	movs	r6, #64	; 0x40
 8002242:	1b36      	subs	r6, r6, r4
 8002244:	40b3      	lsls	r3, r6
 8002246:	464c      	mov	r4, r9
 8002248:	431c      	orrs	r4, r3
 800224a:	46a2      	mov	sl, r4
 800224c:	4654      	mov	r4, sl
 800224e:	1e63      	subs	r3, r4, #1
 8002250:	419c      	sbcs	r4, r3
 8002252:	433c      	orrs	r4, r7
 8002254:	e5c8      	b.n	8001de8 <__aeabi_dsub+0x26c>
 8002256:	0011      	movs	r1, r2
 8002258:	2300      	movs	r3, #0
 800225a:	2200      	movs	r2, #0
 800225c:	e532      	b.n	8001cc4 <__aeabi_dsub+0x148>
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	000007ff 	.word	0x000007ff
 8002264:	ff7fffff 	.word	0xff7fffff
 8002268:	000007fe 	.word	0x000007fe
 800226c:	464a      	mov	r2, r9
 800226e:	1814      	adds	r4, r2, r0
 8002270:	4284      	cmp	r4, r0
 8002272:	4192      	sbcs	r2, r2
 8002274:	185b      	adds	r3, r3, r1
 8002276:	4698      	mov	r8, r3
 8002278:	4252      	negs	r2, r2
 800227a:	4490      	add	r8, r2
 800227c:	e5e9      	b.n	8001e52 <__aeabi_dsub+0x2d6>
 800227e:	4642      	mov	r2, r8
 8002280:	4322      	orrs	r2, r4
 8002282:	d100      	bne.n	8002286 <__aeabi_dsub+0x70a>
 8002284:	e6a6      	b.n	8001fd4 <__aeabi_dsub+0x458>
 8002286:	e5ea      	b.n	8001e5e <__aeabi_dsub+0x2e2>
 8002288:	074b      	lsls	r3, r1, #29
 800228a:	08c2      	lsrs	r2, r0, #3
 800228c:	431a      	orrs	r2, r3
 800228e:	08cb      	lsrs	r3, r1, #3
 8002290:	e632      	b.n	8001ef8 <__aeabi_dsub+0x37c>
 8002292:	2200      	movs	r2, #0
 8002294:	4901      	ldr	r1, [pc, #4]	; (800229c <__aeabi_dsub+0x720>)
 8002296:	0013      	movs	r3, r2
 8002298:	e514      	b.n	8001cc4 <__aeabi_dsub+0x148>
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	000007ff 	.word	0x000007ff

080022a0 <__aeabi_dcmpun>:
 80022a0:	b570      	push	{r4, r5, r6, lr}
 80022a2:	0005      	movs	r5, r0
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <__aeabi_dcmpun+0x38>)
 80022a6:	030c      	lsls	r4, r1, #12
 80022a8:	0016      	movs	r6, r2
 80022aa:	0049      	lsls	r1, r1, #1
 80022ac:	031a      	lsls	r2, r3, #12
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	0b24      	lsrs	r4, r4, #12
 80022b2:	0d49      	lsrs	r1, r1, #21
 80022b4:	0b12      	lsrs	r2, r2, #12
 80022b6:	0d5b      	lsrs	r3, r3, #21
 80022b8:	4281      	cmp	r1, r0
 80022ba:	d008      	beq.n	80022ce <__aeabi_dcmpun+0x2e>
 80022bc:	4906      	ldr	r1, [pc, #24]	; (80022d8 <__aeabi_dcmpun+0x38>)
 80022be:	2000      	movs	r0, #0
 80022c0:	428b      	cmp	r3, r1
 80022c2:	d103      	bne.n	80022cc <__aeabi_dcmpun+0x2c>
 80022c4:	4332      	orrs	r2, r6
 80022c6:	0010      	movs	r0, r2
 80022c8:	1e42      	subs	r2, r0, #1
 80022ca:	4190      	sbcs	r0, r2
 80022cc:	bd70      	pop	{r4, r5, r6, pc}
 80022ce:	2001      	movs	r0, #1
 80022d0:	432c      	orrs	r4, r5
 80022d2:	d1fb      	bne.n	80022cc <__aeabi_dcmpun+0x2c>
 80022d4:	e7f2      	b.n	80022bc <__aeabi_dcmpun+0x1c>
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	000007ff 	.word	0x000007ff

080022dc <__aeabi_d2iz>:
 80022dc:	000a      	movs	r2, r1
 80022de:	b530      	push	{r4, r5, lr}
 80022e0:	4c13      	ldr	r4, [pc, #76]	; (8002330 <__aeabi_d2iz+0x54>)
 80022e2:	0053      	lsls	r3, r2, #1
 80022e4:	0309      	lsls	r1, r1, #12
 80022e6:	0005      	movs	r5, r0
 80022e8:	0b09      	lsrs	r1, r1, #12
 80022ea:	2000      	movs	r0, #0
 80022ec:	0d5b      	lsrs	r3, r3, #21
 80022ee:	0fd2      	lsrs	r2, r2, #31
 80022f0:	42a3      	cmp	r3, r4
 80022f2:	dd04      	ble.n	80022fe <__aeabi_d2iz+0x22>
 80022f4:	480f      	ldr	r0, [pc, #60]	; (8002334 <__aeabi_d2iz+0x58>)
 80022f6:	4283      	cmp	r3, r0
 80022f8:	dd02      	ble.n	8002300 <__aeabi_d2iz+0x24>
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <__aeabi_d2iz+0x5c>)
 80022fc:	18d0      	adds	r0, r2, r3
 80022fe:	bd30      	pop	{r4, r5, pc}
 8002300:	2080      	movs	r0, #128	; 0x80
 8002302:	0340      	lsls	r0, r0, #13
 8002304:	4301      	orrs	r1, r0
 8002306:	480d      	ldr	r0, [pc, #52]	; (800233c <__aeabi_d2iz+0x60>)
 8002308:	1ac0      	subs	r0, r0, r3
 800230a:	281f      	cmp	r0, #31
 800230c:	dd08      	ble.n	8002320 <__aeabi_d2iz+0x44>
 800230e:	480c      	ldr	r0, [pc, #48]	; (8002340 <__aeabi_d2iz+0x64>)
 8002310:	1ac3      	subs	r3, r0, r3
 8002312:	40d9      	lsrs	r1, r3
 8002314:	000b      	movs	r3, r1
 8002316:	4258      	negs	r0, r3
 8002318:	2a00      	cmp	r2, #0
 800231a:	d1f0      	bne.n	80022fe <__aeabi_d2iz+0x22>
 800231c:	0018      	movs	r0, r3
 800231e:	e7ee      	b.n	80022fe <__aeabi_d2iz+0x22>
 8002320:	4c08      	ldr	r4, [pc, #32]	; (8002344 <__aeabi_d2iz+0x68>)
 8002322:	40c5      	lsrs	r5, r0
 8002324:	46a4      	mov	ip, r4
 8002326:	4463      	add	r3, ip
 8002328:	4099      	lsls	r1, r3
 800232a:	000b      	movs	r3, r1
 800232c:	432b      	orrs	r3, r5
 800232e:	e7f2      	b.n	8002316 <__aeabi_d2iz+0x3a>
 8002330:	000003fe 	.word	0x000003fe
 8002334:	0000041d 	.word	0x0000041d
 8002338:	7fffffff 	.word	0x7fffffff
 800233c:	00000433 	.word	0x00000433
 8002340:	00000413 	.word	0x00000413
 8002344:	fffffbed 	.word	0xfffffbed

08002348 <__aeabi_i2d>:
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	2800      	cmp	r0, #0
 800234c:	d016      	beq.n	800237c <__aeabi_i2d+0x34>
 800234e:	17c3      	asrs	r3, r0, #31
 8002350:	18c5      	adds	r5, r0, r3
 8002352:	405d      	eors	r5, r3
 8002354:	0fc4      	lsrs	r4, r0, #31
 8002356:	0028      	movs	r0, r5
 8002358:	f000 f84c 	bl	80023f4 <__clzsi2>
 800235c:	4a11      	ldr	r2, [pc, #68]	; (80023a4 <__aeabi_i2d+0x5c>)
 800235e:	1a12      	subs	r2, r2, r0
 8002360:	280a      	cmp	r0, #10
 8002362:	dc16      	bgt.n	8002392 <__aeabi_i2d+0x4a>
 8002364:	0003      	movs	r3, r0
 8002366:	002e      	movs	r6, r5
 8002368:	3315      	adds	r3, #21
 800236a:	409e      	lsls	r6, r3
 800236c:	230b      	movs	r3, #11
 800236e:	1a18      	subs	r0, r3, r0
 8002370:	40c5      	lsrs	r5, r0
 8002372:	0553      	lsls	r3, r2, #21
 8002374:	032d      	lsls	r5, r5, #12
 8002376:	0b2d      	lsrs	r5, r5, #12
 8002378:	0d5b      	lsrs	r3, r3, #21
 800237a:	e003      	b.n	8002384 <__aeabi_i2d+0x3c>
 800237c:	2400      	movs	r4, #0
 800237e:	2300      	movs	r3, #0
 8002380:	2500      	movs	r5, #0
 8002382:	2600      	movs	r6, #0
 8002384:	051b      	lsls	r3, r3, #20
 8002386:	432b      	orrs	r3, r5
 8002388:	07e4      	lsls	r4, r4, #31
 800238a:	4323      	orrs	r3, r4
 800238c:	0030      	movs	r0, r6
 800238e:	0019      	movs	r1, r3
 8002390:	bd70      	pop	{r4, r5, r6, pc}
 8002392:	380b      	subs	r0, #11
 8002394:	4085      	lsls	r5, r0
 8002396:	0553      	lsls	r3, r2, #21
 8002398:	032d      	lsls	r5, r5, #12
 800239a:	2600      	movs	r6, #0
 800239c:	0b2d      	lsrs	r5, r5, #12
 800239e:	0d5b      	lsrs	r3, r3, #21
 80023a0:	e7f0      	b.n	8002384 <__aeabi_i2d+0x3c>
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	0000041e 	.word	0x0000041e

080023a8 <__aeabi_ui2d>:
 80023a8:	b510      	push	{r4, lr}
 80023aa:	1e04      	subs	r4, r0, #0
 80023ac:	d010      	beq.n	80023d0 <__aeabi_ui2d+0x28>
 80023ae:	f000 f821 	bl	80023f4 <__clzsi2>
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <__aeabi_ui2d+0x48>)
 80023b4:	1a1b      	subs	r3, r3, r0
 80023b6:	280a      	cmp	r0, #10
 80023b8:	dc11      	bgt.n	80023de <__aeabi_ui2d+0x36>
 80023ba:	220b      	movs	r2, #11
 80023bc:	0021      	movs	r1, r4
 80023be:	1a12      	subs	r2, r2, r0
 80023c0:	40d1      	lsrs	r1, r2
 80023c2:	3015      	adds	r0, #21
 80023c4:	030a      	lsls	r2, r1, #12
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	4084      	lsls	r4, r0
 80023ca:	0b12      	lsrs	r2, r2, #12
 80023cc:	0d5b      	lsrs	r3, r3, #21
 80023ce:	e001      	b.n	80023d4 <__aeabi_ui2d+0x2c>
 80023d0:	2300      	movs	r3, #0
 80023d2:	2200      	movs	r2, #0
 80023d4:	051b      	lsls	r3, r3, #20
 80023d6:	4313      	orrs	r3, r2
 80023d8:	0020      	movs	r0, r4
 80023da:	0019      	movs	r1, r3
 80023dc:	bd10      	pop	{r4, pc}
 80023de:	0022      	movs	r2, r4
 80023e0:	380b      	subs	r0, #11
 80023e2:	4082      	lsls	r2, r0
 80023e4:	055b      	lsls	r3, r3, #21
 80023e6:	0312      	lsls	r2, r2, #12
 80023e8:	2400      	movs	r4, #0
 80023ea:	0b12      	lsrs	r2, r2, #12
 80023ec:	0d5b      	lsrs	r3, r3, #21
 80023ee:	e7f1      	b.n	80023d4 <__aeabi_ui2d+0x2c>
 80023f0:	0000041e 	.word	0x0000041e

080023f4 <__clzsi2>:
 80023f4:	211c      	movs	r1, #28
 80023f6:	2301      	movs	r3, #1
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	4298      	cmp	r0, r3
 80023fc:	d301      	bcc.n	8002402 <__clzsi2+0xe>
 80023fe:	0c00      	lsrs	r0, r0, #16
 8002400:	3910      	subs	r1, #16
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	4298      	cmp	r0, r3
 8002406:	d301      	bcc.n	800240c <__clzsi2+0x18>
 8002408:	0a00      	lsrs	r0, r0, #8
 800240a:	3908      	subs	r1, #8
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	4298      	cmp	r0, r3
 8002410:	d301      	bcc.n	8002416 <__clzsi2+0x22>
 8002412:	0900      	lsrs	r0, r0, #4
 8002414:	3904      	subs	r1, #4
 8002416:	a202      	add	r2, pc, #8	; (adr r2, 8002420 <__clzsi2+0x2c>)
 8002418:	5c10      	ldrb	r0, [r2, r0]
 800241a:	1840      	adds	r0, r0, r1
 800241c:	4770      	bx	lr
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	02020304 	.word	0x02020304
 8002424:	01010101 	.word	0x01010101
	...

08002430 <__clzdi2>:
 8002430:	b510      	push	{r4, lr}
 8002432:	2900      	cmp	r1, #0
 8002434:	d103      	bne.n	800243e <__clzdi2+0xe>
 8002436:	f7ff ffdd 	bl	80023f4 <__clzsi2>
 800243a:	3020      	adds	r0, #32
 800243c:	e002      	b.n	8002444 <__clzdi2+0x14>
 800243e:	1c08      	adds	r0, r1, #0
 8002440:	f7ff ffd8 	bl	80023f4 <__clzsi2>
 8002444:	bd10      	pop	{r4, pc}
 8002446:	46c0      	nop			; (mov r8, r8)

08002448 <LCD_SetDataPort>:

//
//	Set data port
//
static inline void LCD_SetDataPort(uint8_t data)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	0002      	movs	r2, r0
 8002450:	1dfb      	adds	r3, r7, #7
 8002452:	701a      	strb	r2, [r3, #0]

#ifdef LCD_4BIT
	if(data & (1<<0))
 8002454:	1dfb      	adds	r3, r7, #7
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	4013      	ands	r3, r2
 800245c:	d006      	beq.n	800246c <LCD_SetDataPort+0x24>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 800245e:	4b23      	ldr	r3, [pc, #140]	; (80024ec <LCD_SetDataPort+0xa4>)
 8002460:	2201      	movs	r2, #1
 8002462:	2110      	movs	r1, #16
 8002464:	0018      	movs	r0, r3
 8002466:	f003 fe6a 	bl	800613e <HAL_GPIO_WritePin>
 800246a:	e005      	b.n	8002478 <LCD_SetDataPort+0x30>
	else
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <LCD_SetDataPort+0xa4>)
 800246e:	2200      	movs	r2, #0
 8002470:	2110      	movs	r1, #16
 8002472:	0018      	movs	r0, r3
 8002474:	f003 fe63 	bl	800613e <HAL_GPIO_WritePin>

	if(data & (1<<1))
 8002478:	1dfb      	adds	r3, r7, #7
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2202      	movs	r2, #2
 800247e:	4013      	ands	r3, r2
 8002480:	d006      	beq.n	8002490 <LCD_SetDataPort+0x48>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <LCD_SetDataPort+0xa4>)
 8002484:	2201      	movs	r2, #1
 8002486:	2120      	movs	r1, #32
 8002488:	0018      	movs	r0, r3
 800248a:	f003 fe58 	bl	800613e <HAL_GPIO_WritePin>
 800248e:	e005      	b.n	800249c <LCD_SetDataPort+0x54>
	else
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <LCD_SetDataPort+0xa4>)
 8002492:	2200      	movs	r2, #0
 8002494:	2120      	movs	r1, #32
 8002496:	0018      	movs	r0, r3
 8002498:	f003 fe51 	bl	800613e <HAL_GPIO_WritePin>

	if(data & (1<<2))
 800249c:	1dfb      	adds	r3, r7, #7
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2204      	movs	r2, #4
 80024a2:	4013      	ands	r3, r2
 80024a4:	d006      	beq.n	80024b4 <LCD_SetDataPort+0x6c>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <LCD_SetDataPort+0xa4>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	2140      	movs	r1, #64	; 0x40
 80024ac:	0018      	movs	r0, r3
 80024ae:	f003 fe46 	bl	800613e <HAL_GPIO_WritePin>
 80024b2:	e005      	b.n	80024c0 <LCD_SetDataPort+0x78>
	else
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80024b4:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <LCD_SetDataPort+0xa4>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	2140      	movs	r1, #64	; 0x40
 80024ba:	0018      	movs	r0, r3
 80024bc:	f003 fe3f 	bl	800613e <HAL_GPIO_WritePin>

	if(data & (1<<3))
 80024c0:	1dfb      	adds	r3, r7, #7
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2208      	movs	r2, #8
 80024c6:	4013      	ands	r3, r2
 80024c8:	d006      	beq.n	80024d8 <LCD_SetDataPort+0x90>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <LCD_SetDataPort+0xa4>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	2180      	movs	r1, #128	; 0x80
 80024d0:	0018      	movs	r0, r3
 80024d2:	f003 fe34 	bl	800613e <HAL_GPIO_WritePin>
	if(data & (1<<7))
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
#endif
}
 80024d6:	e005      	b.n	80024e4 <LCD_SetDataPort+0x9c>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <LCD_SetDataPort+0xa4>)
 80024da:	2200      	movs	r2, #0
 80024dc:	2180      	movs	r1, #128	; 0x80
 80024de:	0018      	movs	r0, r3
 80024e0:	f003 fe2d 	bl	800613e <HAL_GPIO_WritePin>
}
 80024e4:	46c0      	nop			; (mov r8, r8)
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	50000400 	.word	0x50000400

080024f0 <LCD_GetDataPort>:

#ifdef USE_RW
static inline uint8_t LCD_GetDataPort()
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]

#ifdef LCD_4BIT

	if(HAL_GPIO_ReadPin(LCD_D4_GPIO_Port, LCD_D4_Pin) == GPIO_PIN_SET) result |= (1<<0);
 80024fc:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <LCD_GetDataPort+0x88>)
 80024fe:	2110      	movs	r1, #16
 8002500:	0018      	movs	r0, r3
 8002502:	f003 fdff 	bl	8006104 <HAL_GPIO_ReadPin>
 8002506:	0003      	movs	r3, r0
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <LCD_GetDataPort+0x28>
 800250c:	1dfb      	adds	r3, r7, #7
 800250e:	1dfa      	adds	r2, r7, #7
 8002510:	7812      	ldrb	r2, [r2, #0]
 8002512:	2101      	movs	r1, #1
 8002514:	430a      	orrs	r2, r1
 8002516:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(LCD_D5_GPIO_Port, LCD_D5_Pin) == GPIO_PIN_SET) result |= (1<<1);
 8002518:	4b17      	ldr	r3, [pc, #92]	; (8002578 <LCD_GetDataPort+0x88>)
 800251a:	2120      	movs	r1, #32
 800251c:	0018      	movs	r0, r3
 800251e:	f003 fdf1 	bl	8006104 <HAL_GPIO_ReadPin>
 8002522:	0003      	movs	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <LCD_GetDataPort+0x44>
 8002528:	1dfb      	adds	r3, r7, #7
 800252a:	1dfa      	adds	r2, r7, #7
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	2102      	movs	r1, #2
 8002530:	430a      	orrs	r2, r1
 8002532:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(LCD_D6_GPIO_Port, LCD_D6_Pin) == GPIO_PIN_SET) result |= (1<<2);
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <LCD_GetDataPort+0x88>)
 8002536:	2140      	movs	r1, #64	; 0x40
 8002538:	0018      	movs	r0, r3
 800253a:	f003 fde3 	bl	8006104 <HAL_GPIO_ReadPin>
 800253e:	0003      	movs	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d105      	bne.n	8002550 <LCD_GetDataPort+0x60>
 8002544:	1dfb      	adds	r3, r7, #7
 8002546:	1dfa      	adds	r2, r7, #7
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	2104      	movs	r1, #4
 800254c:	430a      	orrs	r2, r1
 800254e:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin) == GPIO_PIN_SET) result |= (1<<3);
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <LCD_GetDataPort+0x88>)
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	0018      	movs	r0, r3
 8002556:	f003 fdd5 	bl	8006104 <HAL_GPIO_ReadPin>
 800255a:	0003      	movs	r3, r0
 800255c:	2b01      	cmp	r3, #1
 800255e:	d105      	bne.n	800256c <LCD_GetDataPort+0x7c>
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	1dfa      	adds	r2, r7, #7
 8002564:	7812      	ldrb	r2, [r2, #0]
 8002566:	2108      	movs	r1, #8
 8002568:	430a      	orrs	r2, r1
 800256a:	701a      	strb	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(LCD_DB5_GPIO_Port, LCD_D5_Pin) == GPIO_PIN_SET) result |= (1<<5);
	if(HAL_GPIO_ReadPin(LCD_DB6_GPIO_Port, LCD_D6_Pin) == GPIO_PIN_SET) result |= (1<<6);
	if(HAL_GPIO_ReadPin(LCD_DB7_GPIO_Port, LCD_D7_Pin) == GPIO_PIN_SET) result |= (1<<7);
#endif

return result;
 800256c:	1dfb      	adds	r3, r7, #7
 800256e:	781b      	ldrb	r3, [r3, #0]
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}
 8002578:	50000400 	.word	0x50000400

0800257c <LCD_DataOut>:
#endif

static void LCD_DataOut()
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;
#ifdef LCD_4BIT
	  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	22f0      	movs	r2, #240	; 0xf0
 8002586:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	2201      	movs	r2, #1
 800258c:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	2200      	movs	r2, #0
 8002598:	60da      	str	r2, [r3, #12]
	                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
#endif
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <LCD_DataOut+0x34>)
 800259e:	0019      	movs	r1, r3
 80025a0:	0010      	movs	r0, r2
 80025a2:	f003 fc31 	bl	8005e08 <HAL_GPIO_Init>
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b006      	add	sp, #24
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	50000400 	.word	0x50000400

080025b4 <LCD_DataIn>:

#ifdef USE_RW
static void LCD_DataIn()
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct;
#ifdef LCD_4BIT
	 GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	22f0      	movs	r2, #240	; 0xf0
 80025be:	601a      	str	r2, [r3, #0]
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2200      	movs	r2, #0
 80025c4:	605a      	str	r2, [r3, #4]
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
	 GPIO_InitStruct.Pin = LCD_DB0_Pin|LCD_DB1_Pin|LCD_DB2_Pin|LCD_DB3_Pin
	 	                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
	 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	 GPIO_InitStruct.Pull = GPIO_NOPULL;
#endif
	 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <LCD_DataIn+0x2c>)
 80025d0:	0019      	movs	r1, r3
 80025d2:	0010      	movs	r0, r2
 80025d4:	f003 fc18 	bl	8005e08 <HAL_GPIO_Init>
}
 80025d8:	46c0      	nop			; (mov r8, r8)
 80025da:	46bd      	mov	sp, r7
 80025dc:	b006      	add	sp, #24
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	50000400 	.word	0x50000400

080025e4 <LCD_ReadByte>:

//
//	Write byte to LCD
//
uint8_t LCD_ReadByte(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
	uint8_t result = 0;
 80025ea:	1dfb      	adds	r3, r7, #7
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
	LCD_DataIn();
 80025f0:	f7ff ffe0 	bl	80025b4 <LCD_DataIn>

	SET_LCD_RW;
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <LCD_ReadByte+0x78>)
 80025f6:	2201      	movs	r2, #1
 80025f8:	2108      	movs	r1, #8
 80025fa:	0018      	movs	r0, r3
 80025fc:	f003 fd9f 	bl	800613e <HAL_GPIO_WritePin>
#ifdef LCD_4BIT
	SET_LCD_E;
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <LCD_ReadByte+0x78>)
 8002602:	2201      	movs	r2, #1
 8002604:	2101      	movs	r1, #1
 8002606:	0018      	movs	r0, r3
 8002608:	f003 fd99 	bl	800613e <HAL_GPIO_WritePin>
	result = (LCD_GetDataPort() << 4);
 800260c:	f7ff ff70 	bl	80024f0 <LCD_GetDataPort>
 8002610:	0003      	movs	r3, r0
 8002612:	001a      	movs	r2, r3
 8002614:	1dfb      	adds	r3, r7, #7
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	701a      	strb	r2, [r3, #0]
	RESET_LCD_E;
 800261a:	4b10      	ldr	r3, [pc, #64]	; (800265c <LCD_ReadByte+0x78>)
 800261c:	2200      	movs	r2, #0
 800261e:	2101      	movs	r1, #1
 8002620:	0018      	movs	r0, r3
 8002622:	f003 fd8c 	bl	800613e <HAL_GPIO_WritePin>

	SET_LCD_E;
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <LCD_ReadByte+0x78>)
 8002628:	2201      	movs	r2, #1
 800262a:	2101      	movs	r1, #1
 800262c:	0018      	movs	r0, r3
 800262e:	f003 fd86 	bl	800613e <HAL_GPIO_WritePin>
	result |= LCD_GetDataPort();
 8002632:	f7ff ff5d 	bl	80024f0 <LCD_GetDataPort>
 8002636:	0003      	movs	r3, r0
 8002638:	0019      	movs	r1, r3
 800263a:	1dfb      	adds	r3, r7, #7
 800263c:	1dfa      	adds	r2, r7, #7
 800263e:	7812      	ldrb	r2, [r2, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	701a      	strb	r2, [r3, #0]
	RESET_LCD_E;
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <LCD_ReadByte+0x78>)
 8002646:	2200      	movs	r2, #0
 8002648:	2101      	movs	r1, #1
 800264a:	0018      	movs	r0, r3
 800264c:	f003 fd77 	bl	800613e <HAL_GPIO_WritePin>
#else
	SET_LCD_E;
	result = LCD_GetDataPort();
	RESET_LCD_E;
#endif
	return result;
 8002650:	1dfb      	adds	r3, r7, #7
 8002652:	781b      	ldrb	r3, [r3, #0]
}
 8002654:	0018      	movs	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}
 800265c:	50000800 	.word	0x50000800

08002660 <LCD_CheckBusyFlag>:

//
//	Check Busy Flag
//
uint8_t LCD_CheckBusyFlag()
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	RESET_LCD_RS;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <LCD_CheckBusyFlag+0x1c>)
 8002666:	2200      	movs	r2, #0
 8002668:	2102      	movs	r1, #2
 800266a:	0018      	movs	r0, r3
 800266c:	f003 fd67 	bl	800613e <HAL_GPIO_WritePin>
	return LCD_ReadByte();
 8002670:	f7ff ffb8 	bl	80025e4 <LCD_ReadByte>
 8002674:	0003      	movs	r3, r0
}
 8002676:	0018      	movs	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	50000800 	.word	0x50000800

08002680 <LCD_WriteByte>:

//
//	Write byte to LCD
//
void LCD_WriteByte(uint8_t data)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	0002      	movs	r2, r0
 8002688:	1dfb      	adds	r3, r7, #7
 800268a:	701a      	strb	r2, [r3, #0]
#ifdef USE_RW // There is no need to change GPIO direction if RW is not used
	LCD_DataOut();
 800268c:	f7ff ff76 	bl	800257c <LCD_DataOut>

	RESET_LCD_RW;
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <LCD_WriteByte+0x6c>)
 8002692:	2200      	movs	r2, #0
 8002694:	2108      	movs	r1, #8
 8002696:	0018      	movs	r0, r3
 8002698:	f003 fd51 	bl	800613e <HAL_GPIO_WritePin>
#endif

#ifdef LCD_4BIT
	SET_LCD_E;
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <LCD_WriteByte+0x6c>)
 800269e:	2201      	movs	r2, #1
 80026a0:	2101      	movs	r1, #1
 80026a2:	0018      	movs	r0, r3
 80026a4:	f003 fd4b 	bl	800613e <HAL_GPIO_WritePin>
	LCD_SetDataPort(data >> 4);
 80026a8:	1dfb      	adds	r3, r7, #7
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7ff fec9 	bl	8002448 <LCD_SetDataPort>
	RESET_LCD_E;
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <LCD_WriteByte+0x6c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	2101      	movs	r1, #1
 80026bc:	0018      	movs	r0, r3
 80026be:	f003 fd3e 	bl	800613e <HAL_GPIO_WritePin>
#endif
	SET_LCD_E;
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <LCD_WriteByte+0x6c>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	2101      	movs	r1, #1
 80026c8:	0018      	movs	r0, r3
 80026ca:	f003 fd38 	bl	800613e <HAL_GPIO_WritePin>
	LCD_SetDataPort(data);
 80026ce:	1dfb      	adds	r3, r7, #7
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7ff feb8 	bl	8002448 <LCD_SetDataPort>
	RESET_LCD_E;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <LCD_WriteByte+0x6c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	2101      	movs	r1, #1
 80026de:	0018      	movs	r0, r3
 80026e0:	f003 fd2d 	bl	800613e <HAL_GPIO_WritePin>
#ifdef USE_RW
	//while((LCD_CheckBusyFlag() & (1<<7))); // Wait for data processing -
#else
	//HAL_Delay(1);
#endif
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b002      	add	sp, #8
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	50000800 	.word	0x50000800

080026f0 <LCD_WriteCmd>:

//
//	Write command to LCD
//
void LCD_WriteCmd(uint8_t cmd)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	0002      	movs	r2, r0
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	701a      	strb	r2, [r3, #0]
	RESET_LCD_RS;
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <LCD_WriteCmd+0x2c>)
 80026fe:	2200      	movs	r2, #0
 8002700:	2102      	movs	r1, #2
 8002702:	0018      	movs	r0, r3
 8002704:	f003 fd1b 	bl	800613e <HAL_GPIO_WritePin>
	LCD_WriteByte(cmd);
 8002708:	1dfb      	adds	r3, r7, #7
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff ffb7 	bl	8002680 <LCD_WriteByte>
#ifndef USE_RW
	//HAL_Delay(1); //<<--- wait for command processing
#endif
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	b002      	add	sp, #8
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	50000800 	.word	0x50000800

08002720 <LCD_WriteData>:

//
//	Write data to LCD
//
void LCD_WriteData(uint8_t data)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	0002      	movs	r2, r0
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	701a      	strb	r2, [r3, #0]
	SET_LCD_RS;
 800272c:	4b07      	ldr	r3, [pc, #28]	; (800274c <LCD_WriteData+0x2c>)
 800272e:	2201      	movs	r2, #1
 8002730:	2102      	movs	r1, #2
 8002732:	0018      	movs	r0, r3
 8002734:	f003 fd03 	bl	800613e <HAL_GPIO_WritePin>
	LCD_WriteByte(data);
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	0018      	movs	r0, r3
 800273e:	f7ff ff9f 	bl	8002680 <LCD_WriteByte>
}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	50000800 	.word	0x50000800

08002750 <LCD_Char>:

//
//	Write one character to LCD
//
void LCD_Char(char c)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	0002      	movs	r2, r0
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	701a      	strb	r2, [r3, #0]
	LCD_WriteData(((c >= 0x80) && (c <= 0x87)) ? (c & 0x07) : c);
 800275c:	1dfb      	adds	r3, r7, #7
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b25b      	sxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	da09      	bge.n	800277a <LCD_Char+0x2a>
 8002766:	1dfb      	adds	r3, r7, #7
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b87      	cmp	r3, #135	; 0x87
 800276c:	d805      	bhi.n	800277a <LCD_Char+0x2a>
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2207      	movs	r2, #7
 8002774:	4013      	ands	r3, r2
 8002776:	b2db      	uxtb	r3, r3
 8002778:	e001      	b.n	800277e <LCD_Char+0x2e>
 800277a:	1dfb      	adds	r3, r7, #7
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	0018      	movs	r0, r3
 8002780:	f7ff ffce 	bl	8002720 <LCD_WriteData>
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}

0800278c <LCD_Locate>:

//
// Set cursor for x-column, y-row
//
void LCD_Locate(uint8_t x, uint8_t y)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	0002      	movs	r2, r0
 8002794:	1dfb      	adds	r3, r7, #7
 8002796:	701a      	strb	r2, [r3, #0]
 8002798:	1dbb      	adds	r3, r7, #6
 800279a:	1c0a      	adds	r2, r1, #0
 800279c:	701a      	strb	r2, [r3, #0]
	switch(y)
 800279e:	1dbb      	adds	r3, r7, #6
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d014      	beq.n	80027d0 <LCD_Locate+0x44>
 80027a6:	dc17      	bgt.n	80027d8 <LCD_Locate+0x4c>
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d00d      	beq.n	80027c8 <LCD_Locate+0x3c>
 80027ac:	dc14      	bgt.n	80027d8 <LCD_Locate+0x4c>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <LCD_Locate+0x2c>
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d004      	beq.n	80027c0 <LCD_Locate+0x34>
 80027b6:	e00f      	b.n	80027d8 <LCD_Locate+0x4c>
	{
		case 0:
			y = LCD_LINE1;
 80027b8:	1dbb      	adds	r3, r7, #6
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
			break;
 80027be:	e00b      	b.n	80027d8 <LCD_Locate+0x4c>
#if (LCD_Y>1)
		case 1:
			y = LCD_LINE2;
 80027c0:	1dbb      	adds	r3, r7, #6
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	701a      	strb	r2, [r3, #0]
			break;
 80027c6:	e007      	b.n	80027d8 <LCD_Locate+0x4c>
#endif
#if (LCD_Y>2)
		case 2:
			y = LCD_LINE3;
 80027c8:	1dbb      	adds	r3, r7, #6
 80027ca:	2214      	movs	r2, #20
 80027cc:	701a      	strb	r2, [r3, #0]
			break;
 80027ce:	e003      	b.n	80027d8 <LCD_Locate+0x4c>
#endif
#if (LCD_Y>3)
		case 3:
			y = LCD_LINE4;
 80027d0:	1dbb      	adds	r3, r7, #6
 80027d2:	2254      	movs	r2, #84	; 0x54
 80027d4:	701a      	strb	r2, [r3, #0]
			break;
 80027d6:	46c0      	nop			; (mov r8, r8)
#endif
	}

	LCD_WriteCmd((0x80 + y + x));
 80027d8:	1dba      	adds	r2, r7, #6
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	18d3      	adds	r3, r2, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3b80      	subs	r3, #128	; 0x80
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7ff ff81 	bl	80026f0 <LCD_WriteCmd>
}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <LCD_Cls>:

//
//	Clear LCD
//
void LCD_Cls(void)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	af00      	add	r7, sp, #0
	LCD_WriteCmd(LCDC_CLS);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f7ff ff78 	bl	80026f0 <LCD_WriteCmd>
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <LCD_Init>:

//
//	Initialization
//
void LCD_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	RESET_LCD_RS;
 800280c:	4b22      	ldr	r3, [pc, #136]	; (8002898 <LCD_Init+0x90>)
 800280e:	2200      	movs	r2, #0
 8002810:	2102      	movs	r1, #2
 8002812:	0018      	movs	r0, r3
 8002814:	f003 fc93 	bl	800613e <HAL_GPIO_WritePin>
	RESET_LCD_E;
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <LCD_Init+0x90>)
 800281a:	2200      	movs	r2, #0
 800281c:	2101      	movs	r1, #1
 800281e:	0018      	movs	r0, r3
 8002820:	f003 fc8d 	bl	800613e <HAL_GPIO_WritePin>
#ifdef USE_RW
	RESET_LCD_RW;
 8002824:	4b1c      	ldr	r3, [pc, #112]	; (8002898 <LCD_Init+0x90>)
 8002826:	2200      	movs	r2, #0
 8002828:	2108      	movs	r1, #8
 800282a:	0018      	movs	r0, r3
 800282c:	f003 fc87 	bl	800613e <HAL_GPIO_WritePin>
#endif
	LCD_DataOut();
 8002830:	f7ff fea4 	bl	800257c <LCD_DataOut>

	HAL_Delay(15);
 8002834:	200f      	movs	r0, #15
 8002836:	f002 fb4b 	bl	8004ed0 <HAL_Delay>

	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
 800283a:	2030      	movs	r0, #48	; 0x30
 800283c:	f7ff fe04 	bl	8002448 <LCD_SetDataPort>
	HAL_Delay(5);
 8002840:	2005      	movs	r0, #5
 8002842:	f002 fb45 	bl	8004ed0 <HAL_Delay>
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
 8002846:	2030      	movs	r0, #48	; 0x30
 8002848:	f7ff fdfe 	bl	8002448 <LCD_SetDataPort>
	HAL_Delay(1);
 800284c:	2001      	movs	r0, #1
 800284e:	f002 fb3f 	bl	8004ed0 <HAL_Delay>
#ifdef LCD_4BIT
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC4B); //4-byte mode
 8002852:	2020      	movs	r0, #32
 8002854:	f7ff fdf8 	bl	8002448 <LCD_SetDataPort>
	HAL_Delay(1);
 8002858:	2001      	movs	r0, #1
 800285a:	f002 fb39 	bl	8004ed0 <HAL_Delay>
	LCD_WriteCmd(LCDC_FUNC|LCDC_FUNC4B|LCDC_FUNC2L|LCDC_FUNC5x7); // 4-bit, 2 lanes, 5x7 chars
 800285e:	2028      	movs	r0, #40	; 0x28
 8002860:	f7ff ff46 	bl	80026f0 <LCD_WriteCmd>
	HAL_Delay(1);
	LCD_WriteCmd(LCDC_FUNC|LCDC_FUNC8B|LCDC_FUNC2L|LCDC_FUNC5x7); // 4-bit, 2 lanes, 5x7 chars
	HAL_Delay(1);
#endif

	LCD_WriteCmd(LCDC_ONOFF|LCDC_CURSOROFF); // Cursor off
 8002864:	2008      	movs	r0, #8
 8002866:	f7ff ff43 	bl	80026f0 <LCD_WriteCmd>
	HAL_Delay(1);
 800286a:	2001      	movs	r0, #1
 800286c:	f002 fb30 	bl	8004ed0 <HAL_Delay>
	LCD_WriteCmd(LCDC_ONOFF|LCDC_DISPLAYON); // LCD on
 8002870:	200c      	movs	r0, #12
 8002872:	f7ff ff3d 	bl	80026f0 <LCD_WriteCmd>
	HAL_Delay(1);
 8002876:	2001      	movs	r0, #1
 8002878:	f002 fb2a 	bl	8004ed0 <HAL_Delay>
	LCD_WriteCmd(LCDC_ENTRY|LCDC_ENTRYR); // Data entry right
 800287c:	2006      	movs	r0, #6
 800287e:	f7ff ff37 	bl	80026f0 <LCD_WriteCmd>
	HAL_Delay(1);
 8002882:	2001      	movs	r0, #1
 8002884:	f002 fb24 	bl	8004ed0 <HAL_Delay>
	LCD_Cls(); // Clear display
 8002888:	f7ff ffb5 	bl	80027f6 <LCD_Cls>
	HAL_Delay(1);
 800288c:	2001      	movs	r0, #1
 800288e:	f002 fb1f 	bl	8004ed0 <HAL_Delay>
}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	50000800 	.word	0x50000800

0800289c <sendDataToDisp>:

///Funkcje do sterowania wyswietlaczem
void sendDataToDisp(struct lcd_display *displ){
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

	static uint8_t char_itter = 0;
	static uint8_t line_itter = 0;
	static uint8_t current_state = 0;

	if(current_state == 0) { //stan czyszczenia
 80028a4:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <sendDataToDisp+0xf4>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10b      	bne.n	80028c4 <sendDataToDisp+0x28>
		if(!(LCD_CheckBusyFlag() & (1<<7))){ //sprawdzanie flagi zajetosci
 80028ac:	f7ff fed8 	bl	8002660 <LCD_CheckBusyFlag>
 80028b0:	0003      	movs	r3, r0
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	db67      	blt.n	8002988 <sendDataToDisp+0xec>
			LCD_Cls();
 80028b8:	f7ff ff9d 	bl	80027f6 <LCD_Cls>
			current_state = 1;
 80028bc:	4b34      	ldr	r3, [pc, #208]	; (8002990 <sendDataToDisp+0xf4>)
 80028be:	2201      	movs	r2, #1
 80028c0:	701a      	strb	r2, [r3, #0]
				current_state = 0;
				HAL_TIM_Base_Stop_IT(&htim7);
			}
		}
	}
}
 80028c2:	e061      	b.n	8002988 <sendDataToDisp+0xec>
	else if(current_state == 1) { //stan ustawiania kursora
 80028c4:	4b32      	ldr	r3, [pc, #200]	; (8002990 <sendDataToDisp+0xf4>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d10f      	bne.n	80028ec <sendDataToDisp+0x50>
		if(!(LCD_CheckBusyFlag() & (1<<7))){ //sprawdzanie flagi zajetosci
 80028cc:	f7ff fec8 	bl	8002660 <LCD_CheckBusyFlag>
 80028d0:	0003      	movs	r3, r0
 80028d2:	b25b      	sxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	db57      	blt.n	8002988 <sendDataToDisp+0xec>
			LCD_Locate(0,line_itter);
 80028d8:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <sendDataToDisp+0xf8>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	0019      	movs	r1, r3
 80028de:	2000      	movs	r0, #0
 80028e0:	f7ff ff54 	bl	800278c <LCD_Locate>
			current_state = 2;
 80028e4:	4b2a      	ldr	r3, [pc, #168]	; (8002990 <sendDataToDisp+0xf4>)
 80028e6:	2202      	movs	r2, #2
 80028e8:	701a      	strb	r2, [r3, #0]
}
 80028ea:	e04d      	b.n	8002988 <sendDataToDisp+0xec>
	else if(current_state == 2){ //stan wyslania znakow
 80028ec:	4b28      	ldr	r3, [pc, #160]	; (8002990 <sendDataToDisp+0xf4>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d149      	bne.n	8002988 <sendDataToDisp+0xec>
		if(displ->lines[line_itter][char_itter]) { //jesli dojdzie do konca linii
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <sendDataToDisp+0xf8>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	001a      	movs	r2, r3
 80028fa:	4b27      	ldr	r3, [pc, #156]	; (8002998 <sendDataToDisp+0xfc>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	0018      	movs	r0, r3
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	0013      	movs	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	189b      	adds	r3, r3, r2
 8002908:	00da      	lsls	r2, r3, #3
 800290a:	1ad2      	subs	r2, r2, r3
 800290c:	188b      	adds	r3, r1, r2
 800290e:	181b      	adds	r3, r3, r0
 8002910:	3317      	adds	r3, #23
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01d      	beq.n	8002954 <sendDataToDisp+0xb8>
			if(!(LCD_CheckBusyFlag() & (1<<7))) LCD_Char(displ->lines[line_itter][char_itter++]);
 8002918:	f7ff fea2 	bl	8002660 <LCD_CheckBusyFlag>
 800291c:	0003      	movs	r3, r0
 800291e:	b25b      	sxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	db31      	blt.n	8002988 <sendDataToDisp+0xec>
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <sendDataToDisp+0xf8>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	0018      	movs	r0, r3
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <sendDataToDisp+0xfc>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	1c5a      	adds	r2, r3, #1
 8002930:	b2d1      	uxtb	r1, r2
 8002932:	4a19      	ldr	r2, [pc, #100]	; (8002998 <sendDataToDisp+0xfc>)
 8002934:	7011      	strb	r1, [r2, #0]
 8002936:	001c      	movs	r4, r3
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	0003      	movs	r3, r0
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	181b      	adds	r3, r3, r0
 8002940:	00da      	lsls	r2, r3, #3
 8002942:	1ad2      	subs	r2, r2, r3
 8002944:	188b      	adds	r3, r1, r2
 8002946:	191b      	adds	r3, r3, r4
 8002948:	3317      	adds	r3, #23
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	0018      	movs	r0, r3
 800294e:	f7ff feff 	bl	8002750 <LCD_Char>
}
 8002952:	e019      	b.n	8002988 <sendDataToDisp+0xec>
			current_state = 1;
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <sendDataToDisp+0xf4>)
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
			char_itter = 0;
 800295a:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <sendDataToDisp+0xfc>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
			if(++line_itter>(LCD_Y-1)){
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <sendDataToDisp+0xf8>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	3301      	adds	r3, #1
 8002966:	b2da      	uxtb	r2, r3
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <sendDataToDisp+0xf8>)
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <sendDataToDisp+0xf8>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d909      	bls.n	8002988 <sendDataToDisp+0xec>
				line_itter = 0;
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <sendDataToDisp+0xf8>)
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
				current_state = 0;
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <sendDataToDisp+0xf4>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim7);
 8002980:	4b06      	ldr	r3, [pc, #24]	; (800299c <sendDataToDisp+0x100>)
 8002982:	0018      	movs	r0, r3
 8002984:	f005 f872 	bl	8007a6c <HAL_TIM_Base_Stop_IT>
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b003      	add	sp, #12
 800298e:	bd90      	pop	{r4, r7, pc}
 8002990:	200001fc 	.word	0x200001fc
 8002994:	200001fd 	.word	0x200001fd
 8002998:	200001fe 	.word	0x200001fe
 800299c:	20000500 	.word	0x20000500

080029a0 <formDisp_TimeView>:


void formDisp_TimeView(struct lcd_display *displ) {
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	6078      	str	r0, [r7, #4]
	cleanLines(displ);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f940 	bl	8002c30 <cleanLines>
	snprintf((char*)displ->lines[0], (LCD_X+1)*sizeof(char), "Flower no. %i", displ->flowers[displ->flower_disp_state]->flower_id);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3317      	adds	r3, #23
 80029b4:	0018      	movs	r0, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	331c      	adds	r3, #28
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	18d3      	adds	r3, r2, r3
 80029c2:	3304      	adds	r3, #4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4a3d      	ldr	r2, [pc, #244]	; (8002ac0 <formDisp_TimeView+0x120>)
 80029ca:	2115      	movs	r1, #21
 80029cc:	f007 fe94 	bl	800a6f8 <sniprintf>
	snprintf((char*)displ->lines[1], (LCD_X+1)*sizeof(char), "Curr time: %02d:%02d:%02d", displ->currentRTCTime->Hours, displ->currentRTCTime->Minutes, displ->currentRTCTime->Seconds);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	332c      	adds	r3, #44	; 0x2c
 80029d4:	0018      	movs	r0, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	001c      	movs	r4, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e2:	785b      	ldrb	r3, [r3, #1]
 80029e4:	0019      	movs	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ea:	789b      	ldrb	r3, [r3, #2]
 80029ec:	4a35      	ldr	r2, [pc, #212]	; (8002ac4 <formDisp_TimeView+0x124>)
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	9100      	str	r1, [sp, #0]
 80029f2:	0023      	movs	r3, r4
 80029f4:	2115      	movs	r1, #21
 80029f6:	f007 fe7f 	bl	800a6f8 <sniprintf>
	snprintf((char*)displ->lines[2], (LCD_X+1)*sizeof(char), "Wat  time: %02d:%02d:%02d", displ->flowers[displ->flower_disp_state]->watering_time[0].Hours, displ->flowers[displ->flower_disp_state]->watering_time[0].Minutes, displ->flowers[displ->flower_disp_state]->watering_time[0].Seconds);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3341      	adds	r3, #65	; 0x41
 80029fe:	0018      	movs	r0, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	331c      	adds	r3, #28
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	18d3      	adds	r3, r2, r3
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2224      	movs	r2, #36	; 0x24
 8002a12:	5c9b      	ldrb	r3, [r3, r2]
 8002a14:	001c      	movs	r4, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	331c      	adds	r3, #28
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	18d3      	adds	r3, r2, r3
 8002a22:	3304      	adds	r3, #4
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2225      	movs	r2, #37	; 0x25
 8002a28:	5c9b      	ldrb	r3, [r3, r2]
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	331c      	adds	r3, #28
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	18d3      	adds	r3, r2, r3
 8002a38:	3304      	adds	r3, #4
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2226      	movs	r2, #38	; 0x26
 8002a3e:	5c9b      	ldrb	r3, [r3, r2]
 8002a40:	4a21      	ldr	r2, [pc, #132]	; (8002ac8 <formDisp_TimeView+0x128>)
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	9100      	str	r1, [sp, #0]
 8002a46:	0023      	movs	r3, r4
 8002a48:	2115      	movs	r1, #21
 8002a4a:	f007 fe55 	bl	800a6f8 <sniprintf>
	if(displ->flowers[displ->flower_disp_state]->was_watered_flag)snprintf((char*)displ->lines[3], (LCD_X+1)*sizeof(char), "Lst Wat:   %02d:%02d:%02d", displ->flowers[displ->flower_disp_state]->last_watering_time.Hours, displ->flowers[displ->flower_disp_state]->last_watering_time.Minutes, displ->flowers[displ->flower_disp_state]->last_watering_time.Seconds);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	331c      	adds	r3, #28
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	18d3      	adds	r3, r2, r3
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	785b      	ldrb	r3, [r3, #1]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d029      	beq.n	8002ab8 <formDisp_TimeView+0x118>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3356      	adds	r3, #86	; 0x56
 8002a68:	0018      	movs	r0, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	331c      	adds	r3, #28
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	18d3      	adds	r3, r2, r3
 8002a76:	3304      	adds	r3, #4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	224c      	movs	r2, #76	; 0x4c
 8002a7c:	5c9b      	ldrb	r3, [r3, r2]
 8002a7e:	001c      	movs	r4, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	331c      	adds	r3, #28
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	18d3      	adds	r3, r2, r3
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	224d      	movs	r2, #77	; 0x4d
 8002a92:	5c9b      	ldrb	r3, [r3, r2]
 8002a94:	0019      	movs	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	331c      	adds	r3, #28
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	18d3      	adds	r3, r2, r3
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	224e      	movs	r2, #78	; 0x4e
 8002aa8:	5c9b      	ldrb	r3, [r3, r2]
 8002aaa:	4a08      	ldr	r2, [pc, #32]	; (8002acc <formDisp_TimeView+0x12c>)
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	9100      	str	r1, [sp, #0]
 8002ab0:	0023      	movs	r3, r4
 8002ab2:	2115      	movs	r1, #21
 8002ab4:	f007 fe20 	bl	800a6f8 <sniprintf>

}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b003      	add	sp, #12
 8002abe:	bd90      	pop	{r4, r7, pc}
 8002ac0:	0800e434 	.word	0x0800e434
 8002ac4:	0800e444 	.word	0x0800e444
 8002ac8:	0800e460 	.word	0x0800e460
 8002acc:	0800e47c 	.word	0x0800e47c

08002ad0 <formDisp_MoistureView>:

void formDisp_MoistureView(struct lcd_display *displ){
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	cleanLines(displ);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 f8a8 	bl	8002c30 <cleanLines>
	snprintf((char*)displ->lines[0], (LCD_X+1)*sizeof(char), "Flower no. %i", displ->flowers[displ->flower_disp_state]->flower_id);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3317      	adds	r3, #23
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	331c      	adds	r3, #28
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	18d3      	adds	r3, r2, r3
 8002af2:	3304      	adds	r3, #4
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <formDisp_MoistureView+0x58>)
 8002afa:	2115      	movs	r1, #21
 8002afc:	f007 fdfc 	bl	800a6f8 <sniprintf>
	snprintf((char*)displ->lines[1], (LCD_X+1)*sizeof(char), "Moisture: %i", displ->flowers[displ->flower_disp_state]->moisture);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	332c      	adds	r3, #44	; 0x2c
 8002b04:	0018      	movs	r0, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	331c      	adds	r3, #28
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	18d3      	adds	r3, r2, r3
 8002b12:	3304      	adds	r3, #4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	7b1b      	ldrb	r3, [r3, #12]
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <formDisp_MoistureView+0x5c>)
 8002b1a:	2115      	movs	r1, #21
 8002b1c:	f007 fdec 	bl	800a6f8 <sniprintf>
	//snprintf((char*)disp->lines[2], LCD_X*sizeof(char), " ");
	//snprintf((char*)disp->lines[3], LCD_X*sizeof(char), " ");
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	0800e434 	.word	0x0800e434
 8002b2c:	0800e498 	.word	0x0800e498

08002b30 <formDisp_USART_RecieveDataView>:

void formDisp_USART_RecieveDataView(struct lcd_display *displ){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
	cleanLines(displ);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 f878 	bl	8002c30 <cleanLines>
	snprintf((char*)displ->lines[0], (LCD_X+1)*sizeof(char), "Received Data: ");
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3317      	adds	r3, #23
 8002b44:	4a08      	ldr	r2, [pc, #32]	; (8002b68 <formDisp_USART_RecieveDataView+0x38>)
 8002b46:	2115      	movs	r1, #21
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f007 fdd5 	bl	800a6f8 <sniprintf>
	snprintf((char*)displ->lines[1], (LCD_X+1)*sizeof(char), "%s", displ->additionalDisplayData);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	332c      	adds	r3, #44	; 0x2c
 8002b52:	0018      	movs	r0, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3303      	adds	r3, #3
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <formDisp_USART_RecieveDataView+0x3c>)
 8002b5a:	2115      	movs	r1, #21
 8002b5c:	f007 fdcc 	bl	800a6f8 <sniprintf>
	//snprintf((char*)disp->lines[2], LCD_X*sizeof(char), " ");
	//snprintf((char*)disp->lines[3], LCD_X*sizeof(char), " ");
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	0800e4a8 	.word	0x0800e4a8
 8002b6c:	0800e4b8 	.word	0x0800e4b8

08002b70 <formDisp_WateringProcess>:

void formDisp_WateringProcess(struct lcd_display *displ){
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	cleanLines(displ);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 f858 	bl	8002c30 <cleanLines>
	snprintf((char*)displ->lines[0], (LCD_X+1)*sizeof(char), "Watering process...");
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3317      	adds	r3, #23
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <formDisp_WateringProcess+0x28>)
 8002b86:	2115      	movs	r1, #21
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f007 fdb5 	bl	800a6f8 <sniprintf>
	//snprintf((char*)displ->lines[1], LCD_X*sizeof(char), " ");
	//snprintf((char*)displ->lines[2], LCD_X*sizeof(char), " ");
	//snprintf((char*)displ->lines[3], LCD_X*sizeof(char), " ");
}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b002      	add	sp, #8
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	0800e4bc 	.word	0x0800e4bc

08002b9c <updateDispData>:




void updateDispData(struct lcd_display *displ) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i< NUMBER_OF_FLOWERS; i++) {
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	e00c      	b.n	8002bc4 <updateDispData+0x28>
		rescaleSensorData(displ->flowers[i]);
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	331c      	adds	r3, #28
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	18d3      	adds	r3, r2, r3
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 fe23 	bl	8003804 <rescaleSensorData>
	for(int i = 0; i< NUMBER_OF_FLOWERS; i++) {
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	ddef      	ble.n	8002baa <updateDispData+0xe>
	}
	if(displ->disp_state==0) {
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <updateDispData+0x3e>
		displ->formDispData_ptr = &formDisp_TimeView;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a11      	ldr	r2, [pc, #68]	; (8002c1c <updateDispData+0x80>)
 8002bd6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bd8:	e016      	b.n	8002c08 <updateDispData+0x6c>
	}
	else if(disp.disp_state==1){
 8002bda:	4b11      	ldr	r3, [pc, #68]	; (8002c20 <updateDispData+0x84>)
 8002bdc:	785b      	ldrb	r3, [r3, #1]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d103      	bne.n	8002bea <updateDispData+0x4e>
		displ->formDispData_ptr = &formDisp_MoistureView;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a0f      	ldr	r2, [pc, #60]	; (8002c24 <updateDispData+0x88>)
 8002be6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002be8:	e00e      	b.n	8002c08 <updateDispData+0x6c>
		//rescaleSensorData(displ->flowers[displ->flower_disp_state]);
	}
	else if(disp.disp_state==2){
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <updateDispData+0x84>)
 8002bec:	785b      	ldrb	r3, [r3, #1]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d103      	bne.n	8002bfa <updateDispData+0x5e>
		displ->formDispData_ptr = &formDisp_USART_RecieveDataView;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a0c      	ldr	r2, [pc, #48]	; (8002c28 <updateDispData+0x8c>)
 8002bf6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bf8:	e006      	b.n	8002c08 <updateDispData+0x6c>
	}
	else if(disp.disp_state==3){
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <updateDispData+0x84>)
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d102      	bne.n	8002c08 <updateDispData+0x6c>
		displ->formDispData_ptr = &formDisp_WateringProcess;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <updateDispData+0x90>)
 8002c06:	67da      	str	r2, [r3, #124]	; 0x7c
	}
	(*(displ->formDispData_ptr))(displ);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	0010      	movs	r0, r2
 8002c10:	4798      	blx	r3

}
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	46bd      	mov	sp, r7
 8002c16:	b004      	add	sp, #16
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	080029a1 	.word	0x080029a1
 8002c20:	2000039c 	.word	0x2000039c
 8002c24:	08002ad1 	.word	0x08002ad1
 8002c28:	08002b31 	.word	0x08002b31
 8002c2c:	08002b71 	.word	0x08002b71

08002c30 <cleanLines>:

void cleanLines(struct lcd_display *displ){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	memset(displ->lines,0,LCD_X*LCD_Y*sizeof(displ->lines[0][0]));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3317      	adds	r3, #23
 8002c3c:	2250      	movs	r2, #80	; 0x50
 8002c3e:	2100      	movs	r1, #0
 8002c40:	0018      	movs	r0, r3
 8002c42:	f007 f8d7 	bl	8009df4 <memset>
}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b002      	add	sp, #8
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <changeDispState>:

void changeDispState(struct lcd_display *displ, uint8_t state){
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	000a      	movs	r2, r1
 8002c58:	1cfb      	adds	r3, r7, #3
 8002c5a:	701a      	strb	r2, [r3, #0]
	displ->previous_disp_state = displ->disp_state;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	785a      	ldrb	r2, [r3, #1]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	709a      	strb	r2, [r3, #2]
	displ->disp_state = state;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	1cfa      	adds	r2, r7, #3
 8002c68:	7812      	ldrb	r2, [r2, #0]
 8002c6a:	705a      	strb	r2, [r3, #1]
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b002      	add	sp, #8
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <dispInit>:
void dispInit(struct lcd_display *displ){
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	displ->currentRTCTime = &Rtc_Time;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a0c      	ldr	r2, [pc, #48]	; (8002cb0 <dispInit+0x3c>)
 8002c80:	66da      	str	r2, [r3, #108]	; 0x6c
	displ->currentRTCDate = &Rtc_Date;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a0b      	ldr	r2, [pc, #44]	; (8002cb4 <dispInit+0x40>)
 8002c86:	671a      	str	r2, [r3, #112]	; 0x70
	displ->flowers[0] = &flowers[0];
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	; (8002cb8 <dispInit+0x44>)
 8002c8c:	675a      	str	r2, [r3, #116]	; 0x74
	displ->flowers[1] = &flowers[1];
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <dispInit+0x48>)
 8002c92:	679a      	str	r2, [r3, #120]	; 0x78
	displ->formDispData_ptr = &formDisp_TimeView;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a0a      	ldr	r2, [pc, #40]	; (8002cc0 <dispInit+0x4c>)
 8002c98:	67da      	str	r2, [r3, #124]	; 0x7c
	displ->flower_disp_state = 0;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]
	displ->disp_state = 0;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	705a      	strb	r2, [r3, #1]
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000388 	.word	0x20000388
 8002cb4:	200002c0 	.word	0x200002c0
 8002cb8:	200002c4 	.word	0x200002c4
 8002cbc:	20000324 	.word	0x20000324
 8002cc0:	080029a1 	.word	0x080029a1

08002cc4 <parseData>:
  *
  ******************************************************************************
  */
#include "UART_message_parser.h"

uint8_t parseData(struct uart_struct *uart_str) {
 8002cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc6:	46c6      	mov	lr, r8
 8002cc8:	b500      	push	{lr}
 8002cca:	b08a      	sub	sp, #40	; 0x28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6178      	str	r0, [r7, #20]
 8002cd0:	4669      	mov	r1, sp
 8002cd2:	4688      	mov	r8, r1
	char buff[uart_str->receive_itter];
 8002cd4:	6979      	ldr	r1, [r7, #20]
 8002cd6:	7f89      	ldrb	r1, [r1, #30]
 8002cd8:	0008      	movs	r0, r1
 8002cda:	3801      	subs	r0, #1
 8002cdc:	6238      	str	r0, [r7, #32]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	68b8      	ldr	r0, [r7, #8]
 8002ce6:	0f40      	lsrs	r0, r0, #29
 8002ce8:	68fe      	ldr	r6, [r7, #12]
 8002cea:	00f5      	lsls	r5, r6, #3
 8002cec:	4305      	orrs	r5, r0
 8002cee:	68b8      	ldr	r0, [r7, #8]
 8002cf0:	00c4      	lsls	r4, r0, #3
 8002cf2:	6039      	str	r1, [r7, #0]
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	683c      	ldr	r4, [r7, #0]
 8002cfa:	687d      	ldr	r5, [r7, #4]
 8002cfc:	0020      	movs	r0, r4
 8002cfe:	0f40      	lsrs	r0, r0, #29
 8002d00:	002e      	movs	r6, r5
 8002d02:	00f3      	lsls	r3, r6, #3
 8002d04:	4303      	orrs	r3, r0
 8002d06:	0020      	movs	r0, r4
 8002d08:	00c2      	lsls	r2, r0, #3
 8002d0a:	000b      	movs	r3, r1
 8002d0c:	3307      	adds	r3, #7
 8002d0e:	08db      	lsrs	r3, r3, #3
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	466a      	mov	r2, sp
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	469d      	mov	sp, r3
 8002d18:	466b      	mov	r3, sp
 8002d1a:	3300      	adds	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]

	memset(buff, 0, uart_str->receive_itter);
 8002d1e:	69f8      	ldr	r0, [r7, #28]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	7f9b      	ldrb	r3, [r3, #30]
 8002d24:	001a      	movs	r2, r3
 8002d26:	2100      	movs	r1, #0
 8002d28:	f007 f864 	bl	8009df4 <memset>
	uint8_t buff_iter = 0;
 8002d2c:	2317      	movs	r3, #23
 8002d2e:	2210      	movs	r2, #16
 8002d30:	4694      	mov	ip, r2
 8002d32:	44bc      	add	ip, r7
 8002d34:	4463      	add	r3, ip
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
	uint8_t time_get_state =0;
 8002d3a:	2316      	movs	r3, #22
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	4694      	mov	ip, r2
 8002d40:	44bc      	add	ip, r7
 8002d42:	4463      	add	r3, ip
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]

	uint8_t flower_id = 0;
 8002d48:	230b      	movs	r3, #11
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	4694      	mov	ip, r2
 8002d4e:	44bc      	add	ip, r7
 8002d50:	4463      	add	r3, ip
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]

	for(uint8_t parse_iter =0; parse_iter < uart_str->receive_itter; parse_iter++) {
 8002d56:	2315      	movs	r3, #21
 8002d58:	2210      	movs	r2, #16
 8002d5a:	4694      	mov	ip, r2
 8002d5c:	44bc      	add	ip, r7
 8002d5e:	4463      	add	r3, ip
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
 8002d64:	e386      	b.n	8003474 <parseData+0x7b0>
	     if (uart_str->UART_data_buff[parse_iter] == ' '||uart_str->UART_data_buff[parse_iter] == '/') {
 8002d66:	2115      	movs	r1, #21
 8002d68:	2010      	movs	r0, #16
 8002d6a:	183b      	adds	r3, r7, r0
 8002d6c:	185b      	adds	r3, r3, r1
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d007      	beq.n	8002d88 <parseData+0xc4>
 8002d78:	183b      	adds	r3, r7, r0
 8002d7a:	185b      	adds	r3, r3, r1
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	5cd3      	ldrb	r3, [r2, r3]
 8002d82:	2b2f      	cmp	r3, #47	; 0x2f
 8002d84:	d000      	beq.n	8002d88 <parseData+0xc4>
 8002d86:	e362      	b.n	800344e <parseData+0x78a>
	            parse_iter++;
 8002d88:	2115      	movs	r1, #21
 8002d8a:	2010      	movs	r0, #16
 8002d8c:	183b      	adds	r3, r7, r0
 8002d8e:	185b      	adds	r3, r3, r1
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	183b      	adds	r3, r7, r0
 8002d94:	185b      	adds	r3, r3, r1
 8002d96:	3201      	adds	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]

	            if (!strcmp(buff, "setCurrTime")) {
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4ae3      	ldr	r2, [pc, #908]	; (800312c <parseData+0x468>)
 8002d9e:	0011      	movs	r1, r2
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7fd f9b1 	bl	8000108 <strcmp>
 8002da6:	1e03      	subs	r3, r0, #0
 8002da8:	d000      	beq.n	8002dac <parseData+0xe8>
 8002daa:	e0b8      	b.n	8002f1e <parseData+0x25a>

	                memset(buff, 0, uart_str->receive_itter);
 8002dac:	69f8      	ldr	r0, [r7, #28]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	7f9b      	ldrb	r3, [r3, #30]
 8002db2:	001a      	movs	r2, r3
 8002db4:	2100      	movs	r1, #0
 8002db6:	f007 f81d 	bl	8009df4 <memset>
	                while (parse_iter < uart_str->receive_itter) {
 8002dba:	e0a4      	b.n	8002f06 <parseData+0x242>
	                    if (uart_str->UART_data_buff[parse_iter] == ':') {
 8002dbc:	2415      	movs	r4, #21
 8002dbe:	2610      	movs	r6, #16
 8002dc0:	19bb      	adds	r3, r7, r6
 8002dc2:	191b      	adds	r3, r3, r4
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	5cd3      	ldrb	r3, [r2, r3]
 8002dca:	2b3a      	cmp	r3, #58	; 0x3a
 8002dcc:	d166      	bne.n	8002e9c <parseData+0x1d8>
	                        if (!time_get_state) {
 8002dce:	2516      	movs	r5, #22
 8002dd0:	19bb      	adds	r3, r7, r6
 8002dd2:	195b      	adds	r3, r3, r5
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d121      	bne.n	8002e1e <parseData+0x15a>

	                        	Rtc_Time.Hours = (uint8_t) atoi(buff);
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f006 ffd8 	bl	8009d92 <atoi>
 8002de2:	0003      	movs	r3, r0
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4bd2      	ldr	r3, [pc, #840]	; (8003130 <parseData+0x46c>)
 8002de8:	701a      	strb	r2, [r3, #0]
	                            memset(buff, 0, uart_str->receive_itter);
 8002dea:	69f8      	ldr	r0, [r7, #28]
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	7f9b      	ldrb	r3, [r3, #30]
 8002df0:	001a      	movs	r2, r3
 8002df2:	2100      	movs	r1, #0
 8002df4:	f006 fffe 	bl	8009df4 <memset>
	                            buff_iter = 0;
 8002df8:	2317      	movs	r3, #23
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	4694      	mov	ip, r2
 8002dfe:	44bc      	add	ip, r7
 8002e00:	4463      	add	r3, ip
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
	                            parse_iter++;
 8002e06:	19bb      	adds	r3, r7, r6
 8002e08:	191b      	adds	r3, r3, r4
 8002e0a:	781a      	ldrb	r2, [r3, #0]
 8002e0c:	19bb      	adds	r3, r7, r6
 8002e0e:	191b      	adds	r3, r3, r4
 8002e10:	3201      	adds	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
	                            time_get_state = 1;
 8002e14:	19bb      	adds	r3, r7, r6
 8002e16:	195b      	adds	r3, r3, r5
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e073      	b.n	8002f06 <parseData+0x242>
 8002e1e:	2217      	movs	r2, #23
 8002e20:	2110      	movs	r1, #16
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	189b      	adds	r3, r3, r2
 8002e26:	0016      	movs	r6, r2
 8002e28:	2010      	movs	r0, #16
 8002e2a:	4684      	mov	ip, r0
 8002e2c:	44bc      	add	ip, r7
 8002e2e:	4462      	add	r2, ip
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	2416      	movs	r4, #22
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	191b      	adds	r3, r3, r4
 8002e3a:	187a      	adds	r2, r7, r1
 8002e3c:	1912      	adds	r2, r2, r4
 8002e3e:	7812      	ldrb	r2, [r2, #0]
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	2515      	movs	r5, #21
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	195b      	adds	r3, r3, r5
 8002e48:	187a      	adds	r2, r7, r1
 8002e4a:	1952      	adds	r2, r2, r5
 8002e4c:	7812      	ldrb	r2, [r2, #0]
 8002e4e:	701a      	strb	r2, [r3, #0]
	                        } else if (time_get_state) {
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	191b      	adds	r3, r3, r4
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d055      	beq.n	8002f06 <parseData+0x242>

	                        	Rtc_Time.Minutes = (uint8_t) atoi(buff);
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f006 ff98 	bl	8009d92 <atoi>
 8002e62:	0003      	movs	r3, r0
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4bb2      	ldr	r3, [pc, #712]	; (8003130 <parseData+0x46c>)
 8002e68:	705a      	strb	r2, [r3, #1]
	                            memset(buff, 0, uart_str->receive_itter);
 8002e6a:	69f8      	ldr	r0, [r7, #28]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	7f9b      	ldrb	r3, [r3, #30]
 8002e70:	001a      	movs	r2, r3
 8002e72:	2100      	movs	r1, #0
 8002e74:	f006 ffbe 	bl	8009df4 <memset>
	                            buff_iter = 0;
 8002e78:	0032      	movs	r2, r6
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	189b      	adds	r3, r3, r2
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
	                            parse_iter++;
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	195b      	adds	r3, r3, r5
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	195b      	adds	r3, r3, r5
 8002e8e:	3201      	adds	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
	                            time_get_state = 0;
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	191b      	adds	r3, r3, r4
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e034      	b.n	8002f06 <parseData+0x242>
	                        }
	                    } else if (uart_str->UART_data_buff[parse_iter] == '/') {
 8002e9c:	2315      	movs	r3, #21
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	4694      	mov	ip, r2
 8002ea2:	44bc      	add	ip, r7
 8002ea4:	4463      	add	r3, ip
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	2b2f      	cmp	r3, #47	; 0x2f
 8002eae:	d10f      	bne.n	8002ed0 <parseData+0x20c>
	                    	Rtc_Time.Seconds = (uint8_t) atoi(buff);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f006 ff6d 	bl	8009d92 <atoi>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	4b9c      	ldr	r3, [pc, #624]	; (8003130 <parseData+0x46c>)
 8002ebe:	709a      	strb	r2, [r3, #2]
	                    	HAL_RTC_SetTime(&hrtc, &Rtc_Time, RTC_FORMAT_BIN);
 8002ec0:	499b      	ldr	r1, [pc, #620]	; (8003130 <parseData+0x46c>)
 8002ec2:	4b9c      	ldr	r3, [pc, #624]	; (8003134 <parseData+0x470>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f004 f998 	bl	80071fc <HAL_RTC_SetTime>

	                        return 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e2dd      	b.n	800348c <parseData+0x7c8>
	                    } else buff[buff_iter++] = uart_str->UART_data_buff[parse_iter++];
 8002ed0:	2215      	movs	r2, #21
 8002ed2:	2010      	movs	r0, #16
 8002ed4:	183b      	adds	r3, r7, r0
 8002ed6:	189b      	adds	r3, r3, r2
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2110      	movs	r1, #16
 8002edc:	468c      	mov	ip, r1
 8002ede:	44bc      	add	ip, r7
 8002ee0:	4462      	add	r2, ip
 8002ee2:	1c59      	adds	r1, r3, #1
 8002ee4:	7011      	strb	r1, [r2, #0]
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	2217      	movs	r2, #23
 8002eea:	183b      	adds	r3, r7, r0
 8002eec:	189b      	adds	r3, r3, r2
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2010      	movs	r0, #16
 8002ef2:	4684      	mov	ip, r0
 8002ef4:	44bc      	add	ip, r7
 8002ef6:	4462      	add	r2, ip
 8002ef8:	1c58      	adds	r0, r3, #1
 8002efa:	7010      	strb	r0, [r2, #0]
 8002efc:	001a      	movs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	5c59      	ldrb	r1, [r3, r1]
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	5499      	strb	r1, [r3, r2]
	                while (parse_iter < uart_str->receive_itter) {
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	7f9b      	ldrb	r3, [r3, #30]
 8002f0a:	2215      	movs	r2, #21
 8002f0c:	2110      	movs	r1, #16
 8002f0e:	468c      	mov	ip, r1
 8002f10:	44bc      	add	ip, r7
 8002f12:	4462      	add	r2, ip
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d200      	bcs.n	8002f1c <parseData+0x258>
 8002f1a:	e74f      	b.n	8002dbc <parseData+0xf8>
 8002f1c:	e297      	b.n	800344e <parseData+0x78a>
	                }

	            } else if (!strcmp(buff, "setWatTime")) {
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4a85      	ldr	r2, [pc, #532]	; (8003138 <parseData+0x474>)
 8002f22:	0011      	movs	r1, r2
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7fd f8ef 	bl	8000108 <strcmp>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d000      	beq.n	8002f30 <parseData+0x26c>
 8002f2e:	e151      	b.n	80031d4 <parseData+0x510>

	                memset(buff, 0, uart_str->receive_itter);
 8002f30:	69f8      	ldr	r0, [r7, #28]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	7f9b      	ldrb	r3, [r3, #30]
 8002f36:	001a      	movs	r2, r3
 8002f38:	2100      	movs	r1, #0
 8002f3a:	f006 ff5b 	bl	8009df4 <memset>
	                while (parse_iter < uart_str->receive_itter && uart_str->UART_data_buff[parse_iter] != ' ') {
 8002f3e:	e01a      	b.n	8002f76 <parseData+0x2b2>
	                    buff[buff_iter++] = uart_str->UART_data_buff[parse_iter++];
 8002f40:	2215      	movs	r2, #21
 8002f42:	2010      	movs	r0, #16
 8002f44:	183b      	adds	r3, r7, r0
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2110      	movs	r1, #16
 8002f4c:	468c      	mov	ip, r1
 8002f4e:	44bc      	add	ip, r7
 8002f50:	4462      	add	r2, ip
 8002f52:	1c59      	adds	r1, r3, #1
 8002f54:	7011      	strb	r1, [r2, #0]
 8002f56:	0019      	movs	r1, r3
 8002f58:	2217      	movs	r2, #23
 8002f5a:	183b      	adds	r3, r7, r0
 8002f5c:	189b      	adds	r3, r3, r2
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2010      	movs	r0, #16
 8002f62:	4684      	mov	ip, r0
 8002f64:	44bc      	add	ip, r7
 8002f66:	4462      	add	r2, ip
 8002f68:	1c58      	adds	r0, r3, #1
 8002f6a:	7010      	strb	r0, [r2, #0]
 8002f6c:	001a      	movs	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	5c59      	ldrb	r1, [r3, r1]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	5499      	strb	r1, [r3, r2]
	                while (parse_iter < uart_str->receive_itter && uart_str->UART_data_buff[parse_iter] != ' ') {
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	7f9b      	ldrb	r3, [r3, #30]
 8002f7a:	2115      	movs	r1, #21
 8002f7c:	2010      	movs	r0, #16
 8002f7e:	183a      	adds	r2, r7, r0
 8002f80:	1852      	adds	r2, r2, r1
 8002f82:	7812      	ldrb	r2, [r2, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d206      	bcs.n	8002f96 <parseData+0x2d2>
 8002f88:	183b      	adds	r3, r7, r0
 8002f8a:	185b      	adds	r3, r3, r1
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	5cd3      	ldrb	r3, [r2, r3]
 8002f92:	2b20      	cmp	r3, #32
 8002f94:	d1d4      	bne.n	8002f40 <parseData+0x27c>
	                }

	                flower_id = (int)atof(buff);
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f006 fef5 	bl	8009d88 <atof>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	000b      	movs	r3, r1
 8002fa2:	0010      	movs	r0, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	f7ff f999 	bl	80022dc <__aeabi_d2iz>
 8002faa:	0002      	movs	r2, r0
 8002fac:	210b      	movs	r1, #11
 8002fae:	2010      	movs	r0, #16
 8002fb0:	183b      	adds	r3, r7, r0
 8002fb2:	185b      	adds	r3, r3, r1
 8002fb4:	701a      	strb	r2, [r3, #0]
	                if(flower_id > NUMBER_OF_FLOWERS||flower_id==0) return 0;
 8002fb6:	000a      	movs	r2, r1
 8002fb8:	0001      	movs	r1, r0
 8002fba:	187b      	adds	r3, r7, r1
 8002fbc:	189b      	adds	r3, r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d804      	bhi.n	8002fce <parseData+0x30a>
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	189b      	adds	r3, r3, r2
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <parseData+0x30e>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e25c      	b.n	800348c <parseData+0x7c8>

	                buff_iter = 0;
 8002fd2:	2317      	movs	r3, #23
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	4694      	mov	ip, r2
 8002fd8:	44bc      	add	ip, r7
 8002fda:	4463      	add	r3, ip
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
	                memset(buff, 0, uart_str->receive_itter);
 8002fe0:	69f8      	ldr	r0, [r7, #28]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	7f9b      	ldrb	r3, [r3, #30]
 8002fe6:	001a      	movs	r2, r3
 8002fe8:	2100      	movs	r1, #0
 8002fea:	f006 ff03 	bl	8009df4 <memset>
	                parse_iter++;
 8002fee:	2115      	movs	r1, #21
 8002ff0:	2010      	movs	r0, #16
 8002ff2:	183b      	adds	r3, r7, r0
 8002ff4:	185b      	adds	r3, r3, r1
 8002ff6:	781a      	ldrb	r2, [r3, #0]
 8002ff8:	183b      	adds	r3, r7, r0
 8002ffa:	185b      	adds	r3, r3, r1
 8002ffc:	3201      	adds	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
	                while (parse_iter < uart_str->receive_itter) {
 8003000:	e0dc      	b.n	80031bc <parseData+0x4f8>
	                    if (uart_str->UART_data_buff[parse_iter] == ':') {
 8003002:	2515      	movs	r5, #21
 8003004:	2410      	movs	r4, #16
 8003006:	193b      	adds	r3, r7, r4
 8003008:	195b      	adds	r3, r3, r5
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	2b3a      	cmp	r3, #58	; 0x3a
 8003012:	d000      	beq.n	8003016 <parseData+0x352>
 8003014:	e094      	b.n	8003140 <parseData+0x47c>
	                        if (!time_get_state) {
 8003016:	2316      	movs	r3, #22
 8003018:	001e      	movs	r6, r3
 800301a:	2210      	movs	r2, #16
 800301c:	4694      	mov	ip, r2
 800301e:	44bc      	add	ip, r7
 8003020:	4463      	add	r3, ip
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d130      	bne.n	800308a <parseData+0x3c6>
	                            flowers[flower_id-1].watering_time[0].Hours = (int) atoi(buff);
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	0018      	movs	r0, r3
 800302c:	f006 feb1 	bl	8009d92 <atoi>
 8003030:	0001      	movs	r1, r0
 8003032:	220b      	movs	r2, #11
 8003034:	193b      	adds	r3, r7, r4
 8003036:	189b      	adds	r3, r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	1e5a      	subs	r2, r3, #1
 800303c:	b2cc      	uxtb	r4, r1
 800303e:	493f      	ldr	r1, [pc, #252]	; (800313c <parseData+0x478>)
 8003040:	2024      	movs	r0, #36	; 0x24
 8003042:	0013      	movs	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	189b      	adds	r3, r3, r2
 8003048:	015b      	lsls	r3, r3, #5
 800304a:	18cb      	adds	r3, r1, r3
 800304c:	181b      	adds	r3, r3, r0
 800304e:	1c22      	adds	r2, r4, #0
 8003050:	701a      	strb	r2, [r3, #0]
	                            memset(buff, 0, uart_str->receive_itter);
 8003052:	69f8      	ldr	r0, [r7, #28]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	7f9b      	ldrb	r3, [r3, #30]
 8003058:	001a      	movs	r2, r3
 800305a:	2100      	movs	r1, #0
 800305c:	f006 feca 	bl	8009df4 <memset>
	                            buff_iter = 0;
 8003060:	2217      	movs	r2, #23
 8003062:	2410      	movs	r4, #16
 8003064:	193b      	adds	r3, r7, r4
 8003066:	189b      	adds	r3, r3, r2
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
	                            parse_iter++;
 800306c:	193b      	adds	r3, r7, r4
 800306e:	195b      	adds	r3, r3, r5
 8003070:	781a      	ldrb	r2, [r3, #0]
 8003072:	193b      	adds	r3, r7, r4
 8003074:	195b      	adds	r3, r3, r5
 8003076:	3201      	adds	r2, #1
 8003078:	701a      	strb	r2, [r3, #0]
	                            time_get_state = 1;
 800307a:	0033      	movs	r3, r6
 800307c:	2210      	movs	r2, #16
 800307e:	4694      	mov	ip, r2
 8003080:	44bc      	add	ip, r7
 8003082:	4463      	add	r3, ip
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e098      	b.n	80031bc <parseData+0x4f8>
 800308a:	2217      	movs	r2, #23
 800308c:	2110      	movs	r1, #16
 800308e:	187b      	adds	r3, r7, r1
 8003090:	189b      	adds	r3, r3, r2
 8003092:	2010      	movs	r0, #16
 8003094:	4684      	mov	ip, r0
 8003096:	44bc      	add	ip, r7
 8003098:	4462      	add	r2, ip
 800309a:	7812      	ldrb	r2, [r2, #0]
 800309c:	701a      	strb	r2, [r3, #0]
 800309e:	2516      	movs	r5, #22
 80030a0:	0008      	movs	r0, r1
 80030a2:	183b      	adds	r3, r7, r0
 80030a4:	195b      	adds	r3, r3, r5
 80030a6:	183a      	adds	r2, r7, r0
 80030a8:	1952      	adds	r2, r2, r5
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	2115      	movs	r1, #21
 80030b0:	183b      	adds	r3, r7, r0
 80030b2:	185b      	adds	r3, r3, r1
 80030b4:	000e      	movs	r6, r1
 80030b6:	183a      	adds	r2, r7, r0
 80030b8:	1852      	adds	r2, r2, r1
 80030ba:	7812      	ldrb	r2, [r2, #0]
 80030bc:	701a      	strb	r2, [r3, #0]
	                        } else if (time_get_state) {
 80030be:	183b      	adds	r3, r7, r0
 80030c0:	195b      	adds	r3, r3, r5
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d100      	bne.n	80030ca <parseData+0x406>
 80030c8:	e078      	b.n	80031bc <parseData+0x4f8>
	                        	flowers[flower_id-1].watering_time[0].Minutes = (int) atoi(buff);
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f006 fe60 	bl	8009d92 <atoi>
 80030d2:	0001      	movs	r1, r0
 80030d4:	230b      	movs	r3, #11
 80030d6:	2210      	movs	r2, #16
 80030d8:	4694      	mov	ip, r2
 80030da:	44bc      	add	ip, r7
 80030dc:	4463      	add	r3, ip
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	1e5a      	subs	r2, r3, #1
 80030e2:	b2cc      	uxtb	r4, r1
 80030e4:	4915      	ldr	r1, [pc, #84]	; (800313c <parseData+0x478>)
 80030e6:	2025      	movs	r0, #37	; 0x25
 80030e8:	0013      	movs	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	189b      	adds	r3, r3, r2
 80030ee:	015b      	lsls	r3, r3, #5
 80030f0:	18cb      	adds	r3, r1, r3
 80030f2:	181b      	adds	r3, r3, r0
 80030f4:	1c22      	adds	r2, r4, #0
 80030f6:	701a      	strb	r2, [r3, #0]
	                            memset(buff, 0, uart_str->receive_itter);
 80030f8:	69f8      	ldr	r0, [r7, #28]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	7f9b      	ldrb	r3, [r3, #30]
 80030fe:	001a      	movs	r2, r3
 8003100:	2100      	movs	r1, #0
 8003102:	f006 fe77 	bl	8009df4 <memset>
	                            buff_iter = 0;
 8003106:	2217      	movs	r2, #23
 8003108:	2010      	movs	r0, #16
 800310a:	183b      	adds	r3, r7, r0
 800310c:	189b      	adds	r3, r3, r2
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
	                            parse_iter++;
 8003112:	0031      	movs	r1, r6
 8003114:	183b      	adds	r3, r7, r0
 8003116:	185b      	adds	r3, r3, r1
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	183b      	adds	r3, r7, r0
 800311c:	185b      	adds	r3, r3, r1
 800311e:	3201      	adds	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
	                            time_get_state = 0;
 8003122:	183b      	adds	r3, r7, r0
 8003124:	195b      	adds	r3, r3, r5
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e047      	b.n	80031bc <parseData+0x4f8>
 800312c:	0800e4d0 	.word	0x0800e4d0
 8003130:	20000388 	.word	0x20000388
 8003134:	2000041c 	.word	0x2000041c
 8003138:	0800e4dc 	.word	0x0800e4dc
 800313c:	200002c4 	.word	0x200002c4
	                        }
	                    } else if (uart_str->UART_data_buff[parse_iter] == '/') {
 8003140:	2315      	movs	r3, #21
 8003142:	2210      	movs	r2, #16
 8003144:	4694      	mov	ip, r2
 8003146:	44bc      	add	ip, r7
 8003148:	4463      	add	r3, ip
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	5cd3      	ldrb	r3, [r2, r3]
 8003150:	2b2f      	cmp	r3, #47	; 0x2f
 8003152:	d118      	bne.n	8003186 <parseData+0x4c2>
	                    	flowers[flower_id-1].watering_time[0].Seconds = (int) atoi(buff);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	0018      	movs	r0, r3
 8003158:	f006 fe1b 	bl	8009d92 <atoi>
 800315c:	0001      	movs	r1, r0
 800315e:	230b      	movs	r3, #11
 8003160:	2210      	movs	r2, #16
 8003162:	4694      	mov	ip, r2
 8003164:	44bc      	add	ip, r7
 8003166:	4463      	add	r3, ip
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	b2cc      	uxtb	r4, r1
 800316e:	49cb      	ldr	r1, [pc, #812]	; (800349c <parseData+0x7d8>)
 8003170:	2026      	movs	r0, #38	; 0x26
 8003172:	0013      	movs	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	189b      	adds	r3, r3, r2
 8003178:	015b      	lsls	r3, r3, #5
 800317a:	18cb      	adds	r3, r1, r3
 800317c:	181b      	adds	r3, r3, r0
 800317e:	1c22      	adds	r2, r4, #0
 8003180:	701a      	strb	r2, [r3, #0]
	                        return 1;
 8003182:	2301      	movs	r3, #1
 8003184:	e182      	b.n	800348c <parseData+0x7c8>
	                    } else buff[buff_iter++] = uart_str->UART_data_buff[parse_iter++];
 8003186:	2215      	movs	r2, #21
 8003188:	2010      	movs	r0, #16
 800318a:	183b      	adds	r3, r7, r0
 800318c:	189b      	adds	r3, r3, r2
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2110      	movs	r1, #16
 8003192:	468c      	mov	ip, r1
 8003194:	44bc      	add	ip, r7
 8003196:	4462      	add	r2, ip
 8003198:	1c59      	adds	r1, r3, #1
 800319a:	7011      	strb	r1, [r2, #0]
 800319c:	0019      	movs	r1, r3
 800319e:	2217      	movs	r2, #23
 80031a0:	183b      	adds	r3, r7, r0
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2010      	movs	r0, #16
 80031a8:	4684      	mov	ip, r0
 80031aa:	44bc      	add	ip, r7
 80031ac:	4462      	add	r2, ip
 80031ae:	1c58      	adds	r0, r3, #1
 80031b0:	7010      	strb	r0, [r2, #0]
 80031b2:	001a      	movs	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	5c59      	ldrb	r1, [r3, r1]
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	5499      	strb	r1, [r3, r2]
	                while (parse_iter < uart_str->receive_itter) {
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	7f9b      	ldrb	r3, [r3, #30]
 80031c0:	2215      	movs	r2, #21
 80031c2:	2110      	movs	r1, #16
 80031c4:	468c      	mov	ip, r1
 80031c6:	44bc      	add	ip, r7
 80031c8:	4462      	add	r2, ip
 80031ca:	7812      	ldrb	r2, [r2, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d200      	bcs.n	80031d2 <parseData+0x50e>
 80031d0:	e717      	b.n	8003002 <parseData+0x33e>
 80031d2:	e13c      	b.n	800344e <parseData+0x78a>
	                }

	            } else if (!strcmp(buff, "setDurTime")) {
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	4ab2      	ldr	r2, [pc, #712]	; (80034a0 <parseData+0x7dc>)
 80031d8:	0011      	movs	r1, r2
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fc ff94 	bl	8000108 <strcmp>
 80031e0:	1e03      	subs	r3, r0, #0
 80031e2:	d000      	beq.n	80031e6 <parseData+0x522>
 80031e4:	e0b8      	b.n	8003358 <parseData+0x694>

	                memset(buff, 0, uart_str->receive_itter);
 80031e6:	69f8      	ldr	r0, [r7, #28]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	7f9b      	ldrb	r3, [r3, #30]
 80031ec:	001a      	movs	r2, r3
 80031ee:	2100      	movs	r1, #0
 80031f0:	f006 fe00 	bl	8009df4 <memset>
	                while (parse_iter < uart_str->receive_itter && uart_str->UART_data_buff[parse_iter] != ' ') {
 80031f4:	e01a      	b.n	800322c <parseData+0x568>
	                    buff[buff_iter++] = uart_str->UART_data_buff[parse_iter++];
 80031f6:	2215      	movs	r2, #21
 80031f8:	2010      	movs	r0, #16
 80031fa:	183b      	adds	r3, r7, r0
 80031fc:	189b      	adds	r3, r3, r2
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2110      	movs	r1, #16
 8003202:	468c      	mov	ip, r1
 8003204:	44bc      	add	ip, r7
 8003206:	4462      	add	r2, ip
 8003208:	1c59      	adds	r1, r3, #1
 800320a:	7011      	strb	r1, [r2, #0]
 800320c:	0019      	movs	r1, r3
 800320e:	2217      	movs	r2, #23
 8003210:	183b      	adds	r3, r7, r0
 8003212:	189b      	adds	r3, r3, r2
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2010      	movs	r0, #16
 8003218:	4684      	mov	ip, r0
 800321a:	44bc      	add	ip, r7
 800321c:	4462      	add	r2, ip
 800321e:	1c58      	adds	r0, r3, #1
 8003220:	7010      	strb	r0, [r2, #0]
 8003222:	001a      	movs	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	5c59      	ldrb	r1, [r3, r1]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	5499      	strb	r1, [r3, r2]
	                while (parse_iter < uart_str->receive_itter && uart_str->UART_data_buff[parse_iter] != ' ') {
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	7f9b      	ldrb	r3, [r3, #30]
 8003230:	2115      	movs	r1, #21
 8003232:	2010      	movs	r0, #16
 8003234:	183a      	adds	r2, r7, r0
 8003236:	1852      	adds	r2, r2, r1
 8003238:	7812      	ldrb	r2, [r2, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d206      	bcs.n	800324c <parseData+0x588>
 800323e:	183b      	adds	r3, r7, r0
 8003240:	185b      	adds	r3, r3, r1
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	2b20      	cmp	r3, #32
 800324a:	d1d4      	bne.n	80031f6 <parseData+0x532>
	                }
	                flower_id = (int)atof(buff);
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	0018      	movs	r0, r3
 8003250:	f006 fd9a 	bl	8009d88 <atof>
 8003254:	0002      	movs	r2, r0
 8003256:	000b      	movs	r3, r1
 8003258:	0010      	movs	r0, r2
 800325a:	0019      	movs	r1, r3
 800325c:	f7ff f83e 	bl	80022dc <__aeabi_d2iz>
 8003260:	0002      	movs	r2, r0
 8003262:	210b      	movs	r1, #11
 8003264:	2010      	movs	r0, #16
 8003266:	183b      	adds	r3, r7, r0
 8003268:	185b      	adds	r3, r3, r1
 800326a:	701a      	strb	r2, [r3, #0]
	                if(flower_id > NUMBER_OF_FLOWERS||flower_id<=0) return 0;
 800326c:	000a      	movs	r2, r1
 800326e:	0001      	movs	r1, r0
 8003270:	187b      	adds	r3, r7, r1
 8003272:	189b      	adds	r3, r3, r2
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b02      	cmp	r3, #2
 8003278:	d804      	bhi.n	8003284 <parseData+0x5c0>
 800327a:	187b      	adds	r3, r7, r1
 800327c:	189b      	adds	r3, r3, r2
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <parseData+0x5c4>
 8003284:	2300      	movs	r3, #0
 8003286:	e101      	b.n	800348c <parseData+0x7c8>

	                buff_iter = 0;
 8003288:	2317      	movs	r3, #23
 800328a:	2210      	movs	r2, #16
 800328c:	4694      	mov	ip, r2
 800328e:	44bc      	add	ip, r7
 8003290:	4463      	add	r3, ip
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
	                memset(buff, 0, uart_str->receive_itter);
 8003296:	69f8      	ldr	r0, [r7, #28]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	7f9b      	ldrb	r3, [r3, #30]
 800329c:	001a      	movs	r2, r3
 800329e:	2100      	movs	r1, #0
 80032a0:	f006 fda8 	bl	8009df4 <memset>
	                parse_iter++;
 80032a4:	2115      	movs	r1, #21
 80032a6:	2010      	movs	r0, #16
 80032a8:	183b      	adds	r3, r7, r0
 80032aa:	185b      	adds	r3, r3, r1
 80032ac:	781a      	ldrb	r2, [r3, #0]
 80032ae:	183b      	adds	r3, r7, r0
 80032b0:	185b      	adds	r3, r3, r1
 80032b2:	3201      	adds	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
	                memset(buff, 0, uart_str->receive_itter);
 80032b6:	69f8      	ldr	r0, [r7, #28]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	7f9b      	ldrb	r3, [r3, #30]
 80032bc:	001a      	movs	r2, r3
 80032be:	2100      	movs	r1, #0
 80032c0:	f006 fd98 	bl	8009df4 <memset>
	                while (parse_iter < uart_str->receive_itter && uart_str->UART_data_buff[parse_iter] != '/') {
 80032c4:	e01a      	b.n	80032fc <parseData+0x638>
	                    buff[buff_iter++] = uart_str->UART_data_buff[parse_iter++];
 80032c6:	2215      	movs	r2, #21
 80032c8:	2010      	movs	r0, #16
 80032ca:	183b      	adds	r3, r7, r0
 80032cc:	189b      	adds	r3, r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2110      	movs	r1, #16
 80032d2:	468c      	mov	ip, r1
 80032d4:	44bc      	add	ip, r7
 80032d6:	4462      	add	r2, ip
 80032d8:	1c59      	adds	r1, r3, #1
 80032da:	7011      	strb	r1, [r2, #0]
 80032dc:	0019      	movs	r1, r3
 80032de:	2217      	movs	r2, #23
 80032e0:	183b      	adds	r3, r7, r0
 80032e2:	189b      	adds	r3, r3, r2
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2010      	movs	r0, #16
 80032e8:	4684      	mov	ip, r0
 80032ea:	44bc      	add	ip, r7
 80032ec:	4462      	add	r2, ip
 80032ee:	1c58      	adds	r0, r3, #1
 80032f0:	7010      	strb	r0, [r2, #0]
 80032f2:	001a      	movs	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	5c59      	ldrb	r1, [r3, r1]
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	5499      	strb	r1, [r3, r2]
	                while (parse_iter < uart_str->receive_itter && uart_str->UART_data_buff[parse_iter] != '/') {
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	7f9b      	ldrb	r3, [r3, #30]
 8003300:	2115      	movs	r1, #21
 8003302:	2010      	movs	r0, #16
 8003304:	183a      	adds	r2, r7, r0
 8003306:	1852      	adds	r2, r2, r1
 8003308:	7812      	ldrb	r2, [r2, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d206      	bcs.n	800331c <parseData+0x658>
 800330e:	183b      	adds	r3, r7, r0
 8003310:	185b      	adds	r3, r3, r1
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	5cd3      	ldrb	r3, [r2, r3]
 8003318:	2b2f      	cmp	r3, #47	; 0x2f
 800331a:	d1d4      	bne.n	80032c6 <parseData+0x602>
	                }
	                flowers[flower_id-1].watering_duration = (int)atof(buff);
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	0018      	movs	r0, r3
 8003320:	f006 fd32 	bl	8009d88 <atof>
 8003324:	0002      	movs	r2, r0
 8003326:	000b      	movs	r3, r1
 8003328:	0010      	movs	r0, r2
 800332a:	0019      	movs	r1, r3
 800332c:	f7fe ffd6 	bl	80022dc <__aeabi_d2iz>
 8003330:	0001      	movs	r1, r0
 8003332:	230b      	movs	r3, #11
 8003334:	2210      	movs	r2, #16
 8003336:	4694      	mov	ip, r2
 8003338:	44bc      	add	ip, r7
 800333a:	4463      	add	r3, ip
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	1e5a      	subs	r2, r3, #1
 8003340:	b288      	uxth	r0, r1
 8003342:	4956      	ldr	r1, [pc, #344]	; (800349c <parseData+0x7d8>)
 8003344:	0013      	movs	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	189b      	adds	r3, r3, r2
 800334a:	015b      	lsls	r3, r3, #5
 800334c:	18cb      	adds	r3, r1, r3
 800334e:	3320      	adds	r3, #32
 8003350:	1c02      	adds	r2, r0, #0
 8003352:	801a      	strh	r2, [r3, #0]
	                return 1;
 8003354:	2301      	movs	r3, #1
 8003356:	e099      	b.n	800348c <parseData+0x7c8>

	            } else if (!strcmp(buff, "startWat")) {
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	4a52      	ldr	r2, [pc, #328]	; (80034a4 <parseData+0x7e0>)
 800335c:	0011      	movs	r1, r2
 800335e:	0018      	movs	r0, r3
 8003360:	f7fc fed2 	bl	8000108 <strcmp>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d162      	bne.n	800342e <parseData+0x76a>

	                memset(buff, 0, uart_str->receive_itter);
 8003368:	69f8      	ldr	r0, [r7, #28]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	7f9b      	ldrb	r3, [r3, #30]
 800336e:	001a      	movs	r2, r3
 8003370:	2100      	movs	r1, #0
 8003372:	f006 fd3f 	bl	8009df4 <memset>
	                while (parse_iter < uart_str->receive_itter && uart_str->UART_data_buff[parse_iter] != ' ') {
 8003376:	e01a      	b.n	80033ae <parseData+0x6ea>
	                    buff[buff_iter++] = uart_str->UART_data_buff[parse_iter++];
 8003378:	2215      	movs	r2, #21
 800337a:	2010      	movs	r0, #16
 800337c:	183b      	adds	r3, r7, r0
 800337e:	189b      	adds	r3, r3, r2
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2110      	movs	r1, #16
 8003384:	468c      	mov	ip, r1
 8003386:	44bc      	add	ip, r7
 8003388:	4462      	add	r2, ip
 800338a:	1c59      	adds	r1, r3, #1
 800338c:	7011      	strb	r1, [r2, #0]
 800338e:	0019      	movs	r1, r3
 8003390:	2217      	movs	r2, #23
 8003392:	183b      	adds	r3, r7, r0
 8003394:	189b      	adds	r3, r3, r2
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2010      	movs	r0, #16
 800339a:	4684      	mov	ip, r0
 800339c:	44bc      	add	ip, r7
 800339e:	4462      	add	r2, ip
 80033a0:	1c58      	adds	r0, r3, #1
 80033a2:	7010      	strb	r0, [r2, #0]
 80033a4:	001a      	movs	r2, r3
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	5c59      	ldrb	r1, [r3, r1]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	5499      	strb	r1, [r3, r2]
	                while (parse_iter < uart_str->receive_itter && uart_str->UART_data_buff[parse_iter] != ' ') {
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	7f9b      	ldrb	r3, [r3, #30]
 80033b2:	2115      	movs	r1, #21
 80033b4:	2010      	movs	r0, #16
 80033b6:	183a      	adds	r2, r7, r0
 80033b8:	1852      	adds	r2, r2, r1
 80033ba:	7812      	ldrb	r2, [r2, #0]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d206      	bcs.n	80033ce <parseData+0x70a>
 80033c0:	183b      	adds	r3, r7, r0
 80033c2:	185b      	adds	r3, r3, r1
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	5cd3      	ldrb	r3, [r2, r3]
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d1d4      	bne.n	8003378 <parseData+0x6b4>
	                }
	                flower_id = (int)atof(buff);
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f006 fcd9 	bl	8009d88 <atof>
 80033d6:	0002      	movs	r2, r0
 80033d8:	000b      	movs	r3, r1
 80033da:	0010      	movs	r0, r2
 80033dc:	0019      	movs	r1, r3
 80033de:	f7fe ff7d 	bl	80022dc <__aeabi_d2iz>
 80033e2:	0002      	movs	r2, r0
 80033e4:	210b      	movs	r1, #11
 80033e6:	2010      	movs	r0, #16
 80033e8:	183b      	adds	r3, r7, r0
 80033ea:	185b      	adds	r3, r3, r1
 80033ec:	701a      	strb	r2, [r3, #0]

	                if(flower_id > NUMBER_OF_FLOWERS||flower_id<=0)return 0;
 80033ee:	000a      	movs	r2, r1
 80033f0:	0001      	movs	r1, r0
 80033f2:	187b      	adds	r3, r7, r1
 80033f4:	189b      	adds	r3, r3, r2
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d804      	bhi.n	8003406 <parseData+0x742>
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	189b      	adds	r3, r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <parseData+0x746>
 8003406:	2300      	movs	r3, #0
 8003408:	e040      	b.n	800348c <parseData+0x7c8>
	                else {
	                	flowers[flower_id-1].watering_flag = 1;
 800340a:	230b      	movs	r3, #11
 800340c:	2210      	movs	r2, #16
 800340e:	4694      	mov	ip, r2
 8003410:	44bc      	add	ip, r7
 8003412:	4463      	add	r3, ip
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	1e5a      	subs	r2, r3, #1
 8003418:	4920      	ldr	r1, [pc, #128]	; (800349c <parseData+0x7d8>)
 800341a:	0013      	movs	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	189b      	adds	r3, r3, r2
 8003420:	015b      	lsls	r3, r3, #5
 8003422:	18cb      	adds	r3, r1, r3
 8003424:	3303      	adds	r3, #3
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
	                	return 1;
 800342a:	2301      	movs	r3, #1
 800342c:	e02e      	b.n	800348c <parseData+0x7c8>
	                }


	            } else if (!strcmp(buff, "info")) {
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4a1d      	ldr	r2, [pc, #116]	; (80034a8 <parseData+0x7e4>)
 8003432:	0011      	movs	r1, r2
 8003434:	0018      	movs	r0, r3
 8003436:	f7fc fe67 	bl	8000108 <strcmp>
 800343a:	1e03      	subs	r3, r0, #0
 800343c:	d105      	bne.n	800344a <parseData+0x786>

	            	uart_str->sending_data_flag = 1;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2221      	movs	r2, #33	; 0x21
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]
	            	return 1;
 8003446:	2301      	movs	r3, #1
 8003448:	e020      	b.n	800348c <parseData+0x7c8>

	            } else {

	            	return 0;
 800344a:	2300      	movs	r3, #0
 800344c:	e01e      	b.n	800348c <parseData+0x7c8>
	            }

	        }
	        buff[parse_iter] = uart_str->UART_data_buff[parse_iter];
 800344e:	2015      	movs	r0, #21
 8003450:	2410      	movs	r4, #16
 8003452:	193b      	adds	r3, r7, r4
 8003454:	181b      	adds	r3, r3, r0
 8003456:	781a      	ldrb	r2, [r3, #0]
 8003458:	193b      	adds	r3, r7, r4
 800345a:	181b      	adds	r3, r3, r0
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	6979      	ldr	r1, [r7, #20]
 8003460:	5c89      	ldrb	r1, [r1, r2]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	54d1      	strb	r1, [r2, r3]
	for(uint8_t parse_iter =0; parse_iter < uart_str->receive_itter; parse_iter++) {
 8003466:	193b      	adds	r3, r7, r4
 8003468:	181b      	adds	r3, r3, r0
 800346a:	781a      	ldrb	r2, [r3, #0]
 800346c:	193b      	adds	r3, r7, r4
 800346e:	181b      	adds	r3, r3, r0
 8003470:	3201      	adds	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	7f9b      	ldrb	r3, [r3, #30]
 8003478:	2215      	movs	r2, #21
 800347a:	2110      	movs	r1, #16
 800347c:	468c      	mov	ip, r1
 800347e:	44bc      	add	ip, r7
 8003480:	4462      	add	r2, ip
 8003482:	7812      	ldrb	r2, [r2, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d200      	bcs.n	800348a <parseData+0x7c6>
 8003488:	e46d      	b.n	8002d66 <parseData+0xa2>
	    }
	return 0;
 800348a:	2300      	movs	r3, #0
 800348c:	46c5      	mov	sp, r8
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b00a      	add	sp, #40	; 0x28
 8003494:	bc80      	pop	{r7}
 8003496:	46b8      	mov	r8, r7
 8003498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	200002c4 	.word	0x200002c4
 80034a0:	0800e4e8 	.word	0x0800e4e8
 80034a4:	0800e4f4 	.word	0x0800e4f4
 80034a8:	0800e500 	.word	0x0800e500

080034ac <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034b2:	003b      	movs	r3, r7
 80034b4:	0018      	movs	r0, r3
 80034b6:	2308      	movs	r3, #8
 80034b8:	001a      	movs	r2, r3
 80034ba:	2100      	movs	r1, #0
 80034bc:	f006 fc9a 	bl	8009df4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80034c0:	4b30      	ldr	r3, [pc, #192]	; (8003584 <MX_ADC_Init+0xd8>)
 80034c2:	4a31      	ldr	r2, [pc, #196]	; (8003588 <MX_ADC_Init+0xdc>)
 80034c4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80034c6:	4b2f      	ldr	r3, [pc, #188]	; (8003584 <MX_ADC_Init+0xd8>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <MX_ADC_Init+0xd8>)
 80034ce:	2290      	movs	r2, #144	; 0x90
 80034d0:	0392      	lsls	r2, r2, #14
 80034d2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 80034d4:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <MX_ADC_Init+0xd8>)
 80034d6:	2210      	movs	r2, #16
 80034d8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 80034da:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <MX_ADC_Init+0xd8>)
 80034dc:	2207      	movs	r2, #7
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80034e0:	4b28      	ldr	r3, [pc, #160]	; (8003584 <MX_ADC_Init+0xd8>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034e6:	4b27      	ldr	r3, [pc, #156]	; (8003584 <MX_ADC_Init+0xd8>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80034ec:	4b25      	ldr	r3, [pc, #148]	; (8003584 <MX_ADC_Init+0xd8>)
 80034ee:	2220      	movs	r2, #32
 80034f0:	2101      	movs	r1, #1
 80034f2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80034f4:	4b23      	ldr	r3, [pc, #140]	; (8003584 <MX_ADC_Init+0xd8>)
 80034f6:	2221      	movs	r2, #33	; 0x21
 80034f8:	2100      	movs	r1, #0
 80034fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034fc:	4b21      	ldr	r3, [pc, #132]	; (8003584 <MX_ADC_Init+0xd8>)
 80034fe:	2200      	movs	r2, #0
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003502:	4b20      	ldr	r3, [pc, #128]	; (8003584 <MX_ADC_Init+0xd8>)
 8003504:	22c2      	movs	r2, #194	; 0xc2
 8003506:	32ff      	adds	r2, #255	; 0xff
 8003508:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 800350a:	4b1e      	ldr	r3, [pc, #120]	; (8003584 <MX_ADC_Init+0xd8>)
 800350c:	222c      	movs	r2, #44	; 0x2c
 800350e:	2101      	movs	r1, #1
 8003510:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003512:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <MX_ADC_Init+0xd8>)
 8003514:	2204      	movs	r2, #4
 8003516:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003518:	4b1a      	ldr	r3, [pc, #104]	; (8003584 <MX_ADC_Init+0xd8>)
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800351e:	4b19      	ldr	r3, [pc, #100]	; (8003584 <MX_ADC_Init+0xd8>)
 8003520:	2200      	movs	r2, #0
 8003522:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8003524:	4b17      	ldr	r3, [pc, #92]	; (8003584 <MX_ADC_Init+0xd8>)
 8003526:	2201      	movs	r2, #1
 8003528:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 800352a:	4b16      	ldr	r3, [pc, #88]	; (8003584 <MX_ADC_Init+0xd8>)
 800352c:	2201      	movs	r2, #1
 800352e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <MX_ADC_Init+0xd8>)
 8003532:	0018      	movs	r0, r3
 8003534:	f001 fcf0 	bl	8004f18 <HAL_ADC_Init>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d001      	beq.n	8003540 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800353c:	f000 fcb4 	bl	8003ea8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003540:	003b      	movs	r3, r7
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003546:	003b      	movs	r3, r7
 8003548:	2280      	movs	r2, #128	; 0x80
 800354a:	0152      	lsls	r2, r2, #5
 800354c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800354e:	003a      	movs	r2, r7
 8003550:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <MX_ADC_Init+0xd8>)
 8003552:	0011      	movs	r1, r2
 8003554:	0018      	movs	r0, r3
 8003556:	f001 feed 	bl	8005334 <HAL_ADC_ConfigChannel>
 800355a:	1e03      	subs	r3, r0, #0
 800355c:	d001      	beq.n	8003562 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800355e:	f000 fca3 	bl	8003ea8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003562:	003b      	movs	r3, r7
 8003564:	4a09      	ldr	r2, [pc, #36]	; (800358c <MX_ADC_Init+0xe0>)
 8003566:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003568:	003a      	movs	r2, r7
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <MX_ADC_Init+0xd8>)
 800356c:	0011      	movs	r1, r2
 800356e:	0018      	movs	r0, r3
 8003570:	f001 fee0 	bl	8005334 <HAL_ADC_ConfigChannel>
 8003574:	1e03      	subs	r3, r0, #0
 8003576:	d001      	beq.n	800357c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8003578:	f000 fc96 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800357c:	46c0      	nop			; (mov r8, r8)
 800357e:	46bd      	mov	sp, r7
 8003580:	b002      	add	sp, #8
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000254 	.word	0x20000254
 8003588:	40012400 	.word	0x40012400
 800358c:	04000002 	.word	0x04000002

08003590 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b089      	sub	sp, #36	; 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003598:	240c      	movs	r4, #12
 800359a:	193b      	adds	r3, r7, r4
 800359c:	0018      	movs	r0, r3
 800359e:	2314      	movs	r3, #20
 80035a0:	001a      	movs	r2, r3
 80035a2:	2100      	movs	r1, #0
 80035a4:	f006 fc26 	bl	8009df4 <memset>
  if(adcHandle->Instance==ADC1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2a      	ldr	r2, [pc, #168]	; (8003658 <HAL_ADC_MspInit+0xc8>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d14d      	bne.n	800364e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035b2:	4b2a      	ldr	r3, [pc, #168]	; (800365c <HAL_ADC_MspInit+0xcc>)
 80035b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035b6:	4b29      	ldr	r3, [pc, #164]	; (800365c <HAL_ADC_MspInit+0xcc>)
 80035b8:	2180      	movs	r1, #128	; 0x80
 80035ba:	0089      	lsls	r1, r1, #2
 80035bc:	430a      	orrs	r2, r1
 80035be:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c0:	4b26      	ldr	r3, [pc, #152]	; (800365c <HAL_ADC_MspInit+0xcc>)
 80035c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c4:	4b25      	ldr	r3, [pc, #148]	; (800365c <HAL_ADC_MspInit+0xcc>)
 80035c6:	2101      	movs	r1, #1
 80035c8:	430a      	orrs	r2, r1
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80035cc:	4b23      	ldr	r3, [pc, #140]	; (800365c <HAL_ADC_MspInit+0xcc>)
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	2201      	movs	r2, #1
 80035d2:	4013      	ands	r3, r2
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = MoistureSensor1_Pin|MoistureSensor2_Pin;
 80035d8:	193b      	adds	r3, r7, r4
 80035da:	2203      	movs	r2, #3
 80035dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035de:	193b      	adds	r3, r7, r4
 80035e0:	2203      	movs	r2, #3
 80035e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e4:	193b      	adds	r3, r7, r4
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ea:	193a      	adds	r2, r7, r4
 80035ec:	23a0      	movs	r3, #160	; 0xa0
 80035ee:	05db      	lsls	r3, r3, #23
 80035f0:	0011      	movs	r1, r2
 80035f2:	0018      	movs	r0, r3
 80035f4:	f002 fc08 	bl	8005e08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80035f8:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 80035fa:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <HAL_ADC_MspInit+0xd4>)
 80035fc:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 8003600:	2200      	movs	r2, #0
 8003602:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003604:	4b16      	ldr	r3, [pc, #88]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 800360c:	2200      	movs	r2, #0
 800360e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003610:	4b13      	ldr	r3, [pc, #76]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 8003612:	2280      	movs	r2, #128	; 0x80
 8003614:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	0052      	lsls	r2, r2, #1
 800361c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 8003620:	2280      	movs	r2, #128	; 0x80
 8003622:	00d2      	lsls	r2, r2, #3
 8003624:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003626:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 8003628:	2220      	movs	r2, #32
 800362a:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 800362e:	2200      	movs	r2, #0
 8003630:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 8003634:	0018      	movs	r0, r3
 8003636:	f002 f9a5 	bl	8005984 <HAL_DMA_Init>
 800363a:	1e03      	subs	r3, r0, #0
 800363c:	d001      	beq.n	8003642 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800363e:	f000 fc33 	bl	8003ea8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a06      	ldr	r2, [pc, #24]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 8003646:	64da      	str	r2, [r3, #76]	; 0x4c
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_ADC_MspInit+0xd0>)
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b009      	add	sp, #36	; 0x24
 8003654:	bd90      	pop	{r4, r7, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	40012400 	.word	0x40012400
 800365c:	40021000 	.word	0x40021000
 8003660:	2000020c 	.word	0x2000020c
 8003664:	40020008 	.word	0x40020008

08003668 <BLUE_BUTTONFun>:
  ******************************************************************************
  */
#include "buttons.h"


void BLUE_BUTTONFun(){
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
	Reset_Time(&hrtc, disp.currentRTCTime);
 800366c:	4b04      	ldr	r3, [pc, #16]	; (8003680 <BLUE_BUTTONFun+0x18>)
 800366e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <BLUE_BUTTONFun+0x1c>)
 8003672:	0011      	movs	r1, r2
 8003674:	0018      	movs	r0, r3
 8003676:	f000 fcb9 	bl	8003fec <Reset_Time>
}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	2000039c 	.word	0x2000039c
 8003684:	2000041c 	.word	0x2000041c

08003688 <LCD_Button1Fun>:

void LCD_Button1Fun(){
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
	if(++(disp.disp_state)>1) {
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <LCD_Button1Fun+0x28>)
 800368e:	785b      	ldrb	r3, [r3, #1]
 8003690:	3301      	adds	r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <LCD_Button1Fun+0x28>)
 8003696:	705a      	strb	r2, [r3, #1]
 8003698:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <LCD_Button1Fun+0x28>)
 800369a:	785b      	ldrb	r3, [r3, #1]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d904      	bls.n	80036aa <LCD_Button1Fun+0x22>
		changeDispState(&disp, 0);
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <LCD_Button1Fun+0x28>)
 80036a2:	2100      	movs	r1, #0
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7ff fad2 	bl	8002c4e <changeDispState>
	}

}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	2000039c 	.word	0x2000039c

080036b4 <LCD_Button2Fun>:
void LCD_Button2Fun(){
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
	if(++(disp.flower_disp_state)>1) disp.flower_disp_state = 0;
 80036b8:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <LCD_Button2Fun+0x24>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <LCD_Button2Fun+0x24>)
 80036c2:	701a      	strb	r2, [r3, #0]
 80036c4:	4b04      	ldr	r3, [pc, #16]	; (80036d8 <LCD_Button2Fun+0x24>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d902      	bls.n	80036d2 <LCD_Button2Fun+0x1e>
 80036cc:	4b02      	ldr	r3, [pc, #8]	; (80036d8 <LCD_Button2Fun+0x24>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	701a      	strb	r2, [r3, #0]
}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	2000039c 	.word	0x2000039c

080036dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036e2:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <MX_DMA_Init+0x38>)
 80036e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e6:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <MX_DMA_Init+0x38>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	430a      	orrs	r2, r1
 80036ec:	631a      	str	r2, [r3, #48]	; 0x30
 80036ee:	4b09      	ldr	r3, [pc, #36]	; (8003714 <MX_DMA_Init+0x38>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	2201      	movs	r2, #1
 80036f4:	4013      	ands	r3, r2
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036fa:	2200      	movs	r2, #0
 80036fc:	2100      	movs	r1, #0
 80036fe:	2009      	movs	r0, #9
 8003700:	f002 f90e 	bl	8005920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003704:	2009      	movs	r0, #9
 8003706:	f002 f920 	bl	800594a <HAL_NVIC_EnableIRQ>

}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	46bd      	mov	sp, r7
 800370e:	b002      	add	sp, #8
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	40021000 	.word	0x40021000

08003718 <flowersInit>:
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
#include "flower_data.h"
void flowersInit(struct flower_data flowers[]){
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
	/** Default values
								  */
	flowers[0].Pump_GPIO_PORT = PUMP1_GPIO_Port;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	22a0      	movs	r2, #160	; 0xa0
 8003724:	05d2      	lsls	r2, r2, #23
 8003726:	61da      	str	r2, [r3, #28]
	flowers[0].Pump_GPIO_Pin = PUMP1_Pin;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	0092      	lsls	r2, r2, #2
 800372e:	831a      	strh	r2, [r3, #24]
	flowers[0].watering_time[0].Hours = 0;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2224      	movs	r2, #36	; 0x24
 8003734:	2100      	movs	r1, #0
 8003736:	5499      	strb	r1, [r3, r2]
	flowers[0].watering_time[0].Minutes = 0;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2225      	movs	r2, #37	; 0x25
 800373c:	2100      	movs	r1, #0
 800373e:	5499      	strb	r1, [r3, r2]
	flowers[0].watering_time[0].Seconds = 5;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2226      	movs	r2, #38	; 0x26
 8003744:	2105      	movs	r1, #5
 8003746:	5499      	strb	r1, [r3, r2]
	flowers[0].watering_duration = 5;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2205      	movs	r2, #5
 800374c:	841a      	strh	r2, [r3, #32]
	flowers[0].was_watered_flag = 0;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	705a      	strb	r2, [r3, #1]
	flowers[0].watering_flag = 0;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	70da      	strb	r2, [r3, #3]
	flowers[0].watering_itter = 0;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	709a      	strb	r2, [r3, #2]
	flowers[0].flower_id = 1;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
	flowers[0].max_sensor_data = 193;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	22c1      	movs	r2, #193	; 0xc1
 800376a:	811a      	strh	r2, [r3, #8]
	flowers[0].min_sensor_data = 76;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	224c      	movs	r2, #76	; 0x4c
 8003770:	815a      	strh	r2, [r3, #10]
	flowers[0].PWMchannel = TIM_CHANNEL_1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	615a      	str	r2, [r3, #20]
	flowers[0].PWMtimer = &htim21;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a21      	ldr	r2, [pc, #132]	; (8003800 <flowersInit+0xe8>)
 800377c:	611a      	str	r2, [r3, #16]

	flowers[1].Pump_GPIO_PORT = PUMP2_GPIO_Port;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3360      	adds	r3, #96	; 0x60
 8003782:	22a0      	movs	r2, #160	; 0xa0
 8003784:	05d2      	lsls	r2, r2, #23
 8003786:	61da      	str	r2, [r3, #28]
	flowers[1].Pump_GPIO_Pin = PUMP2_Pin;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3360      	adds	r3, #96	; 0x60
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	0052      	lsls	r2, r2, #1
 8003790:	831a      	strh	r2, [r3, #24]
	flowers[1].watering_time[0].Hours = 0;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3360      	adds	r3, #96	; 0x60
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	2100      	movs	r1, #0
 800379a:	5499      	strb	r1, [r3, r2]
	flowers[1].watering_time[0].Minutes = 0;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	3360      	adds	r3, #96	; 0x60
 80037a0:	2225      	movs	r2, #37	; 0x25
 80037a2:	2100      	movs	r1, #0
 80037a4:	5499      	strb	r1, [r3, r2]
	flowers[1].watering_time[0].Seconds = 15;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3360      	adds	r3, #96	; 0x60
 80037aa:	2226      	movs	r2, #38	; 0x26
 80037ac:	210f      	movs	r1, #15
 80037ae:	5499      	strb	r1, [r3, r2]
	flowers[1].watering_duration = 8;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3360      	adds	r3, #96	; 0x60
 80037b4:	2208      	movs	r2, #8
 80037b6:	841a      	strh	r2, [r3, #32]
	flowers[1].was_watered_flag = 0;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3360      	adds	r3, #96	; 0x60
 80037bc:	2200      	movs	r2, #0
 80037be:	705a      	strb	r2, [r3, #1]
	flowers[1].watering_flag = 0;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3360      	adds	r3, #96	; 0x60
 80037c4:	2200      	movs	r2, #0
 80037c6:	70da      	strb	r2, [r3, #3]
	flowers[1].watering_itter = 0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3360      	adds	r3, #96	; 0x60
 80037cc:	2200      	movs	r2, #0
 80037ce:	709a      	strb	r2, [r3, #2]
	flowers[1].flower_id = 2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3360      	adds	r3, #96	; 0x60
 80037d4:	2202      	movs	r2, #2
 80037d6:	701a      	strb	r2, [r3, #0]
	flowers[1].max_sensor_data = 193;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3360      	adds	r3, #96	; 0x60
 80037dc:	22c1      	movs	r2, #193	; 0xc1
 80037de:	811a      	strh	r2, [r3, #8]
	flowers[1].min_sensor_data = 76;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3360      	adds	r3, #96	; 0x60
 80037e4:	224c      	movs	r2, #76	; 0x4c
 80037e6:	815a      	strh	r2, [r3, #10]
	flowers[1].PWMchannel = TIM_CHANNEL_2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3360      	adds	r3, #96	; 0x60
 80037ec:	2204      	movs	r2, #4
 80037ee:	615a      	str	r2, [r3, #20]
	flowers[1].PWMtimer = &htim21;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3360      	adds	r3, #96	; 0x60
 80037f4:	4a02      	ldr	r2, [pc, #8]	; (8003800 <flowersInit+0xe8>)
 80037f6:	611a      	str	r2, [r3, #16]

}
 80037f8:	46c0      	nop			; (mov r8, r8)
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b002      	add	sp, #8
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000540 	.word	0x20000540

08003804 <rescaleSensorData>:

void recalibrateSensorData(struct flower_data* flower){
	if(flower->max_sensor_data<*(flower->sensor_data)&&*(flower->sensor_data)<70)  flower->max_sensor_data = *(flower->sensor_data);
	if(flower->min_sensor_data>*(flower->sensor_data)&&*(flower->sensor_data)>26)  flower->min_sensor_data = *(flower->sensor_data);
}
void rescaleSensorData(struct flower_data* flower){
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	//recalibrateSensorData(flower);
	//flower->moisture = (float)*(flower->sensor_data);
	if(*(flower->sensor_data)>flower->max_sensor_data) flower->moisture=flower->max_sensor_data; /// Aby nie przekroczyc wartosci maks i min
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	881a      	ldrh	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	891b      	ldrh	r3, [r3, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d905      	bls.n	8003826 <rescaleSensorData+0x22>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	891b      	ldrh	r3, [r3, #8]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	731a      	strb	r2, [r3, #12]
 8003824:	e012      	b.n	800384c <rescaleSensorData+0x48>
	else if(*(flower->sensor_data)<flower->min_sensor_data)flower->moisture=flower->min_sensor_data;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	895b      	ldrh	r3, [r3, #10]
 8003830:	429a      	cmp	r2, r3
 8003832:	d205      	bcs.n	8003840 <rescaleSensorData+0x3c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	895b      	ldrh	r3, [r3, #10]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	731a      	strb	r2, [r3, #12]
 800383e:	e005      	b.n	800384c <rescaleSensorData+0x48>
	else flower->moisture = *(flower->sensor_data);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	731a      	strb	r2, [r3, #12]
	flower->moisture = 100*(flower->max_sensor_data-flower->moisture)/(flower->max_sensor_data-flower->min_sensor_data);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	891b      	ldrh	r3, [r3, #8]
 8003850:	001a      	movs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	7b1b      	ldrb	r3, [r3, #12]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2264      	movs	r2, #100	; 0x64
 800385a:	435a      	muls	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	891b      	ldrh	r3, [r3, #8]
 8003860:	0019      	movs	r1, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	895b      	ldrh	r3, [r3, #10]
 8003866:	1acb      	subs	r3, r1, r3
 8003868:	0019      	movs	r1, r3
 800386a:	0010      	movs	r0, r2
 800386c:	f7fc fcfc 	bl	8000268 <__divsi3>
 8003870:	0003      	movs	r3, r0
 8003872:	b2da      	uxtb	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	731a      	strb	r2, [r3, #12]
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b002      	add	sp, #8
 800387e:	bd80      	pop	{r7, pc}

08003880 <checkForWateringTime>:

uint8_t checkForWateringTime(struct flower_data* flower, RTC_TimeTypeDef* curr_time){
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
	if((flower->watering_time[0].Seconds==curr_time->Seconds)&&(flower->watering_time[0].Minutes==curr_time->Minutes)&&(flower->watering_time[0].Hours==curr_time->Hours))flower->watering_flag = 1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2226      	movs	r2, #38	; 0x26
 800388e:	5c9a      	ldrb	r2, [r3, r2]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	789b      	ldrb	r3, [r3, #2]
 8003894:	429a      	cmp	r2, r3
 8003896:	d110      	bne.n	80038ba <checkForWateringTime+0x3a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2225      	movs	r2, #37	; 0x25
 800389c:	5c9a      	ldrb	r2, [r3, r2]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	785b      	ldrb	r3, [r3, #1]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d109      	bne.n	80038ba <checkForWateringTime+0x3a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2224      	movs	r2, #36	; 0x24
 80038aa:	5c9a      	ldrb	r2, [r3, r2]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d102      	bne.n	80038ba <checkForWateringTime+0x3a>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	70da      	strb	r2, [r3, #3]
	if((flower->watering_flag)&&(flower->watering_itter < flower->watering_duration)) {
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	78db      	ldrb	r3, [r3, #3]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d027      	beq.n	8003912 <checkForWateringTime+0x92>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	789b      	ldrb	r3, [r3, #2]
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8c1b      	ldrh	r3, [r3, #32]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d220      	bcs.n	8003912 <checkForWateringTime+0x92>
		flower->was_watered_flag=1;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	705a      	strb	r2, [r3, #1]
		//HAL_TIM_PWM_Start(flower->PWMtimer, flower->PWMchannel);
		HAL_GPIO_WritePin((GPIO_TypeDef *)flower->Pump_GPIO_PORT, flower->Pump_GPIO_Pin, GPIO_PIN_SET);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69d8      	ldr	r0, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	8b1b      	ldrh	r3, [r3, #24]
 80038de:	2201      	movs	r2, #1
 80038e0:	0019      	movs	r1, r3
 80038e2:	f002 fc2c 	bl	800613e <HAL_GPIO_WritePin>
		flower->last_watering_time.Hours = curr_time->Hours;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	7819      	ldrb	r1, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	224c      	movs	r2, #76	; 0x4c
 80038ee:	5499      	strb	r1, [r3, r2]
		flower->last_watering_time.Minutes = curr_time->Hours;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	7819      	ldrb	r1, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	224d      	movs	r2, #77	; 0x4d
 80038f8:	5499      	strb	r1, [r3, r2]
		flower->last_watering_time.Seconds = curr_time->Seconds;
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	7899      	ldrb	r1, [r3, #2]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	224e      	movs	r2, #78	; 0x4e
 8003902:	5499      	strb	r1, [r3, r2]
		flower->watering_itter++;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	789b      	ldrb	r3, [r3, #2]
 8003908:	3301      	adds	r3, #1
 800390a:	b2da      	uxtb	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	709a      	strb	r2, [r3, #2]
 8003910:	e014      	b.n	800393c <checkForWateringTime+0xbc>
	}else if(flower->watering_itter>=flower->watering_duration){
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	789b      	ldrb	r3, [r3, #2]
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8c1b      	ldrh	r3, [r3, #32]
 800391c:	429a      	cmp	r2, r3
 800391e:	d30d      	bcc.n	800393c <checkForWateringTime+0xbc>
		//HAL_TIM_PWM_Stop(flower->PWMtimer, flower->PWMchannel);
		HAL_GPIO_WritePin((GPIO_TypeDef *)flower->Pump_GPIO_PORT, flower->Pump_GPIO_Pin, GPIO_PIN_RESET);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69d8      	ldr	r0, [r3, #28]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8b1b      	ldrh	r3, [r3, #24]
 8003928:	2200      	movs	r2, #0
 800392a:	0019      	movs	r1, r3
 800392c:	f002 fc07 	bl	800613e <HAL_GPIO_WritePin>
		flower->watering_itter = 0;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	709a      	strb	r2, [r3, #2]
		flower->watering_flag = 0;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	70da      	strb	r2, [r3, #3]
	}
	return flower->watering_flag;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	78db      	ldrb	r3, [r3, #3]
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b002      	add	sp, #8
 8003946:	bd80      	pop	{r7, pc}

08003948 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b08b      	sub	sp, #44	; 0x2c
 800394c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394e:	2414      	movs	r4, #20
 8003950:	193b      	adds	r3, r7, r4
 8003952:	0018      	movs	r0, r3
 8003954:	2314      	movs	r3, #20
 8003956:	001a      	movs	r2, r3
 8003958:	2100      	movs	r1, #0
 800395a:	f006 fa4b 	bl	8009df4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800395e:	4b72      	ldr	r3, [pc, #456]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 8003960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003962:	4b71      	ldr	r3, [pc, #452]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 8003964:	2104      	movs	r1, #4
 8003966:	430a      	orrs	r2, r1
 8003968:	62da      	str	r2, [r3, #44]	; 0x2c
 800396a:	4b6f      	ldr	r3, [pc, #444]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	2204      	movs	r2, #4
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003976:	4b6c      	ldr	r3, [pc, #432]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 8003978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397a:	4b6b      	ldr	r3, [pc, #428]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 800397c:	2180      	movs	r1, #128	; 0x80
 800397e:	430a      	orrs	r2, r1
 8003980:	62da      	str	r2, [r3, #44]	; 0x2c
 8003982:	4b69      	ldr	r3, [pc, #420]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	2280      	movs	r2, #128	; 0x80
 8003988:	4013      	ands	r3, r2
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	4b66      	ldr	r3, [pc, #408]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 8003990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003992:	4b65      	ldr	r3, [pc, #404]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 8003994:	2101      	movs	r1, #1
 8003996:	430a      	orrs	r2, r1
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	2201      	movs	r2, #1
 80039a0:	4013      	ands	r3, r2
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a6:	4b60      	ldr	r3, [pc, #384]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 80039a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039aa:	4b5f      	ldr	r3, [pc, #380]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 80039ac:	2102      	movs	r1, #2
 80039ae:	430a      	orrs	r2, r1
 80039b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80039b2:	4b5d      	ldr	r3, [pc, #372]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 80039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b6:	2202      	movs	r2, #2
 80039b8:	4013      	ands	r3, r2
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039be:	4b5a      	ldr	r3, [pc, #360]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 80039c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c2:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 80039c4:	2108      	movs	r1, #8
 80039c6:	430a      	orrs	r2, r1
 80039c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80039ca:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <MX_GPIO_Init+0x1e0>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	2208      	movs	r2, #8
 80039d0:	4013      	ands	r3, r2
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_E_Pin|LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 80039d6:	4b55      	ldr	r3, [pc, #340]	; (8003b2c <MX_GPIO_Init+0x1e4>)
 80039d8:	2200      	movs	r2, #0
 80039da:	210b      	movs	r1, #11
 80039dc:	0018      	movs	r0, r3
 80039de:	f002 fbae 	bl	800613e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PUMP2_Pin|PUMP1_Pin, GPIO_PIN_RESET);
 80039e2:	23c8      	movs	r3, #200	; 0xc8
 80039e4:	0099      	lsls	r1, r3, #2
 80039e6:	23a0      	movs	r3, #160	; 0xa0
 80039e8:	05db      	lsls	r3, r3, #23
 80039ea:	2200      	movs	r2, #0
 80039ec:	0018      	movs	r0, r3
 80039ee:	f002 fba6 	bl	800613e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 80039f2:	4b4f      	ldr	r3, [pc, #316]	; (8003b30 <MX_GPIO_Init+0x1e8>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	21f0      	movs	r1, #240	; 0xf0
 80039f8:	0018      	movs	r0, r3
 80039fa:	f002 fba0 	bl	800613e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin|LCD_Button2_Pin|LCD_Button1_Pin;
 80039fe:	193b      	adds	r3, r7, r4
 8003a00:	2285      	movs	r2, #133	; 0x85
 8003a02:	0192      	lsls	r2, r2, #6
 8003a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003a06:	193b      	adds	r3, r7, r4
 8003a08:	22c4      	movs	r2, #196	; 0xc4
 8003a0a:	0392      	lsls	r2, r2, #14
 8003a0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a0e:	193b      	adds	r3, r7, r4
 8003a10:	2201      	movs	r2, #1
 8003a12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a14:	193b      	adds	r3, r7, r4
 8003a16:	4a45      	ldr	r2, [pc, #276]	; (8003b2c <MX_GPIO_Init+0x1e4>)
 8003a18:	0019      	movs	r1, r3
 8003a1a:	0010      	movs	r0, r2
 8003a1c:	f002 f9f4 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_E_Pin|LCD_RS_Pin|LCD_RW_Pin;
 8003a20:	193b      	adds	r3, r7, r4
 8003a22:	220b      	movs	r2, #11
 8003a24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a26:	193b      	adds	r3, r7, r4
 8003a28:	2201      	movs	r2, #1
 8003a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2c:	193b      	adds	r3, r7, r4
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	2200      	movs	r2, #0
 8003a36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a38:	193b      	adds	r3, r7, r4
 8003a3a:	4a3c      	ldr	r2, [pc, #240]	; (8003b2c <MX_GPIO_Init+0x1e4>)
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	0010      	movs	r0, r2
 8003a40:	f002 f9e2 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC4 PC5 PC7
                           PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 8003a44:	193b      	adds	r3, r7, r4
 8003a46:	4a3b      	ldr	r2, [pc, #236]	; (8003b34 <MX_GPIO_Init+0x1ec>)
 8003a48:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a56:	193b      	adds	r3, r7, r4
 8003a58:	4a34      	ldr	r2, [pc, #208]	; (8003b2c <MX_GPIO_Init+0x1e4>)
 8003a5a:	0019      	movs	r1, r3
 8003a5c:	0010      	movs	r0, r2
 8003a5e:	f002 f9d3 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 PA7 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10
 8003a62:	193b      	adds	r3, r7, r4
 8003a64:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <MX_GPIO_Init+0x1f0>)
 8003a66:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a68:	193b      	adds	r3, r7, r4
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	193b      	adds	r3, r7, r4
 8003a70:	2200      	movs	r2, #0
 8003a72:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a74:	193a      	adds	r2, r7, r4
 8003a76:	23a0      	movs	r3, #160	; 0xa0
 8003a78:	05db      	lsls	r3, r3, #23
 8003a7a:	0011      	movs	r1, r2
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f002 f9c3 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|PUMP2_Pin|PUMP1_Pin;
 8003a82:	0021      	movs	r1, r4
 8003a84:	187b      	adds	r3, r7, r1
 8003a86:	22c8      	movs	r2, #200	; 0xc8
 8003a88:	0092      	lsls	r2, r2, #2
 8003a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a8c:	000c      	movs	r4, r1
 8003a8e:	193b      	adds	r3, r7, r4
 8003a90:	2201      	movs	r2, #1
 8003a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9a:	193b      	adds	r3, r7, r4
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa0:	193a      	adds	r2, r7, r4
 8003aa2:	23a0      	movs	r3, #160	; 0xa0
 8003aa4:	05db      	lsls	r3, r3, #23
 8003aa6:	0011      	movs	r1, r2
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f002 f9ad 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB15 PB3
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003aae:	193b      	adds	r3, r7, r4
 8003ab0:	4a22      	ldr	r2, [pc, #136]	; (8003b3c <MX_GPIO_Init+0x1f4>)
 8003ab2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ab4:	193b      	adds	r3, r7, r4
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	193b      	adds	r3, r7, r4
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac0:	193b      	adds	r3, r7, r4
 8003ac2:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <MX_GPIO_Init+0x1e8>)
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	0010      	movs	r0, r2
 8003ac8:	f002 f99e 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003acc:	193b      	adds	r3, r7, r4
 8003ace:	2204      	movs	r2, #4
 8003ad0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ad2:	193b      	adds	r3, r7, r4
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	2200      	movs	r2, #0
 8003adc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ade:	193b      	adds	r3, r7, r4
 8003ae0:	4a17      	ldr	r2, [pc, #92]	; (8003b40 <MX_GPIO_Init+0x1f8>)
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	0010      	movs	r0, r2
 8003ae6:	f002 f98f 	bl	8005e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
 8003aea:	0021      	movs	r1, r4
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	22f0      	movs	r2, #240	; 0xf0
 8003af0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	2201      	movs	r2, #1
 8003af6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	187b      	adds	r3, r7, r1
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afe:	187b      	adds	r3, r7, r1
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <MX_GPIO_Init+0x1e8>)
 8003b08:	0019      	movs	r1, r3
 8003b0a:	0010      	movs	r0, r2
 8003b0c:	f002 f97c 	bl	8005e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003b10:	2200      	movs	r2, #0
 8003b12:	2100      	movs	r1, #0
 8003b14:	2007      	movs	r0, #7
 8003b16:	f001 ff03 	bl	8005920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003b1a:	2007      	movs	r0, #7
 8003b1c:	f001 ff15 	bl	800594a <HAL_NVIC_EnableIRQ>

}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b00b      	add	sp, #44	; 0x2c
 8003b26:	bd90      	pop	{r4, r7, pc}
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	50000800 	.word	0x50000800
 8003b30:	50000400 	.word	0x50000400
 8003b34:	000012b4 	.word	0x000012b4
 8003b38:	00009cd0 	.word	0x00009cd0
 8003b3c:	00009f0f 	.word	0x00009f0f
 8003b40:	50000c00 	.word	0x50000c00

08003b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b48:	f001 f952 	bl	8004df0 <HAL_Init>

  /* USER CODE BEGIN Init */
  flowersInit(flowers);
 8003b4c:	4b23      	ldr	r3, [pc, #140]	; (8003bdc <main+0x98>)
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7ff fde2 	bl	8003718 <flowersInit>
  flowers[0].sensor_data = &sensor_data[0];
 8003b54:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <main+0x98>)
 8003b56:	4a22      	ldr	r2, [pc, #136]	; (8003be0 <main+0x9c>)
 8003b58:	605a      	str	r2, [r3, #4]
  flowers[1].sensor_data = &sensor_data[1];
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <main+0x98>)
 8003b5c:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <main+0xa0>)
 8003b5e:	665a      	str	r2, [r3, #100]	; 0x64
  dispInit(&disp);
 8003b60:	4b21      	ldr	r3, [pc, #132]	; (8003be8 <main+0xa4>)
 8003b62:	0018      	movs	r0, r3
 8003b64:	f7ff f886 	bl	8002c74 <dispInit>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b68:	f000 f848 	bl	8003bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b6c:	f7ff feec 	bl	8003948 <MX_GPIO_Init>
  MX_RTC_Init();
 8003b70:	f000 f9a0 	bl	8003eb4 <MX_RTC_Init>
  MX_DMA_Init();
 8003b74:	f7ff fdb2 	bl	80036dc <MX_DMA_Init>
  MX_ADC_Init();
 8003b78:	f7ff fc98 	bl	80034ac <MX_ADC_Init>
  MX_TIM6_Init();
 8003b7c:	f000 fc70 	bl	8004460 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003b80:	f000 fcac 	bl	80044dc <MX_TIM7_Init>
  MX_TIM3_Init();
 8003b84:	f000 fc16 	bl	80043b4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8003b88:	f000 fe1a 	bl	80047c0 <MX_USART2_UART_Init>
  MX_USART4_UART_Init();
 8003b8c:	f000 fe48 	bl	8004820 <MX_USART4_UART_Init>
  MX_TIM2_Init();
 8003b90:	f000 fbba 	bl	8004308 <MX_TIM2_Init>
  MX_TIM21_Init();
 8003b94:	f000 fcde 	bl	8004554 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8003b98:	f7fe fe36 	bl	8002808 <LCD_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 8003b9c:	4b13      	ldr	r3, [pc, #76]	; (8003bec <main+0xa8>)
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f003 ff12 	bl	80079c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8003ba4:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <main+0xac>)
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f003 ff0e 	bl	80079c8 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <main+0xb0>)
 8003bae:	2100      	movs	r1, #0
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f001 fd6b 	bl	800568c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)sensor_data, 2);
 8003bb6:	490a      	ldr	r1, [pc, #40]	; (8003be0 <main+0x9c>)
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <main+0xb0>)
 8003bba:	2202      	movs	r2, #2
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f001 fb1f 	bl	8005200 <HAL_ADC_Start_DMA>
  initUSART();
 8003bc2:	f000 fee5 	bl	8004990 <initUSART>
  __HAL_TIM_SET_COMPARE(&htim21, TIM_CHANNEL_1, 800);
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <main+0xb4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	22c8      	movs	r2, #200	; 0xc8
 8003bcc:	0092      	lsls	r2, r2, #2
 8003bce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim21, TIM_CHANNEL_2, 800);
 8003bd0:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <main+0xb4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	22c8      	movs	r2, #200	; 0xc8
 8003bd6:	0092      	lsls	r2, r2, #2
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003bda:	e7fe      	b.n	8003bda <main+0x96>
 8003bdc:	200002c4 	.word	0x200002c4
 8003be0:	200002b0 	.word	0x200002b0
 8003be4:	200002b2 	.word	0x200002b2
 8003be8:	2000039c 	.word	0x2000039c
 8003bec:	20000480 	.word	0x20000480
 8003bf0:	20000500 	.word	0x20000500
 8003bf4:	20000254 	.word	0x20000254
 8003bf8:	20000540 	.word	0x20000540

08003bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b09f      	sub	sp, #124	; 0x7c
 8003c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c02:	2440      	movs	r4, #64	; 0x40
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	0018      	movs	r0, r3
 8003c08:	2338      	movs	r3, #56	; 0x38
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	f006 f8f1 	bl	8009df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c12:	232c      	movs	r3, #44	; 0x2c
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	0018      	movs	r0, r3
 8003c18:	2314      	movs	r3, #20
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	f006 f8e9 	bl	8009df4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c22:	1d3b      	adds	r3, r7, #4
 8003c24:	0018      	movs	r0, r3
 8003c26:	2328      	movs	r3, #40	; 0x28
 8003c28:	001a      	movs	r2, r3
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	f006 f8e2 	bl	8009df4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c30:	4b32      	ldr	r3, [pc, #200]	; (8003cfc <SystemClock_Config+0x100>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a32      	ldr	r2, [pc, #200]	; (8003d00 <SystemClock_Config+0x104>)
 8003c36:	401a      	ands	r2, r3
 8003c38:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <SystemClock_Config+0x100>)
 8003c3a:	2180      	movs	r1, #128	; 0x80
 8003c3c:	0109      	lsls	r1, r1, #4
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003c42:	f002 fab5 	bl	80061b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003c46:	4b2f      	ldr	r3, [pc, #188]	; (8003d04 <SystemClock_Config+0x108>)
 8003c48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c4a:	4b2e      	ldr	r3, [pc, #184]	; (8003d04 <SystemClock_Config+0x108>)
 8003c4c:	492c      	ldr	r1, [pc, #176]	; (8003d00 <SystemClock_Config+0x104>)
 8003c4e:	400a      	ands	r2, r1
 8003c50:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003c52:	193b      	adds	r3, r7, r4
 8003c54:	2206      	movs	r2, #6
 8003c56:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003c58:	193b      	adds	r3, r7, r4
 8003c5a:	2280      	movs	r2, #128	; 0x80
 8003c5c:	0052      	lsls	r2, r2, #1
 8003c5e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c60:	0021      	movs	r1, r4
 8003c62:	187b      	adds	r3, r7, r1
 8003c64:	2201      	movs	r2, #1
 8003c66:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c6e:	187b      	adds	r3, r7, r1
 8003c70:	2202      	movs	r2, #2
 8003c72:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	2200      	movs	r2, #0
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	2280      	movs	r2, #128	; 0x80
 8003c7e:	02d2      	lsls	r2, r2, #11
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003c82:	187b      	adds	r3, r7, r1
 8003c84:	2280      	movs	r2, #128	; 0x80
 8003c86:	03d2      	lsls	r2, r2, #15
 8003c88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	f002 fa9d 	bl	80061cc <HAL_RCC_OscConfig>
 8003c92:	1e03      	subs	r3, r0, #0
 8003c94:	d001      	beq.n	8003c9a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003c96:	f000 f907 	bl	8003ea8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	220f      	movs	r2, #15
 8003ca0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ca8:	187b      	adds	r3, r7, r1
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	f002 fe58 	bl	8006974 <HAL_RCC_ClockConfig>
 8003cc4:	1e03      	subs	r3, r0, #0
 8003cc6:	d001      	beq.n	8003ccc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003cc8:	f000 f8ee 	bl	8003ea8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 8003ccc:	1d3b      	adds	r3, r7, #4
 8003cce:	2222      	movs	r2, #34	; 0x22
 8003cd0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003cd2:	1d3b      	adds	r3, r7, #4
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003cd8:	1d3b      	adds	r3, r7, #4
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	0252      	lsls	r2, r2, #9
 8003cde:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ce0:	1d3b      	adds	r3, r7, #4
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f003 f86a 	bl	8006dbc <HAL_RCCEx_PeriphCLKConfig>
 8003ce8:	1e03      	subs	r3, r0, #0
 8003cea:	d001      	beq.n	8003cf0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003cec:	f000 f8dc 	bl	8003ea8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8003cf0:	f003 f9d8 	bl	80070a4 <HAL_RCCEx_EnableLSECSS>
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b01f      	add	sp, #124	; 0x7c
 8003cfa:	bd90      	pop	{r4, r7, pc}
 8003cfc:	40007000 	.word	0x40007000
 8003d00:	ffffe7ff 	.word	0xffffe7ff
 8003d04:	40021000 	.word	0x40021000

08003d08 <HAL_RTC_AlarmAEventCallback>:

/**
  * @brief RTC Alarm Callback (updating time and date with watering time checking every 1 s)
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	/** Date and time info stored in Rtc_Time and Rtc_Date global var
	  */
	HAL_RTC_GetTime(hrtc, &Rtc_Time, RTC_FORMAT_BIN);
 8003d10:	4923      	ldr	r1, [pc, #140]	; (8003da0 <HAL_RTC_AlarmAEventCallback+0x98>)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	0018      	movs	r0, r3
 8003d18:	f003 fb34 	bl	8007384 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &Rtc_Date, RTC_FORMAT_BIN);
 8003d1c:	4921      	ldr	r1, [pc, #132]	; (8003da4 <HAL_RTC_AlarmAEventCallback+0x9c>)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	0018      	movs	r0, r3
 8003d24:	f003 fb8a 	bl	800743c <HAL_RTC_GetDate>

	watering_state = 0;
 8003d28:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <HAL_RTC_AlarmAEventCallback+0xa0>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
	/** Checking if any of flowers watering time occured
		  */
	for(uint8_t i = 0; i<NUMBER_OF_FLOWERS; i++) {
 8003d2e:	230f      	movs	r3, #15
 8003d30:	18fb      	adds	r3, r7, r3
 8003d32:	2200      	movs	r2, #0
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e01d      	b.n	8003d74 <HAL_RTC_AlarmAEventCallback+0x6c>
		if((checkForWateringTime(&flowers[i], &Rtc_Time))) {
 8003d38:	230f      	movs	r3, #15
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	0013      	movs	r3, r2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	015b      	lsls	r3, r3, #5
 8003d46:	4a19      	ldr	r2, [pc, #100]	; (8003dac <HAL_RTC_AlarmAEventCallback+0xa4>)
 8003d48:	189b      	adds	r3, r3, r2
 8003d4a:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <HAL_RTC_AlarmAEventCallback+0x98>)
 8003d4c:	0011      	movs	r1, r2
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7ff fd96 	bl	8003880 <checkForWateringTime>
 8003d54:	1e03      	subs	r3, r0, #0
 8003d56:	d007      	beq.n	8003d68 <HAL_RTC_AlarmAEventCallback+0x60>
			watering_state = 1;
 8003d58:	4b13      	ldr	r3, [pc, #76]	; (8003da8 <HAL_RTC_AlarmAEventCallback+0xa0>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
			changeDispState(&disp, 3);
 8003d5e:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8003d60:	2103      	movs	r1, #3
 8003d62:	0018      	movs	r0, r3
 8003d64:	f7fe ff73 	bl	8002c4e <changeDispState>
	for(uint8_t i = 0; i<NUMBER_OF_FLOWERS; i++) {
 8003d68:	210f      	movs	r1, #15
 8003d6a:	187b      	adds	r3, r7, r1
 8003d6c:	781a      	ldrb	r2, [r3, #0]
 8003d6e:	187b      	adds	r3, r7, r1
 8003d70:	3201      	adds	r2, #1
 8003d72:	701a      	strb	r2, [r3, #0]
 8003d74:	230f      	movs	r3, #15
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d9dc      	bls.n	8003d38 <HAL_RTC_AlarmAEventCallback+0x30>
			/** Changing the display state during watering time.
				  */
		}
	}
	if(!watering_state&&disp.disp_state==3){
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_RTC_AlarmAEventCallback+0xa0>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <HAL_RTC_AlarmAEventCallback+0x90>
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8003d88:	785b      	ldrb	r3, [r3, #1]
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d104      	bne.n	8003d98 <HAL_RTC_AlarmAEventCallback+0x90>
		changeDispState(&disp, 0);
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_RTC_AlarmAEventCallback+0xa8>)
 8003d90:	2100      	movs	r1, #0
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7fe ff5b 	bl	8002c4e <changeDispState>
	}

}
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b004      	add	sp, #16
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000388 	.word	0x20000388
 8003da4:	200002c0 	.word	0x200002c0
 8003da8:	200001ff 	.word	0x200001ff
 8003dac:	200002c4 	.word	0x200002c4
 8003db0:	2000039c 	.word	0x2000039c

08003db4 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief Timers callback
  * @retval None
  */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	/** Timer for updating data
					  */
	if(htim->Instance == TIM6){
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d107      	bne.n	8003dd6 <HAL_TIM_PeriodElapsedCallback+0x22>
		updateDispData(&disp);
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7fe fee7 	bl	8002b9c <updateDispData>
		HAL_TIM_Base_Start_IT(&htim7);
 8003dce:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f003 fdf9 	bl	80079c8 <HAL_TIM_Base_Start_IT>
	}
	/** Timer for sending data to display
						  */
	if(htim->Instance == TIM7){ //Co 100us zostaje wysłana ramka do wysiwetlacza
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d103      	bne.n	8003de8 <HAL_TIM_PeriodElapsedCallback+0x34>
		sendDataToDisp(&disp);
 8003de0:	4b0d      	ldr	r3, [pc, #52]	; (8003e18 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fe fd5a 	bl	800289c <sendDataToDisp>
	}
	/** Timer for additional buttons functions (actually not in use)
						  */
	if(htim->Instance == TIM3){  //Na razie bezuzytczene (w zamyśle do pracy przycisków w trybie przytrzymywania)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a0d      	ldr	r2, [pc, #52]	; (8003e24 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d10c      	bne.n	8003e0c <HAL_TIM_PeriodElapsedCallback+0x58>
		if(HAL_GPIO_ReadPin(LCD_Button1_GPIO_Port,LCD_Button1_Pin))
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003df8:	0019      	movs	r1, r3
 8003dfa:	0010      	movs	r0, r2
 8003dfc:	f002 f982 	bl	8006104 <HAL_GPIO_ReadPin>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d003      	beq.n	8003e0c <HAL_TIM_PeriodElapsedCallback+0x58>
		HAL_TIM_Base_Stop_IT(&htim3);
 8003e04:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003e06:	0018      	movs	r0, r3
 8003e08:	f003 fe30 	bl	8007a6c <HAL_TIM_Base_Stop_IT>
	}
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b002      	add	sp, #8
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40001000 	.word	0x40001000
 8003e18:	2000039c 	.word	0x2000039c
 8003e1c:	20000500 	.word	0x20000500
 8003e20:	40001400 	.word	0x40001400
 8003e24:	40000400 	.word	0x40000400
 8003e28:	50000800 	.word	0x50000800
 8003e2c:	20000440 	.word	0x20000440

08003e30 <HAL_GPIO_EXTI_Callback>:

/**
  * @brief GPIO Callbacks
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	0002      	movs	r2, r0
 8003e38:	1dbb      	adds	r3, r7, #6
 8003e3a:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == BLUE_BUTTON_Pin) {
 8003e3c:	1dbb      	adds	r3, r7, #6
 8003e3e:	881a      	ldrh	r2, [r3, #0]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	019b      	lsls	r3, r3, #6
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d10a      	bne.n	8003e5e <HAL_GPIO_EXTI_Callback+0x2e>
		if(!HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin)) {
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	019b      	lsls	r3, r3, #6
 8003e4c:	4a15      	ldr	r2, [pc, #84]	; (8003ea4 <HAL_GPIO_EXTI_Callback+0x74>)
 8003e4e:	0019      	movs	r1, r3
 8003e50:	0010      	movs	r0, r2
 8003e52:	f002 f957 	bl	8006104 <HAL_GPIO_ReadPin>
 8003e56:	1e03      	subs	r3, r0, #0
 8003e58:	d101      	bne.n	8003e5e <HAL_GPIO_EXTI_Callback+0x2e>
			BLUE_BUTTONFun();
 8003e5a:	f7ff fc05 	bl	8003668 <BLUE_BUTTONFun>
		}
	}

	if(GPIO_Pin == LCD_Button1_Pin) {
 8003e5e:	1dbb      	adds	r3, r7, #6
 8003e60:	881a      	ldrh	r2, [r3, #0]
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d10a      	bne.n	8003e80 <HAL_GPIO_EXTI_Callback+0x50>
		if(HAL_GPIO_ReadPin(LCD_Button1_GPIO_Port,LCD_Button1_Pin)) {
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ea4 <HAL_GPIO_EXTI_Callback+0x74>)
 8003e70:	0019      	movs	r1, r3
 8003e72:	0010      	movs	r0, r2
 8003e74:	f002 f946 	bl	8006104 <HAL_GPIO_ReadPin>
 8003e78:	1e03      	subs	r3, r0, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_GPIO_EXTI_Callback+0x50>
			LCD_Button1Fun();
 8003e7c:	f7ff fc04 	bl	8003688 <LCD_Button1Fun>
		}
	}

	if(GPIO_Pin == LCD_Button2_Pin) {
 8003e80:	1dbb      	adds	r3, r7, #6
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	2b40      	cmp	r3, #64	; 0x40
 8003e86:	d108      	bne.n	8003e9a <HAL_GPIO_EXTI_Callback+0x6a>
		if(HAL_GPIO_ReadPin(LCD_Button2_GPIO_Port, LCD_Button2_Pin)) {
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_GPIO_EXTI_Callback+0x74>)
 8003e8a:	2140      	movs	r1, #64	; 0x40
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f002 f939 	bl	8006104 <HAL_GPIO_ReadPin>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_GPIO_EXTI_Callback+0x6a>
			LCD_Button2Fun();
 8003e96:	f7ff fc0d 	bl	80036b4 <LCD_Button2Fun>
		}
	}

}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b002      	add	sp, #8
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	50000800 	.word	0x50000800

08003ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003eac:	b672      	cpsid	i
}
 8003eae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003eb0:	e7fe      	b.n	8003eb0 <Error_Handler+0x8>
	...

08003eb4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b090      	sub	sp, #64	; 0x40
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003eba:	232c      	movs	r3, #44	; 0x2c
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	2314      	movs	r3, #20
 8003ec2:	001a      	movs	r2, r3
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	f005 ff95 	bl	8009df4 <memset>
  RTC_DateTypeDef sDate = {0};
 8003eca:	2328      	movs	r3, #40	; 0x28
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003ed2:	003b      	movs	r3, r7
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	2328      	movs	r3, #40	; 0x28
 8003ed8:	001a      	movs	r2, r3
 8003eda:	2100      	movs	r1, #0
 8003edc:	f005 ff8a 	bl	8009df4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003ee0:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003ee2:	4a2e      	ldr	r2, [pc, #184]	; (8003f9c <MX_RTC_Init+0xe8>)
 8003ee4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003eec:	4b2a      	ldr	r3, [pc, #168]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003eee:	227f      	movs	r2, #127	; 0x7f
 8003ef0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003ef2:	4b29      	ldr	r3, [pc, #164]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003ef4:	22ff      	movs	r2, #255	; 0xff
 8003ef6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003ef8:	4b27      	ldr	r3, [pc, #156]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003efe:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f04:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f0a:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f10:	4b21      	ldr	r3, [pc, #132]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003f12:	0018      	movs	r0, r3
 8003f14:	f003 f8d4 	bl	80070c0 <HAL_RTC_Init>
 8003f18:	1e03      	subs	r3, r0, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003f1c:	f7ff ffc4 	bl	8003ea8 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
   HAL_RTC_GetTime(&hrtc, &Rtc_Time, RTC_FORMAT_BIN);
 8003f20:	491f      	ldr	r1, [pc, #124]	; (8003fa0 <MX_RTC_Init+0xec>)
 8003f22:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	0018      	movs	r0, r3
 8003f28:	f003 fa2c 	bl	8007384 <HAL_RTC_GetTime>
   HAL_RTC_GetDate(&hrtc, &Rtc_Date, RTC_FORMAT_BIN);
 8003f2c:	491d      	ldr	r1, [pc, #116]	; (8003fa4 <MX_RTC_Init+0xf0>)
 8003f2e:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	0018      	movs	r0, r3
 8003f34:	f003 fa82 	bl	800743c <HAL_RTC_GetDate>
   sAlarm.AlarmTime.Hours = 0x1;
 8003f38:	003b      	movs	r3, r7
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]
   sAlarm.AlarmTime.Minutes = 0x0;
 8003f3e:	003b      	movs	r3, r7
 8003f40:	2200      	movs	r2, #0
 8003f42:	705a      	strb	r2, [r3, #1]
   sAlarm.AlarmTime.Seconds = 0x0;
 8003f44:	003b      	movs	r3, r7
 8003f46:	2200      	movs	r2, #0
 8003f48:	709a      	strb	r2, [r3, #2]
   sAlarm.AlarmTime.SubSeconds = 0x0;
 8003f4a:	003b      	movs	r3, r7
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	605a      	str	r2, [r3, #4]
   sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003f50:	003b      	movs	r3, r7
 8003f52:	2200      	movs	r2, #0
 8003f54:	60da      	str	r2, [r3, #12]
   sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003f56:	003b      	movs	r3, r7
 8003f58:	2200      	movs	r2, #0
 8003f5a:	611a      	str	r2, [r3, #16]
   sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8003f5c:	003b      	movs	r3, r7
 8003f5e:	4a12      	ldr	r2, [pc, #72]	; (8003fa8 <MX_RTC_Init+0xf4>)
 8003f60:	615a      	str	r2, [r3, #20]
   sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003f62:	003b      	movs	r3, r7
 8003f64:	2200      	movs	r2, #0
 8003f66:	619a      	str	r2, [r3, #24]
   sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003f68:	003b      	movs	r3, r7
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	61da      	str	r2, [r3, #28]
   sAlarm.AlarmDateWeekDay = 0x1;
 8003f6e:	003b      	movs	r3, r7
 8003f70:	2220      	movs	r2, #32
 8003f72:	2101      	movs	r1, #1
 8003f74:	5499      	strb	r1, [r3, r2]
   sAlarm.Alarm = RTC_ALARM_A;
 8003f76:	003b      	movs	r3, r7
 8003f78:	2280      	movs	r2, #128	; 0x80
 8003f7a:	0052      	lsls	r2, r2, #1
 8003f7c:	625a      	str	r2, [r3, #36]	; 0x24
   if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK){
 8003f7e:	0039      	movs	r1, r7
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <MX_RTC_Init+0xe4>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	0018      	movs	r0, r3
 8003f86:	f003 faa7 	bl	80074d8 <HAL_RTC_SetAlarm_IT>
 8003f8a:	1e03      	subs	r3, r0, #0
 8003f8c:	d001      	beq.n	8003f92 <MX_RTC_Init+0xde>
       Error_Handler();
 8003f8e:	f7ff ff8b 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b010      	add	sp, #64	; 0x40
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	2000041c 	.word	0x2000041c
 8003f9c:	40002800 	.word	0x40002800
 8003fa0:	20000388 	.word	0x20000388
 8003fa4:	200002c0 	.word	0x200002c0
 8003fa8:	80808080 	.word	0x80808080

08003fac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <HAL_RTC_MspInit+0x38>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d10e      	bne.n	8003fdc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fbe:	4b0a      	ldr	r3, [pc, #40]	; (8003fe8 <HAL_RTC_MspInit+0x3c>)
 8003fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <HAL_RTC_MspInit+0x3c>)
 8003fc4:	2180      	movs	r1, #128	; 0x80
 8003fc6:	02c9      	lsls	r1, r1, #11
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003fcc:	2200      	movs	r2, #0
 8003fce:	2100      	movs	r1, #0
 8003fd0:	2002      	movs	r0, #2
 8003fd2:	f001 fca5 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003fd6:	2002      	movs	r0, #2
 8003fd8:	f001 fcb7 	bl	800594a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40002800 	.word	0x40002800
 8003fe8:	40021000 	.word	0x40021000

08003fec <Reset_Time>:
  /* USER CODE END RTC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void Reset_Time(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *RtcTime) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
	RtcTime->Hours = 0x0;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
	RtcTime->Minutes = 0x0;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2200      	movs	r2, #0
 8004000:	705a      	strb	r2, [r3, #1]
	RtcTime->Seconds = 0x0;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2200      	movs	r2, #0
 8004006:	709a      	strb	r2, [r3, #2]
	RtcTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2200      	movs	r2, #0
 800400c:	60da      	str	r2, [r3, #12]
	RtcTime->StoreOperation = RTC_STOREOPERATION_RESET;
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2200      	movs	r2, #0
 8004012:	611a      	str	r2, [r3, #16]
	HAL_RTC_SetTime(hrtc, RtcTime, RTC_FORMAT_BIN);
 8004014:	6839      	ldr	r1, [r7, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	0018      	movs	r0, r3
 800401c:	f003 f8ee 	bl	80071fc <HAL_RTC_SetTime>
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b002      	add	sp, #8
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_MspInit+0x34>)
 800402e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <HAL_MspInit+0x34>)
 8004032:	2101      	movs	r1, #1
 8004034:	430a      	orrs	r2, r1
 8004036:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004038:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_MspInit+0x34>)
 800403a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <HAL_MspInit+0x34>)
 800403e:	2180      	movs	r1, #128	; 0x80
 8004040:	0549      	lsls	r1, r1, #21
 8004042:	430a      	orrs	r2, r1
 8004044:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8004046:	2200      	movs	r2, #0
 8004048:	2100      	movs	r1, #0
 800404a:	2004      	movs	r0, #4
 800404c:	f001 fc68 	bl	8005920 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8004050:	2004      	movs	r0, #4
 8004052:	f001 fc7a 	bl	800594a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000

08004060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004064:	e7fe      	b.n	8004064 <NMI_Handler+0x4>

08004066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800406a:	e7fe      	b.n	800406a <HardFault_Handler+0x4>

0800406c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004084:	f000 ff08 	bl	8004e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <RTC_IRQHandler+0x14>)
 8004096:	0018      	movs	r0, r3
 8004098:	f003 fb6a 	bl	8007770 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	2000041c 	.word	0x2000041c

080040a8 <RCC_CRS_IRQHandler>:

/**
  * @brief This function handles RCC and CRS global interrupt.
  */
void RCC_CRS_IRQHandler(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_CRS_IRQn 0 */
  /* USER CODE BEGIN RCC_CRS_IRQn 1 */

  /* USER CODE END RCC_CRS_IRQn 1 */
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_Button2_Pin);
 80040b6:	2040      	movs	r0, #64	; 0x40
 80040b8:	f002 f85e 	bl	8006178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LCD_Button1_Pin);
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	0018      	movs	r0, r3
 80040c2:	f002 f859 	bl	8006178 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 80040c6:	2380      	movs	r3, #128	; 0x80
 80040c8:	019b      	lsls	r3, r3, #6
 80040ca:	0018      	movs	r0, r3
 80040cc:	f002 f854 	bl	8006178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <DMA1_Channel1_IRQHandler+0x14>)
 80040de:	0018      	movs	r0, r3
 80040e0:	f001 fdb5 	bl	8005c4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	2000020c 	.word	0x2000020c

080040f0 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80040f4:	4b03      	ldr	r3, [pc, #12]	; (8004104 <USART4_5_IRQHandler+0x14>)
 80040f6:	0018      	movs	r0, r3
 80040f8:	f004 fb5e 	bl	80087b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	200005c8 	.word	0x200005c8

08004108 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800410c:	4b03      	ldr	r3, [pc, #12]	; (800411c <TIM2_IRQHandler+0x14>)
 800410e:	0018      	movs	r0, r3
 8004110:	f003 fd1a 	bl	8007b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	200004c0 	.word	0x200004c0

08004120 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <TIM3_IRQHandler+0x14>)
 8004126:	0018      	movs	r0, r3
 8004128:	f003 fd0e 	bl	8007b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	20000440 	.word	0x20000440

08004138 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <TIM6_DAC_IRQHandler+0x14>)
 800413e:	0018      	movs	r0, r3
 8004140:	f003 fd02 	bl	8007b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	20000480 	.word	0x20000480

08004150 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <TIM7_IRQHandler+0x14>)
 8004156:	0018      	movs	r0, r3
 8004158:	f003 fcf6 	bl	8007b48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	20000500 	.word	0x20000500

08004168 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800416c:	4b03      	ldr	r3, [pc, #12]	; (800417c <USART2_IRQHandler+0x14>)
 800416e:	0018      	movs	r0, r3
 8004170:	f004 fb22 	bl	80087b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	2000064c 	.word	0x2000064c

08004180 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
	return 1;
 8004184:	2301      	movs	r3, #1
}
 8004186:	0018      	movs	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <_kill>:

int _kill(int pid, int sig)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004196:	f005 fe03 	bl	8009da0 <__errno>
 800419a:	0003      	movs	r3, r0
 800419c:	2216      	movs	r2, #22
 800419e:	601a      	str	r2, [r3, #0]
	return -1;
 80041a0:	2301      	movs	r3, #1
 80041a2:	425b      	negs	r3, r3
}
 80041a4:	0018      	movs	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}

080041ac <_exit>:

void _exit (int status)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041b4:	2301      	movs	r3, #1
 80041b6:	425a      	negs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	0011      	movs	r1, r2
 80041bc:	0018      	movs	r0, r3
 80041be:	f7ff ffe5 	bl	800418c <_kill>
	while (1) {}		/* Make sure we hang here */
 80041c2:	e7fe      	b.n	80041c2 <_exit+0x16>

080041c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
 80041d4:	e00a      	b.n	80041ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041d6:	e000      	b.n	80041da <_read+0x16>
 80041d8:	bf00      	nop
 80041da:	0001      	movs	r1, r0
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	60ba      	str	r2, [r7, #8]
 80041e2:	b2ca      	uxtb	r2, r1
 80041e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	3301      	adds	r3, #1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	dbf0      	blt.n	80041d6 <_read+0x12>
	}

return len;
 80041f4:	687b      	ldr	r3, [r7, #4]
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b006      	add	sp, #24
 80041fc:	bd80      	pop	{r7, pc}

080041fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	e009      	b.n	8004224 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	1c5a      	adds	r2, r3, #1
 8004214:	60ba      	str	r2, [r7, #8]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	0018      	movs	r0, r3
 800421a:	e000      	b.n	800421e <_write+0x20>
 800421c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3301      	adds	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	429a      	cmp	r2, r3
 800422a:	dbf1      	blt.n	8004210 <_write+0x12>
	}
	return len;
 800422c:	687b      	ldr	r3, [r7, #4]
}
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	b006      	add	sp, #24
 8004234:	bd80      	pop	{r7, pc}

08004236 <_close>:

int _close(int file)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
	return -1;
 800423e:	2301      	movs	r3, #1
 8004240:	425b      	negs	r3, r3
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	b002      	add	sp, #8
 8004248:	bd80      	pop	{r7, pc}

0800424a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
 8004252:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2280      	movs	r2, #128	; 0x80
 8004258:	0192      	lsls	r2, r2, #6
 800425a:	605a      	str	r2, [r3, #4]
	return 0;
 800425c:	2300      	movs	r3, #0
}
 800425e:	0018      	movs	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	b002      	add	sp, #8
 8004264:	bd80      	pop	{r7, pc}

08004266 <_isatty>:

int _isatty(int file)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
	return 1;
 800426e:	2301      	movs	r3, #1
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	b002      	add	sp, #8
 8004276:	bd80      	pop	{r7, pc}

08004278 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
	return 0;
 8004284:	2300      	movs	r3, #0
}
 8004286:	0018      	movs	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	b004      	add	sp, #16
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004298:	4a14      	ldr	r2, [pc, #80]	; (80042ec <_sbrk+0x5c>)
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <_sbrk+0x60>)
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <_sbrk+0x64>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d102      	bne.n	80042b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042ac:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <_sbrk+0x64>)
 80042ae:	4a12      	ldr	r2, [pc, #72]	; (80042f8 <_sbrk+0x68>)
 80042b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <_sbrk+0x64>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	18d3      	adds	r3, r2, r3
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d207      	bcs.n	80042d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042c0:	f005 fd6e 	bl	8009da0 <__errno>
 80042c4:	0003      	movs	r3, r0
 80042c6:	220c      	movs	r2, #12
 80042c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ca:	2301      	movs	r3, #1
 80042cc:	425b      	negs	r3, r3
 80042ce:	e009      	b.n	80042e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <_sbrk+0x64>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042d6:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <_sbrk+0x64>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	18d2      	adds	r2, r2, r3
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <_sbrk+0x64>)
 80042e0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80042e2:	68fb      	ldr	r3, [r7, #12]
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b006      	add	sp, #24
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20005000 	.word	0x20005000
 80042f0:	00000400 	.word	0x00000400
 80042f4:	20000200 	.word	0x20000200
 80042f8:	200006e8 	.word	0x200006e8

080042fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim21;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800430e:	2308      	movs	r3, #8
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	0018      	movs	r0, r3
 8004314:	2310      	movs	r3, #16
 8004316:	001a      	movs	r2, r3
 8004318:	2100      	movs	r1, #0
 800431a:	f005 fd6b 	bl	8009df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800431e:	003b      	movs	r3, r7
 8004320:	0018      	movs	r0, r3
 8004322:	2308      	movs	r3, #8
 8004324:	001a      	movs	r2, r3
 8004326:	2100      	movs	r1, #0
 8004328:	f005 fd64 	bl	8009df4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800432c:	4b1e      	ldr	r3, [pc, #120]	; (80043a8 <MX_TIM2_Init+0xa0>)
 800432e:	2280      	movs	r2, #128	; 0x80
 8004330:	05d2      	lsls	r2, r2, #23
 8004332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200-1;
 8004334:	4b1c      	ldr	r3, [pc, #112]	; (80043a8 <MX_TIM2_Init+0xa0>)
 8004336:	4a1d      	ldr	r2, [pc, #116]	; (80043ac <MX_TIM2_Init+0xa4>)
 8004338:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <MX_TIM2_Init+0xa0>)
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8004340:	4b19      	ldr	r3, [pc, #100]	; (80043a8 <MX_TIM2_Init+0xa0>)
 8004342:	4a1b      	ldr	r2, [pc, #108]	; (80043b0 <MX_TIM2_Init+0xa8>)
 8004344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <MX_TIM2_Init+0xa0>)
 8004348:	2200      	movs	r2, #0
 800434a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800434c:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <MX_TIM2_Init+0xa0>)
 800434e:	2200      	movs	r2, #0
 8004350:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <MX_TIM2_Init+0xa0>)
 8004354:	0018      	movs	r0, r3
 8004356:	f003 faf7 	bl	8007948 <HAL_TIM_Base_Init>
 800435a:	1e03      	subs	r3, r0, #0
 800435c:	d001      	beq.n	8004362 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800435e:	f7ff fda3 	bl	8003ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004362:	2108      	movs	r1, #8
 8004364:	187b      	adds	r3, r7, r1
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	0152      	lsls	r2, r2, #5
 800436a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800436c:	187a      	adds	r2, r7, r1
 800436e:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <MX_TIM2_Init+0xa0>)
 8004370:	0011      	movs	r1, r2
 8004372:	0018      	movs	r0, r3
 8004374:	f003 fd96 	bl	8007ea4 <HAL_TIM_ConfigClockSource>
 8004378:	1e03      	subs	r3, r0, #0
 800437a:	d001      	beq.n	8004380 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800437c:	f7ff fd94 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004380:	003b      	movs	r3, r7
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004386:	003b      	movs	r3, r7
 8004388:	2200      	movs	r2, #0
 800438a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800438c:	003a      	movs	r2, r7
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <MX_TIM2_Init+0xa0>)
 8004390:	0011      	movs	r1, r2
 8004392:	0018      	movs	r0, r3
 8004394:	f004 f876 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 8004398:	1e03      	subs	r3, r0, #0
 800439a:	d001      	beq.n	80043a0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800439c:	f7ff fd84 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80043a0:	46c0      	nop			; (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b006      	add	sp, #24
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	200004c0 	.word	0x200004c0
 80043ac:	00000c7f 	.word	0x00000c7f
 80043b0:	000007cf 	.word	0x000007cf

080043b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043ba:	2308      	movs	r3, #8
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	0018      	movs	r0, r3
 80043c0:	2310      	movs	r3, #16
 80043c2:	001a      	movs	r2, r3
 80043c4:	2100      	movs	r1, #0
 80043c6:	f005 fd15 	bl	8009df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043ca:	003b      	movs	r3, r7
 80043cc:	0018      	movs	r0, r3
 80043ce:	2308      	movs	r3, #8
 80043d0:	001a      	movs	r2, r3
 80043d2:	2100      	movs	r1, #0
 80043d4:	f005 fd0e 	bl	8009df4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80043d8:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <MX_TIM3_Init+0xa0>)
 80043da:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <MX_TIM3_Init+0xa4>)
 80043dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3200-1;
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <MX_TIM3_Init+0xa0>)
 80043e0:	4a1e      	ldr	r2, [pc, #120]	; (800445c <MX_TIM3_Init+0xa8>)
 80043e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <MX_TIM3_Init+0xa0>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <MX_TIM3_Init+0xa0>)
 80043ec:	2290      	movs	r2, #144	; 0x90
 80043ee:	32ff      	adds	r2, #255	; 0xff
 80043f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043f2:	4b18      	ldr	r3, [pc, #96]	; (8004454 <MX_TIM3_Init+0xa0>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043f8:	4b16      	ldr	r3, [pc, #88]	; (8004454 <MX_TIM3_Init+0xa0>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <MX_TIM3_Init+0xa0>)
 8004400:	0018      	movs	r0, r3
 8004402:	f003 faa1 	bl	8007948 <HAL_TIM_Base_Init>
 8004406:	1e03      	subs	r3, r0, #0
 8004408:	d001      	beq.n	800440e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800440a:	f7ff fd4d 	bl	8003ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800440e:	2108      	movs	r1, #8
 8004410:	187b      	adds	r3, r7, r1
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	0152      	lsls	r2, r2, #5
 8004416:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004418:	187a      	adds	r2, r7, r1
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <MX_TIM3_Init+0xa0>)
 800441c:	0011      	movs	r1, r2
 800441e:	0018      	movs	r0, r3
 8004420:	f003 fd40 	bl	8007ea4 <HAL_TIM_ConfigClockSource>
 8004424:	1e03      	subs	r3, r0, #0
 8004426:	d001      	beq.n	800442c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004428:	f7ff fd3e 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800442c:	003b      	movs	r3, r7
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004432:	003b      	movs	r3, r7
 8004434:	2200      	movs	r2, #0
 8004436:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004438:	003a      	movs	r2, r7
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <MX_TIM3_Init+0xa0>)
 800443c:	0011      	movs	r1, r2
 800443e:	0018      	movs	r0, r3
 8004440:	f004 f820 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 8004444:	1e03      	subs	r3, r0, #0
 8004446:	d001      	beq.n	800444c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8004448:	f7ff fd2e 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	46bd      	mov	sp, r7
 8004450:	b006      	add	sp, #24
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000440 	.word	0x20000440
 8004458:	40000400 	.word	0x40000400
 800445c:	00000c7f 	.word	0x00000c7f

08004460 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004466:	003b      	movs	r3, r7
 8004468:	0018      	movs	r0, r3
 800446a:	2308      	movs	r3, #8
 800446c:	001a      	movs	r2, r3
 800446e:	2100      	movs	r1, #0
 8004470:	f005 fcc0 	bl	8009df4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004474:	4b15      	ldr	r3, [pc, #84]	; (80044cc <MX_TIM6_Init+0x6c>)
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <MX_TIM6_Init+0x70>)
 8004478:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3200-1;
 800447a:	4b14      	ldr	r3, [pc, #80]	; (80044cc <MX_TIM6_Init+0x6c>)
 800447c:	4a15      	ldr	r2, [pc, #84]	; (80044d4 <MX_TIM6_Init+0x74>)
 800447e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004480:	4b12      	ldr	r3, [pc, #72]	; (80044cc <MX_TIM6_Init+0x6c>)
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000-1;
 8004486:	4b11      	ldr	r3, [pc, #68]	; (80044cc <MX_TIM6_Init+0x6c>)
 8004488:	4a13      	ldr	r2, [pc, #76]	; (80044d8 <MX_TIM6_Init+0x78>)
 800448a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <MX_TIM6_Init+0x6c>)
 800448e:	2200      	movs	r2, #0
 8004490:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004492:	4b0e      	ldr	r3, [pc, #56]	; (80044cc <MX_TIM6_Init+0x6c>)
 8004494:	0018      	movs	r0, r3
 8004496:	f003 fa57 	bl	8007948 <HAL_TIM_Base_Init>
 800449a:	1e03      	subs	r3, r0, #0
 800449c:	d001      	beq.n	80044a2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800449e:	f7ff fd03 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044a2:	003b      	movs	r3, r7
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044a8:	003b      	movs	r3, r7
 80044aa:	2200      	movs	r2, #0
 80044ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80044ae:	003a      	movs	r2, r7
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <MX_TIM6_Init+0x6c>)
 80044b2:	0011      	movs	r1, r2
 80044b4:	0018      	movs	r0, r3
 80044b6:	f003 ffe5 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 80044ba:	1e03      	subs	r3, r0, #0
 80044bc:	d001      	beq.n	80044c2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80044be:	f7ff fcf3 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b002      	add	sp, #8
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	20000480 	.word	0x20000480
 80044d0:	40001000 	.word	0x40001000
 80044d4:	00000c7f 	.word	0x00000c7f
 80044d8:	00001387 	.word	0x00001387

080044dc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044e2:	003b      	movs	r3, r7
 80044e4:	0018      	movs	r0, r3
 80044e6:	2308      	movs	r3, #8
 80044e8:	001a      	movs	r2, r3
 80044ea:	2100      	movs	r1, #0
 80044ec:	f005 fc82 	bl	8009df4 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80044f0:	4b15      	ldr	r3, [pc, #84]	; (8004548 <MX_TIM7_Init+0x6c>)
 80044f2:	4a16      	ldr	r2, [pc, #88]	; (800454c <MX_TIM7_Init+0x70>)
 80044f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1600-1;
 80044f6:	4b14      	ldr	r3, [pc, #80]	; (8004548 <MX_TIM7_Init+0x6c>)
 80044f8:	4a15      	ldr	r2, [pc, #84]	; (8004550 <MX_TIM7_Init+0x74>)
 80044fa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044fc:	4b12      	ldr	r3, [pc, #72]	; (8004548 <MX_TIM7_Init+0x6c>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2-1;
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <MX_TIM7_Init+0x6c>)
 8004504:	2201      	movs	r2, #1
 8004506:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <MX_TIM7_Init+0x6c>)
 800450a:	2200      	movs	r2, #0
 800450c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800450e:	4b0e      	ldr	r3, [pc, #56]	; (8004548 <MX_TIM7_Init+0x6c>)
 8004510:	0018      	movs	r0, r3
 8004512:	f003 fa19 	bl	8007948 <HAL_TIM_Base_Init>
 8004516:	1e03      	subs	r3, r0, #0
 8004518:	d001      	beq.n	800451e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800451a:	f7ff fcc5 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800451e:	003b      	movs	r3, r7
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004524:	003b      	movs	r3, r7
 8004526:	2200      	movs	r2, #0
 8004528:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800452a:	003a      	movs	r2, r7
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <MX_TIM7_Init+0x6c>)
 800452e:	0011      	movs	r1, r2
 8004530:	0018      	movs	r0, r3
 8004532:	f003 ffa7 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 8004536:	1e03      	subs	r3, r0, #0
 8004538:	d001      	beq.n	800453e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800453a:	f7ff fcb5 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800453e:	46c0      	nop			; (mov r8, r8)
 8004540:	46bd      	mov	sp, r7
 8004542:	b002      	add	sp, #8
 8004544:	bd80      	pop	{r7, pc}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	20000500 	.word	0x20000500
 800454c:	40001400 	.word	0x40001400
 8004550:	0000063f 	.word	0x0000063f

08004554 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
 8004558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800455a:	2318      	movs	r3, #24
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	0018      	movs	r0, r3
 8004560:	2310      	movs	r3, #16
 8004562:	001a      	movs	r2, r3
 8004564:	2100      	movs	r1, #0
 8004566:	f005 fc45 	bl	8009df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800456a:	2310      	movs	r3, #16
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	0018      	movs	r0, r3
 8004570:	2308      	movs	r3, #8
 8004572:	001a      	movs	r2, r3
 8004574:	2100      	movs	r1, #0
 8004576:	f005 fc3d 	bl	8009df4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800457a:	003b      	movs	r3, r7
 800457c:	0018      	movs	r0, r3
 800457e:	2310      	movs	r3, #16
 8004580:	001a      	movs	r2, r3
 8004582:	2100      	movs	r1, #0
 8004584:	f005 fc36 	bl	8009df4 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8004588:	4b34      	ldr	r3, [pc, #208]	; (800465c <MX_TIM21_Init+0x108>)
 800458a:	4a35      	ldr	r2, [pc, #212]	; (8004660 <MX_TIM21_Init+0x10c>)
 800458c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 32-1;
 800458e:	4b33      	ldr	r3, [pc, #204]	; (800465c <MX_TIM21_Init+0x108>)
 8004590:	221f      	movs	r2, #31
 8004592:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004594:	4b31      	ldr	r3, [pc, #196]	; (800465c <MX_TIM21_Init+0x108>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 1000-1;
 800459a:	4b30      	ldr	r3, [pc, #192]	; (800465c <MX_TIM21_Init+0x108>)
 800459c:	4a31      	ldr	r2, [pc, #196]	; (8004664 <MX_TIM21_Init+0x110>)
 800459e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045a0:	4b2e      	ldr	r3, [pc, #184]	; (800465c <MX_TIM21_Init+0x108>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045a6:	4b2d      	ldr	r3, [pc, #180]	; (800465c <MX_TIM21_Init+0x108>)
 80045a8:	2280      	movs	r2, #128	; 0x80
 80045aa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80045ac:	4b2b      	ldr	r3, [pc, #172]	; (800465c <MX_TIM21_Init+0x108>)
 80045ae:	0018      	movs	r0, r3
 80045b0:	f003 f9ca 	bl	8007948 <HAL_TIM_Base_Init>
 80045b4:	1e03      	subs	r3, r0, #0
 80045b6:	d001      	beq.n	80045bc <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 80045b8:	f7ff fc76 	bl	8003ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045bc:	2118      	movs	r1, #24
 80045be:	187b      	adds	r3, r7, r1
 80045c0:	2280      	movs	r2, #128	; 0x80
 80045c2:	0152      	lsls	r2, r2, #5
 80045c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80045c6:	187a      	adds	r2, r7, r1
 80045c8:	4b24      	ldr	r3, [pc, #144]	; (800465c <MX_TIM21_Init+0x108>)
 80045ca:	0011      	movs	r1, r2
 80045cc:	0018      	movs	r0, r3
 80045ce:	f003 fc69 	bl	8007ea4 <HAL_TIM_ConfigClockSource>
 80045d2:	1e03      	subs	r3, r0, #0
 80045d4:	d001      	beq.n	80045da <MX_TIM21_Init+0x86>
  {
    Error_Handler();
 80045d6:	f7ff fc67 	bl	8003ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim21) != HAL_OK)
 80045da:	4b20      	ldr	r3, [pc, #128]	; (800465c <MX_TIM21_Init+0x108>)
 80045dc:	0018      	movs	r0, r3
 80045de:	f003 fa6b 	bl	8007ab8 <HAL_TIM_PWM_Init>
 80045e2:	1e03      	subs	r3, r0, #0
 80045e4:	d001      	beq.n	80045ea <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 80045e6:	f7ff fc5f 	bl	8003ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045ea:	2110      	movs	r1, #16
 80045ec:	187b      	adds	r3, r7, r1
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045f2:	187b      	adds	r3, r7, r1
 80045f4:	2200      	movs	r2, #0
 80045f6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80045f8:	187a      	adds	r2, r7, r1
 80045fa:	4b18      	ldr	r3, [pc, #96]	; (800465c <MX_TIM21_Init+0x108>)
 80045fc:	0011      	movs	r1, r2
 80045fe:	0018      	movs	r0, r3
 8004600:	f003 ff40 	bl	8008484 <HAL_TIMEx_MasterConfigSynchronization>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d001      	beq.n	800460c <MX_TIM21_Init+0xb8>
  {
    Error_Handler();
 8004608:	f7ff fc4e 	bl	8003ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800460c:	003b      	movs	r3, r7
 800460e:	2260      	movs	r2, #96	; 0x60
 8004610:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 200-1;
 8004612:	003b      	movs	r3, r7
 8004614:	22c7      	movs	r2, #199	; 0xc7
 8004616:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004618:	003b      	movs	r3, r7
 800461a:	2200      	movs	r2, #0
 800461c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800461e:	003b      	movs	r3, r7
 8004620:	2200      	movs	r2, #0
 8004622:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004624:	0039      	movs	r1, r7
 8004626:	4b0d      	ldr	r3, [pc, #52]	; (800465c <MX_TIM21_Init+0x108>)
 8004628:	2200      	movs	r2, #0
 800462a:	0018      	movs	r0, r3
 800462c:	f003 fb74 	bl	8007d18 <HAL_TIM_PWM_ConfigChannel>
 8004630:	1e03      	subs	r3, r0, #0
 8004632:	d001      	beq.n	8004638 <MX_TIM21_Init+0xe4>
  {
    Error_Handler();
 8004634:	f7ff fc38 	bl	8003ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004638:	0039      	movs	r1, r7
 800463a:	4b08      	ldr	r3, [pc, #32]	; (800465c <MX_TIM21_Init+0x108>)
 800463c:	2204      	movs	r2, #4
 800463e:	0018      	movs	r0, r3
 8004640:	f003 fb6a 	bl	8007d18 <HAL_TIM_PWM_ConfigChannel>
 8004644:	1e03      	subs	r3, r0, #0
 8004646:	d001      	beq.n	800464c <MX_TIM21_Init+0xf8>
  {
    Error_Handler();
 8004648:	f7ff fc2e 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */
  HAL_TIM_MspPostInit(&htim21);
 800464c:	4b03      	ldr	r3, [pc, #12]	; (800465c <MX_TIM21_Init+0x108>)
 800464e:	0018      	movs	r0, r3
 8004650:	f000 f878 	bl	8004744 <HAL_TIM_MspPostInit>

}
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	46bd      	mov	sp, r7
 8004658:	b00a      	add	sp, #40	; 0x28
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000540 	.word	0x20000540
 8004660:	40010800 	.word	0x40010800
 8004664:	000003e7 	.word	0x000003e7

08004668 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	05db      	lsls	r3, r3, #23
 8004678:	429a      	cmp	r2, r3
 800467a:	d10e      	bne.n	800469a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800467c:	4b2c      	ldr	r3, [pc, #176]	; (8004730 <HAL_TIM_Base_MspInit+0xc8>)
 800467e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004680:	4b2b      	ldr	r3, [pc, #172]	; (8004730 <HAL_TIM_Base_MspInit+0xc8>)
 8004682:	2101      	movs	r1, #1
 8004684:	430a      	orrs	r2, r1
 8004686:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004688:	2200      	movs	r2, #0
 800468a:	2100      	movs	r1, #0
 800468c:	200f      	movs	r0, #15
 800468e:	f001 f947 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004692:	200f      	movs	r0, #15
 8004694:	f001 f959 	bl	800594a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM21_CLK_ENABLE();
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8004698:	e046      	b.n	8004728 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM3)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a25      	ldr	r2, [pc, #148]	; (8004734 <HAL_TIM_Base_MspInit+0xcc>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d10e      	bne.n	80046c2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046a4:	4b22      	ldr	r3, [pc, #136]	; (8004730 <HAL_TIM_Base_MspInit+0xc8>)
 80046a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a8:	4b21      	ldr	r3, [pc, #132]	; (8004730 <HAL_TIM_Base_MspInit+0xc8>)
 80046aa:	2102      	movs	r1, #2
 80046ac:	430a      	orrs	r2, r1
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80046b0:	2200      	movs	r2, #0
 80046b2:	2100      	movs	r1, #0
 80046b4:	2010      	movs	r0, #16
 80046b6:	f001 f933 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80046ba:	2010      	movs	r0, #16
 80046bc:	f001 f945 	bl	800594a <HAL_NVIC_EnableIRQ>
}
 80046c0:	e032      	b.n	8004728 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1c      	ldr	r2, [pc, #112]	; (8004738 <HAL_TIM_Base_MspInit+0xd0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d10e      	bne.n	80046ea <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <HAL_TIM_Base_MspInit+0xc8>)
 80046ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d0:	4b17      	ldr	r3, [pc, #92]	; (8004730 <HAL_TIM_Base_MspInit+0xc8>)
 80046d2:	2110      	movs	r1, #16
 80046d4:	430a      	orrs	r2, r1
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80046d8:	2200      	movs	r2, #0
 80046da:	2103      	movs	r1, #3
 80046dc:	2011      	movs	r0, #17
 80046de:	f001 f91f 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80046e2:	2011      	movs	r0, #17
 80046e4:	f001 f931 	bl	800594a <HAL_NVIC_EnableIRQ>
}
 80046e8:	e01e      	b.n	8004728 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM7)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a13      	ldr	r2, [pc, #76]	; (800473c <HAL_TIM_Base_MspInit+0xd4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10e      	bne.n	8004712 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80046f4:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <HAL_TIM_Base_MspInit+0xc8>)
 80046f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f8:	4b0d      	ldr	r3, [pc, #52]	; (8004730 <HAL_TIM_Base_MspInit+0xc8>)
 80046fa:	2120      	movs	r1, #32
 80046fc:	430a      	orrs	r2, r1
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8004700:	2200      	movs	r2, #0
 8004702:	2103      	movs	r1, #3
 8004704:	2012      	movs	r0, #18
 8004706:	f001 f90b 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800470a:	2012      	movs	r0, #18
 800470c:	f001 f91d 	bl	800594a <HAL_NVIC_EnableIRQ>
}
 8004710:	e00a      	b.n	8004728 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM21)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <HAL_TIM_Base_MspInit+0xd8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d105      	bne.n	8004728 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM21_CLK_ENABLE();
 800471c:	4b04      	ldr	r3, [pc, #16]	; (8004730 <HAL_TIM_Base_MspInit+0xc8>)
 800471e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004720:	4b03      	ldr	r3, [pc, #12]	; (8004730 <HAL_TIM_Base_MspInit+0xc8>)
 8004722:	2104      	movs	r1, #4
 8004724:	430a      	orrs	r2, r1
 8004726:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}
 8004730:	40021000 	.word	0x40021000
 8004734:	40000400 	.word	0x40000400
 8004738:	40001000 	.word	0x40001000
 800473c:	40001400 	.word	0x40001400
 8004740:	40010800 	.word	0x40010800

08004744 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004744:	b590      	push	{r4, r7, lr}
 8004746:	b089      	sub	sp, #36	; 0x24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800474c:	240c      	movs	r4, #12
 800474e:	193b      	adds	r3, r7, r4
 8004750:	0018      	movs	r0, r3
 8004752:	2314      	movs	r3, #20
 8004754:	001a      	movs	r2, r3
 8004756:	2100      	movs	r1, #0
 8004758:	f005 fb4c 	bl	8009df4 <memset>
  if(timHandle->Instance==TIM21)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <HAL_TIM_MspPostInit+0x70>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d122      	bne.n	80047ac <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM21_MspPostInit 0 */

  /* USER CODE END TIM21_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004766:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <HAL_TIM_MspPostInit+0x74>)
 8004768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476a:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <HAL_TIM_MspPostInit+0x74>)
 800476c:	2102      	movs	r1, #2
 800476e:	430a      	orrs	r2, r1
 8004770:	62da      	str	r2, [r3, #44]	; 0x2c
 8004772:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <HAL_TIM_MspPostInit+0x74>)
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	2202      	movs	r2, #2
 8004778:	4013      	ands	r3, r2
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
    /**TIM21 GPIO Configuration
    PB13     ------> TIM21_CH1
    PB14     ------> TIM21_CH2
    */
    GPIO_InitStruct.Pin = PUMP2DC_Pin|PUMP1DC_Pin;
 800477e:	193b      	adds	r3, r7, r4
 8004780:	22c0      	movs	r2, #192	; 0xc0
 8004782:	01d2      	lsls	r2, r2, #7
 8004784:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004786:	0021      	movs	r1, r4
 8004788:	187b      	adds	r3, r7, r1
 800478a:	2202      	movs	r2, #2
 800478c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478e:	187b      	adds	r3, r7, r1
 8004790:	2200      	movs	r2, #0
 8004792:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004794:	187b      	adds	r3, r7, r1
 8004796:	2200      	movs	r2, #0
 8004798:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM21;
 800479a:	187b      	adds	r3, r7, r1
 800479c:	2206      	movs	r2, #6
 800479e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047a0:	187b      	adds	r3, r7, r1
 80047a2:	4a06      	ldr	r2, [pc, #24]	; (80047bc <HAL_TIM_MspPostInit+0x78>)
 80047a4:	0019      	movs	r1, r3
 80047a6:	0010      	movs	r0, r2
 80047a8:	f001 fb2e 	bl	8005e08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM21_MspPostInit 1 */

  /* USER CODE END TIM21_MspPostInit 1 */
  }

}
 80047ac:	46c0      	nop			; (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b009      	add	sp, #36	; 0x24
 80047b2:	bd90      	pop	{r4, r7, pc}
 80047b4:	40010800 	.word	0x40010800
 80047b8:	40021000 	.word	0x40021000
 80047bc:	50000400 	.word	0x50000400

080047c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart4;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047c4:	4b14      	ldr	r3, [pc, #80]	; (8004818 <MX_USART2_UART_Init+0x58>)
 80047c6:	4a15      	ldr	r2, [pc, #84]	; (800481c <MX_USART2_UART_Init+0x5c>)
 80047c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80047ca:	4b13      	ldr	r3, [pc, #76]	; (8004818 <MX_USART2_UART_Init+0x58>)
 80047cc:	22e1      	movs	r2, #225	; 0xe1
 80047ce:	0252      	lsls	r2, r2, #9
 80047d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047d2:	4b11      	ldr	r3, [pc, #68]	; (8004818 <MX_USART2_UART_Init+0x58>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047d8:	4b0f      	ldr	r3, [pc, #60]	; (8004818 <MX_USART2_UART_Init+0x58>)
 80047da:	2200      	movs	r2, #0
 80047dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <MX_USART2_UART_Init+0x58>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <MX_USART2_UART_Init+0x58>)
 80047e6:	220c      	movs	r2, #12
 80047e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <MX_USART2_UART_Init+0x58>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <MX_USART2_UART_Init+0x58>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80047f6:	4b08      	ldr	r3, [pc, #32]	; (8004818 <MX_USART2_UART_Init+0x58>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <MX_USART2_UART_Init+0x58>)
 80047fe:	2200      	movs	r2, #0
 8004800:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <MX_USART2_UART_Init+0x58>)
 8004804:	0018      	movs	r0, r3
 8004806:	f003 fe9b 	bl	8008540 <HAL_UART_Init>
 800480a:	1e03      	subs	r3, r0, #0
 800480c:	d001      	beq.n	8004812 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800480e:	f7ff fb4b 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004812:	46c0      	nop			; (mov r8, r8)
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	2000064c 	.word	0x2000064c
 800481c:	40004400 	.word	0x40004400

08004820 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8004824:	4b14      	ldr	r3, [pc, #80]	; (8004878 <MX_USART4_UART_Init+0x58>)
 8004826:	4a15      	ldr	r2, [pc, #84]	; (800487c <MX_USART4_UART_Init+0x5c>)
 8004828:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <MX_USART4_UART_Init+0x58>)
 800482c:	2296      	movs	r2, #150	; 0x96
 800482e:	0192      	lsls	r2, r2, #6
 8004830:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004832:	4b11      	ldr	r3, [pc, #68]	; (8004878 <MX_USART4_UART_Init+0x58>)
 8004834:	2200      	movs	r2, #0
 8004836:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004838:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <MX_USART4_UART_Init+0x58>)
 800483a:	2200      	movs	r2, #0
 800483c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800483e:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <MX_USART4_UART_Init+0x58>)
 8004840:	2200      	movs	r2, #0
 8004842:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004844:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <MX_USART4_UART_Init+0x58>)
 8004846:	220c      	movs	r2, #12
 8004848:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800484a:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <MX_USART4_UART_Init+0x58>)
 800484c:	2200      	movs	r2, #0
 800484e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004850:	4b09      	ldr	r3, [pc, #36]	; (8004878 <MX_USART4_UART_Init+0x58>)
 8004852:	2200      	movs	r2, #0
 8004854:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004856:	4b08      	ldr	r3, [pc, #32]	; (8004878 <MX_USART4_UART_Init+0x58>)
 8004858:	2200      	movs	r2, #0
 800485a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <MX_USART4_UART_Init+0x58>)
 800485e:	2200      	movs	r2, #0
 8004860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <MX_USART4_UART_Init+0x58>)
 8004864:	0018      	movs	r0, r3
 8004866:	f003 fe6b 	bl	8008540 <HAL_UART_Init>
 800486a:	1e03      	subs	r3, r0, #0
 800486c:	d001      	beq.n	8004872 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800486e:	f7ff fb1b 	bl	8003ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	200005c8 	.word	0x200005c8
 800487c:	40004c00 	.word	0x40004c00

08004880 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b08b      	sub	sp, #44	; 0x2c
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004888:	2414      	movs	r4, #20
 800488a:	193b      	adds	r3, r7, r4
 800488c:	0018      	movs	r0, r3
 800488e:	2314      	movs	r3, #20
 8004890:	001a      	movs	r2, r3
 8004892:	2100      	movs	r1, #0
 8004894:	f005 faae 	bl	8009df4 <memset>
  if(uartHandle->Instance==USART2)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a38      	ldr	r2, [pc, #224]	; (8004980 <HAL_UART_MspInit+0x100>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d132      	bne.n	8004908 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80048a2:	4b38      	ldr	r3, [pc, #224]	; (8004984 <HAL_UART_MspInit+0x104>)
 80048a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a6:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_UART_MspInit+0x104>)
 80048a8:	2180      	movs	r1, #128	; 0x80
 80048aa:	0289      	lsls	r1, r1, #10
 80048ac:	430a      	orrs	r2, r1
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b0:	4b34      	ldr	r3, [pc, #208]	; (8004984 <HAL_UART_MspInit+0x104>)
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	4b33      	ldr	r3, [pc, #204]	; (8004984 <HAL_UART_MspInit+0x104>)
 80048b6:	2101      	movs	r1, #1
 80048b8:	430a      	orrs	r2, r1
 80048ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80048bc:	4b31      	ldr	r3, [pc, #196]	; (8004984 <HAL_UART_MspInit+0x104>)
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	2201      	movs	r2, #1
 80048c2:	4013      	ands	r3, r2
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048c8:	0021      	movs	r1, r4
 80048ca:	187b      	adds	r3, r7, r1
 80048cc:	220c      	movs	r2, #12
 80048ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d0:	187b      	adds	r3, r7, r1
 80048d2:	2202      	movs	r2, #2
 80048d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d6:	187b      	adds	r3, r7, r1
 80048d8:	2200      	movs	r2, #0
 80048da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048dc:	187b      	adds	r3, r7, r1
 80048de:	2203      	movs	r2, #3
 80048e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80048e2:	187b      	adds	r3, r7, r1
 80048e4:	2204      	movs	r2, #4
 80048e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e8:	187a      	adds	r2, r7, r1
 80048ea:	23a0      	movs	r3, #160	; 0xa0
 80048ec:	05db      	lsls	r3, r3, #23
 80048ee:	0011      	movs	r1, r2
 80048f0:	0018      	movs	r0, r3
 80048f2:	f001 fa89 	bl	8005e08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80048f6:	2200      	movs	r2, #0
 80048f8:	2100      	movs	r1, #0
 80048fa:	201c      	movs	r0, #28
 80048fc:	f001 f810 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004900:	201c      	movs	r0, #28
 8004902:	f001 f822 	bl	800594a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8004906:	e036      	b.n	8004976 <HAL_UART_MspInit+0xf6>
  else if(uartHandle->Instance==USART4)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <HAL_UART_MspInit+0x108>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d131      	bne.n	8004976 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART4_CLK_ENABLE();
 8004912:	4b1c      	ldr	r3, [pc, #112]	; (8004984 <HAL_UART_MspInit+0x104>)
 8004914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004916:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <HAL_UART_MspInit+0x104>)
 8004918:	2180      	movs	r1, #128	; 0x80
 800491a:	0309      	lsls	r1, r1, #12
 800491c:	430a      	orrs	r2, r1
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004920:	4b18      	ldr	r3, [pc, #96]	; (8004984 <HAL_UART_MspInit+0x104>)
 8004922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <HAL_UART_MspInit+0x104>)
 8004926:	2104      	movs	r1, #4
 8004928:	430a      	orrs	r2, r1
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c
 800492c:	4b15      	ldr	r3, [pc, #84]	; (8004984 <HAL_UART_MspInit+0x104>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	2204      	movs	r2, #4
 8004932:	4013      	ands	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004938:	2114      	movs	r1, #20
 800493a:	187b      	adds	r3, r7, r1
 800493c:	22c0      	movs	r2, #192	; 0xc0
 800493e:	0112      	lsls	r2, r2, #4
 8004940:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004942:	187b      	adds	r3, r7, r1
 8004944:	2202      	movs	r2, #2
 8004946:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004948:	187b      	adds	r3, r7, r1
 800494a:	2200      	movs	r2, #0
 800494c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494e:	187b      	adds	r3, r7, r1
 8004950:	2203      	movs	r2, #3
 8004952:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8004954:	187b      	adds	r3, r7, r1
 8004956:	2206      	movs	r2, #6
 8004958:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800495a:	187b      	adds	r3, r7, r1
 800495c:	4a0b      	ldr	r2, [pc, #44]	; (800498c <HAL_UART_MspInit+0x10c>)
 800495e:	0019      	movs	r1, r3
 8004960:	0010      	movs	r0, r2
 8004962:	f001 fa51 	bl	8005e08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8004966:	2200      	movs	r2, #0
 8004968:	2100      	movs	r1, #0
 800496a:	200e      	movs	r0, #14
 800496c:	f000 ffd8 	bl	8005920 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8004970:	200e      	movs	r0, #14
 8004972:	f000 ffea 	bl	800594a <HAL_NVIC_EnableIRQ>
}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	46bd      	mov	sp, r7
 800497a:	b00b      	add	sp, #44	; 0x2c
 800497c:	bd90      	pop	{r4, r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	40004400 	.word	0x40004400
 8004984:	40021000 	.word	0x40021000
 8004988:	40004c00 	.word	0x40004c00
 800498c:	50000800 	.word	0x50000800

08004990 <initUSART>:
  }
}

/* USER CODE BEGIN 1 */

void initUSART(){
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
	uartPC.receive_itter = 0;
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <initUSART+0x74>)
 8004996:	2200      	movs	r2, #0
 8004998:	779a      	strb	r2, [r3, #30]
	uartPC.start_reading_flag = 0;
 800499a:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <initUSART+0x74>)
 800499c:	2200      	movs	r2, #0
 800499e:	77da      	strb	r2, [r3, #31]
	uartPC.received_sign = 0;
 80049a0:	4b18      	ldr	r3, [pc, #96]	; (8004a04 <initUSART+0x74>)
 80049a2:	2220      	movs	r2, #32
 80049a4:	2100      	movs	r1, #0
 80049a6:	5499      	strb	r1, [r3, r2]
	uartPC.sending_data_flag = 0;
 80049a8:	4b16      	ldr	r3, [pc, #88]	; (8004a04 <initUSART+0x74>)
 80049aa:	2221      	movs	r2, #33	; 0x21
 80049ac:	2100      	movs	r1, #0
 80049ae:	5499      	strb	r1, [r3, r2]
	memset(uartPC.UART_data_buff, '\0', RECEIVE_BUFFOR_SIZE);
 80049b0:	4b14      	ldr	r3, [pc, #80]	; (8004a04 <initUSART+0x74>)
 80049b2:	221e      	movs	r2, #30
 80049b4:	2100      	movs	r1, #0
 80049b6:	0018      	movs	r0, r3
 80049b8:	f005 fa1c 	bl	8009df4 <memset>
	uartBT.receive_itter = 0;
 80049bc:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <initUSART+0x78>)
 80049be:	2200      	movs	r2, #0
 80049c0:	779a      	strb	r2, [r3, #30]
	uartBT.start_reading_flag = 0;
 80049c2:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <initUSART+0x78>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	77da      	strb	r2, [r3, #31]
	uartBT.received_sign = 0;
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <initUSART+0x78>)
 80049ca:	2220      	movs	r2, #32
 80049cc:	2100      	movs	r1, #0
 80049ce:	5499      	strb	r1, [r3, r2]
	uartBT.sending_data_flag = 0;
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <initUSART+0x78>)
 80049d2:	2221      	movs	r2, #33	; 0x21
 80049d4:	2100      	movs	r1, #0
 80049d6:	5499      	strb	r1, [r3, r2]
	memset(uartBT.UART_data_buff, '\0', RECEIVE_BUFFOR_SIZE);
 80049d8:	4b0b      	ldr	r3, [pc, #44]	; (8004a08 <initUSART+0x78>)
 80049da:	221e      	movs	r2, #30
 80049dc:	2100      	movs	r1, #0
 80049de:	0018      	movs	r0, r3
 80049e0:	f005 fa08 	bl	8009df4 <memset>
	HAL_UART_Receive_IT(&huart2, &uartPC.received_sign, 1);
 80049e4:	4909      	ldr	r1, [pc, #36]	; (8004a0c <initUSART+0x7c>)
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <initUSART+0x80>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	0018      	movs	r0, r3
 80049ec:	f003 fe7c 	bl	80086e8 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart4, &uartBT.received_sign, 1);
 80049f0:	4908      	ldr	r1, [pc, #32]	; (8004a14 <initUSART+0x84>)
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <initUSART+0x88>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	0018      	movs	r0, r3
 80049f8:	f003 fe76 	bl	80086e8 <HAL_UART_Receive_IT>
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	200005a4 	.word	0x200005a4
 8004a08:	20000580 	.word	0x20000580
 8004a0c:	200005c4 	.word	0x200005c4
 8004a10:	2000064c 	.word	0x2000064c
 8004a14:	200005a0 	.word	0x200005a0
 8004a18:	200005c8 	.word	0x200005c8

08004a1c <receiveData>:

void receiveData(UART_HandleTypeDef *huart, struct uart_struct *uart_str) {
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
	if(uart_str->received_sign == (uint8_t)'!') {
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	5c9b      	ldrb	r3, [r3, r2]
 8004a2c:	2b21      	cmp	r3, #33	; 0x21
 8004a2e:	d10c      	bne.n	8004a4a <receiveData+0x2e>
		uart_str->receive_itter = 0;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2200      	movs	r2, #0
 8004a34:	779a      	strb	r2, [r3, #30]
		uart_str->start_reading_flag = 1;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	77da      	strb	r2, [r3, #31]
		memset(uart_str->UART_data_buff, 0, RECEIVE_BUFFOR_SIZE);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	221e      	movs	r2, #30
 8004a40:	2100      	movs	r1, #0
 8004a42:	0018      	movs	r0, r3
 8004a44:	f005 f9d6 	bl	8009df4 <memset>
		return;
 8004a48:	e03f      	b.n	8004aca <receiveData+0xae>
	}
	if(uart_str->start_reading_flag) {
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	7fdb      	ldrb	r3, [r3, #31]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d035      	beq.n	8004abe <receiveData+0xa2>
		if(uart_str->receive_itter < RECEIVE_BUFFOR_SIZE) { //Przepełnienie bufora
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	7f9b      	ldrb	r3, [r3, #30]
 8004a56:	2b1d      	cmp	r3, #29
 8004a58:	d837      	bhi.n	8004aca <receiveData+0xae>
			uart_str->UART_data_buff[uart_str->receive_itter] = uart_str->received_sign;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	7f9b      	ldrb	r3, [r3, #30]
 8004a5e:	0019      	movs	r1, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2220      	movs	r2, #32
 8004a64:	5c9a      	ldrb	r2, [r3, r2]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	545a      	strb	r2, [r3, r1]
			uart_str->receive_itter++;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	7f9b      	ldrb	r3, [r3, #30]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	779a      	strb	r2, [r3, #30]
			if((uart_str->received_sign==(uint8_t)'/')){
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	5c9b      	ldrb	r3, [r3, r2]
 8004a7c:	2b2f      	cmp	r3, #47	; 0x2f
 8004a7e:	d124      	bne.n	8004aca <receiveData+0xae>
				uart_str->UART_data_buff[uart_str->receive_itter] = uart_str->received_sign;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	7f9b      	ldrb	r3, [r3, #30]
 8004a84:	0019      	movs	r1, r3
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	5c9a      	ldrb	r2, [r3, r2]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	545a      	strb	r2, [r3, r1]
				if(parseData(uart_str)) HAL_UART_Transmit_IT(huart, (uint8_t*)"OK\r\n", strlen("OK\r\n"));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7fe f916 	bl	8002cc4 <parseData>
 8004a98:	1e03      	subs	r3, r0, #0
 8004a9a:	d006      	beq.n	8004aaa <receiveData+0x8e>
 8004a9c:	490c      	ldr	r1, [pc, #48]	; (8004ad0 <receiveData+0xb4>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f003 fda0 	bl	80085e8 <HAL_UART_Transmit_IT>
 8004aa8:	e005      	b.n	8004ab6 <receiveData+0x9a>
				else HAL_UART_Transmit_IT(huart, (uint8_t*)"NOK\r\n", strlen("NOK\r\n"));
 8004aaa:	490a      	ldr	r1, [pc, #40]	; (8004ad4 <receiveData+0xb8>)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2205      	movs	r2, #5
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f003 fd99 	bl	80085e8 <HAL_UART_Transmit_IT>

				uart_str->start_reading_flag = 0;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	77da      	strb	r2, [r3, #31]
 8004abc:	e005      	b.n	8004aca <receiveData+0xae>
			}
		}
	}else memset(uart_str->UART_data_buff, 0, RECEIVE_BUFFOR_SIZE);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	221e      	movs	r2, #30
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f005 f995 	bl	8009df4 <memset>
}
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b002      	add	sp, #8
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	0800e508 	.word	0x0800e508
 8004ad4:	0800e510 	.word	0x0800e510

08004ad8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a12      	ldr	r2, [pc, #72]	; (8004b30 <HAL_UART_RxCpltCallback+0x58>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10c      	bne.n	8004b04 <HAL_UART_RxCpltCallback+0x2c>

		receiveData(huart, &uartPC);
 8004aea:	4a12      	ldr	r2, [pc, #72]	; (8004b34 <HAL_UART_RxCpltCallback+0x5c>)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	0011      	movs	r1, r2
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7ff ff93 	bl	8004a1c <receiveData>
		HAL_UART_Receive_IT(huart, &(uartPC.received_sign), 1);
 8004af6:	4910      	ldr	r1, [pc, #64]	; (8004b38 <HAL_UART_RxCpltCallback+0x60>)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	0018      	movs	r0, r3
 8004afe:	f003 fdf3 	bl	80086e8 <HAL_UART_Receive_IT>
	} else if(huart->Instance == USART4){

		receiveData(huart, &uartBT);
		HAL_UART_Receive_IT(huart,&(uartBT.received_sign), 1);
	}
}
 8004b02:	e010      	b.n	8004b26 <HAL_UART_RxCpltCallback+0x4e>
	} else if(huart->Instance == USART4){
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <HAL_UART_RxCpltCallback+0x64>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d10b      	bne.n	8004b26 <HAL_UART_RxCpltCallback+0x4e>
		receiveData(huart, &uartBT);
 8004b0e:	4a0c      	ldr	r2, [pc, #48]	; (8004b40 <HAL_UART_RxCpltCallback+0x68>)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	0011      	movs	r1, r2
 8004b14:	0018      	movs	r0, r3
 8004b16:	f7ff ff81 	bl	8004a1c <receiveData>
		HAL_UART_Receive_IT(huart,&(uartBT.received_sign), 1);
 8004b1a:	490a      	ldr	r1, [pc, #40]	; (8004b44 <HAL_UART_RxCpltCallback+0x6c>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	0018      	movs	r0, r3
 8004b22:	f003 fde1 	bl	80086e8 <HAL_UART_Receive_IT>
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b002      	add	sp, #8
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	40004400 	.word	0x40004400
 8004b34:	200005a4 	.word	0x200005a4
 8004b38:	200005c4 	.word	0x200005c4
 8004b3c:	40004c00 	.word	0x40004c00
 8004b40:	20000580 	.word	0x20000580
 8004b44:	200005a0 	.word	0x200005a0

08004b48 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <HAL_UART_TxCpltCallback+0x5c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10d      	bne.n	8004b76 <HAL_UART_TxCpltCallback+0x2e>
		if(uartPC.sending_data_flag){
 8004b5a:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <HAL_UART_TxCpltCallback+0x60>)
 8004b5c:	2221      	movs	r2, #33	; 0x21
 8004b5e:	5c9b      	ldrb	r3, [r3, r2]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01a      	beq.n	8004b9a <HAL_UART_TxCpltCallback+0x52>
			send_data_to_uart(&huart2);
 8004b64:	4b11      	ldr	r3, [pc, #68]	; (8004bac <HAL_UART_TxCpltCallback+0x64>)
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 f828 	bl	8004bbc <send_data_to_uart>
			uartPC.sending_data_flag = 0;
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <HAL_UART_TxCpltCallback+0x60>)
 8004b6e:	2221      	movs	r2, #33	; 0x21
 8004b70:	2100      	movs	r1, #0
 8004b72:	5499      	strb	r1, [r3, r2]
		if(uartBT.sending_data_flag){
			send_data_to_uart(&huart4);
			uartBT.sending_data_flag = 0;
		}
	}
}
 8004b74:	e011      	b.n	8004b9a <HAL_UART_TxCpltCallback+0x52>
	}else if(huart->Instance == USART4){
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a0d      	ldr	r2, [pc, #52]	; (8004bb0 <HAL_UART_TxCpltCallback+0x68>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d10c      	bne.n	8004b9a <HAL_UART_TxCpltCallback+0x52>
		if(uartBT.sending_data_flag){
 8004b80:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <HAL_UART_TxCpltCallback+0x6c>)
 8004b82:	2221      	movs	r2, #33	; 0x21
 8004b84:	5c9b      	ldrb	r3, [r3, r2]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d007      	beq.n	8004b9a <HAL_UART_TxCpltCallback+0x52>
			send_data_to_uart(&huart4);
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <HAL_UART_TxCpltCallback+0x70>)
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f000 f815 	bl	8004bbc <send_data_to_uart>
			uartBT.sending_data_flag = 0;
 8004b92:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <HAL_UART_TxCpltCallback+0x6c>)
 8004b94:	2221      	movs	r2, #33	; 0x21
 8004b96:	2100      	movs	r1, #0
 8004b98:	5499      	strb	r1, [r3, r2]
}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b002      	add	sp, #8
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	40004400 	.word	0x40004400
 8004ba8:	200005a4 	.word	0x200005a4
 8004bac:	2000064c 	.word	0x2000064c
 8004bb0:	40004c00 	.word	0x40004c00
 8004bb4:	20000580 	.word	0x20000580
 8004bb8:	200005c8 	.word	0x200005c8

08004bbc <send_data_to_uart>:

void send_data_to_uart(UART_HandleTypeDef *huart){
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	46de      	mov	lr, fp
 8004bc0:	4657      	mov	r7, sl
 8004bc2:	464e      	mov	r6, r9
 8004bc4:	4645      	mov	r5, r8
 8004bc6:	b5e0      	push	{r5, r6, r7, lr}
 8004bc8:	b0f5      	sub	sp, #468	; 0x1d4
 8004bca:	af08      	add	r7, sp, #32
 8004bcc:	6078      	str	r0, [r7, #4]
	char sending_buff[300];
	char word_buff[120];

	memset(sending_buff, '\0', sizeof(sending_buff));
 8004bce:	2396      	movs	r3, #150	; 0x96
 8004bd0:	005a      	lsls	r2, r3, #1
 8004bd2:	2580      	movs	r5, #128	; 0x80
 8004bd4:	197b      	adds	r3, r7, r5
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	0018      	movs	r0, r3
 8004bda:	f005 f90b 	bl	8009df4 <memset>

	snprintf(word_buff, sizeof(word_buff),"\r\nCurr time: %02d:%02d:%02d\n\r", disp.currentRTCTime->Hours,disp.currentRTCTime->Minutes,disp.currentRTCTime->Seconds);
 8004bde:	4b6b      	ldr	r3, [pc, #428]	; (8004d8c <send_data_to_uart+0x1d0>)
 8004be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	001c      	movs	r4, r3
 8004be6:	4b69      	ldr	r3, [pc, #420]	; (8004d8c <send_data_to_uart+0x1d0>)
 8004be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bea:	785b      	ldrb	r3, [r3, #1]
 8004bec:	0019      	movs	r1, r3
 8004bee:	4b67      	ldr	r3, [pc, #412]	; (8004d8c <send_data_to_uart+0x1d0>)
 8004bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf2:	789b      	ldrb	r3, [r3, #2]
 8004bf4:	4a66      	ldr	r2, [pc, #408]	; (8004d90 <send_data_to_uart+0x1d4>)
 8004bf6:	2608      	movs	r6, #8
 8004bf8:	19b8      	adds	r0, r7, r6
 8004bfa:	9301      	str	r3, [sp, #4]
 8004bfc:	9100      	str	r1, [sp, #0]
 8004bfe:	0023      	movs	r3, r4
 8004c00:	2178      	movs	r1, #120	; 0x78
 8004c02:	f005 fd79 	bl	800a6f8 <sniprintf>
	strcat(sending_buff, word_buff);
 8004c06:	19ba      	adds	r2, r7, r6
 8004c08:	197b      	adds	r3, r7, r5
 8004c0a:	0011      	movs	r1, r2
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f005 fda7 	bl	800a760 <strcat>

	for(uint8_t i = 0 ; i<NUMBER_OF_FLOWERS; i++){
 8004c12:	23b0      	movs	r3, #176	; 0xb0
 8004c14:	33ff      	adds	r3, #255	; 0xff
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e09a      	b.n	8004d54 <send_data_to_uart+0x198>
		memset(word_buff, '\0', sizeof(word_buff));
 8004c1e:	2308      	movs	r3, #8
 8004c20:	18fb      	adds	r3, r7, r3
 8004c22:	2278      	movs	r2, #120	; 0x78
 8004c24:	2100      	movs	r1, #0
 8004c26:	0018      	movs	r0, r3
 8004c28:	f005 f8e4 	bl	8009df4 <memset>
		snprintf(word_buff, sizeof(word_buff),"\n\rFlower nr %i\r\nMoisture: %i\r\nWatering time: %02d:%02d:%02d\r\nLst watering time: %02d:%02d:%02d\r\nWatering dur: %i\r\n",
				flowers[i].flower_id,flowers[i].moisture,flowers[i].watering_time[0].Hours, flowers[i].watering_time[0].Minutes,flowers[i].watering_time[0].Seconds, flowers[i].last_watering_time.Hours,flowers[i].last_watering_time.Minutes,flowers[i].last_watering_time.Seconds,flowers[i].watering_duration);
 8004c2c:	26b0      	movs	r6, #176	; 0xb0
 8004c2e:	36ff      	adds	r6, #255	; 0xff
 8004c30:	19bb      	adds	r3, r7, r6
 8004c32:	781a      	ldrb	r2, [r3, #0]
 8004c34:	4957      	ldr	r1, [pc, #348]	; (8004d94 <send_data_to_uart+0x1d8>)
 8004c36:	0013      	movs	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	015b      	lsls	r3, r3, #5
 8004c3e:	5c5b      	ldrb	r3, [r3, r1]
		snprintf(word_buff, sizeof(word_buff),"\n\rFlower nr %i\r\nMoisture: %i\r\nWatering time: %02d:%02d:%02d\r\nLst watering time: %02d:%02d:%02d\r\nWatering dur: %i\r\n",
 8004c40:	469b      	mov	fp, r3
				flowers[i].flower_id,flowers[i].moisture,flowers[i].watering_time[0].Hours, flowers[i].watering_time[0].Minutes,flowers[i].watering_time[0].Seconds, flowers[i].last_watering_time.Hours,flowers[i].last_watering_time.Minutes,flowers[i].last_watering_time.Seconds,flowers[i].watering_duration);
 8004c42:	19bb      	adds	r3, r7, r6
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	4953      	ldr	r1, [pc, #332]	; (8004d94 <send_data_to_uart+0x1d8>)
 8004c48:	0013      	movs	r3, r2
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	189b      	adds	r3, r3, r2
 8004c4e:	015b      	lsls	r3, r3, #5
 8004c50:	18cb      	adds	r3, r1, r3
 8004c52:	330c      	adds	r3, #12
 8004c54:	781b      	ldrb	r3, [r3, #0]
		snprintf(word_buff, sizeof(word_buff),"\n\rFlower nr %i\r\nMoisture: %i\r\nWatering time: %02d:%02d:%02d\r\nLst watering time: %02d:%02d:%02d\r\nWatering dur: %i\r\n",
 8004c56:	001c      	movs	r4, r3
				flowers[i].flower_id,flowers[i].moisture,flowers[i].watering_time[0].Hours, flowers[i].watering_time[0].Minutes,flowers[i].watering_time[0].Seconds, flowers[i].last_watering_time.Hours,flowers[i].last_watering_time.Minutes,flowers[i].last_watering_time.Seconds,flowers[i].watering_duration);
 8004c58:	19bb      	adds	r3, r7, r6
 8004c5a:	781a      	ldrb	r2, [r3, #0]
 8004c5c:	494d      	ldr	r1, [pc, #308]	; (8004d94 <send_data_to_uart+0x1d8>)
 8004c5e:	2024      	movs	r0, #36	; 0x24
 8004c60:	0013      	movs	r3, r2
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	189b      	adds	r3, r3, r2
 8004c66:	015b      	lsls	r3, r3, #5
 8004c68:	18cb      	adds	r3, r1, r3
 8004c6a:	181b      	adds	r3, r3, r0
 8004c6c:	781b      	ldrb	r3, [r3, #0]
		snprintf(word_buff, sizeof(word_buff),"\n\rFlower nr %i\r\nMoisture: %i\r\nWatering time: %02d:%02d:%02d\r\nLst watering time: %02d:%02d:%02d\r\nWatering dur: %i\r\n",
 8004c6e:	001d      	movs	r5, r3
				flowers[i].flower_id,flowers[i].moisture,flowers[i].watering_time[0].Hours, flowers[i].watering_time[0].Minutes,flowers[i].watering_time[0].Seconds, flowers[i].last_watering_time.Hours,flowers[i].last_watering_time.Minutes,flowers[i].last_watering_time.Seconds,flowers[i].watering_duration);
 8004c70:	19bb      	adds	r3, r7, r6
 8004c72:	781a      	ldrb	r2, [r3, #0]
 8004c74:	4947      	ldr	r1, [pc, #284]	; (8004d94 <send_data_to_uart+0x1d8>)
 8004c76:	2025      	movs	r0, #37	; 0x25
 8004c78:	0013      	movs	r3, r2
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	189b      	adds	r3, r3, r2
 8004c7e:	015b      	lsls	r3, r3, #5
 8004c80:	18cb      	adds	r3, r1, r3
 8004c82:	181b      	adds	r3, r3, r0
 8004c84:	781b      	ldrb	r3, [r3, #0]
		snprintf(word_buff, sizeof(word_buff),"\n\rFlower nr %i\r\nMoisture: %i\r\nWatering time: %02d:%02d:%02d\r\nLst watering time: %02d:%02d:%02d\r\nWatering dur: %i\r\n",
 8004c86:	001e      	movs	r6, r3
				flowers[i].flower_id,flowers[i].moisture,flowers[i].watering_time[0].Hours, flowers[i].watering_time[0].Minutes,flowers[i].watering_time[0].Seconds, flowers[i].last_watering_time.Hours,flowers[i].last_watering_time.Minutes,flowers[i].last_watering_time.Seconds,flowers[i].watering_duration);
 8004c88:	23b0      	movs	r3, #176	; 0xb0
 8004c8a:	33ff      	adds	r3, #255	; 0xff
 8004c8c:	18fb      	adds	r3, r7, r3
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	4940      	ldr	r1, [pc, #256]	; (8004d94 <send_data_to_uart+0x1d8>)
 8004c92:	2026      	movs	r0, #38	; 0x26
 8004c94:	0013      	movs	r3, r2
 8004c96:	005b      	lsls	r3, r3, #1
 8004c98:	189b      	adds	r3, r3, r2
 8004c9a:	015b      	lsls	r3, r3, #5
 8004c9c:	18cb      	adds	r3, r1, r3
 8004c9e:	181b      	adds	r3, r3, r0
 8004ca0:	781b      	ldrb	r3, [r3, #0]
		snprintf(word_buff, sizeof(word_buff),"\n\rFlower nr %i\r\nMoisture: %i\r\nWatering time: %02d:%02d:%02d\r\nLst watering time: %02d:%02d:%02d\r\nWatering dur: %i\r\n",
 8004ca2:	469c      	mov	ip, r3
				flowers[i].flower_id,flowers[i].moisture,flowers[i].watering_time[0].Hours, flowers[i].watering_time[0].Minutes,flowers[i].watering_time[0].Seconds, flowers[i].last_watering_time.Hours,flowers[i].last_watering_time.Minutes,flowers[i].last_watering_time.Seconds,flowers[i].watering_duration);
 8004ca4:	23b0      	movs	r3, #176	; 0xb0
 8004ca6:	33ff      	adds	r3, #255	; 0xff
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	781a      	ldrb	r2, [r3, #0]
 8004cac:	4939      	ldr	r1, [pc, #228]	; (8004d94 <send_data_to_uart+0x1d8>)
 8004cae:	204c      	movs	r0, #76	; 0x4c
 8004cb0:	0013      	movs	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	189b      	adds	r3, r3, r2
 8004cb6:	015b      	lsls	r3, r3, #5
 8004cb8:	18cb      	adds	r3, r1, r3
 8004cba:	181b      	adds	r3, r3, r0
 8004cbc:	781b      	ldrb	r3, [r3, #0]
		snprintf(word_buff, sizeof(word_buff),"\n\rFlower nr %i\r\nMoisture: %i\r\nWatering time: %02d:%02d:%02d\r\nLst watering time: %02d:%02d:%02d\r\nWatering dur: %i\r\n",
 8004cbe:	4698      	mov	r8, r3
				flowers[i].flower_id,flowers[i].moisture,flowers[i].watering_time[0].Hours, flowers[i].watering_time[0].Minutes,flowers[i].watering_time[0].Seconds, flowers[i].last_watering_time.Hours,flowers[i].last_watering_time.Minutes,flowers[i].last_watering_time.Seconds,flowers[i].watering_duration);
 8004cc0:	23b0      	movs	r3, #176	; 0xb0
 8004cc2:	33ff      	adds	r3, #255	; 0xff
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	781a      	ldrb	r2, [r3, #0]
 8004cc8:	4932      	ldr	r1, [pc, #200]	; (8004d94 <send_data_to_uart+0x1d8>)
 8004cca:	204d      	movs	r0, #77	; 0x4d
 8004ccc:	0013      	movs	r3, r2
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	189b      	adds	r3, r3, r2
 8004cd2:	015b      	lsls	r3, r3, #5
 8004cd4:	18cb      	adds	r3, r1, r3
 8004cd6:	181b      	adds	r3, r3, r0
 8004cd8:	781b      	ldrb	r3, [r3, #0]
		snprintf(word_buff, sizeof(word_buff),"\n\rFlower nr %i\r\nMoisture: %i\r\nWatering time: %02d:%02d:%02d\r\nLst watering time: %02d:%02d:%02d\r\nWatering dur: %i\r\n",
 8004cda:	4699      	mov	r9, r3
				flowers[i].flower_id,flowers[i].moisture,flowers[i].watering_time[0].Hours, flowers[i].watering_time[0].Minutes,flowers[i].watering_time[0].Seconds, flowers[i].last_watering_time.Hours,flowers[i].last_watering_time.Minutes,flowers[i].last_watering_time.Seconds,flowers[i].watering_duration);
 8004cdc:	23b0      	movs	r3, #176	; 0xb0
 8004cde:	33ff      	adds	r3, #255	; 0xff
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	781a      	ldrb	r2, [r3, #0]
 8004ce4:	492b      	ldr	r1, [pc, #172]	; (8004d94 <send_data_to_uart+0x1d8>)
 8004ce6:	204e      	movs	r0, #78	; 0x4e
 8004ce8:	0013      	movs	r3, r2
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	189b      	adds	r3, r3, r2
 8004cee:	015b      	lsls	r3, r3, #5
 8004cf0:	18cb      	adds	r3, r1, r3
 8004cf2:	181b      	adds	r3, r3, r0
 8004cf4:	781b      	ldrb	r3, [r3, #0]
		snprintf(word_buff, sizeof(word_buff),"\n\rFlower nr %i\r\nMoisture: %i\r\nWatering time: %02d:%02d:%02d\r\nLst watering time: %02d:%02d:%02d\r\nWatering dur: %i\r\n",
 8004cf6:	469a      	mov	sl, r3
				flowers[i].flower_id,flowers[i].moisture,flowers[i].watering_time[0].Hours, flowers[i].watering_time[0].Minutes,flowers[i].watering_time[0].Seconds, flowers[i].last_watering_time.Hours,flowers[i].last_watering_time.Minutes,flowers[i].last_watering_time.Seconds,flowers[i].watering_duration);
 8004cf8:	23b0      	movs	r3, #176	; 0xb0
 8004cfa:	33ff      	adds	r3, #255	; 0xff
 8004cfc:	18fb      	adds	r3, r7, r3
 8004cfe:	781a      	ldrb	r2, [r3, #0]
 8004d00:	4924      	ldr	r1, [pc, #144]	; (8004d94 <send_data_to_uart+0x1d8>)
 8004d02:	0013      	movs	r3, r2
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	189b      	adds	r3, r3, r2
 8004d08:	015b      	lsls	r3, r3, #5
 8004d0a:	18cb      	adds	r3, r1, r3
 8004d0c:	3320      	adds	r3, #32
 8004d0e:	881b      	ldrh	r3, [r3, #0]
		snprintf(word_buff, sizeof(word_buff),"\n\rFlower nr %i\r\nMoisture: %i\r\nWatering time: %02d:%02d:%02d\r\nLst watering time: %02d:%02d:%02d\r\nWatering dur: %i\r\n",
 8004d10:	4a21      	ldr	r2, [pc, #132]	; (8004d98 <send_data_to_uart+0x1dc>)
 8004d12:	2008      	movs	r0, #8
 8004d14:	1838      	adds	r0, r7, r0
 8004d16:	9307      	str	r3, [sp, #28]
 8004d18:	4651      	mov	r1, sl
 8004d1a:	9106      	str	r1, [sp, #24]
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	9105      	str	r1, [sp, #20]
 8004d20:	4641      	mov	r1, r8
 8004d22:	9104      	str	r1, [sp, #16]
 8004d24:	4661      	mov	r1, ip
 8004d26:	9103      	str	r1, [sp, #12]
 8004d28:	9602      	str	r6, [sp, #8]
 8004d2a:	9501      	str	r5, [sp, #4]
 8004d2c:	9400      	str	r4, [sp, #0]
 8004d2e:	465b      	mov	r3, fp
 8004d30:	2178      	movs	r1, #120	; 0x78
 8004d32:	f005 fce1 	bl	800a6f8 <sniprintf>
		strcat(sending_buff,word_buff);
 8004d36:	2008      	movs	r0, #8
 8004d38:	183a      	adds	r2, r7, r0
 8004d3a:	2080      	movs	r0, #128	; 0x80
 8004d3c:	183b      	adds	r3, r7, r0
 8004d3e:	0011      	movs	r1, r2
 8004d40:	0018      	movs	r0, r3
 8004d42:	f005 fd0d 	bl	800a760 <strcat>
	for(uint8_t i = 0 ; i<NUMBER_OF_FLOWERS; i++){
 8004d46:	21b0      	movs	r1, #176	; 0xb0
 8004d48:	31ff      	adds	r1, #255	; 0xff
 8004d4a:	187b      	adds	r3, r7, r1
 8004d4c:	781a      	ldrb	r2, [r3, #0]
 8004d4e:	187b      	adds	r3, r7, r1
 8004d50:	3201      	adds	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	23b0      	movs	r3, #176	; 0xb0
 8004d56:	33ff      	adds	r3, #255	; 0xff
 8004d58:	18fb      	adds	r3, r7, r3
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d800      	bhi.n	8004d62 <send_data_to_uart+0x1a6>
 8004d60:	e75d      	b.n	8004c1e <send_data_to_uart+0x62>
	}
	HAL_UART_Transmit_IT(huart, (uint8_t*)sending_buff, strlen(sending_buff));
 8004d62:	2480      	movs	r4, #128	; 0x80
 8004d64:	193b      	adds	r3, r7, r4
 8004d66:	0018      	movs	r0, r3
 8004d68:	f7fb f9d8 	bl	800011c <strlen>
 8004d6c:	0003      	movs	r3, r0
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	1939      	adds	r1, r7, r4
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	0018      	movs	r0, r3
 8004d76:	f003 fc37 	bl	80085e8 <HAL_UART_Transmit_IT>
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b06d      	add	sp, #436	; 0x1b4
 8004d80:	bcf0      	pop	{r4, r5, r6, r7}
 8004d82:	46bb      	mov	fp, r7
 8004d84:	46b2      	mov	sl, r6
 8004d86:	46a9      	mov	r9, r5
 8004d88:	46a0      	mov	r8, r4
 8004d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d8c:	2000039c 	.word	0x2000039c
 8004d90:	0800e518 	.word	0x0800e518
 8004d94:	200002c4 	.word	0x200002c4
 8004d98:	0800e538 	.word	0x0800e538

08004d9c <Reset_Handler>:
.word  _ebss

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   r0, =_estack
 8004d9c:	480d      	ldr	r0, [pc, #52]	; (8004dd4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004d9e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004da0:	480d      	ldr	r0, [pc, #52]	; (8004dd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004da2:	490e      	ldr	r1, [pc, #56]	; (8004ddc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004da4:	4a0e      	ldr	r2, [pc, #56]	; (8004de0 <LoopForever+0xe>)
  movs r3, #0
 8004da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004da8:	e002      	b.n	8004db0 <LoopCopyDataInit>

08004daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004dae:	3304      	adds	r3, #4

08004db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004db4:	d3f9      	bcc.n	8004daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004db6:	4a0b      	ldr	r2, [pc, #44]	; (8004de4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004db8:	4c0b      	ldr	r4, [pc, #44]	; (8004de8 <LoopForever+0x16>)
  movs r3, #0
 8004dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dbc:	e001      	b.n	8004dc2 <LoopFillZerobss>

08004dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dc0:	3204      	adds	r2, #4

08004dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dc4:	d3fb      	bcc.n	8004dbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004dc6:	f7ff fa99 	bl	80042fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dca:	f004 ffef 	bl	8009dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dce:	f7fe feb9 	bl	8003b44 <main>

08004dd2 <LoopForever>:

LoopForever:
    b LoopForever
 8004dd2:	e7fe      	b.n	8004dd2 <LoopForever>
Reset_Handler:    ldr   r0, =_estack
 8004dd4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8004dd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ddc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004de0:	0800eb54 	.word	0x0800eb54
  ldr r2, =_sbss
 8004de4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004de8:	200006e4 	.word	0x200006e4

08004dec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004dec:	e7fe      	b.n	8004dec <ADC1_COMP_IRQHandler>
	...

08004df0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004df6:	1dfb      	adds	r3, r7, #7
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <HAL_Init+0x3c>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <HAL_Init+0x3c>)
 8004e02:	2140      	movs	r1, #64	; 0x40
 8004e04:	430a      	orrs	r2, r1
 8004e06:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e08:	2002      	movs	r0, #2
 8004e0a:	f000 f811 	bl	8004e30 <HAL_InitTick>
 8004e0e:	1e03      	subs	r3, r0, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004e12:	1dfb      	adds	r3, r7, #7
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]
 8004e18:	e001      	b.n	8004e1e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004e1a:	f7ff f905 	bl	8004028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004e1e:	1dfb      	adds	r3, r7, #7
 8004e20:	781b      	ldrb	r3, [r3, #0]
}
 8004e22:	0018      	movs	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b002      	add	sp, #8
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	40022000 	.word	0x40022000

08004e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e38:	4b14      	ldr	r3, [pc, #80]	; (8004e8c <HAL_InitTick+0x5c>)
 8004e3a:	681c      	ldr	r4, [r3, #0]
 8004e3c:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <HAL_InitTick+0x60>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	0019      	movs	r1, r3
 8004e42:	23fa      	movs	r3, #250	; 0xfa
 8004e44:	0098      	lsls	r0, r3, #2
 8004e46:	f7fb f985 	bl	8000154 <__udivsi3>
 8004e4a:	0003      	movs	r3, r0
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	0020      	movs	r0, r4
 8004e50:	f7fb f980 	bl	8000154 <__udivsi3>
 8004e54:	0003      	movs	r3, r0
 8004e56:	0018      	movs	r0, r3
 8004e58:	f000 fd87 	bl	800596a <HAL_SYSTICK_Config>
 8004e5c:	1e03      	subs	r3, r0, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e00f      	b.n	8004e84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d80b      	bhi.n	8004e82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	425b      	negs	r3, r3
 8004e70:	2200      	movs	r2, #0
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 fd54 	bl	8005920 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e78:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_InitTick+0x64>)
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e000      	b.n	8004e84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b003      	add	sp, #12
 8004e8a:	bd90      	pop	{r4, r7, pc}
 8004e8c:	20000000 	.word	0x20000000
 8004e90:	20000008 	.word	0x20000008
 8004e94:	20000004 	.word	0x20000004

08004e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_IncTick+0x1c>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <HAL_IncTick+0x20>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	18d2      	adds	r2, r2, r3
 8004ea8:	4b03      	ldr	r3, [pc, #12]	; (8004eb8 <HAL_IncTick+0x20>)
 8004eaa:	601a      	str	r2, [r3, #0]
}
 8004eac:	46c0      	nop			; (mov r8, r8)
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	20000008 	.word	0x20000008
 8004eb8:	200006d0 	.word	0x200006d0

08004ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8004ec0:	4b02      	ldr	r3, [pc, #8]	; (8004ecc <HAL_GetTick+0x10>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	200006d0 	.word	0x200006d0

08004ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ed8:	f7ff fff0 	bl	8004ebc <HAL_GetTick>
 8004edc:	0003      	movs	r3, r0
 8004ede:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	d005      	beq.n	8004ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004eea:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <HAL_Delay+0x44>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	001a      	movs	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	189b      	adds	r3, r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	f7ff ffe0 	bl	8004ebc <HAL_GetTick>
 8004efc:	0002      	movs	r2, r0
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d8f7      	bhi.n	8004ef8 <HAL_Delay+0x28>
  {
  }
}
 8004f08:	46c0      	nop			; (mov r8, r8)
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	b004      	add	sp, #16
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	20000008 	.word	0x20000008

08004f18 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e159      	b.n	80051de <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2250      	movs	r2, #80	; 0x50
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	0018      	movs	r0, r3
 8004f44:	f7fe fb24 	bl	8003590 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d005      	beq.n	8004f60 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004f5e:	d00b      	beq.n	8004f78 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	2210      	movs	r2, #16
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2250      	movs	r2, #80	; 0x50
 8004f70:	2100      	movs	r1, #0
 8004f72:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e132      	b.n	80051de <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7c:	4a9a      	ldr	r2, [pc, #616]	; (80051e8 <HAL_ADC_Init+0x2d0>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2202      	movs	r2, #2
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2203      	movs	r2, #3
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d108      	bne.n	8004fa8 <HAL_ADC_Init+0x90>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_ADC_Init+0x90>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <HAL_ADC_Init+0x92>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d149      	bne.n	8005042 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	23c0      	movs	r3, #192	; 0xc0
 8004fb4:	061b      	lsls	r3, r3, #24
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_ADC_Init+0xba>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	2380      	movs	r3, #128	; 0x80
 8004fc0:	05db      	lsls	r3, r3, #23
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d005      	beq.n	8004fd2 <HAL_ADC_Init+0xba>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	061b      	lsls	r3, r3, #24
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d111      	bne.n	8004ff6 <HAL_ADC_Init+0xde>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	0092      	lsls	r2, r2, #2
 8004fde:	0892      	lsrs	r2, r2, #2
 8004fe0:	611a      	str	r2, [r3, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6919      	ldr	r1, [r3, #16]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	611a      	str	r2, [r3, #16]
 8004ff4:	e014      	b.n	8005020 <HAL_ADC_Init+0x108>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	0092      	lsls	r2, r2, #2
 8005002:	0892      	lsrs	r2, r2, #2
 8005004:	611a      	str	r2, [r3, #16]
 8005006:	4b79      	ldr	r3, [pc, #484]	; (80051ec <HAL_ADC_Init+0x2d4>)
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b78      	ldr	r3, [pc, #480]	; (80051ec <HAL_ADC_Init+0x2d4>)
 800500c:	4978      	ldr	r1, [pc, #480]	; (80051f0 <HAL_ADC_Init+0x2d8>)
 800500e:	400a      	ands	r2, r1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	4b76      	ldr	r3, [pc, #472]	; (80051ec <HAL_ADC_Init+0x2d4>)
 8005014:	6819      	ldr	r1, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	4b74      	ldr	r3, [pc, #464]	; (80051ec <HAL_ADC_Init+0x2d4>)
 800501c:	430a      	orrs	r2, r1
 800501e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2118      	movs	r1, #24
 800502c:	438a      	bics	r2, r1
 800502e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68d9      	ldr	r1, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005042:	4b6a      	ldr	r3, [pc, #424]	; (80051ec <HAL_ADC_Init+0x2d4>)
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	4b69      	ldr	r3, [pc, #420]	; (80051ec <HAL_ADC_Init+0x2d4>)
 8005048:	496a      	ldr	r1, [pc, #424]	; (80051f4 <HAL_ADC_Init+0x2dc>)
 800504a:	400a      	ands	r2, r1
 800504c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800504e:	4b67      	ldr	r3, [pc, #412]	; (80051ec <HAL_ADC_Init+0x2d4>)
 8005050:	6819      	ldr	r1, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	065a      	lsls	r2, r3, #25
 8005058:	4b64      	ldr	r3, [pc, #400]	; (80051ec <HAL_ADC_Init+0x2d4>)
 800505a:	430a      	orrs	r2, r1
 800505c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	2380      	movs	r3, #128	; 0x80
 8005066:	055b      	lsls	r3, r3, #21
 8005068:	4013      	ands	r3, r2
 800506a:	d108      	bne.n	800507e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2180      	movs	r1, #128	; 0x80
 8005078:	0549      	lsls	r1, r1, #21
 800507a:	430a      	orrs	r2, r1
 800507c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	495b      	ldr	r1, [pc, #364]	; (80051f8 <HAL_ADC_Init+0x2e0>)
 800508a:	400a      	ands	r2, r1
 800508c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68d9      	ldr	r1, [r3, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d101      	bne.n	80050a4 <HAL_ADC_Init+0x18c>
 80050a0:	2304      	movs	r3, #4
 80050a2:	e000      	b.n	80050a6 <HAL_ADC_Init+0x18e>
 80050a4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80050a6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2020      	movs	r0, #32
 80050ac:	5c1b      	ldrb	r3, [r3, r0]
 80050ae:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80050b0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	202c      	movs	r0, #44	; 0x2c
 80050b6:	5c1b      	ldrb	r3, [r3, r0]
 80050b8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80050ba:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80050c0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80050c8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80050d0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050de:	23c2      	movs	r3, #194	; 0xc2
 80050e0:	33ff      	adds	r3, #255	; 0xff
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d00b      	beq.n	80050fe <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68d9      	ldr	r1, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2221      	movs	r2, #33	; 0x21
 8005102:	5c9b      	ldrb	r3, [r3, r2]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d11a      	bne.n	800513e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	5c9b      	ldrb	r3, [r3, r2]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2180      	movs	r1, #128	; 0x80
 800511e:	0249      	lsls	r1, r1, #9
 8005120:	430a      	orrs	r2, r1
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	e00b      	b.n	800513e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	2220      	movs	r2, #32
 800512c:	431a      	orrs	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005136:	2201      	movs	r2, #1
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d11f      	bne.n	8005186 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	492a      	ldr	r1, [pc, #168]	; (80051fc <HAL_ADC_Init+0x2e4>)
 8005152:	400a      	ands	r2, r1
 8005154:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6919      	ldr	r1, [r3, #16]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005164:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800516a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2101      	movs	r1, #1
 8005180:	430a      	orrs	r2, r1
 8005182:	611a      	str	r2, [r3, #16]
 8005184:	e00e      	b.n	80051a4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	2201      	movs	r2, #1
 800518e:	4013      	ands	r3, r2
 8005190:	2b01      	cmp	r3, #1
 8005192:	d107      	bne.n	80051a4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2101      	movs	r1, #1
 80051a0:	438a      	bics	r2, r1
 80051a2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	695a      	ldr	r2, [r3, #20]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2107      	movs	r1, #7
 80051b0:	438a      	bics	r2, r1
 80051b2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6959      	ldr	r1, [r3, #20]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d0:	2203      	movs	r2, #3
 80051d2:	4393      	bics	r3, r2
 80051d4:	2201      	movs	r2, #1
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	0018      	movs	r0, r3
 80051e0:	46bd      	mov	sp, r7
 80051e2:	b002      	add	sp, #8
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	fffffefd 	.word	0xfffffefd
 80051ec:	40012708 	.word	0x40012708
 80051f0:	ffc3ffff 	.word	0xffc3ffff
 80051f4:	fdffffff 	.word	0xfdffffff
 80051f8:	fffe0219 	.word	0xfffe0219
 80051fc:	fffffc03 	.word	0xfffffc03

08005200 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800520c:	2317      	movs	r3, #23
 800520e:	18fb      	adds	r3, r7, r3
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2204      	movs	r2, #4
 800521c:	4013      	ands	r3, r2
 800521e:	d15e      	bne.n	80052de <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2250      	movs	r2, #80	; 0x50
 8005224:	5c9b      	ldrb	r3, [r3, r2]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d101      	bne.n	800522e <HAL_ADC_Start_DMA+0x2e>
 800522a:	2302      	movs	r3, #2
 800522c:	e05e      	b.n	80052ec <HAL_ADC_Start_DMA+0xec>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2250      	movs	r2, #80	; 0x50
 8005232:	2101      	movs	r1, #1
 8005234:	5499      	strb	r1, [r3, r2]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2101      	movs	r1, #1
 8005242:	430a      	orrs	r2, r1
 8005244:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d007      	beq.n	800525e <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800524e:	2317      	movs	r3, #23
 8005250:	18fc      	adds	r4, r7, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	0018      	movs	r0, r3
 8005256:	f000 f90d 	bl	8005474 <ADC_Enable>
 800525a:	0003      	movs	r3, r0
 800525c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800525e:	2317      	movs	r3, #23
 8005260:	18fb      	adds	r3, r7, r3
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d13e      	bne.n	80052e6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526c:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <HAL_ADC_Start_DMA+0xf4>)
 800526e:	4013      	ands	r3, r2
 8005270:	2280      	movs	r2, #128	; 0x80
 8005272:	0052      	lsls	r2, r2, #1
 8005274:	431a      	orrs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2250      	movs	r2, #80	; 0x50
 8005284:	2100      	movs	r1, #0
 8005286:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800528c:	4a1a      	ldr	r2, [pc, #104]	; (80052f8 <HAL_ADC_Start_DMA+0xf8>)
 800528e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005294:	4a19      	ldr	r2, [pc, #100]	; (80052fc <HAL_ADC_Start_DMA+0xfc>)
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529c:	4a18      	ldr	r2, [pc, #96]	; (8005300 <HAL_ADC_Start_DMA+0x100>)
 800529e:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	221c      	movs	r2, #28
 80052a6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2110      	movs	r1, #16
 80052b4:	430a      	orrs	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3340      	adds	r3, #64	; 0x40
 80052c2:	0019      	movs	r1, r3
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f000 fbd4 	bl	8005a74 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2104      	movs	r1, #4
 80052d8:	430a      	orrs	r2, r1
 80052da:	609a      	str	r2, [r3, #8]
 80052dc:	e003      	b.n	80052e6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80052de:	2317      	movs	r3, #23
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	2202      	movs	r2, #2
 80052e4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80052e6:	2317      	movs	r3, #23
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	781b      	ldrb	r3, [r3, #0]
}
 80052ec:	0018      	movs	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	b007      	add	sp, #28
 80052f2:	bd90      	pop	{r4, r7, pc}
 80052f4:	fffff0fe 	.word	0xfffff0fe
 80052f8:	08005545 	.word	0x08005545
 80052fc:	080055f9 	.word	0x080055f9
 8005300:	08005617 	.word	0x08005617

08005304 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800530c:	46c0      	nop			; (mov r8, r8)
 800530e:	46bd      	mov	sp, r7
 8005310:	b002      	add	sp, #8
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	b002      	add	sp, #8
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800532c:	46c0      	nop			; (mov r8, r8)
 800532e:	46bd      	mov	sp, r7
 8005330:	b002      	add	sp, #8
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2250      	movs	r2, #80	; 0x50
 8005342:	5c9b      	ldrb	r3, [r3, r2]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d101      	bne.n	800534c <HAL_ADC_ConfigChannel+0x18>
 8005348:	2302      	movs	r3, #2
 800534a:	e085      	b.n	8005458 <HAL_ADC_ConfigChannel+0x124>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2250      	movs	r2, #80	; 0x50
 8005350:	2101      	movs	r1, #1
 8005352:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2204      	movs	r2, #4
 800535c:	4013      	ands	r3, r2
 800535e:	d00b      	beq.n	8005378 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005364:	2220      	movs	r2, #32
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2250      	movs	r2, #80	; 0x50
 8005370:	2100      	movs	r1, #0
 8005372:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e06f      	b.n	8005458 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4a38      	ldr	r2, [pc, #224]	; (8005460 <HAL_ADC_ConfigChannel+0x12c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d035      	beq.n	80053ee <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	035b      	lsls	r3, r3, #13
 800538e:	0b5a      	lsrs	r2, r3, #13
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	02db      	lsls	r3, r3, #11
 80053a0:	4013      	ands	r3, r2
 80053a2:	d009      	beq.n	80053b8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80053a4:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b2e      	ldr	r3, [pc, #184]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 80053aa:	2180      	movs	r1, #128	; 0x80
 80053ac:	0409      	lsls	r1, r1, #16
 80053ae:	430a      	orrs	r2, r1
 80053b0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80053b2:	200a      	movs	r0, #10
 80053b4:	f000 f94a 	bl	800564c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	029b      	lsls	r3, r3, #10
 80053c0:	4013      	ands	r3, r2
 80053c2:	d006      	beq.n	80053d2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80053c4:	4b27      	ldr	r3, [pc, #156]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4b26      	ldr	r3, [pc, #152]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 80053ca:	2180      	movs	r1, #128	; 0x80
 80053cc:	03c9      	lsls	r1, r1, #15
 80053ce:	430a      	orrs	r2, r1
 80053d0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	025b      	lsls	r3, r3, #9
 80053da:	4013      	ands	r3, r2
 80053dc:	d037      	beq.n	800544e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80053de:	4b21      	ldr	r3, [pc, #132]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b20      	ldr	r3, [pc, #128]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 80053e4:	2180      	movs	r1, #128	; 0x80
 80053e6:	0449      	lsls	r1, r1, #17
 80053e8:	430a      	orrs	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	e02f      	b.n	800544e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	035b      	lsls	r3, r3, #13
 80053fa:	0b5b      	lsrs	r3, r3, #13
 80053fc:	43d9      	mvns	r1, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	400a      	ands	r2, r1
 8005404:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	2380      	movs	r3, #128	; 0x80
 800540c:	02db      	lsls	r3, r3, #11
 800540e:	4013      	ands	r3, r2
 8005410:	d005      	beq.n	800541e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8005412:	4b14      	ldr	r3, [pc, #80]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b13      	ldr	r3, [pc, #76]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 8005418:	4913      	ldr	r1, [pc, #76]	; (8005468 <HAL_ADC_ConfigChannel+0x134>)
 800541a:	400a      	ands	r2, r1
 800541c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	2380      	movs	r3, #128	; 0x80
 8005424:	029b      	lsls	r3, r3, #10
 8005426:	4013      	ands	r3, r2
 8005428:	d005      	beq.n	8005436 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800542a:	4b0e      	ldr	r3, [pc, #56]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 8005430:	490e      	ldr	r1, [pc, #56]	; (800546c <HAL_ADC_ConfigChannel+0x138>)
 8005432:	400a      	ands	r2, r1
 8005434:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	025b      	lsls	r3, r3, #9
 800543e:	4013      	ands	r3, r2
 8005440:	d005      	beq.n	800544e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8005442:	4b08      	ldr	r3, [pc, #32]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	4b07      	ldr	r3, [pc, #28]	; (8005464 <HAL_ADC_ConfigChannel+0x130>)
 8005448:	4909      	ldr	r1, [pc, #36]	; (8005470 <HAL_ADC_ConfigChannel+0x13c>)
 800544a:	400a      	ands	r2, r1
 800544c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2250      	movs	r2, #80	; 0x50
 8005452:	2100      	movs	r1, #0
 8005454:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	0018      	movs	r0, r3
 800545a:	46bd      	mov	sp, r7
 800545c:	b002      	add	sp, #8
 800545e:	bd80      	pop	{r7, pc}
 8005460:	00001001 	.word	0x00001001
 8005464:	40012708 	.word	0x40012708
 8005468:	ff7fffff 	.word	0xff7fffff
 800546c:	ffbfffff 	.word	0xffbfffff
 8005470:	feffffff 	.word	0xfeffffff

08005474 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	2203      	movs	r2, #3
 8005488:	4013      	ands	r3, r2
 800548a:	2b01      	cmp	r3, #1
 800548c:	d108      	bne.n	80054a0 <ADC_Enable+0x2c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2201      	movs	r2, #1
 8005496:	4013      	ands	r3, r2
 8005498:	2b01      	cmp	r3, #1
 800549a:	d101      	bne.n	80054a0 <ADC_Enable+0x2c>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <ADC_Enable+0x2e>
 80054a0:	2300      	movs	r3, #0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d146      	bne.n	8005534 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	4a24      	ldr	r2, [pc, #144]	; (8005540 <ADC_Enable+0xcc>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	d00d      	beq.n	80054ce <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b6:	2210      	movs	r2, #16
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c2:	2201      	movs	r2, #1
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e033      	b.n	8005536 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2101      	movs	r1, #1
 80054da:	430a      	orrs	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80054de:	2001      	movs	r0, #1
 80054e0:	f000 f8b4 	bl	800564c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80054e4:	f7ff fcea 	bl	8004ebc <HAL_GetTick>
 80054e8:	0003      	movs	r3, r0
 80054ea:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80054ec:	e01b      	b.n	8005526 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054ee:	f7ff fce5 	bl	8004ebc <HAL_GetTick>
 80054f2:	0002      	movs	r2, r0
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b0a      	cmp	r3, #10
 80054fa:	d914      	bls.n	8005526 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2201      	movs	r2, #1
 8005504:	4013      	ands	r3, r2
 8005506:	2b01      	cmp	r3, #1
 8005508:	d00d      	beq.n	8005526 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	2210      	movs	r2, #16
 8005510:	431a      	orrs	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551a:	2201      	movs	r2, #1
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e007      	b.n	8005536 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2201      	movs	r2, #1
 800552e:	4013      	ands	r3, r2
 8005530:	2b01      	cmp	r3, #1
 8005532:	d1dc      	bne.n	80054ee <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	0018      	movs	r0, r3
 8005538:	46bd      	mov	sp, r7
 800553a:	b004      	add	sp, #16
 800553c:	bd80      	pop	{r7, pc}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	80000017 	.word	0x80000017

08005544 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005550:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005556:	2250      	movs	r2, #80	; 0x50
 8005558:	4013      	ands	r3, r2
 800555a:	d141      	bne.n	80055e0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005560:	2280      	movs	r2, #128	; 0x80
 8005562:	0092      	lsls	r2, r2, #2
 8005564:	431a      	orrs	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	23c0      	movs	r3, #192	; 0xc0
 8005572:	011b      	lsls	r3, r3, #4
 8005574:	4013      	ands	r3, r2
 8005576:	d12e      	bne.n	80055d6 <ADC_DMAConvCplt+0x92>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800557e:	2b00      	cmp	r3, #0
 8005580:	d129      	bne.n	80055d6 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2208      	movs	r2, #8
 800558a:	4013      	ands	r3, r2
 800558c:	2b08      	cmp	r3, #8
 800558e:	d122      	bne.n	80055d6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2204      	movs	r2, #4
 8005598:	4013      	ands	r3, r2
 800559a:	d110      	bne.n	80055be <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	210c      	movs	r1, #12
 80055a8:	438a      	bics	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	4a10      	ldr	r2, [pc, #64]	; (80055f4 <ADC_DMAConvCplt+0xb0>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	2201      	movs	r2, #1
 80055b6:	431a      	orrs	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
 80055bc:	e00b      	b.n	80055d6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	2220      	movs	r2, #32
 80055c4:	431a      	orrs	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	2201      	movs	r2, #1
 80055d0:	431a      	orrs	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	0018      	movs	r0, r3
 80055da:	f7ff fe93 	bl	8005304 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80055de:	e005      	b.n	80055ec <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	0010      	movs	r0, r2
 80055ea:	4798      	blx	r3
}
 80055ec:	46c0      	nop			; (mov r8, r8)
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b004      	add	sp, #16
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	fffffefe 	.word	0xfffffefe

080055f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	0018      	movs	r0, r3
 800560a:	f7ff fe83 	bl	8005314 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	46bd      	mov	sp, r7
 8005612:	b004      	add	sp, #16
 8005614:	bd80      	pop	{r7, pc}

08005616 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b084      	sub	sp, #16
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	2240      	movs	r2, #64	; 0x40
 800562a:	431a      	orrs	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	2204      	movs	r2, #4
 8005636:	431a      	orrs	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	0018      	movs	r0, r3
 8005640:	f7ff fe70 	bl	8005324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005644:	46c0      	nop			; (mov r8, r8)
 8005646:	46bd      	mov	sp, r7
 8005648:	b004      	add	sp, #16
 800564a:	bd80      	pop	{r7, pc}

0800564c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <ADC_DelayMicroSecond+0x38>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	490b      	ldr	r1, [pc, #44]	; (8005688 <ADC_DelayMicroSecond+0x3c>)
 800565a:	0018      	movs	r0, r3
 800565c:	f7fa fd7a 	bl	8000154 <__udivsi3>
 8005660:	0003      	movs	r3, r0
 8005662:	001a      	movs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4353      	muls	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800566a:	e002      	b.n	8005672 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3b01      	subs	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f9      	bne.n	800566c <ADC_DelayMicroSecond+0x20>
  } 
}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b004      	add	sp, #16
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	20000000 	.word	0x20000000
 8005688:	000f4240 	.word	0x000f4240

0800568c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005696:	2317      	movs	r3, #23
 8005698:	18fb      	adds	r3, r7, r3
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2250      	movs	r2, #80	; 0x50
 80056aa:	5c9b      	ldrb	r3, [r3, r2]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_ADCEx_Calibration_Start+0x28>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e083      	b.n	80057bc <HAL_ADCEx_Calibration_Start+0x130>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2250      	movs	r2, #80	; 0x50
 80056b8:	2101      	movs	r1, #1
 80056ba:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2203      	movs	r2, #3
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d108      	bne.n	80056dc <HAL_ADCEx_Calibration_Start+0x50>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2201      	movs	r2, #1
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <HAL_ADCEx_Calibration_Start+0x50>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <HAL_ADCEx_Calibration_Start+0x52>
 80056dc:	2300      	movs	r3, #0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d15b      	bne.n	800579a <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	4a37      	ldr	r2, [pc, #220]	; (80057c4 <HAL_ADCEx_Calibration_Start+0x138>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	2202      	movs	r2, #2
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2203      	movs	r2, #3
 80056fa:	4013      	ands	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2103      	movs	r1, #3
 800570a:	438a      	bics	r2, r1
 800570c:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2180      	movs	r1, #128	; 0x80
 800571a:	0609      	lsls	r1, r1, #24
 800571c:	430a      	orrs	r2, r1
 800571e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005720:	f7ff fbcc 	bl	8004ebc <HAL_GetTick>
 8005724:	0003      	movs	r3, r0
 8005726:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005728:	e01d      	b.n	8005766 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800572a:	f7ff fbc7 	bl	8004ebc <HAL_GetTick>
 800572e:	0002      	movs	r2, r0
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b0a      	cmp	r3, #10
 8005736:	d916      	bls.n	8005766 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	0fdb      	lsrs	r3, r3, #31
 8005740:	07da      	lsls	r2, r3, #31
 8005742:	2380      	movs	r3, #128	; 0x80
 8005744:	061b      	lsls	r3, r3, #24
 8005746:	429a      	cmp	r2, r3
 8005748:	d10d      	bne.n	8005766 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800574e:	2212      	movs	r2, #18
 8005750:	4393      	bics	r3, r2
 8005752:	2210      	movs	r2, #16
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2250      	movs	r2, #80	; 0x50
 800575e:	2100      	movs	r1, #0
 8005760:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e02a      	b.n	80057bc <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	0fdb      	lsrs	r3, r3, #31
 800576e:	07da      	lsls	r2, r3, #31
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	061b      	lsls	r3, r3, #24
 8005774:	429a      	cmp	r2, r3
 8005776:	d0d8      	beq.n	800572a <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68d9      	ldr	r1, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	430a      	orrs	r2, r1
 8005786:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578c:	2203      	movs	r2, #3
 800578e:	4393      	bics	r3, r2
 8005790:	2201      	movs	r2, #1
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	655a      	str	r2, [r3, #84]	; 0x54
 8005798:	e009      	b.n	80057ae <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579e:	2220      	movs	r2, #32
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 80057a6:	2317      	movs	r3, #23
 80057a8:	18fb      	adds	r3, r7, r3
 80057aa:	2201      	movs	r2, #1
 80057ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2250      	movs	r2, #80	; 0x50
 80057b2:	2100      	movs	r1, #0
 80057b4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80057b6:	2317      	movs	r3, #23
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	781b      	ldrb	r3, [r3, #0]
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b006      	add	sp, #24
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	fffffefd 	.word	0xfffffefd

080057c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	0002      	movs	r2, r0
 80057d0:	1dfb      	adds	r3, r7, #7
 80057d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80057d4:	1dfb      	adds	r3, r7, #7
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b7f      	cmp	r3, #127	; 0x7f
 80057da:	d809      	bhi.n	80057f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057dc:	1dfb      	adds	r3, r7, #7
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	001a      	movs	r2, r3
 80057e2:	231f      	movs	r3, #31
 80057e4:	401a      	ands	r2, r3
 80057e6:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <__NVIC_EnableIRQ+0x30>)
 80057e8:	2101      	movs	r1, #1
 80057ea:	4091      	lsls	r1, r2
 80057ec:	000a      	movs	r2, r1
 80057ee:	601a      	str	r2, [r3, #0]
  }
}
 80057f0:	46c0      	nop			; (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b002      	add	sp, #8
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	e000e100 	.word	0xe000e100

080057fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	0002      	movs	r2, r0
 8005804:	6039      	str	r1, [r7, #0]
 8005806:	1dfb      	adds	r3, r7, #7
 8005808:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800580a:	1dfb      	adds	r3, r7, #7
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	2b7f      	cmp	r3, #127	; 0x7f
 8005810:	d828      	bhi.n	8005864 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005812:	4a2f      	ldr	r2, [pc, #188]	; (80058d0 <__NVIC_SetPriority+0xd4>)
 8005814:	1dfb      	adds	r3, r7, #7
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	b25b      	sxtb	r3, r3
 800581a:	089b      	lsrs	r3, r3, #2
 800581c:	33c0      	adds	r3, #192	; 0xc0
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	589b      	ldr	r3, [r3, r2]
 8005822:	1dfa      	adds	r2, r7, #7
 8005824:	7812      	ldrb	r2, [r2, #0]
 8005826:	0011      	movs	r1, r2
 8005828:	2203      	movs	r2, #3
 800582a:	400a      	ands	r2, r1
 800582c:	00d2      	lsls	r2, r2, #3
 800582e:	21ff      	movs	r1, #255	; 0xff
 8005830:	4091      	lsls	r1, r2
 8005832:	000a      	movs	r2, r1
 8005834:	43d2      	mvns	r2, r2
 8005836:	401a      	ands	r2, r3
 8005838:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	019b      	lsls	r3, r3, #6
 800583e:	22ff      	movs	r2, #255	; 0xff
 8005840:	401a      	ands	r2, r3
 8005842:	1dfb      	adds	r3, r7, #7
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	0018      	movs	r0, r3
 8005848:	2303      	movs	r3, #3
 800584a:	4003      	ands	r3, r0
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005850:	481f      	ldr	r0, [pc, #124]	; (80058d0 <__NVIC_SetPriority+0xd4>)
 8005852:	1dfb      	adds	r3, r7, #7
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b25b      	sxtb	r3, r3
 8005858:	089b      	lsrs	r3, r3, #2
 800585a:	430a      	orrs	r2, r1
 800585c:	33c0      	adds	r3, #192	; 0xc0
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005862:	e031      	b.n	80058c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <__NVIC_SetPriority+0xd8>)
 8005866:	1dfb      	adds	r3, r7, #7
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	0019      	movs	r1, r3
 800586c:	230f      	movs	r3, #15
 800586e:	400b      	ands	r3, r1
 8005870:	3b08      	subs	r3, #8
 8005872:	089b      	lsrs	r3, r3, #2
 8005874:	3306      	adds	r3, #6
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	18d3      	adds	r3, r2, r3
 800587a:	3304      	adds	r3, #4
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	1dfa      	adds	r2, r7, #7
 8005880:	7812      	ldrb	r2, [r2, #0]
 8005882:	0011      	movs	r1, r2
 8005884:	2203      	movs	r2, #3
 8005886:	400a      	ands	r2, r1
 8005888:	00d2      	lsls	r2, r2, #3
 800588a:	21ff      	movs	r1, #255	; 0xff
 800588c:	4091      	lsls	r1, r2
 800588e:	000a      	movs	r2, r1
 8005890:	43d2      	mvns	r2, r2
 8005892:	401a      	ands	r2, r3
 8005894:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	019b      	lsls	r3, r3, #6
 800589a:	22ff      	movs	r2, #255	; 0xff
 800589c:	401a      	ands	r2, r3
 800589e:	1dfb      	adds	r3, r7, #7
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	0018      	movs	r0, r3
 80058a4:	2303      	movs	r3, #3
 80058a6:	4003      	ands	r3, r0
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80058ac:	4809      	ldr	r0, [pc, #36]	; (80058d4 <__NVIC_SetPriority+0xd8>)
 80058ae:	1dfb      	adds	r3, r7, #7
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	001c      	movs	r4, r3
 80058b4:	230f      	movs	r3, #15
 80058b6:	4023      	ands	r3, r4
 80058b8:	3b08      	subs	r3, #8
 80058ba:	089b      	lsrs	r3, r3, #2
 80058bc:	430a      	orrs	r2, r1
 80058be:	3306      	adds	r3, #6
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	18c3      	adds	r3, r0, r3
 80058c4:	3304      	adds	r3, #4
 80058c6:	601a      	str	r2, [r3, #0]
}
 80058c8:	46c0      	nop			; (mov r8, r8)
 80058ca:	46bd      	mov	sp, r7
 80058cc:	b003      	add	sp, #12
 80058ce:	bd90      	pop	{r4, r7, pc}
 80058d0:	e000e100 	.word	0xe000e100
 80058d4:	e000ed00 	.word	0xe000ed00

080058d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	1e5a      	subs	r2, r3, #1
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	045b      	lsls	r3, r3, #17
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d301      	bcc.n	80058f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058ec:	2301      	movs	r3, #1
 80058ee:	e010      	b.n	8005912 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <SysTick_Config+0x44>)
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	3a01      	subs	r2, #1
 80058f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058f8:	2301      	movs	r3, #1
 80058fa:	425b      	negs	r3, r3
 80058fc:	2103      	movs	r1, #3
 80058fe:	0018      	movs	r0, r3
 8005900:	f7ff ff7c 	bl	80057fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <SysTick_Config+0x44>)
 8005906:	2200      	movs	r2, #0
 8005908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800590a:	4b04      	ldr	r3, [pc, #16]	; (800591c <SysTick_Config+0x44>)
 800590c:	2207      	movs	r2, #7
 800590e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005910:	2300      	movs	r3, #0
}
 8005912:	0018      	movs	r0, r3
 8005914:	46bd      	mov	sp, r7
 8005916:	b002      	add	sp, #8
 8005918:	bd80      	pop	{r7, pc}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	e000e010 	.word	0xe000e010

08005920 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	210f      	movs	r1, #15
 800592c:	187b      	adds	r3, r7, r1
 800592e:	1c02      	adds	r2, r0, #0
 8005930:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	187b      	adds	r3, r7, r1
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	b25b      	sxtb	r3, r3
 800593a:	0011      	movs	r1, r2
 800593c:	0018      	movs	r0, r3
 800593e:	f7ff ff5d 	bl	80057fc <__NVIC_SetPriority>
}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	46bd      	mov	sp, r7
 8005946:	b004      	add	sp, #16
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	0002      	movs	r2, r0
 8005952:	1dfb      	adds	r3, r7, #7
 8005954:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005956:	1dfb      	adds	r3, r7, #7
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b25b      	sxtb	r3, r3
 800595c:	0018      	movs	r0, r3
 800595e:	f7ff ff33 	bl	80057c8 <__NVIC_EnableIRQ>
}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	b002      	add	sp, #8
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	0018      	movs	r0, r3
 8005976:	f7ff ffaf 	bl	80058d8 <SysTick_Config>
 800597a:	0003      	movs	r3, r0
}
 800597c:	0018      	movs	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	b002      	add	sp, #8
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e061      	b.n	8005a5a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a32      	ldr	r2, [pc, #200]	; (8005a64 <HAL_DMA_Init+0xe0>)
 800599c:	4694      	mov	ip, r2
 800599e:	4463      	add	r3, ip
 80059a0:	2114      	movs	r1, #20
 80059a2:	0018      	movs	r0, r3
 80059a4:	f7fa fbd6 	bl	8000154 <__udivsi3>
 80059a8:	0003      	movs	r3, r0
 80059aa:	009a      	lsls	r2, r3, #2
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a2d      	ldr	r2, [pc, #180]	; (8005a68 <HAL_DMA_Init+0xe4>)
 80059b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2225      	movs	r2, #37	; 0x25
 80059ba:	2102      	movs	r1, #2
 80059bc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4a28      	ldr	r2, [pc, #160]	; (8005a6c <HAL_DMA_Init+0xe8>)
 80059ca:	4013      	ands	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80059d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	2380      	movs	r3, #128	; 0x80
 8005a0a:	01db      	lsls	r3, r3, #7
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d018      	beq.n	8005a42 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <HAL_DMA_Init+0xec>)
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a18:	211c      	movs	r1, #28
 8005a1a:	400b      	ands	r3, r1
 8005a1c:	210f      	movs	r1, #15
 8005a1e:	4099      	lsls	r1, r3
 8005a20:	000b      	movs	r3, r1
 8005a22:	43d9      	mvns	r1, r3
 8005a24:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <HAL_DMA_Init+0xec>)
 8005a26:	400a      	ands	r2, r1
 8005a28:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005a2a:	4b11      	ldr	r3, [pc, #68]	; (8005a70 <HAL_DMA_Init+0xec>)
 8005a2c:	6819      	ldr	r1, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	201c      	movs	r0, #28
 8005a38:	4003      	ands	r3, r0
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	4b0c      	ldr	r3, [pc, #48]	; (8005a70 <HAL_DMA_Init+0xec>)
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2225      	movs	r2, #37	; 0x25
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2224      	movs	r2, #36	; 0x24
 8005a54:	2100      	movs	r1, #0
 8005a56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b004      	add	sp, #16
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	bffdfff8 	.word	0xbffdfff8
 8005a68:	40020000 	.word	0x40020000
 8005a6c:	ffff800f 	.word	0xffff800f
 8005a70:	400200a8 	.word	0x400200a8

08005a74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
 8005a80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a82:	2317      	movs	r3, #23
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2224      	movs	r2, #36	; 0x24
 8005a8e:	5c9b      	ldrb	r3, [r3, r2]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_DMA_Start_IT+0x24>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e04f      	b.n	8005b38 <HAL_DMA_Start_IT+0xc4>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2224      	movs	r2, #36	; 0x24
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2225      	movs	r2, #37	; 0x25
 8005aa4:	5c9b      	ldrb	r3, [r3, r2]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d13a      	bne.n	8005b22 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2225      	movs	r2, #37	; 0x25
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	438a      	bics	r2, r1
 8005ac8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 f96a 	bl	8005daa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	210e      	movs	r1, #14
 8005aea:	430a      	orrs	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e00f      	b.n	8005b10 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2104      	movs	r1, #4
 8005afc:	438a      	bics	r2, r1
 8005afe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	210a      	movs	r1, #10
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e007      	b.n	8005b32 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2224      	movs	r2, #36	; 0x24
 8005b26:	2100      	movs	r1, #0
 8005b28:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b2a:	2317      	movs	r3, #23
 8005b2c:	18fb      	adds	r3, r7, r3
 8005b2e:	2202      	movs	r2, #2
 8005b30:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8005b32:	2317      	movs	r3, #23
 8005b34:	18fb      	adds	r3, r7, r3
 8005b36:	781b      	ldrb	r3, [r3, #0]
}
 8005b38:	0018      	movs	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b006      	add	sp, #24
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b48:	230f      	movs	r3, #15
 8005b4a:	18fb      	adds	r3, r7, r3
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2225      	movs	r2, #37	; 0x25
 8005b54:	5c9b      	ldrb	r3, [r3, r2]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d008      	beq.n	8005b6e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2224      	movs	r2, #36	; 0x24
 8005b66:	2100      	movs	r1, #0
 8005b68:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e024      	b.n	8005bb8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	210e      	movs	r1, #14
 8005b7a:	438a      	bics	r2, r1
 8005b7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2101      	movs	r1, #1
 8005b8a:	438a      	bics	r2, r1
 8005b8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b92:	221c      	movs	r2, #28
 8005b94:	401a      	ands	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	4091      	lsls	r1, r2
 8005b9e:	000a      	movs	r2, r1
 8005ba0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2225      	movs	r2, #37	; 0x25
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2224      	movs	r2, #36	; 0x24
 8005bae:	2100      	movs	r1, #0
 8005bb0:	5499      	strb	r1, [r3, r2]

    return status;
 8005bb2:	230f      	movs	r3, #15
 8005bb4:	18fb      	adds	r3, r7, r3
 8005bb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005bb8:	0018      	movs	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b004      	add	sp, #16
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc8:	210f      	movs	r1, #15
 8005bca:	187b      	adds	r3, r7, r1
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2225      	movs	r2, #37	; 0x25
 8005bd4:	5c9b      	ldrb	r3, [r3, r2]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d006      	beq.n	8005bea <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2204      	movs	r2, #4
 8005be0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005be2:	187b      	adds	r3, r7, r1
 8005be4:	2201      	movs	r2, #1
 8005be6:	701a      	strb	r2, [r3, #0]
 8005be8:	e02a      	b.n	8005c40 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	210e      	movs	r1, #14
 8005bf6:	438a      	bics	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2101      	movs	r1, #1
 8005c06:	438a      	bics	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0e:	221c      	movs	r2, #28
 8005c10:	401a      	ands	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	2101      	movs	r1, #1
 8005c18:	4091      	lsls	r1, r2
 8005c1a:	000a      	movs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2225      	movs	r2, #37	; 0x25
 8005c22:	2101      	movs	r1, #1
 8005c24:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2224      	movs	r2, #36	; 0x24
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d004      	beq.n	8005c40 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	0010      	movs	r0, r2
 8005c3e:	4798      	blx	r3
    }
  }
  return status;
 8005c40:	230f      	movs	r3, #15
 8005c42:	18fb      	adds	r3, r7, r3
 8005c44:	781b      	ldrb	r3, [r3, #0]
}
 8005c46:	0018      	movs	r0, r3
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	b004      	add	sp, #16
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6a:	221c      	movs	r2, #28
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2204      	movs	r2, #4
 8005c70:	409a      	lsls	r2, r3
 8005c72:	0013      	movs	r3, r2
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4013      	ands	r3, r2
 8005c78:	d026      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x7a>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2204      	movs	r2, #4
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d022      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d107      	bne.n	8005c9e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2104      	movs	r1, #4
 8005c9a:	438a      	bics	r2, r1
 8005c9c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca2:	221c      	movs	r2, #28
 8005ca4:	401a      	ands	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	2104      	movs	r1, #4
 8005cac:	4091      	lsls	r1, r2
 8005cae:	000a      	movs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d100      	bne.n	8005cbc <HAL_DMA_IRQHandler+0x6e>
 8005cba:	e071      	b.n	8005da0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	0010      	movs	r0, r2
 8005cc4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8005cc6:	e06b      	b.n	8005da0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	221c      	movs	r2, #28
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2202      	movs	r2, #2
 8005cd2:	409a      	lsls	r2, r3
 8005cd4:	0013      	movs	r3, r2
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d02d      	beq.n	8005d38 <HAL_DMA_IRQHandler+0xea>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d029      	beq.n	8005d38 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2220      	movs	r2, #32
 8005cec:	4013      	ands	r3, r2
 8005cee:	d10b      	bne.n	8005d08 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	210a      	movs	r1, #10
 8005cfc:	438a      	bics	r2, r1
 8005cfe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2225      	movs	r2, #37	; 0x25
 8005d04:	2101      	movs	r1, #1
 8005d06:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0c:	221c      	movs	r2, #28
 8005d0e:	401a      	ands	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	2102      	movs	r1, #2
 8005d16:	4091      	lsls	r1, r2
 8005d18:	000a      	movs	r2, r1
 8005d1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2224      	movs	r2, #36	; 0x24
 8005d20:	2100      	movs	r1, #0
 8005d22:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d039      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	0010      	movs	r0, r2
 8005d34:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005d36:	e033      	b.n	8005da0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3c:	221c      	movs	r2, #28
 8005d3e:	4013      	ands	r3, r2
 8005d40:	2208      	movs	r2, #8
 8005d42:	409a      	lsls	r2, r3
 8005d44:	0013      	movs	r3, r2
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d02a      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x154>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2208      	movs	r2, #8
 8005d50:	4013      	ands	r3, r2
 8005d52:	d026      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	210e      	movs	r1, #14
 8005d60:	438a      	bics	r2, r1
 8005d62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d68:	221c      	movs	r2, #28
 8005d6a:	401a      	ands	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	2101      	movs	r1, #1
 8005d72:	4091      	lsls	r1, r2
 8005d74:	000a      	movs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2225      	movs	r2, #37	; 0x25
 8005d82:	2101      	movs	r1, #1
 8005d84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2224      	movs	r2, #36	; 0x24
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	0010      	movs	r0, r2
 8005d9e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005da0:	46c0      	nop			; (mov r8, r8)
 8005da2:	46c0      	nop			; (mov r8, r8)
}
 8005da4:	46bd      	mov	sp, r7
 8005da6:	b004      	add	sp, #16
 8005da8:	bd80      	pop	{r7, pc}

08005daa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b084      	sub	sp, #16
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	221c      	movs	r2, #28
 8005dbe:	401a      	ands	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4091      	lsls	r1, r2
 8005dc8:	000a      	movs	r2, r1
 8005dca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d108      	bne.n	8005dee <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005dec:	e007      	b.n	8005dfe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68ba      	ldr	r2, [r7, #8]
 8005df4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	60da      	str	r2, [r3, #12]
}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	46bd      	mov	sp, r7
 8005e02:	b004      	add	sp, #16
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8005e1e:	e155      	b.n	80060cc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2101      	movs	r1, #1
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4091      	lsls	r1, r2
 8005e2a:	000a      	movs	r2, r1
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d100      	bne.n	8005e38 <HAL_GPIO_Init+0x30>
 8005e36:	e146      	b.n	80060c6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	4013      	ands	r3, r2
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d005      	beq.n	8005e50 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2203      	movs	r2, #3
 8005e4a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d130      	bne.n	8005eb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	409a      	lsls	r2, r3
 8005e5e:	0013      	movs	r3, r2
 8005e60:	43da      	mvns	r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4013      	ands	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	409a      	lsls	r2, r3
 8005e72:	0013      	movs	r3, r2
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e86:	2201      	movs	r2, #1
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	409a      	lsls	r2, r3
 8005e8c:	0013      	movs	r3, r2
 8005e8e:	43da      	mvns	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4013      	ands	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	091b      	lsrs	r3, r3, #4
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	401a      	ands	r2, r3
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	409a      	lsls	r2, r3
 8005ea4:	0013      	movs	r3, r2
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	4013      	ands	r3, r2
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d017      	beq.n	8005eee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	2203      	movs	r2, #3
 8005eca:	409a      	lsls	r2, r3
 8005ecc:	0013      	movs	r3, r2
 8005ece:	43da      	mvns	r2, r3
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689a      	ldr	r2, [r3, #8]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	0013      	movs	r3, r2
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d123      	bne.n	8005f42 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	08da      	lsrs	r2, r3, #3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3208      	adds	r2, #8
 8005f02:	0092      	lsls	r2, r2, #2
 8005f04:	58d3      	ldr	r3, [r2, r3]
 8005f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2207      	movs	r2, #7
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	220f      	movs	r2, #15
 8005f12:	409a      	lsls	r2, r3
 8005f14:	0013      	movs	r3, r2
 8005f16:	43da      	mvns	r2, r3
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	691a      	ldr	r2, [r3, #16]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2107      	movs	r1, #7
 8005f26:	400b      	ands	r3, r1
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	0013      	movs	r3, r2
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	08da      	lsrs	r2, r3, #3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3208      	adds	r2, #8
 8005f3c:	0092      	lsls	r2, r2, #2
 8005f3e:	6939      	ldr	r1, [r7, #16]
 8005f40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	2203      	movs	r2, #3
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	0013      	movs	r3, r2
 8005f52:	43da      	mvns	r2, r3
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4013      	ands	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2203      	movs	r2, #3
 8005f60:	401a      	ands	r2, r3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	409a      	lsls	r2, r3
 8005f68:	0013      	movs	r3, r2
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	23c0      	movs	r3, #192	; 0xc0
 8005f7c:	029b      	lsls	r3, r3, #10
 8005f7e:	4013      	ands	r3, r2
 8005f80:	d100      	bne.n	8005f84 <HAL_GPIO_Init+0x17c>
 8005f82:	e0a0      	b.n	80060c6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f84:	4b57      	ldr	r3, [pc, #348]	; (80060e4 <HAL_GPIO_Init+0x2dc>)
 8005f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f88:	4b56      	ldr	r3, [pc, #344]	; (80060e4 <HAL_GPIO_Init+0x2dc>)
 8005f8a:	2101      	movs	r1, #1
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f90:	4a55      	ldr	r2, [pc, #340]	; (80060e8 <HAL_GPIO_Init+0x2e0>)
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	089b      	lsrs	r3, r3, #2
 8005f96:	3302      	adds	r3, #2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	589b      	ldr	r3, [r3, r2]
 8005f9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2203      	movs	r2, #3
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	220f      	movs	r2, #15
 8005fa8:	409a      	lsls	r2, r3
 8005faa:	0013      	movs	r3, r2
 8005fac:	43da      	mvns	r2, r3
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	23a0      	movs	r3, #160	; 0xa0
 8005fb8:	05db      	lsls	r3, r3, #23
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d01f      	beq.n	8005ffe <HAL_GPIO_Init+0x1f6>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a4a      	ldr	r2, [pc, #296]	; (80060ec <HAL_GPIO_Init+0x2e4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d019      	beq.n	8005ffa <HAL_GPIO_Init+0x1f2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a49      	ldr	r2, [pc, #292]	; (80060f0 <HAL_GPIO_Init+0x2e8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d013      	beq.n	8005ff6 <HAL_GPIO_Init+0x1ee>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a48      	ldr	r2, [pc, #288]	; (80060f4 <HAL_GPIO_Init+0x2ec>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00d      	beq.n	8005ff2 <HAL_GPIO_Init+0x1ea>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a47      	ldr	r2, [pc, #284]	; (80060f8 <HAL_GPIO_Init+0x2f0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d007      	beq.n	8005fee <HAL_GPIO_Init+0x1e6>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a46      	ldr	r2, [pc, #280]	; (80060fc <HAL_GPIO_Init+0x2f4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d101      	bne.n	8005fea <HAL_GPIO_Init+0x1e2>
 8005fe6:	2305      	movs	r3, #5
 8005fe8:	e00a      	b.n	8006000 <HAL_GPIO_Init+0x1f8>
 8005fea:	2306      	movs	r3, #6
 8005fec:	e008      	b.n	8006000 <HAL_GPIO_Init+0x1f8>
 8005fee:	2304      	movs	r3, #4
 8005ff0:	e006      	b.n	8006000 <HAL_GPIO_Init+0x1f8>
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e004      	b.n	8006000 <HAL_GPIO_Init+0x1f8>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	e002      	b.n	8006000 <HAL_GPIO_Init+0x1f8>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e000      	b.n	8006000 <HAL_GPIO_Init+0x1f8>
 8005ffe:	2300      	movs	r3, #0
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	2103      	movs	r1, #3
 8006004:	400a      	ands	r2, r1
 8006006:	0092      	lsls	r2, r2, #2
 8006008:	4093      	lsls	r3, r2
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006010:	4935      	ldr	r1, [pc, #212]	; (80060e8 <HAL_GPIO_Init+0x2e0>)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	089b      	lsrs	r3, r3, #2
 8006016:	3302      	adds	r3, #2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800601e:	4b38      	ldr	r3, [pc, #224]	; (8006100 <HAL_GPIO_Init+0x2f8>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	43da      	mvns	r2, r3
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	4013      	ands	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	025b      	lsls	r3, r3, #9
 8006036:	4013      	ands	r3, r2
 8006038:	d003      	beq.n	8006042 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006042:	4b2f      	ldr	r3, [pc, #188]	; (8006100 <HAL_GPIO_Init+0x2f8>)
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006048:	4b2d      	ldr	r3, [pc, #180]	; (8006100 <HAL_GPIO_Init+0x2f8>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	43da      	mvns	r2, r3
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	4013      	ands	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	2380      	movs	r3, #128	; 0x80
 800605e:	029b      	lsls	r3, r3, #10
 8006060:	4013      	ands	r3, r2
 8006062:	d003      	beq.n	800606c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800606c:	4b24      	ldr	r3, [pc, #144]	; (8006100 <HAL_GPIO_Init+0x2f8>)
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006072:	4b23      	ldr	r3, [pc, #140]	; (8006100 <HAL_GPIO_Init+0x2f8>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	43da      	mvns	r2, r3
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	4013      	ands	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	2380      	movs	r3, #128	; 0x80
 8006088:	035b      	lsls	r3, r3, #13
 800608a:	4013      	ands	r3, r2
 800608c:	d003      	beq.n	8006096 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006096:	4b1a      	ldr	r3, [pc, #104]	; (8006100 <HAL_GPIO_Init+0x2f8>)
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800609c:	4b18      	ldr	r3, [pc, #96]	; (8006100 <HAL_GPIO_Init+0x2f8>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	43da      	mvns	r2, r3
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4013      	ands	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	039b      	lsls	r3, r3, #14
 80060b4:	4013      	ands	r3, r2
 80060b6:	d003      	beq.n	80060c0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80060c0:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <HAL_GPIO_Init+0x2f8>)
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	3301      	adds	r3, #1
 80060ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	40da      	lsrs	r2, r3
 80060d4:	1e13      	subs	r3, r2, #0
 80060d6:	d000      	beq.n	80060da <HAL_GPIO_Init+0x2d2>
 80060d8:	e6a2      	b.n	8005e20 <HAL_GPIO_Init+0x18>
  }
}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	46c0      	nop			; (mov r8, r8)
 80060de:	46bd      	mov	sp, r7
 80060e0:	b006      	add	sp, #24
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40021000 	.word	0x40021000
 80060e8:	40010000 	.word	0x40010000
 80060ec:	50000400 	.word	0x50000400
 80060f0:	50000800 	.word	0x50000800
 80060f4:	50000c00 	.word	0x50000c00
 80060f8:	50001000 	.word	0x50001000
 80060fc:	50001c00 	.word	0x50001c00
 8006100:	40010400 	.word	0x40010400

08006104 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	000a      	movs	r2, r1
 800610e:	1cbb      	adds	r3, r7, #2
 8006110:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	1cba      	adds	r2, r7, #2
 8006118:	8812      	ldrh	r2, [r2, #0]
 800611a:	4013      	ands	r3, r2
 800611c:	d004      	beq.n	8006128 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800611e:	230f      	movs	r3, #15
 8006120:	18fb      	adds	r3, r7, r3
 8006122:	2201      	movs	r2, #1
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	e003      	b.n	8006130 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006128:	230f      	movs	r3, #15
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	2200      	movs	r2, #0
 800612e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006130:	230f      	movs	r3, #15
 8006132:	18fb      	adds	r3, r7, r3
 8006134:	781b      	ldrb	r3, [r3, #0]
}
 8006136:	0018      	movs	r0, r3
 8006138:	46bd      	mov	sp, r7
 800613a:	b004      	add	sp, #16
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b082      	sub	sp, #8
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	0008      	movs	r0, r1
 8006148:	0011      	movs	r1, r2
 800614a:	1cbb      	adds	r3, r7, #2
 800614c:	1c02      	adds	r2, r0, #0
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	1c7b      	adds	r3, r7, #1
 8006152:	1c0a      	adds	r2, r1, #0
 8006154:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006156:	1c7b      	adds	r3, r7, #1
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d004      	beq.n	8006168 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800615e:	1cbb      	adds	r3, r7, #2
 8006160:	881a      	ldrh	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006166:	e003      	b.n	8006170 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006168:	1cbb      	adds	r3, r7, #2
 800616a:	881a      	ldrh	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006170:	46c0      	nop			; (mov r8, r8)
 8006172:	46bd      	mov	sp, r7
 8006174:	b002      	add	sp, #8
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	0002      	movs	r2, r0
 8006180:	1dbb      	adds	r3, r7, #6
 8006182:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006184:	4b09      	ldr	r3, [pc, #36]	; (80061ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	1dba      	adds	r2, r7, #6
 800618a:	8812      	ldrh	r2, [r2, #0]
 800618c:	4013      	ands	r3, r2
 800618e:	d008      	beq.n	80061a2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006190:	4b06      	ldr	r3, [pc, #24]	; (80061ac <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006192:	1dba      	adds	r2, r7, #6
 8006194:	8812      	ldrh	r2, [r2, #0]
 8006196:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006198:	1dbb      	adds	r3, r7, #6
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	0018      	movs	r0, r3
 800619e:	f7fd fe47 	bl	8003e30 <HAL_GPIO_EXTI_Callback>
  }
}
 80061a2:	46c0      	nop			; (mov r8, r8)
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b002      	add	sp, #8
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			; (mov r8, r8)
 80061ac:	40010400 	.word	0x40010400

080061b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80061b4:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	4b03      	ldr	r3, [pc, #12]	; (80061c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80061ba:	2180      	movs	r1, #128	; 0x80
 80061bc:	0049      	lsls	r1, r1, #1
 80061be:	430a      	orrs	r2, r1
 80061c0:	601a      	str	r2, [r3, #0]
}
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40007000 	.word	0x40007000

080061cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061cc:	b5b0      	push	{r4, r5, r7, lr}
 80061ce:	b08a      	sub	sp, #40	; 0x28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f000 fbbf 	bl	800695e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061e0:	4bc9      	ldr	r3, [pc, #804]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	220c      	movs	r2, #12
 80061e6:	4013      	ands	r3, r2
 80061e8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061ea:	4bc7      	ldr	r3, [pc, #796]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	2380      	movs	r3, #128	; 0x80
 80061f0:	025b      	lsls	r3, r3, #9
 80061f2:	4013      	ands	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2201      	movs	r2, #1
 80061fc:	4013      	ands	r3, r2
 80061fe:	d100      	bne.n	8006202 <HAL_RCC_OscConfig+0x36>
 8006200:	e07e      	b.n	8006300 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2b08      	cmp	r3, #8
 8006206:	d007      	beq.n	8006218 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	2b0c      	cmp	r3, #12
 800620c:	d112      	bne.n	8006234 <HAL_RCC_OscConfig+0x68>
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	2380      	movs	r3, #128	; 0x80
 8006212:	025b      	lsls	r3, r3, #9
 8006214:	429a      	cmp	r2, r3
 8006216:	d10d      	bne.n	8006234 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006218:	4bbb      	ldr	r3, [pc, #748]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	2380      	movs	r3, #128	; 0x80
 800621e:	029b      	lsls	r3, r3, #10
 8006220:	4013      	ands	r3, r2
 8006222:	d100      	bne.n	8006226 <HAL_RCC_OscConfig+0x5a>
 8006224:	e06b      	b.n	80062fe <HAL_RCC_OscConfig+0x132>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d167      	bne.n	80062fe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f000 fb95 	bl	800695e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	2380      	movs	r3, #128	; 0x80
 800623a:	025b      	lsls	r3, r3, #9
 800623c:	429a      	cmp	r2, r3
 800623e:	d107      	bne.n	8006250 <HAL_RCC_OscConfig+0x84>
 8006240:	4bb1      	ldr	r3, [pc, #708]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	4bb0      	ldr	r3, [pc, #704]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006246:	2180      	movs	r1, #128	; 0x80
 8006248:	0249      	lsls	r1, r1, #9
 800624a:	430a      	orrs	r2, r1
 800624c:	601a      	str	r2, [r3, #0]
 800624e:	e027      	b.n	80062a0 <HAL_RCC_OscConfig+0xd4>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	23a0      	movs	r3, #160	; 0xa0
 8006256:	02db      	lsls	r3, r3, #11
 8006258:	429a      	cmp	r2, r3
 800625a:	d10e      	bne.n	800627a <HAL_RCC_OscConfig+0xae>
 800625c:	4baa      	ldr	r3, [pc, #680]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4ba9      	ldr	r3, [pc, #676]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006262:	2180      	movs	r1, #128	; 0x80
 8006264:	02c9      	lsls	r1, r1, #11
 8006266:	430a      	orrs	r2, r1
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	4ba7      	ldr	r3, [pc, #668]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	4ba6      	ldr	r3, [pc, #664]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006270:	2180      	movs	r1, #128	; 0x80
 8006272:	0249      	lsls	r1, r1, #9
 8006274:	430a      	orrs	r2, r1
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	e012      	b.n	80062a0 <HAL_RCC_OscConfig+0xd4>
 800627a:	4ba3      	ldr	r3, [pc, #652]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	4ba2      	ldr	r3, [pc, #648]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006280:	49a2      	ldr	r1, [pc, #648]	; (800650c <HAL_RCC_OscConfig+0x340>)
 8006282:	400a      	ands	r2, r1
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	4ba0      	ldr	r3, [pc, #640]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	2380      	movs	r3, #128	; 0x80
 800628c:	025b      	lsls	r3, r3, #9
 800628e:	4013      	ands	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4b9c      	ldr	r3, [pc, #624]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4b9b      	ldr	r3, [pc, #620]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 800629a:	499d      	ldr	r1, [pc, #628]	; (8006510 <HAL_RCC_OscConfig+0x344>)
 800629c:	400a      	ands	r2, r1
 800629e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d015      	beq.n	80062d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a8:	f7fe fe08 	bl	8004ebc <HAL_GetTick>
 80062ac:	0003      	movs	r3, r0
 80062ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062b0:	e009      	b.n	80062c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062b2:	f7fe fe03 	bl	8004ebc <HAL_GetTick>
 80062b6:	0002      	movs	r2, r0
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	2b64      	cmp	r3, #100	; 0x64
 80062be:	d902      	bls.n	80062c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	f000 fb4c 	bl	800695e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062c6:	4b90      	ldr	r3, [pc, #576]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	2380      	movs	r3, #128	; 0x80
 80062cc:	029b      	lsls	r3, r3, #10
 80062ce:	4013      	ands	r3, r2
 80062d0:	d0ef      	beq.n	80062b2 <HAL_RCC_OscConfig+0xe6>
 80062d2:	e015      	b.n	8006300 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d4:	f7fe fdf2 	bl	8004ebc <HAL_GetTick>
 80062d8:	0003      	movs	r3, r0
 80062da:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062dc:	e008      	b.n	80062f0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062de:	f7fe fded 	bl	8004ebc <HAL_GetTick>
 80062e2:	0002      	movs	r2, r0
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	2b64      	cmp	r3, #100	; 0x64
 80062ea:	d901      	bls.n	80062f0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e336      	b.n	800695e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062f0:	4b85      	ldr	r3, [pc, #532]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	029b      	lsls	r3, r3, #10
 80062f8:	4013      	ands	r3, r2
 80062fa:	d1f0      	bne.n	80062de <HAL_RCC_OscConfig+0x112>
 80062fc:	e000      	b.n	8006300 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2202      	movs	r2, #2
 8006306:	4013      	ands	r3, r2
 8006308:	d100      	bne.n	800630c <HAL_RCC_OscConfig+0x140>
 800630a:	e099      	b.n	8006440 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	2220      	movs	r2, #32
 8006316:	4013      	ands	r3, r2
 8006318:	d009      	beq.n	800632e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800631a:	4b7b      	ldr	r3, [pc, #492]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b7a      	ldr	r3, [pc, #488]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006320:	2120      	movs	r1, #32
 8006322:	430a      	orrs	r2, r1
 8006324:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	2220      	movs	r2, #32
 800632a:	4393      	bics	r3, r2
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	2b04      	cmp	r3, #4
 8006332:	d005      	beq.n	8006340 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b0c      	cmp	r3, #12
 8006338:	d13e      	bne.n	80063b8 <HAL_RCC_OscConfig+0x1ec>
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d13b      	bne.n	80063b8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006340:	4b71      	ldr	r3, [pc, #452]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2204      	movs	r2, #4
 8006346:	4013      	ands	r3, r2
 8006348:	d004      	beq.n	8006354 <HAL_RCC_OscConfig+0x188>
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e304      	b.n	800695e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006354:	4b6c      	ldr	r3, [pc, #432]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4a6e      	ldr	r2, [pc, #440]	; (8006514 <HAL_RCC_OscConfig+0x348>)
 800635a:	4013      	ands	r3, r2
 800635c:	0019      	movs	r1, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	021a      	lsls	r2, r3, #8
 8006364:	4b68      	ldr	r3, [pc, #416]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006366:	430a      	orrs	r2, r1
 8006368:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800636a:	4b67      	ldr	r3, [pc, #412]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2209      	movs	r2, #9
 8006370:	4393      	bics	r3, r2
 8006372:	0019      	movs	r1, r3
 8006374:	4b64      	ldr	r3, [pc, #400]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006378:	430a      	orrs	r2, r1
 800637a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800637c:	f000 fc42 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 8006380:	0001      	movs	r1, r0
 8006382:	4b61      	ldr	r3, [pc, #388]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	091b      	lsrs	r3, r3, #4
 8006388:	220f      	movs	r2, #15
 800638a:	4013      	ands	r3, r2
 800638c:	4a62      	ldr	r2, [pc, #392]	; (8006518 <HAL_RCC_OscConfig+0x34c>)
 800638e:	5cd3      	ldrb	r3, [r2, r3]
 8006390:	000a      	movs	r2, r1
 8006392:	40da      	lsrs	r2, r3
 8006394:	4b61      	ldr	r3, [pc, #388]	; (800651c <HAL_RCC_OscConfig+0x350>)
 8006396:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8006398:	4b61      	ldr	r3, [pc, #388]	; (8006520 <HAL_RCC_OscConfig+0x354>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2513      	movs	r5, #19
 800639e:	197c      	adds	r4, r7, r5
 80063a0:	0018      	movs	r0, r3
 80063a2:	f7fe fd45 	bl	8004e30 <HAL_InitTick>
 80063a6:	0003      	movs	r3, r0
 80063a8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80063aa:	197b      	adds	r3, r7, r5
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d046      	beq.n	8006440 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80063b2:	197b      	adds	r3, r7, r5
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	e2d2      	b.n	800695e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d027      	beq.n	800640e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80063be:	4b52      	ldr	r3, [pc, #328]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2209      	movs	r2, #9
 80063c4:	4393      	bics	r3, r2
 80063c6:	0019      	movs	r1, r3
 80063c8:	4b4f      	ldr	r3, [pc, #316]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 80063ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063cc:	430a      	orrs	r2, r1
 80063ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063d0:	f7fe fd74 	bl	8004ebc <HAL_GetTick>
 80063d4:	0003      	movs	r3, r0
 80063d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063d8:	e008      	b.n	80063ec <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063da:	f7fe fd6f 	bl	8004ebc <HAL_GetTick>
 80063de:	0002      	movs	r2, r0
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d901      	bls.n	80063ec <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e2b8      	b.n	800695e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063ec:	4b46      	ldr	r3, [pc, #280]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2204      	movs	r2, #4
 80063f2:	4013      	ands	r3, r2
 80063f4:	d0f1      	beq.n	80063da <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f6:	4b44      	ldr	r3, [pc, #272]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	4a46      	ldr	r2, [pc, #280]	; (8006514 <HAL_RCC_OscConfig+0x348>)
 80063fc:	4013      	ands	r3, r2
 80063fe:	0019      	movs	r1, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	021a      	lsls	r2, r3, #8
 8006406:	4b40      	ldr	r3, [pc, #256]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
 800640c:	e018      	b.n	8006440 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800640e:	4b3e      	ldr	r3, [pc, #248]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b3d      	ldr	r3, [pc, #244]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006414:	2101      	movs	r1, #1
 8006416:	438a      	bics	r2, r1
 8006418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641a:	f7fe fd4f 	bl	8004ebc <HAL_GetTick>
 800641e:	0003      	movs	r3, r0
 8006420:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006424:	f7fe fd4a 	bl	8004ebc <HAL_GetTick>
 8006428:	0002      	movs	r2, r0
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e293      	b.n	800695e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006436:	4b34      	ldr	r3, [pc, #208]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2204      	movs	r2, #4
 800643c:	4013      	ands	r3, r2
 800643e:	d1f1      	bne.n	8006424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2210      	movs	r2, #16
 8006446:	4013      	ands	r3, r2
 8006448:	d100      	bne.n	800644c <HAL_RCC_OscConfig+0x280>
 800644a:	e0a2      	b.n	8006592 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d140      	bne.n	80064d4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006452:	4b2d      	ldr	r3, [pc, #180]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	2380      	movs	r3, #128	; 0x80
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4013      	ands	r3, r2
 800645c:	d005      	beq.n	800646a <HAL_RCC_OscConfig+0x29e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e279      	b.n	800695e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800646a:	4b27      	ldr	r3, [pc, #156]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4a2d      	ldr	r2, [pc, #180]	; (8006524 <HAL_RCC_OscConfig+0x358>)
 8006470:	4013      	ands	r3, r2
 8006472:	0019      	movs	r1, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006478:	4b23      	ldr	r3, [pc, #140]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800647e:	4b22      	ldr	r3, [pc, #136]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	0a19      	lsrs	r1, r3, #8
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	061a      	lsls	r2, r3, #24
 800648c:	4b1e      	ldr	r3, [pc, #120]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 800648e:	430a      	orrs	r2, r1
 8006490:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	0b5b      	lsrs	r3, r3, #13
 8006498:	3301      	adds	r3, #1
 800649a:	2280      	movs	r2, #128	; 0x80
 800649c:	0212      	lsls	r2, r2, #8
 800649e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80064a0:	4b19      	ldr	r3, [pc, #100]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	091b      	lsrs	r3, r3, #4
 80064a6:	210f      	movs	r1, #15
 80064a8:	400b      	ands	r3, r1
 80064aa:	491b      	ldr	r1, [pc, #108]	; (8006518 <HAL_RCC_OscConfig+0x34c>)
 80064ac:	5ccb      	ldrb	r3, [r1, r3]
 80064ae:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80064b0:	4b1a      	ldr	r3, [pc, #104]	; (800651c <HAL_RCC_OscConfig+0x350>)
 80064b2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80064b4:	4b1a      	ldr	r3, [pc, #104]	; (8006520 <HAL_RCC_OscConfig+0x354>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2513      	movs	r5, #19
 80064ba:	197c      	adds	r4, r7, r5
 80064bc:	0018      	movs	r0, r3
 80064be:	f7fe fcb7 	bl	8004e30 <HAL_InitTick>
 80064c2:	0003      	movs	r3, r0
 80064c4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80064c6:	197b      	adds	r3, r7, r5
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d061      	beq.n	8006592 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80064ce:	197b      	adds	r3, r7, r5
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	e244      	b.n	800695e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d040      	beq.n	800655e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	4b09      	ldr	r3, [pc, #36]	; (8006508 <HAL_RCC_OscConfig+0x33c>)
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	0049      	lsls	r1, r1, #1
 80064e6:	430a      	orrs	r2, r1
 80064e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ea:	f7fe fce7 	bl	8004ebc <HAL_GetTick>
 80064ee:	0003      	movs	r3, r0
 80064f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80064f2:	e019      	b.n	8006528 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064f4:	f7fe fce2 	bl	8004ebc <HAL_GetTick>
 80064f8:	0002      	movs	r2, r0
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d912      	bls.n	8006528 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e22b      	b.n	800695e <HAL_RCC_OscConfig+0x792>
 8006506:	46c0      	nop			; (mov r8, r8)
 8006508:	40021000 	.word	0x40021000
 800650c:	fffeffff 	.word	0xfffeffff
 8006510:	fffbffff 	.word	0xfffbffff
 8006514:	ffffe0ff 	.word	0xffffe0ff
 8006518:	0800e62c 	.word	0x0800e62c
 800651c:	20000000 	.word	0x20000000
 8006520:	20000004 	.word	0x20000004
 8006524:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006528:	4bca      	ldr	r3, [pc, #808]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	2380      	movs	r3, #128	; 0x80
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4013      	ands	r3, r2
 8006532:	d0df      	beq.n	80064f4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006534:	4bc7      	ldr	r3, [pc, #796]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	4ac7      	ldr	r2, [pc, #796]	; (8006858 <HAL_RCC_OscConfig+0x68c>)
 800653a:	4013      	ands	r3, r2
 800653c:	0019      	movs	r1, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006542:	4bc4      	ldr	r3, [pc, #784]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006544:	430a      	orrs	r2, r1
 8006546:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006548:	4bc2      	ldr	r3, [pc, #776]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	0a19      	lsrs	r1, r3, #8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	061a      	lsls	r2, r3, #24
 8006556:	4bbf      	ldr	r3, [pc, #764]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006558:	430a      	orrs	r2, r1
 800655a:	605a      	str	r2, [r3, #4]
 800655c:	e019      	b.n	8006592 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800655e:	4bbd      	ldr	r3, [pc, #756]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4bbc      	ldr	r3, [pc, #752]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006564:	49bd      	ldr	r1, [pc, #756]	; (800685c <HAL_RCC_OscConfig+0x690>)
 8006566:	400a      	ands	r2, r1
 8006568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800656a:	f7fe fca7 	bl	8004ebc <HAL_GetTick>
 800656e:	0003      	movs	r3, r0
 8006570:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006574:	f7fe fca2 	bl	8004ebc <HAL_GetTick>
 8006578:	0002      	movs	r2, r0
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b02      	cmp	r3, #2
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e1eb      	b.n	800695e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006586:	4bb3      	ldr	r3, [pc, #716]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	2380      	movs	r3, #128	; 0x80
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4013      	ands	r3, r2
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2208      	movs	r2, #8
 8006598:	4013      	ands	r3, r2
 800659a:	d036      	beq.n	800660a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d019      	beq.n	80065d8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065a4:	4bab      	ldr	r3, [pc, #684]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80065a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065a8:	4baa      	ldr	r3, [pc, #680]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80065aa:	2101      	movs	r1, #1
 80065ac:	430a      	orrs	r2, r1
 80065ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065b0:	f7fe fc84 	bl	8004ebc <HAL_GetTick>
 80065b4:	0003      	movs	r3, r0
 80065b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065b8:	e008      	b.n	80065cc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ba:	f7fe fc7f 	bl	8004ebc <HAL_GetTick>
 80065be:	0002      	movs	r2, r0
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d901      	bls.n	80065cc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e1c8      	b.n	800695e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065cc:	4ba1      	ldr	r3, [pc, #644]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80065ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d0:	2202      	movs	r2, #2
 80065d2:	4013      	ands	r3, r2
 80065d4:	d0f1      	beq.n	80065ba <HAL_RCC_OscConfig+0x3ee>
 80065d6:	e018      	b.n	800660a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065d8:	4b9e      	ldr	r3, [pc, #632]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80065da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80065dc:	4b9d      	ldr	r3, [pc, #628]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80065de:	2101      	movs	r1, #1
 80065e0:	438a      	bics	r2, r1
 80065e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065e4:	f7fe fc6a 	bl	8004ebc <HAL_GetTick>
 80065e8:	0003      	movs	r3, r0
 80065ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80065ec:	e008      	b.n	8006600 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065ee:	f7fe fc65 	bl	8004ebc <HAL_GetTick>
 80065f2:	0002      	movs	r2, r0
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e1ae      	b.n	800695e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006600:	4b94      	ldr	r3, [pc, #592]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006604:	2202      	movs	r2, #2
 8006606:	4013      	ands	r3, r2
 8006608:	d1f1      	bne.n	80065ee <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2204      	movs	r2, #4
 8006610:	4013      	ands	r3, r2
 8006612:	d100      	bne.n	8006616 <HAL_RCC_OscConfig+0x44a>
 8006614:	e0ae      	b.n	8006774 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006616:	2023      	movs	r0, #35	; 0x23
 8006618:	183b      	adds	r3, r7, r0
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800661e:	4b8d      	ldr	r3, [pc, #564]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006622:	2380      	movs	r3, #128	; 0x80
 8006624:	055b      	lsls	r3, r3, #21
 8006626:	4013      	ands	r3, r2
 8006628:	d109      	bne.n	800663e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800662a:	4b8a      	ldr	r3, [pc, #552]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 800662c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800662e:	4b89      	ldr	r3, [pc, #548]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006630:	2180      	movs	r1, #128	; 0x80
 8006632:	0549      	lsls	r1, r1, #21
 8006634:	430a      	orrs	r2, r1
 8006636:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006638:	183b      	adds	r3, r7, r0
 800663a:	2201      	movs	r2, #1
 800663c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663e:	4b88      	ldr	r3, [pc, #544]	; (8006860 <HAL_RCC_OscConfig+0x694>)
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	2380      	movs	r3, #128	; 0x80
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	4013      	ands	r3, r2
 8006648:	d11a      	bne.n	8006680 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800664a:	4b85      	ldr	r3, [pc, #532]	; (8006860 <HAL_RCC_OscConfig+0x694>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	4b84      	ldr	r3, [pc, #528]	; (8006860 <HAL_RCC_OscConfig+0x694>)
 8006650:	2180      	movs	r1, #128	; 0x80
 8006652:	0049      	lsls	r1, r1, #1
 8006654:	430a      	orrs	r2, r1
 8006656:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006658:	f7fe fc30 	bl	8004ebc <HAL_GetTick>
 800665c:	0003      	movs	r3, r0
 800665e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006660:	e008      	b.n	8006674 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006662:	f7fe fc2b 	bl	8004ebc <HAL_GetTick>
 8006666:	0002      	movs	r2, r0
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	2b64      	cmp	r3, #100	; 0x64
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e174      	b.n	800695e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006674:	4b7a      	ldr	r3, [pc, #488]	; (8006860 <HAL_RCC_OscConfig+0x694>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	2380      	movs	r3, #128	; 0x80
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	4013      	ands	r3, r2
 800667e:	d0f0      	beq.n	8006662 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	429a      	cmp	r2, r3
 800668a:	d107      	bne.n	800669c <HAL_RCC_OscConfig+0x4d0>
 800668c:	4b71      	ldr	r3, [pc, #452]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 800668e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006690:	4b70      	ldr	r3, [pc, #448]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006692:	2180      	movs	r1, #128	; 0x80
 8006694:	0049      	lsls	r1, r1, #1
 8006696:	430a      	orrs	r2, r1
 8006698:	651a      	str	r2, [r3, #80]	; 0x50
 800669a:	e031      	b.n	8006700 <HAL_RCC_OscConfig+0x534>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10c      	bne.n	80066be <HAL_RCC_OscConfig+0x4f2>
 80066a4:	4b6b      	ldr	r3, [pc, #428]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066a8:	4b6a      	ldr	r3, [pc, #424]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066aa:	496c      	ldr	r1, [pc, #432]	; (800685c <HAL_RCC_OscConfig+0x690>)
 80066ac:	400a      	ands	r2, r1
 80066ae:	651a      	str	r2, [r3, #80]	; 0x50
 80066b0:	4b68      	ldr	r3, [pc, #416]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066b4:	4b67      	ldr	r3, [pc, #412]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066b6:	496b      	ldr	r1, [pc, #428]	; (8006864 <HAL_RCC_OscConfig+0x698>)
 80066b8:	400a      	ands	r2, r1
 80066ba:	651a      	str	r2, [r3, #80]	; 0x50
 80066bc:	e020      	b.n	8006700 <HAL_RCC_OscConfig+0x534>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	23a0      	movs	r3, #160	; 0xa0
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d10e      	bne.n	80066e8 <HAL_RCC_OscConfig+0x51c>
 80066ca:	4b62      	ldr	r3, [pc, #392]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ce:	4b61      	ldr	r3, [pc, #388]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066d0:	2180      	movs	r1, #128	; 0x80
 80066d2:	00c9      	lsls	r1, r1, #3
 80066d4:	430a      	orrs	r2, r1
 80066d6:	651a      	str	r2, [r3, #80]	; 0x50
 80066d8:	4b5e      	ldr	r3, [pc, #376]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066dc:	4b5d      	ldr	r3, [pc, #372]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066de:	2180      	movs	r1, #128	; 0x80
 80066e0:	0049      	lsls	r1, r1, #1
 80066e2:	430a      	orrs	r2, r1
 80066e4:	651a      	str	r2, [r3, #80]	; 0x50
 80066e6:	e00b      	b.n	8006700 <HAL_RCC_OscConfig+0x534>
 80066e8:	4b5a      	ldr	r3, [pc, #360]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ec:	4b59      	ldr	r3, [pc, #356]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066ee:	495b      	ldr	r1, [pc, #364]	; (800685c <HAL_RCC_OscConfig+0x690>)
 80066f0:	400a      	ands	r2, r1
 80066f2:	651a      	str	r2, [r3, #80]	; 0x50
 80066f4:	4b57      	ldr	r3, [pc, #348]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066f8:	4b56      	ldr	r3, [pc, #344]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80066fa:	495a      	ldr	r1, [pc, #360]	; (8006864 <HAL_RCC_OscConfig+0x698>)
 80066fc:	400a      	ands	r2, r1
 80066fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d015      	beq.n	8006734 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006708:	f7fe fbd8 	bl	8004ebc <HAL_GetTick>
 800670c:	0003      	movs	r3, r0
 800670e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006710:	e009      	b.n	8006726 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006712:	f7fe fbd3 	bl	8004ebc <HAL_GetTick>
 8006716:	0002      	movs	r2, r0
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	4a52      	ldr	r2, [pc, #328]	; (8006868 <HAL_RCC_OscConfig+0x69c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e11b      	b.n	800695e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006726:	4b4b      	ldr	r3, [pc, #300]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800672a:	2380      	movs	r3, #128	; 0x80
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4013      	ands	r3, r2
 8006730:	d0ef      	beq.n	8006712 <HAL_RCC_OscConfig+0x546>
 8006732:	e014      	b.n	800675e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006734:	f7fe fbc2 	bl	8004ebc <HAL_GetTick>
 8006738:	0003      	movs	r3, r0
 800673a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800673c:	e009      	b.n	8006752 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673e:	f7fe fbbd 	bl	8004ebc <HAL_GetTick>
 8006742:	0002      	movs	r2, r0
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	4a47      	ldr	r2, [pc, #284]	; (8006868 <HAL_RCC_OscConfig+0x69c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e105      	b.n	800695e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006752:	4b40      	ldr	r3, [pc, #256]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006756:	2380      	movs	r3, #128	; 0x80
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4013      	ands	r3, r2
 800675c:	d1ef      	bne.n	800673e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800675e:	2323      	movs	r3, #35	; 0x23
 8006760:	18fb      	adds	r3, r7, r3
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d105      	bne.n	8006774 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006768:	4b3a      	ldr	r3, [pc, #232]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 800676a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800676c:	4b39      	ldr	r3, [pc, #228]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 800676e:	493f      	ldr	r1, [pc, #252]	; (800686c <HAL_RCC_OscConfig+0x6a0>)
 8006770:	400a      	ands	r2, r1
 8006772:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2220      	movs	r2, #32
 800677a:	4013      	ands	r3, r2
 800677c:	d049      	beq.n	8006812 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d026      	beq.n	80067d4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006786:	4b33      	ldr	r3, [pc, #204]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	4b32      	ldr	r3, [pc, #200]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 800678c:	2101      	movs	r1, #1
 800678e:	430a      	orrs	r2, r1
 8006790:	609a      	str	r2, [r3, #8]
 8006792:	4b30      	ldr	r3, [pc, #192]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006796:	4b2f      	ldr	r3, [pc, #188]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006798:	2101      	movs	r1, #1
 800679a:	430a      	orrs	r2, r1
 800679c:	635a      	str	r2, [r3, #52]	; 0x34
 800679e:	4b34      	ldr	r3, [pc, #208]	; (8006870 <HAL_RCC_OscConfig+0x6a4>)
 80067a0:	6a1a      	ldr	r2, [r3, #32]
 80067a2:	4b33      	ldr	r3, [pc, #204]	; (8006870 <HAL_RCC_OscConfig+0x6a4>)
 80067a4:	2180      	movs	r1, #128	; 0x80
 80067a6:	0189      	lsls	r1, r1, #6
 80067a8:	430a      	orrs	r2, r1
 80067aa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ac:	f7fe fb86 	bl	8004ebc <HAL_GetTick>
 80067b0:	0003      	movs	r3, r0
 80067b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067b6:	f7fe fb81 	bl	8004ebc <HAL_GetTick>
 80067ba:	0002      	movs	r2, r0
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e0ca      	b.n	800695e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80067c8:	4b22      	ldr	r3, [pc, #136]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2202      	movs	r2, #2
 80067ce:	4013      	ands	r3, r2
 80067d0:	d0f1      	beq.n	80067b6 <HAL_RCC_OscConfig+0x5ea>
 80067d2:	e01e      	b.n	8006812 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80067d4:	4b1f      	ldr	r3, [pc, #124]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	4b1e      	ldr	r3, [pc, #120]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 80067da:	2101      	movs	r1, #1
 80067dc:	438a      	bics	r2, r1
 80067de:	609a      	str	r2, [r3, #8]
 80067e0:	4b23      	ldr	r3, [pc, #140]	; (8006870 <HAL_RCC_OscConfig+0x6a4>)
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	4b22      	ldr	r3, [pc, #136]	; (8006870 <HAL_RCC_OscConfig+0x6a4>)
 80067e6:	4923      	ldr	r1, [pc, #140]	; (8006874 <HAL_RCC_OscConfig+0x6a8>)
 80067e8:	400a      	ands	r2, r1
 80067ea:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ec:	f7fe fb66 	bl	8004ebc <HAL_GetTick>
 80067f0:	0003      	movs	r3, r0
 80067f2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80067f6:	f7fe fb61 	bl	8004ebc <HAL_GetTick>
 80067fa:	0002      	movs	r2, r0
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e0aa      	b.n	800695e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006808:	4b12      	ldr	r3, [pc, #72]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	2202      	movs	r2, #2
 800680e:	4013      	ands	r3, r2
 8006810:	d1f1      	bne.n	80067f6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	2b00      	cmp	r3, #0
 8006818:	d100      	bne.n	800681c <HAL_RCC_OscConfig+0x650>
 800681a:	e09f      	b.n	800695c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2b0c      	cmp	r3, #12
 8006820:	d100      	bne.n	8006824 <HAL_RCC_OscConfig+0x658>
 8006822:	e078      	b.n	8006916 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006828:	2b02      	cmp	r3, #2
 800682a:	d159      	bne.n	80068e0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	4b08      	ldr	r3, [pc, #32]	; (8006854 <HAL_RCC_OscConfig+0x688>)
 8006832:	4911      	ldr	r1, [pc, #68]	; (8006878 <HAL_RCC_OscConfig+0x6ac>)
 8006834:	400a      	ands	r2, r1
 8006836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006838:	f7fe fb40 	bl	8004ebc <HAL_GetTick>
 800683c:	0003      	movs	r3, r0
 800683e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006840:	e01c      	b.n	800687c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006842:	f7fe fb3b 	bl	8004ebc <HAL_GetTick>
 8006846:	0002      	movs	r2, r0
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d915      	bls.n	800687c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e084      	b.n	800695e <HAL_RCC_OscConfig+0x792>
 8006854:	40021000 	.word	0x40021000
 8006858:	ffff1fff 	.word	0xffff1fff
 800685c:	fffffeff 	.word	0xfffffeff
 8006860:	40007000 	.word	0x40007000
 8006864:	fffffbff 	.word	0xfffffbff
 8006868:	00001388 	.word	0x00001388
 800686c:	efffffff 	.word	0xefffffff
 8006870:	40010000 	.word	0x40010000
 8006874:	ffffdfff 	.word	0xffffdfff
 8006878:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800687c:	4b3a      	ldr	r3, [pc, #232]	; (8006968 <HAL_RCC_OscConfig+0x79c>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	2380      	movs	r3, #128	; 0x80
 8006882:	049b      	lsls	r3, r3, #18
 8006884:	4013      	ands	r3, r2
 8006886:	d1dc      	bne.n	8006842 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006888:	4b37      	ldr	r3, [pc, #220]	; (8006968 <HAL_RCC_OscConfig+0x79c>)
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	4a37      	ldr	r2, [pc, #220]	; (800696c <HAL_RCC_OscConfig+0x7a0>)
 800688e:	4013      	ands	r3, r2
 8006890:	0019      	movs	r1, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a0:	431a      	orrs	r2, r3
 80068a2:	4b31      	ldr	r3, [pc, #196]	; (8006968 <HAL_RCC_OscConfig+0x79c>)
 80068a4:	430a      	orrs	r2, r1
 80068a6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068a8:	4b2f      	ldr	r3, [pc, #188]	; (8006968 <HAL_RCC_OscConfig+0x79c>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	4b2e      	ldr	r3, [pc, #184]	; (8006968 <HAL_RCC_OscConfig+0x79c>)
 80068ae:	2180      	movs	r1, #128	; 0x80
 80068b0:	0449      	lsls	r1, r1, #17
 80068b2:	430a      	orrs	r2, r1
 80068b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b6:	f7fe fb01 	bl	8004ebc <HAL_GetTick>
 80068ba:	0003      	movs	r3, r0
 80068bc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fe fafc 	bl	8004ebc <HAL_GetTick>
 80068c4:	0002      	movs	r2, r0
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e045      	b.n	800695e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80068d2:	4b25      	ldr	r3, [pc, #148]	; (8006968 <HAL_RCC_OscConfig+0x79c>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	2380      	movs	r3, #128	; 0x80
 80068d8:	049b      	lsls	r3, r3, #18
 80068da:	4013      	ands	r3, r2
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x6f4>
 80068de:	e03d      	b.n	800695c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068e0:	4b21      	ldr	r3, [pc, #132]	; (8006968 <HAL_RCC_OscConfig+0x79c>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	4b20      	ldr	r3, [pc, #128]	; (8006968 <HAL_RCC_OscConfig+0x79c>)
 80068e6:	4922      	ldr	r1, [pc, #136]	; (8006970 <HAL_RCC_OscConfig+0x7a4>)
 80068e8:	400a      	ands	r2, r1
 80068ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ec:	f7fe fae6 	bl	8004ebc <HAL_GetTick>
 80068f0:	0003      	movs	r3, r0
 80068f2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80068f4:	e008      	b.n	8006908 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068f6:	f7fe fae1 	bl	8004ebc <HAL_GetTick>
 80068fa:	0002      	movs	r2, r0
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e02a      	b.n	800695e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006908:	4b17      	ldr	r3, [pc, #92]	; (8006968 <HAL_RCC_OscConfig+0x79c>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	2380      	movs	r3, #128	; 0x80
 800690e:	049b      	lsls	r3, r3, #18
 8006910:	4013      	ands	r3, r2
 8006912:	d1f0      	bne.n	80068f6 <HAL_RCC_OscConfig+0x72a>
 8006914:	e022      	b.n	800695c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e01d      	b.n	800695e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006922:	4b11      	ldr	r3, [pc, #68]	; (8006968 <HAL_RCC_OscConfig+0x79c>)
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	2380      	movs	r3, #128	; 0x80
 800692c:	025b      	lsls	r3, r3, #9
 800692e:	401a      	ands	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	429a      	cmp	r2, r3
 8006936:	d10f      	bne.n	8006958 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	23f0      	movs	r3, #240	; 0xf0
 800693c:	039b      	lsls	r3, r3, #14
 800693e:	401a      	ands	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006944:	429a      	cmp	r2, r3
 8006946:	d107      	bne.n	8006958 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	23c0      	movs	r3, #192	; 0xc0
 800694c:	041b      	lsls	r3, r3, #16
 800694e:	401a      	ands	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006954:	429a      	cmp	r2, r3
 8006956:	d001      	beq.n	800695c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e000      	b.n	800695e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	0018      	movs	r0, r3
 8006960:	46bd      	mov	sp, r7
 8006962:	b00a      	add	sp, #40	; 0x28
 8006964:	bdb0      	pop	{r4, r5, r7, pc}
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	40021000 	.word	0x40021000
 800696c:	ff02ffff 	.word	0xff02ffff
 8006970:	feffffff 	.word	0xfeffffff

08006974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006974:	b5b0      	push	{r4, r5, r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e128      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006988:	4b96      	ldr	r3, [pc, #600]	; (8006be4 <HAL_RCC_ClockConfig+0x270>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2201      	movs	r2, #1
 800698e:	4013      	ands	r3, r2
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d91e      	bls.n	80069d4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006996:	4b93      	ldr	r3, [pc, #588]	; (8006be4 <HAL_RCC_ClockConfig+0x270>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2201      	movs	r2, #1
 800699c:	4393      	bics	r3, r2
 800699e:	0019      	movs	r1, r3
 80069a0:	4b90      	ldr	r3, [pc, #576]	; (8006be4 <HAL_RCC_ClockConfig+0x270>)
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069a8:	f7fe fa88 	bl	8004ebc <HAL_GetTick>
 80069ac:	0003      	movs	r3, r0
 80069ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b0:	e009      	b.n	80069c6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b2:	f7fe fa83 	bl	8004ebc <HAL_GetTick>
 80069b6:	0002      	movs	r2, r0
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	4a8a      	ldr	r2, [pc, #552]	; (8006be8 <HAL_RCC_ClockConfig+0x274>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e109      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c6:	4b87      	ldr	r3, [pc, #540]	; (8006be4 <HAL_RCC_ClockConfig+0x270>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2201      	movs	r2, #1
 80069cc:	4013      	ands	r3, r2
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d1ee      	bne.n	80069b2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2202      	movs	r2, #2
 80069da:	4013      	ands	r3, r2
 80069dc:	d009      	beq.n	80069f2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069de:	4b83      	ldr	r3, [pc, #524]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	22f0      	movs	r2, #240	; 0xf0
 80069e4:	4393      	bics	r3, r2
 80069e6:	0019      	movs	r1, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689a      	ldr	r2, [r3, #8]
 80069ec:	4b7f      	ldr	r3, [pc, #508]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 80069ee:	430a      	orrs	r2, r1
 80069f0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2201      	movs	r2, #1
 80069f8:	4013      	ands	r3, r2
 80069fa:	d100      	bne.n	80069fe <HAL_RCC_ClockConfig+0x8a>
 80069fc:	e089      	b.n	8006b12 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d107      	bne.n	8006a16 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a06:	4b79      	ldr	r3, [pc, #484]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	2380      	movs	r3, #128	; 0x80
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	4013      	ands	r3, r2
 8006a10:	d120      	bne.n	8006a54 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e0e1      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d107      	bne.n	8006a2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a1e:	4b73      	ldr	r3, [pc, #460]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	2380      	movs	r3, #128	; 0x80
 8006a24:	049b      	lsls	r3, r3, #18
 8006a26:	4013      	ands	r3, r2
 8006a28:	d114      	bne.n	8006a54 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e0d5      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d106      	bne.n	8006a44 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a36:	4b6d      	ldr	r3, [pc, #436]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	d109      	bne.n	8006a54 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e0ca      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006a44:	4b69      	ldr	r3, [pc, #420]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	2380      	movs	r3, #128	; 0x80
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	d101      	bne.n	8006a54 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0c2      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a54:	4b65      	ldr	r3, [pc, #404]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	2203      	movs	r2, #3
 8006a5a:	4393      	bics	r3, r2
 8006a5c:	0019      	movs	r1, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	4b62      	ldr	r3, [pc, #392]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006a64:	430a      	orrs	r2, r1
 8006a66:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a68:	f7fe fa28 	bl	8004ebc <HAL_GetTick>
 8006a6c:	0003      	movs	r3, r0
 8006a6e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d111      	bne.n	8006a9c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a78:	e009      	b.n	8006a8e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a7a:	f7fe fa1f 	bl	8004ebc <HAL_GetTick>
 8006a7e:	0002      	movs	r2, r0
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	4a58      	ldr	r2, [pc, #352]	; (8006be8 <HAL_RCC_ClockConfig+0x274>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e0a5      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a8e:	4b57      	ldr	r3, [pc, #348]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	220c      	movs	r2, #12
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d1ef      	bne.n	8006a7a <HAL_RCC_ClockConfig+0x106>
 8006a9a:	e03a      	b.n	8006b12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d111      	bne.n	8006ac8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aa4:	e009      	b.n	8006aba <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aa6:	f7fe fa09 	bl	8004ebc <HAL_GetTick>
 8006aaa:	0002      	movs	r2, r0
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	4a4d      	ldr	r2, [pc, #308]	; (8006be8 <HAL_RCC_ClockConfig+0x274>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e08f      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006aba:	4b4c      	ldr	r3, [pc, #304]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	220c      	movs	r2, #12
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	2b0c      	cmp	r3, #12
 8006ac4:	d1ef      	bne.n	8006aa6 <HAL_RCC_ClockConfig+0x132>
 8006ac6:	e024      	b.n	8006b12 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d11b      	bne.n	8006b08 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ad0:	e009      	b.n	8006ae6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ad2:	f7fe f9f3 	bl	8004ebc <HAL_GetTick>
 8006ad6:	0002      	movs	r2, r0
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	4a42      	ldr	r2, [pc, #264]	; (8006be8 <HAL_RCC_ClockConfig+0x274>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e079      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ae6:	4b41      	ldr	r3, [pc, #260]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	220c      	movs	r2, #12
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d1ef      	bne.n	8006ad2 <HAL_RCC_ClockConfig+0x15e>
 8006af2:	e00e      	b.n	8006b12 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006af4:	f7fe f9e2 	bl	8004ebc <HAL_GetTick>
 8006af8:	0002      	movs	r2, r0
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	4a3a      	ldr	r2, [pc, #232]	; (8006be8 <HAL_RCC_ClockConfig+0x274>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e068      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006b08:	4b38      	ldr	r3, [pc, #224]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	220c      	movs	r2, #12
 8006b0e:	4013      	ands	r3, r2
 8006b10:	d1f0      	bne.n	8006af4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b12:	4b34      	ldr	r3, [pc, #208]	; (8006be4 <HAL_RCC_ClockConfig+0x270>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2201      	movs	r2, #1
 8006b18:	4013      	ands	r3, r2
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d21e      	bcs.n	8006b5e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b20:	4b30      	ldr	r3, [pc, #192]	; (8006be4 <HAL_RCC_ClockConfig+0x270>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2201      	movs	r2, #1
 8006b26:	4393      	bics	r3, r2
 8006b28:	0019      	movs	r1, r3
 8006b2a:	4b2e      	ldr	r3, [pc, #184]	; (8006be4 <HAL_RCC_ClockConfig+0x270>)
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006b32:	f7fe f9c3 	bl	8004ebc <HAL_GetTick>
 8006b36:	0003      	movs	r3, r0
 8006b38:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3a:	e009      	b.n	8006b50 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b3c:	f7fe f9be 	bl	8004ebc <HAL_GetTick>
 8006b40:	0002      	movs	r2, r0
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	4a28      	ldr	r2, [pc, #160]	; (8006be8 <HAL_RCC_ClockConfig+0x274>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e044      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b50:	4b24      	ldr	r3, [pc, #144]	; (8006be4 <HAL_RCC_ClockConfig+0x270>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2201      	movs	r2, #1
 8006b56:	4013      	ands	r3, r2
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d1ee      	bne.n	8006b3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2204      	movs	r2, #4
 8006b64:	4013      	ands	r3, r2
 8006b66:	d009      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b68:	4b20      	ldr	r3, [pc, #128]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	4a20      	ldr	r2, [pc, #128]	; (8006bf0 <HAL_RCC_ClockConfig+0x27c>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	0019      	movs	r1, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	4b1d      	ldr	r3, [pc, #116]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2208      	movs	r2, #8
 8006b82:	4013      	ands	r3, r2
 8006b84:	d00a      	beq.n	8006b9c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b86:	4b19      	ldr	r3, [pc, #100]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	4a1a      	ldr	r2, [pc, #104]	; (8006bf4 <HAL_RCC_ClockConfig+0x280>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	0019      	movs	r1, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	00da      	lsls	r2, r3, #3
 8006b96:	4b15      	ldr	r3, [pc, #84]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b9c:	f000 f832 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 8006ba0:	0001      	movs	r1, r0
 8006ba2:	4b12      	ldr	r3, [pc, #72]	; (8006bec <HAL_RCC_ClockConfig+0x278>)
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	091b      	lsrs	r3, r3, #4
 8006ba8:	220f      	movs	r2, #15
 8006baa:	4013      	ands	r3, r2
 8006bac:	4a12      	ldr	r2, [pc, #72]	; (8006bf8 <HAL_RCC_ClockConfig+0x284>)
 8006bae:	5cd3      	ldrb	r3, [r2, r3]
 8006bb0:	000a      	movs	r2, r1
 8006bb2:	40da      	lsrs	r2, r3
 8006bb4:	4b11      	ldr	r3, [pc, #68]	; (8006bfc <HAL_RCC_ClockConfig+0x288>)
 8006bb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006bb8:	4b11      	ldr	r3, [pc, #68]	; (8006c00 <HAL_RCC_ClockConfig+0x28c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	250b      	movs	r5, #11
 8006bbe:	197c      	adds	r4, r7, r5
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f7fe f935 	bl	8004e30 <HAL_InitTick>
 8006bc6:	0003      	movs	r3, r0
 8006bc8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8006bca:	197b      	adds	r3, r7, r5
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006bd2:	197b      	adds	r3, r7, r5
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	e000      	b.n	8006bda <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	0018      	movs	r0, r3
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	b004      	add	sp, #16
 8006be0:	bdb0      	pop	{r4, r5, r7, pc}
 8006be2:	46c0      	nop			; (mov r8, r8)
 8006be4:	40022000 	.word	0x40022000
 8006be8:	00001388 	.word	0x00001388
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	fffff8ff 	.word	0xfffff8ff
 8006bf4:	ffffc7ff 	.word	0xffffc7ff
 8006bf8:	0800e62c 	.word	0x0800e62c
 8006bfc:	20000000 	.word	0x20000000
 8006c00:	20000004 	.word	0x20000004

08006c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c04:	b5b0      	push	{r4, r5, r7, lr}
 8006c06:	b08e      	sub	sp, #56	; 0x38
 8006c08:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8006c0a:	4b4c      	ldr	r3, [pc, #304]	; (8006d3c <HAL_RCC_GetSysClockFreq+0x138>)
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c12:	230c      	movs	r3, #12
 8006c14:	4013      	ands	r3, r2
 8006c16:	2b0c      	cmp	r3, #12
 8006c18:	d014      	beq.n	8006c44 <HAL_RCC_GetSysClockFreq+0x40>
 8006c1a:	d900      	bls.n	8006c1e <HAL_RCC_GetSysClockFreq+0x1a>
 8006c1c:	e07b      	b.n	8006d16 <HAL_RCC_GetSysClockFreq+0x112>
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d002      	beq.n	8006c28 <HAL_RCC_GetSysClockFreq+0x24>
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	d00b      	beq.n	8006c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c26:	e076      	b.n	8006d16 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006c28:	4b44      	ldr	r3, [pc, #272]	; (8006d3c <HAL_RCC_GetSysClockFreq+0x138>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	4013      	ands	r3, r2
 8006c30:	d002      	beq.n	8006c38 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006c32:	4b43      	ldr	r3, [pc, #268]	; (8006d40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006c34:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006c36:	e07c      	b.n	8006d32 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8006c38:	4b42      	ldr	r3, [pc, #264]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x140>)
 8006c3a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006c3c:	e079      	b.n	8006d32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006c3e:	4b42      	ldr	r3, [pc, #264]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x144>)
 8006c40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006c42:	e076      	b.n	8006d32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	0c9a      	lsrs	r2, r3, #18
 8006c48:	230f      	movs	r3, #15
 8006c4a:	401a      	ands	r2, r3
 8006c4c:	4b3f      	ldr	r3, [pc, #252]	; (8006d4c <HAL_RCC_GetSysClockFreq+0x148>)
 8006c4e:	5c9b      	ldrb	r3, [r3, r2]
 8006c50:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	0d9a      	lsrs	r2, r3, #22
 8006c56:	2303      	movs	r3, #3
 8006c58:	4013      	ands	r3, r2
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c5e:	4b37      	ldr	r3, [pc, #220]	; (8006d3c <HAL_RCC_GetSysClockFreq+0x138>)
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	2380      	movs	r3, #128	; 0x80
 8006c64:	025b      	lsls	r3, r3, #9
 8006c66:	4013      	ands	r3, r2
 8006c68:	d01a      	beq.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	2300      	movs	r3, #0
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	4a35      	ldr	r2, [pc, #212]	; (8006d48 <HAL_RCC_GetSysClockFreq+0x144>)
 8006c74:	2300      	movs	r3, #0
 8006c76:	69b8      	ldr	r0, [r7, #24]
 8006c78:	69f9      	ldr	r1, [r7, #28]
 8006c7a:	f7f9 fc3f 	bl	80004fc <__aeabi_lmul>
 8006c7e:	0002      	movs	r2, r0
 8006c80:	000b      	movs	r3, r1
 8006c82:	0010      	movs	r0, r2
 8006c84:	0019      	movs	r1, r3
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f7f9 fc13 	bl	80004bc <__aeabi_uldivmod>
 8006c96:	0002      	movs	r2, r0
 8006c98:	000b      	movs	r3, r1
 8006c9a:	0013      	movs	r3, r2
 8006c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9e:	e037      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006ca0:	4b26      	ldr	r3, [pc, #152]	; (8006d3c <HAL_RCC_GetSysClockFreq+0x138>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	d01a      	beq.n	8006ce0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	60bb      	str	r3, [r7, #8]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60fb      	str	r3, [r7, #12]
 8006cb2:	4a23      	ldr	r2, [pc, #140]	; (8006d40 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	68b8      	ldr	r0, [r7, #8]
 8006cb8:	68f9      	ldr	r1, [r7, #12]
 8006cba:	f7f9 fc1f 	bl	80004fc <__aeabi_lmul>
 8006cbe:	0002      	movs	r2, r0
 8006cc0:	000b      	movs	r3, r1
 8006cc2:	0010      	movs	r0, r2
 8006cc4:	0019      	movs	r1, r3
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	603b      	str	r3, [r7, #0]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	607b      	str	r3, [r7, #4]
 8006cce:	683a      	ldr	r2, [r7, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f7f9 fbf3 	bl	80004bc <__aeabi_uldivmod>
 8006cd6:	0002      	movs	r2, r0
 8006cd8:	000b      	movs	r3, r1
 8006cda:	0013      	movs	r3, r2
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cde:	e017      	b.n	8006d10 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	0019      	movs	r1, r3
 8006ce8:	4a16      	ldr	r2, [pc, #88]	; (8006d44 <HAL_RCC_GetSysClockFreq+0x140>)
 8006cea:	2300      	movs	r3, #0
 8006cec:	f7f9 fc06 	bl	80004fc <__aeabi_lmul>
 8006cf0:	0002      	movs	r2, r0
 8006cf2:	000b      	movs	r3, r1
 8006cf4:	0010      	movs	r0, r2
 8006cf6:	0019      	movs	r1, r3
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	001c      	movs	r4, r3
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	001d      	movs	r5, r3
 8006d00:	0022      	movs	r2, r4
 8006d02:	002b      	movs	r3, r5
 8006d04:	f7f9 fbda 	bl	80004bc <__aeabi_uldivmod>
 8006d08:	0002      	movs	r2, r0
 8006d0a:	000b      	movs	r3, r1
 8006d0c:	0013      	movs	r3, r2
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8006d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006d14:	e00d      	b.n	8006d32 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006d16:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <HAL_RCC_GetSysClockFreq+0x138>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	0b5b      	lsrs	r3, r3, #13
 8006d1c:	2207      	movs	r2, #7
 8006d1e:	4013      	ands	r3, r2
 8006d20:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	3301      	adds	r3, #1
 8006d26:	2280      	movs	r2, #128	; 0x80
 8006d28:	0212      	lsls	r2, r2, #8
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	0013      	movs	r3, r2
 8006d2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006d30:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006d34:	0018      	movs	r0, r3
 8006d36:	46bd      	mov	sp, r7
 8006d38:	b00e      	add	sp, #56	; 0x38
 8006d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8006d3c:	40021000 	.word	0x40021000
 8006d40:	003d0900 	.word	0x003d0900
 8006d44:	00f42400 	.word	0x00f42400
 8006d48:	007a1200 	.word	0x007a1200
 8006d4c:	0800e644 	.word	0x0800e644

08006d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d54:	4b02      	ldr	r3, [pc, #8]	; (8006d60 <HAL_RCC_GetHCLKFreq+0x10>)
 8006d56:	681b      	ldr	r3, [r3, #0]
}
 8006d58:	0018      	movs	r0, r3
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	20000000 	.word	0x20000000

08006d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d68:	f7ff fff2 	bl	8006d50 <HAL_RCC_GetHCLKFreq>
 8006d6c:	0001      	movs	r1, r0
 8006d6e:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	0a1b      	lsrs	r3, r3, #8
 8006d74:	2207      	movs	r2, #7
 8006d76:	4013      	ands	r3, r2
 8006d78:	4a04      	ldr	r2, [pc, #16]	; (8006d8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d7a:	5cd3      	ldrb	r3, [r2, r3]
 8006d7c:	40d9      	lsrs	r1, r3
 8006d7e:	000b      	movs	r3, r1
}
 8006d80:	0018      	movs	r0, r3
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	46c0      	nop			; (mov r8, r8)
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	0800e63c 	.word	0x0800e63c

08006d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d94:	f7ff ffdc 	bl	8006d50 <HAL_RCC_GetHCLKFreq>
 8006d98:	0001      	movs	r1, r0
 8006d9a:	4b06      	ldr	r3, [pc, #24]	; (8006db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	0adb      	lsrs	r3, r3, #11
 8006da0:	2207      	movs	r2, #7
 8006da2:	4013      	ands	r3, r2
 8006da4:	4a04      	ldr	r2, [pc, #16]	; (8006db8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006da6:	5cd3      	ldrb	r3, [r2, r3]
 8006da8:	40d9      	lsrs	r1, r3
 8006daa:	000b      	movs	r3, r1
}
 8006dac:	0018      	movs	r0, r3
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	40021000 	.word	0x40021000
 8006db8:	0800e63c 	.word	0x0800e63c

08006dbc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006dc4:	2317      	movs	r3, #23
 8006dc6:	18fb      	adds	r3, r7, r3
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2220      	movs	r2, #32
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	d106      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	4013      	ands	r3, r2
 8006de0:	d100      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006de2:	e0d9      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006de4:	4ba4      	ldr	r3, [pc, #656]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006de6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006de8:	2380      	movs	r3, #128	; 0x80
 8006dea:	055b      	lsls	r3, r3, #21
 8006dec:	4013      	ands	r3, r2
 8006dee:	d10a      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006df0:	4ba1      	ldr	r3, [pc, #644]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006df4:	4ba0      	ldr	r3, [pc, #640]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006df6:	2180      	movs	r1, #128	; 0x80
 8006df8:	0549      	lsls	r1, r1, #21
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8006dfe:	2317      	movs	r3, #23
 8006e00:	18fb      	adds	r3, r7, r3
 8006e02:	2201      	movs	r2, #1
 8006e04:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e06:	4b9d      	ldr	r3, [pc, #628]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	2380      	movs	r3, #128	; 0x80
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4013      	ands	r3, r2
 8006e10:	d11a      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e12:	4b9a      	ldr	r3, [pc, #616]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	4b99      	ldr	r3, [pc, #612]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e18:	2180      	movs	r1, #128	; 0x80
 8006e1a:	0049      	lsls	r1, r1, #1
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e20:	f7fe f84c 	bl	8004ebc <HAL_GetTick>
 8006e24:	0003      	movs	r3, r0
 8006e26:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e28:	e008      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e2a:	f7fe f847 	bl	8004ebc <HAL_GetTick>
 8006e2e:	0002      	movs	r2, r0
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b64      	cmp	r3, #100	; 0x64
 8006e36:	d901      	bls.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e118      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e3c:	4b8f      	ldr	r3, [pc, #572]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	4013      	ands	r3, r2
 8006e46:	d0f0      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006e48:	4b8b      	ldr	r3, [pc, #556]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	23c0      	movs	r3, #192	; 0xc0
 8006e4e:	039b      	lsls	r3, r3, #14
 8006e50:	4013      	ands	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	23c0      	movs	r3, #192	; 0xc0
 8006e5a:	039b      	lsls	r3, r3, #14
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d107      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	23c0      	movs	r3, #192	; 0xc0
 8006e6a:	039b      	lsls	r3, r3, #14
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d013      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	23c0      	movs	r3, #192	; 0xc0
 8006e7a:	029b      	lsls	r3, r3, #10
 8006e7c:	401a      	ands	r2, r3
 8006e7e:	23c0      	movs	r3, #192	; 0xc0
 8006e80:	029b      	lsls	r3, r3, #10
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d10a      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e86:	4b7c      	ldr	r3, [pc, #496]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	2380      	movs	r3, #128	; 0x80
 8006e8c:	029b      	lsls	r3, r3, #10
 8006e8e:	401a      	ands	r2, r3
 8006e90:	2380      	movs	r3, #128	; 0x80
 8006e92:	029b      	lsls	r3, r3, #10
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d101      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0e8      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006e9c:	4b76      	ldr	r3, [pc, #472]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ea0:	23c0      	movs	r3, #192	; 0xc0
 8006ea2:	029b      	lsls	r3, r3, #10
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d049      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	23c0      	movs	r3, #192	; 0xc0
 8006eb4:	029b      	lsls	r3, r3, #10
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d004      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	d10d      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	23c0      	movs	r3, #192	; 0xc0
 8006ece:	029b      	lsls	r3, r3, #10
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d034      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	2380      	movs	r3, #128	; 0x80
 8006ede:	011b      	lsls	r3, r3, #4
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	d02e      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006ee4:	4b64      	ldr	r3, [pc, #400]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee8:	4a65      	ldr	r2, [pc, #404]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006eea:	4013      	ands	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006eee:	4b62      	ldr	r3, [pc, #392]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ef2:	4b61      	ldr	r3, [pc, #388]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ef4:	2180      	movs	r1, #128	; 0x80
 8006ef6:	0309      	lsls	r1, r1, #12
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006efc:	4b5e      	ldr	r3, [pc, #376]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f00:	4b5d      	ldr	r3, [pc, #372]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f02:	4960      	ldr	r1, [pc, #384]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006f04:	400a      	ands	r2, r1
 8006f06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006f08:	4b5b      	ldr	r3, [pc, #364]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	2380      	movs	r3, #128	; 0x80
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	4013      	ands	r3, r2
 8006f16:	d014      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f18:	f7fd ffd0 	bl	8004ebc <HAL_GetTick>
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f20:	e009      	b.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f22:	f7fd ffcb 	bl	8004ebc <HAL_GetTick>
 8006f26:	0002      	movs	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	4a56      	ldr	r2, [pc, #344]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e09b      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f36:	4b50      	ldr	r3, [pc, #320]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f3a:	2380      	movs	r3, #128	; 0x80
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4013      	ands	r3, r2
 8006f40:	d0ef      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	23c0      	movs	r3, #192	; 0xc0
 8006f48:	029b      	lsls	r3, r3, #10
 8006f4a:	401a      	ands	r2, r3
 8006f4c:	23c0      	movs	r3, #192	; 0xc0
 8006f4e:	029b      	lsls	r3, r3, #10
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d10c      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006f54:	4b48      	ldr	r3, [pc, #288]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a4c      	ldr	r2, [pc, #304]	; (800708c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	0019      	movs	r1, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	23c0      	movs	r3, #192	; 0xc0
 8006f64:	039b      	lsls	r3, r3, #14
 8006f66:	401a      	ands	r2, r3
 8006f68:	4b43      	ldr	r3, [pc, #268]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	4b42      	ldr	r3, [pc, #264]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	23c0      	movs	r3, #192	; 0xc0
 8006f78:	029b      	lsls	r3, r3, #10
 8006f7a:	401a      	ands	r2, r3
 8006f7c:	4b3e      	ldr	r3, [pc, #248]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006f82:	2317      	movs	r3, #23
 8006f84:	18fb      	adds	r3, r7, r3
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d105      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f8c:	4b3a      	ldr	r3, [pc, #232]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f90:	4b39      	ldr	r3, [pc, #228]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006f92:	493f      	ldr	r1, [pc, #252]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006f94:	400a      	ands	r2, r1
 8006f96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	d009      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fa2:	4b35      	ldr	r3, [pc, #212]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fa6:	2203      	movs	r2, #3
 8006fa8:	4393      	bics	r3, r2
 8006faa:	0019      	movs	r1, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	4b31      	ldr	r3, [pc, #196]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d009      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fc0:	4b2d      	ldr	r3, [pc, #180]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc4:	220c      	movs	r2, #12
 8006fc6:	4393      	bics	r3, r2
 8006fc8:	0019      	movs	r1, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691a      	ldr	r2, [r3, #16]
 8006fce:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2204      	movs	r2, #4
 8006fda:	4013      	ands	r3, r2
 8006fdc:	d009      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fde:	4b26      	ldr	r3, [pc, #152]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe2:	4a2c      	ldr	r2, [pc, #176]	; (8007094 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	695a      	ldr	r2, [r3, #20]
 8006fec:	4b22      	ldr	r3, [pc, #136]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	d009      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ffc:	4b1e      	ldr	r3, [pc, #120]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007000:	4a25      	ldr	r2, [pc, #148]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8007002:	4013      	ands	r3, r2
 8007004:	0019      	movs	r1, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	4b1b      	ldr	r3, [pc, #108]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800700c:	430a      	orrs	r2, r1
 800700e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	2380      	movs	r3, #128	; 0x80
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	4013      	ands	r3, r2
 800701a:	d009      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800701c:	4b16      	ldr	r3, [pc, #88]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800701e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007020:	4a17      	ldr	r2, [pc, #92]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007022:	4013      	ands	r3, r2
 8007024:	0019      	movs	r1, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	69da      	ldr	r2, [r3, #28]
 800702a:	4b13      	ldr	r3, [pc, #76]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800702c:	430a      	orrs	r2, r1
 800702e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2240      	movs	r2, #64	; 0x40
 8007036:	4013      	ands	r3, r2
 8007038:	d009      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800703a:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800703c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800703e:	4a17      	ldr	r2, [pc, #92]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007040:	4013      	ands	r3, r2
 8007042:	0019      	movs	r1, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007048:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800704a:	430a      	orrs	r2, r1
 800704c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2280      	movs	r2, #128	; 0x80
 8007054:	4013      	ands	r3, r2
 8007056:	d009      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007058:	4b07      	ldr	r3, [pc, #28]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800705a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800705c:	4a10      	ldr	r2, [pc, #64]	; (80070a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800705e:	4013      	ands	r3, r2
 8007060:	0019      	movs	r1, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1a      	ldr	r2, [r3, #32]
 8007066:	4b04      	ldr	r3, [pc, #16]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007068:	430a      	orrs	r2, r1
 800706a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	0018      	movs	r0, r3
 8007070:	46bd      	mov	sp, r7
 8007072:	b006      	add	sp, #24
 8007074:	bd80      	pop	{r7, pc}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	40021000 	.word	0x40021000
 800707c:	40007000 	.word	0x40007000
 8007080:	fffcffff 	.word	0xfffcffff
 8007084:	fff7ffff 	.word	0xfff7ffff
 8007088:	00001388 	.word	0x00001388
 800708c:	ffcfffff 	.word	0xffcfffff
 8007090:	efffffff 	.word	0xefffffff
 8007094:	fffff3ff 	.word	0xfffff3ff
 8007098:	ffffcfff 	.word	0xffffcfff
 800709c:	fbffffff 	.word	0xfbffffff
 80070a0:	fff3ffff 	.word	0xfff3ffff

080070a4 <HAL_RCCEx_EnableLSECSS>:
/**
  * @brief  Enables the LSE Clock Security System.
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSECSSON) ;
 80070a8:	4b04      	ldr	r3, [pc, #16]	; (80070bc <HAL_RCCEx_EnableLSECSS+0x18>)
 80070aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80070ac:	4b03      	ldr	r3, [pc, #12]	; (80070bc <HAL_RCCEx_EnableLSECSS+0x18>)
 80070ae:	2180      	movs	r1, #128	; 0x80
 80070b0:	0189      	lsls	r1, r1, #6
 80070b2:	430a      	orrs	r2, r1
 80070b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80070b6:	46c0      	nop			; (mov r8, r8)
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	40021000 	.word	0x40021000

080070c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e08e      	b.n	80071f0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2221      	movs	r2, #33	; 0x21
 80070d6:	5c9b      	ldrb	r3, [r3, r2]
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d107      	bne.n	80070ee <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	2100      	movs	r1, #0
 80070e4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	0018      	movs	r0, r3
 80070ea:	f7fc ff5f 	bl	8003fac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2221      	movs	r2, #33	; 0x21
 80070f2:	2102      	movs	r1, #2
 80070f4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	22ca      	movs	r2, #202	; 0xca
 80070fc:	625a      	str	r2, [r3, #36]	; 0x24
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2253      	movs	r2, #83	; 0x53
 8007104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	0018      	movs	r0, r3
 800710a:	f000 fba6 	bl	800785a <RTC_EnterInitMode>
 800710e:	1e03      	subs	r3, r0, #0
 8007110:	d009      	beq.n	8007126 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	22ff      	movs	r2, #255	; 0xff
 8007118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2221      	movs	r2, #33	; 0x21
 800711e:	2104      	movs	r1, #4
 8007120:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e064      	b.n	80071f0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4931      	ldr	r1, [pc, #196]	; (80071f8 <HAL_RTC_Init+0x138>)
 8007132:	400a      	ands	r2, r1
 8007134:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6899      	ldr	r1, [r3, #8]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	431a      	orrs	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	68d2      	ldr	r2, [r2, #12]
 800715c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6919      	ldr	r1, [r3, #16]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	041a      	lsls	r2, r3, #16
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2180      	movs	r1, #128	; 0x80
 800717e:	438a      	bics	r2, r1
 8007180:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2103      	movs	r1, #3
 800718e:	438a      	bics	r2, r1
 8007190:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	69da      	ldr	r2, [r3, #28]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	431a      	orrs	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	2220      	movs	r2, #32
 80071b2:	4013      	ands	r3, r2
 80071b4:	d113      	bne.n	80071de <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	0018      	movs	r0, r3
 80071ba:	f000 fb27 	bl	800780c <HAL_RTC_WaitForSynchro>
 80071be:	1e03      	subs	r3, r0, #0
 80071c0:	d00d      	beq.n	80071de <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	22ff      	movs	r2, #255	; 0xff
 80071c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2221      	movs	r2, #33	; 0x21
 80071ce:	2104      	movs	r1, #4
 80071d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	2100      	movs	r1, #0
 80071d8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e008      	b.n	80071f0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	22ff      	movs	r2, #255	; 0xff
 80071e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2221      	movs	r2, #33	; 0x21
 80071ea:	2101      	movs	r1, #1
 80071ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80071ee:	2300      	movs	r3, #0
  }
}
 80071f0:	0018      	movs	r0, r3
 80071f2:	46bd      	mov	sp, r7
 80071f4:	b002      	add	sp, #8
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	ff8fffbf 	.word	0xff8fffbf

080071fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80071fc:	b590      	push	{r4, r7, lr}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2220      	movs	r2, #32
 800720c:	5c9b      	ldrb	r3, [r3, r2]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d101      	bne.n	8007216 <HAL_RTC_SetTime+0x1a>
 8007212:	2302      	movs	r3, #2
 8007214:	e0ad      	b.n	8007372 <HAL_RTC_SetTime+0x176>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2220      	movs	r2, #32
 800721a:	2101      	movs	r1, #1
 800721c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2221      	movs	r2, #33	; 0x21
 8007222:	2102      	movs	r1, #2
 8007224:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d125      	bne.n	8007278 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	2240      	movs	r2, #64	; 0x40
 8007234:	4013      	ands	r3, r2
 8007236:	d102      	bne.n	800723e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2200      	movs	r2, #0
 800723c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	0018      	movs	r0, r3
 8007244:	f000 fb33 	bl	80078ae <RTC_ByteToBcd2>
 8007248:	0003      	movs	r3, r0
 800724a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	0018      	movs	r0, r3
 8007252:	f000 fb2c 	bl	80078ae <RTC_ByteToBcd2>
 8007256:	0003      	movs	r3, r0
 8007258:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800725a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	789b      	ldrb	r3, [r3, #2]
 8007260:	0018      	movs	r0, r3
 8007262:	f000 fb24 	bl	80078ae <RTC_ByteToBcd2>
 8007266:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007268:	0022      	movs	r2, r4
 800726a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	78db      	ldrb	r3, [r3, #3]
 8007270:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007272:	4313      	orrs	r3, r2
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	e017      	b.n	80072a8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	2240      	movs	r2, #64	; 0x40
 8007280:	4013      	ands	r3, r2
 8007282:	d102      	bne.n	800728a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007296:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800729c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	78db      	ldrb	r3, [r3, #3]
 80072a2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	22ca      	movs	r2, #202	; 0xca
 80072ae:	625a      	str	r2, [r3, #36]	; 0x24
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2253      	movs	r2, #83	; 0x53
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	0018      	movs	r0, r3
 80072bc:	f000 facd 	bl	800785a <RTC_EnterInitMode>
 80072c0:	1e03      	subs	r3, r0, #0
 80072c2:	d00d      	beq.n	80072e0 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	22ff      	movs	r2, #255	; 0xff
 80072ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2221      	movs	r2, #33	; 0x21
 80072d0:	2104      	movs	r1, #4
 80072d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2220      	movs	r2, #32
 80072d8:	2100      	movs	r1, #0
 80072da:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e048      	b.n	8007372 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	697a      	ldr	r2, [r7, #20]
 80072e6:	4925      	ldr	r1, [pc, #148]	; (800737c <HAL_RTC_SetTime+0x180>)
 80072e8:	400a      	ands	r2, r1
 80072ea:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4922      	ldr	r1, [pc, #136]	; (8007380 <HAL_RTC_SetTime+0x184>)
 80072f8:	400a      	ands	r2, r1
 80072fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6899      	ldr	r1, [r3, #8]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	431a      	orrs	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2180      	movs	r1, #128	; 0x80
 8007320:	438a      	bics	r2, r1
 8007322:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2220      	movs	r2, #32
 800732c:	4013      	ands	r3, r2
 800732e:	d113      	bne.n	8007358 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	0018      	movs	r0, r3
 8007334:	f000 fa6a 	bl	800780c <HAL_RTC_WaitForSynchro>
 8007338:	1e03      	subs	r3, r0, #0
 800733a:	d00d      	beq.n	8007358 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	22ff      	movs	r2, #255	; 0xff
 8007342:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2221      	movs	r2, #33	; 0x21
 8007348:	2104      	movs	r1, #4
 800734a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2220      	movs	r2, #32
 8007350:	2100      	movs	r1, #0
 8007352:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e00c      	b.n	8007372 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	22ff      	movs	r2, #255	; 0xff
 800735e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2221      	movs	r2, #33	; 0x21
 8007364:	2101      	movs	r1, #1
 8007366:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2220      	movs	r2, #32
 800736c:	2100      	movs	r1, #0
 800736e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007370:	2300      	movs	r3, #0
  }
}
 8007372:	0018      	movs	r0, r3
 8007374:	46bd      	mov	sp, r7
 8007376:	b007      	add	sp, #28
 8007378:	bd90      	pop	{r4, r7, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	007f7f7f 	.word	0x007f7f7f
 8007380:	fffbffff 	.word	0xfffbffff

08007384 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	045b      	lsls	r3, r3, #17
 80073a2:	0c5a      	lsrs	r2, r3, #17
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a22      	ldr	r2, [pc, #136]	; (8007438 <HAL_RTC_GetTime+0xb4>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	0c1b      	lsrs	r3, r3, #16
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	223f      	movs	r2, #63	; 0x3f
 80073bc:	4013      	ands	r3, r2
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	227f      	movs	r2, #127	; 0x7f
 80073cc:	4013      	ands	r3, r2
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	227f      	movs	r2, #127	; 0x7f
 80073da:	4013      	ands	r3, r2
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	0c1b      	lsrs	r3, r3, #16
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2240      	movs	r2, #64	; 0x40
 80073ea:	4013      	ands	r3, r2
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d11a      	bne.n	800742e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	0018      	movs	r0, r3
 80073fe:	f000 fa7e 	bl	80078fe <RTC_Bcd2ToByte>
 8007402:	0003      	movs	r3, r0
 8007404:	001a      	movs	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	0018      	movs	r0, r3
 8007410:	f000 fa75 	bl	80078fe <RTC_Bcd2ToByte>
 8007414:	0003      	movs	r3, r0
 8007416:	001a      	movs	r2, r3
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	789b      	ldrb	r3, [r3, #2]
 8007420:	0018      	movs	r0, r3
 8007422:	f000 fa6c 	bl	80078fe <RTC_Bcd2ToByte>
 8007426:	0003      	movs	r3, r0
 8007428:	001a      	movs	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	0018      	movs	r0, r3
 8007432:	46bd      	mov	sp, r7
 8007434:	b006      	add	sp, #24
 8007436:	bd80      	pop	{r7, pc}
 8007438:	007f7f7f 	.word	0x007f7f7f

0800743c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	4a21      	ldr	r2, [pc, #132]	; (80074d4 <HAL_RTC_GetDate+0x98>)
 8007450:	4013      	ands	r3, r2
 8007452:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	0c1b      	lsrs	r3, r3, #16
 8007458:	b2da      	uxtb	r2, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	0a1b      	lsrs	r3, r3, #8
 8007462:	b2db      	uxtb	r3, r3
 8007464:	221f      	movs	r2, #31
 8007466:	4013      	ands	r3, r2
 8007468:	b2da      	uxtb	r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	223f      	movs	r2, #63	; 0x3f
 8007474:	4013      	ands	r3, r2
 8007476:	b2da      	uxtb	r2, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	0b5b      	lsrs	r3, r3, #13
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2207      	movs	r2, #7
 8007484:	4013      	ands	r3, r2
 8007486:	b2da      	uxtb	r2, r3
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d11a      	bne.n	80074c8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	78db      	ldrb	r3, [r3, #3]
 8007496:	0018      	movs	r0, r3
 8007498:	f000 fa31 	bl	80078fe <RTC_Bcd2ToByte>
 800749c:	0003      	movs	r3, r0
 800749e:	001a      	movs	r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	785b      	ldrb	r3, [r3, #1]
 80074a8:	0018      	movs	r0, r3
 80074aa:	f000 fa28 	bl	80078fe <RTC_Bcd2ToByte>
 80074ae:	0003      	movs	r3, r0
 80074b0:	001a      	movs	r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	789b      	ldrb	r3, [r3, #2]
 80074ba:	0018      	movs	r0, r3
 80074bc:	f000 fa1f 	bl	80078fe <RTC_Bcd2ToByte>
 80074c0:	0003      	movs	r3, r0
 80074c2:	001a      	movs	r2, r3
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	0018      	movs	r0, r3
 80074cc:	46bd      	mov	sp, r7
 80074ce:	b006      	add	sp, #24
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	46c0      	nop			; (mov r8, r8)
 80074d4:	00ffff3f 	.word	0x00ffff3f

080074d8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80074d8:	b590      	push	{r4, r7, lr}
 80074da:	b089      	sub	sp, #36	; 0x24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2220      	movs	r2, #32
 80074e8:	5c9b      	ldrb	r3, [r3, r2]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_RTC_SetAlarm_IT+0x1a>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e130      	b.n	8007754 <HAL_RTC_SetAlarm_IT+0x27c>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2220      	movs	r2, #32
 80074f6:	2101      	movs	r1, #1
 80074f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2221      	movs	r2, #33	; 0x21
 80074fe:	2102      	movs	r1, #2
 8007500:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d136      	bne.n	8007576 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2240      	movs	r2, #64	; 0x40
 8007510:	4013      	ands	r3, r2
 8007512:	d102      	bne.n	800751a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2200      	movs	r2, #0
 8007518:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	0018      	movs	r0, r3
 8007520:	f000 f9c5 	bl	80078ae <RTC_ByteToBcd2>
 8007524:	0003      	movs	r3, r0
 8007526:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	785b      	ldrb	r3, [r3, #1]
 800752c:	0018      	movs	r0, r3
 800752e:	f000 f9be 	bl	80078ae <RTC_ByteToBcd2>
 8007532:	0003      	movs	r3, r0
 8007534:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007536:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	789b      	ldrb	r3, [r3, #2]
 800753c:	0018      	movs	r0, r3
 800753e:	f000 f9b6 	bl	80078ae <RTC_ByteToBcd2>
 8007542:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007544:	0022      	movs	r2, r4
 8007546:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	78db      	ldrb	r3, [r3, #3]
 800754c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800754e:	431a      	orrs	r2, r3
 8007550:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2220      	movs	r2, #32
 8007556:	5c9b      	ldrb	r3, [r3, r2]
 8007558:	0018      	movs	r0, r3
 800755a:	f000 f9a8 	bl	80078ae <RTC_ByteToBcd2>
 800755e:	0003      	movs	r3, r0
 8007560:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007562:	0022      	movs	r2, r4
 8007564:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800756a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007570:	4313      	orrs	r3, r2
 8007572:	61fb      	str	r3, [r7, #28]
 8007574:	e022      	b.n	80075bc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	2240      	movs	r2, #64	; 0x40
 800757e:	4013      	ands	r3, r2
 8007580:	d102      	bne.n	8007588 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	2200      	movs	r2, #0
 8007586:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007594:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007596:	68ba      	ldr	r2, [r7, #8]
 8007598:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800759a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	78db      	ldrb	r3, [r3, #3]
 80075a0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80075a2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2120      	movs	r1, #32
 80075a8:	5c5b      	ldrb	r3, [r3, r1]
 80075aa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80075ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80075b2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80075b8:	4313      	orrs	r3, r2
 80075ba:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	22ca      	movs	r2, #202	; 0xca
 80075ce:	625a      	str	r2, [r3, #36]	; 0x24
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2253      	movs	r2, #83	; 0x53
 80075d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075dc:	2380      	movs	r3, #128	; 0x80
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d14e      	bne.n	8007682 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	495b      	ldr	r1, [pc, #364]	; (800775c <HAL_RTC_SetAlarm_IT+0x284>)
 80075f0:	400a      	ands	r2, r1
 80075f2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	22ff      	movs	r2, #255	; 0xff
 80075fc:	401a      	ands	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4957      	ldr	r1, [pc, #348]	; (8007760 <HAL_RTC_SetAlarm_IT+0x288>)
 8007604:	430a      	orrs	r2, r1
 8007606:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007608:	f7fd fc58 	bl	8004ebc <HAL_GetTick>
 800760c:	0003      	movs	r3, r0
 800760e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007610:	e016      	b.n	8007640 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007612:	f7fd fc53 	bl	8004ebc <HAL_GetTick>
 8007616:	0002      	movs	r2, r0
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	1ad2      	subs	r2, r2, r3
 800761c:	23fa      	movs	r3, #250	; 0xfa
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	429a      	cmp	r2, r3
 8007622:	d90d      	bls.n	8007640 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	22ff      	movs	r2, #255	; 0xff
 800762a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2221      	movs	r2, #33	; 0x21
 8007630:	2103      	movs	r1, #3
 8007632:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2220      	movs	r2, #32
 8007638:	2100      	movs	r1, #0
 800763a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e089      	b.n	8007754 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	4013      	ands	r3, r2
 800764a:	d0e2      	beq.n	8007612 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2180      	movs	r1, #128	; 0x80
 8007668:	0049      	lsls	r1, r1, #1
 800766a:	430a      	orrs	r2, r1
 800766c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2180      	movs	r1, #128	; 0x80
 800767a:	0149      	lsls	r1, r1, #5
 800767c:	430a      	orrs	r2, r1
 800767e:	609a      	str	r2, [r3, #8]
 8007680:	e04d      	b.n	800771e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4935      	ldr	r1, [pc, #212]	; (8007764 <HAL_RTC_SetAlarm_IT+0x28c>)
 800768e:	400a      	ands	r2, r1
 8007690:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	22ff      	movs	r2, #255	; 0xff
 800769a:	401a      	ands	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4931      	ldr	r1, [pc, #196]	; (8007768 <HAL_RTC_SetAlarm_IT+0x290>)
 80076a2:	430a      	orrs	r2, r1
 80076a4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80076a6:	f7fd fc09 	bl	8004ebc <HAL_GetTick>
 80076aa:	0003      	movs	r3, r0
 80076ac:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80076ae:	e016      	b.n	80076de <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80076b0:	f7fd fc04 	bl	8004ebc <HAL_GetTick>
 80076b4:	0002      	movs	r2, r0
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	1ad2      	subs	r2, r2, r3
 80076ba:	23fa      	movs	r3, #250	; 0xfa
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	429a      	cmp	r2, r3
 80076c0:	d90d      	bls.n	80076de <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	22ff      	movs	r2, #255	; 0xff
 80076c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2221      	movs	r2, #33	; 0x21
 80076ce:	2103      	movs	r1, #3
 80076d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2220      	movs	r2, #32
 80076d6:	2100      	movs	r1, #0
 80076d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e03a      	b.n	8007754 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	2202      	movs	r2, #2
 80076e6:	4013      	ands	r3, r2
 80076e8:	d0e2      	beq.n	80076b0 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69fa      	ldr	r2, [r7, #28]
 80076f0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2180      	movs	r1, #128	; 0x80
 8007706:	0089      	lsls	r1, r1, #2
 8007708:	430a      	orrs	r2, r1
 800770a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2180      	movs	r1, #128	; 0x80
 8007718:	0189      	lsls	r1, r1, #6
 800771a:	430a      	orrs	r2, r1
 800771c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800771e:	4b13      	ldr	r3, [pc, #76]	; (800776c <HAL_RTC_SetAlarm_IT+0x294>)
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	4b12      	ldr	r3, [pc, #72]	; (800776c <HAL_RTC_SetAlarm_IT+0x294>)
 8007724:	2180      	movs	r1, #128	; 0x80
 8007726:	0289      	lsls	r1, r1, #10
 8007728:	430a      	orrs	r2, r1
 800772a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800772c:	4b0f      	ldr	r3, [pc, #60]	; (800776c <HAL_RTC_SetAlarm_IT+0x294>)
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	4b0e      	ldr	r3, [pc, #56]	; (800776c <HAL_RTC_SetAlarm_IT+0x294>)
 8007732:	2180      	movs	r1, #128	; 0x80
 8007734:	0289      	lsls	r1, r1, #10
 8007736:	430a      	orrs	r2, r1
 8007738:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	22ff      	movs	r2, #255	; 0xff
 8007740:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2221      	movs	r2, #33	; 0x21
 8007746:	2101      	movs	r1, #1
 8007748:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2220      	movs	r2, #32
 800774e:	2100      	movs	r1, #0
 8007750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	0018      	movs	r0, r3
 8007756:	46bd      	mov	sp, r7
 8007758:	b009      	add	sp, #36	; 0x24
 800775a:	bd90      	pop	{r4, r7, pc}
 800775c:	fffffeff 	.word	0xfffffeff
 8007760:	fffffe7f 	.word	0xfffffe7f
 8007764:	fffffdff 	.word	0xfffffdff
 8007768:	fffffd7f 	.word	0xfffffd7f
 800776c:	40010400 	.word	0x40010400

08007770 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	2380      	movs	r3, #128	; 0x80
 8007780:	015b      	lsls	r3, r3, #5
 8007782:	4013      	ands	r3, r2
 8007784:	d014      	beq.n	80077b0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68da      	ldr	r2, [r3, #12]
 800778c:	2380      	movs	r3, #128	; 0x80
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	4013      	ands	r3, r2
 8007792:	d00d      	beq.n	80077b0 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	0018      	movs	r0, r3
 8007798:	f7fc fab6 	bl	8003d08 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	22ff      	movs	r2, #255	; 0xff
 80077a4:	401a      	ands	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4915      	ldr	r1, [pc, #84]	; (8007800 <HAL_RTC_AlarmIRQHandler+0x90>)
 80077ac:	430a      	orrs	r2, r1
 80077ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	2380      	movs	r3, #128	; 0x80
 80077b8:	019b      	lsls	r3, r3, #6
 80077ba:	4013      	ands	r3, r2
 80077bc:	d014      	beq.n	80077e8 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	2380      	movs	r3, #128	; 0x80
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4013      	ands	r3, r2
 80077ca:	d00d      	beq.n	80077e8 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	0018      	movs	r0, r3
 80077d0:	f000 f8b2 	bl	8007938 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	22ff      	movs	r2, #255	; 0xff
 80077dc:	401a      	ands	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4908      	ldr	r1, [pc, #32]	; (8007804 <HAL_RTC_AlarmIRQHandler+0x94>)
 80077e4:	430a      	orrs	r2, r1
 80077e6:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80077e8:	4b07      	ldr	r3, [pc, #28]	; (8007808 <HAL_RTC_AlarmIRQHandler+0x98>)
 80077ea:	2280      	movs	r2, #128	; 0x80
 80077ec:	0292      	lsls	r2, r2, #10
 80077ee:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2221      	movs	r2, #33	; 0x21
 80077f4:	2101      	movs	r1, #1
 80077f6:	5499      	strb	r1, [r3, r2]
}
 80077f8:	46c0      	nop			; (mov r8, r8)
 80077fa:	46bd      	mov	sp, r7
 80077fc:	b002      	add	sp, #8
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	fffffe7f 	.word	0xfffffe7f
 8007804:	fffffd7f 	.word	0xfffffd7f
 8007808:	40010400 	.word	0x40010400

0800780c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	21a0      	movs	r1, #160	; 0xa0
 8007820:	438a      	bics	r2, r1
 8007822:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007824:	f7fd fb4a 	bl	8004ebc <HAL_GetTick>
 8007828:	0003      	movs	r3, r0
 800782a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800782c:	e00a      	b.n	8007844 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800782e:	f7fd fb45 	bl	8004ebc <HAL_GetTick>
 8007832:	0002      	movs	r2, r0
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	23fa      	movs	r3, #250	; 0xfa
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	429a      	cmp	r2, r3
 800783e:	d901      	bls.n	8007844 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	e006      	b.n	8007852 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	2220      	movs	r2, #32
 800784c:	4013      	ands	r3, r2
 800784e:	d0ee      	beq.n	800782e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	0018      	movs	r0, r3
 8007854:	46bd      	mov	sp, r7
 8007856:	b004      	add	sp, #16
 8007858:	bd80      	pop	{r7, pc}

0800785a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	2240      	movs	r2, #64	; 0x40
 800786a:	4013      	ands	r3, r2
 800786c:	d11a      	bne.n	80078a4 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2201      	movs	r2, #1
 8007874:	4252      	negs	r2, r2
 8007876:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007878:	f7fd fb20 	bl	8004ebc <HAL_GetTick>
 800787c:	0003      	movs	r3, r0
 800787e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007880:	e00a      	b.n	8007898 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007882:	f7fd fb1b 	bl	8004ebc <HAL_GetTick>
 8007886:	0002      	movs	r2, r0
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	1ad2      	subs	r2, r2, r3
 800788c:	23fa      	movs	r3, #250	; 0xfa
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	429a      	cmp	r2, r3
 8007892:	d901      	bls.n	8007898 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8007894:	2303      	movs	r3, #3
 8007896:	e006      	b.n	80078a6 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	2240      	movs	r2, #64	; 0x40
 80078a0:	4013      	ands	r3, r2
 80078a2:	d0ee      	beq.n	8007882 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	0018      	movs	r0, r3
 80078a8:	46bd      	mov	sp, r7
 80078aa:	b004      	add	sp, #16
 80078ac:	bd80      	pop	{r7, pc}

080078ae <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	0002      	movs	r2, r0
 80078b6:	1dfb      	adds	r3, r7, #7
 80078b8:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80078be:	230b      	movs	r3, #11
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	1dfa      	adds	r2, r7, #7
 80078c4:	7812      	ldrb	r2, [r2, #0]
 80078c6:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80078c8:	e008      	b.n	80078dc <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	3301      	adds	r3, #1
 80078ce:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80078d0:	220b      	movs	r2, #11
 80078d2:	18bb      	adds	r3, r7, r2
 80078d4:	18ba      	adds	r2, r7, r2
 80078d6:	7812      	ldrb	r2, [r2, #0]
 80078d8:	3a0a      	subs	r2, #10
 80078da:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80078dc:	210b      	movs	r1, #11
 80078de:	187b      	adds	r3, r7, r1
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b09      	cmp	r3, #9
 80078e4:	d8f1      	bhi.n	80078ca <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	187b      	adds	r3, r7, r1
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	b2db      	uxtb	r3, r3
}
 80078f6:	0018      	movs	r0, r3
 80078f8:	46bd      	mov	sp, r7
 80078fa:	b004      	add	sp, #16
 80078fc:	bd80      	pop	{r7, pc}

080078fe <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	0002      	movs	r2, r0
 8007906:	1dfb      	adds	r3, r7, #7
 8007908:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800790a:	1dfb      	adds	r3, r7, #7
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	091b      	lsrs	r3, r3, #4
 8007910:	b2db      	uxtb	r3, r3
 8007912:	001a      	movs	r2, r3
 8007914:	0013      	movs	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	189b      	adds	r3, r3, r2
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	b2da      	uxtb	r2, r3
 8007922:	1dfb      	adds	r3, r7, #7
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	210f      	movs	r1, #15
 8007928:	400b      	ands	r3, r1
 800792a:	b2db      	uxtb	r3, r3
 800792c:	18d3      	adds	r3, r2, r3
 800792e:	b2db      	uxtb	r3, r3
}
 8007930:	0018      	movs	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	b004      	add	sp, #16
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007940:	46c0      	nop			; (mov r8, r8)
 8007942:	46bd      	mov	sp, r7
 8007944:	b002      	add	sp, #8
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	e032      	b.n	80079c0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2239      	movs	r2, #57	; 0x39
 800795e:	5c9b      	ldrb	r3, [r3, r2]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d107      	bne.n	8007976 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2238      	movs	r2, #56	; 0x38
 800796a:	2100      	movs	r1, #0
 800796c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	0018      	movs	r0, r3
 8007972:	f7fc fe79 	bl	8004668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2239      	movs	r2, #57	; 0x39
 800797a:	2102      	movs	r1, #2
 800797c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3304      	adds	r3, #4
 8007986:	0019      	movs	r1, r3
 8007988:	0010      	movs	r0, r2
 800798a:	f000 fb7f 	bl	800808c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	223e      	movs	r2, #62	; 0x3e
 8007992:	2101      	movs	r1, #1
 8007994:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	223a      	movs	r2, #58	; 0x3a
 800799a:	2101      	movs	r1, #1
 800799c:	5499      	strb	r1, [r3, r2]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	223b      	movs	r2, #59	; 0x3b
 80079a2:	2101      	movs	r1, #1
 80079a4:	5499      	strb	r1, [r3, r2]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	223c      	movs	r2, #60	; 0x3c
 80079aa:	2101      	movs	r1, #1
 80079ac:	5499      	strb	r1, [r3, r2]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	223d      	movs	r2, #61	; 0x3d
 80079b2:	2101      	movs	r1, #1
 80079b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2239      	movs	r2, #57	; 0x39
 80079ba:	2101      	movs	r1, #1
 80079bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	0018      	movs	r0, r3
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b002      	add	sp, #8
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2239      	movs	r2, #57	; 0x39
 80079d4:	5c9b      	ldrb	r3, [r3, r2]
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d001      	beq.n	80079e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e03b      	b.n	8007a58 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2239      	movs	r2, #57	; 0x39
 80079e4:	2102      	movs	r1, #2
 80079e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	68da      	ldr	r2, [r3, #12]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2101      	movs	r1, #1
 80079f4:	430a      	orrs	r2, r1
 80079f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	2380      	movs	r3, #128	; 0x80
 80079fe:	05db      	lsls	r3, r3, #23
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d00e      	beq.n	8007a22 <HAL_TIM_Base_Start_IT+0x5a>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a15      	ldr	r2, [pc, #84]	; (8007a60 <HAL_TIM_Base_Start_IT+0x98>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d009      	beq.n	8007a22 <HAL_TIM_Base_Start_IT+0x5a>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a14      	ldr	r2, [pc, #80]	; (8007a64 <HAL_TIM_Base_Start_IT+0x9c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d004      	beq.n	8007a22 <HAL_TIM_Base_Start_IT+0x5a>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a12      	ldr	r2, [pc, #72]	; (8007a68 <HAL_TIM_Base_Start_IT+0xa0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d111      	bne.n	8007a46 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	2207      	movs	r2, #7
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b06      	cmp	r3, #6
 8007a32:	d010      	beq.n	8007a56 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2101      	movs	r1, #1
 8007a40:	430a      	orrs	r2, r1
 8007a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a44:	e007      	b.n	8007a56 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2101      	movs	r1, #1
 8007a52:	430a      	orrs	r2, r1
 8007a54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	0018      	movs	r0, r3
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	b004      	add	sp, #16
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	40000400 	.word	0x40000400
 8007a64:	40010800 	.word	0x40010800
 8007a68:	40011400 	.word	0x40011400

08007a6c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2101      	movs	r1, #1
 8007a80:	438a      	bics	r2, r1
 8007a82:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	4a0a      	ldr	r2, [pc, #40]	; (8007ab4 <HAL_TIM_Base_Stop_IT+0x48>)
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	d107      	bne.n	8007aa0 <HAL_TIM_Base_Stop_IT+0x34>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2101      	movs	r1, #1
 8007a9c:	438a      	bics	r2, r1
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2239      	movs	r2, #57	; 0x39
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	0018      	movs	r0, r3
 8007aac:	46bd      	mov	sp, r7
 8007aae:	b002      	add	sp, #8
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	00001111 	.word	0x00001111

08007ab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d101      	bne.n	8007aca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e032      	b.n	8007b30 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2239      	movs	r2, #57	; 0x39
 8007ace:	5c9b      	ldrb	r3, [r3, r2]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d107      	bne.n	8007ae6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2238      	movs	r2, #56	; 0x38
 8007ada:	2100      	movs	r1, #0
 8007adc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f000 f829 	bl	8007b38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2239      	movs	r2, #57	; 0x39
 8007aea:	2102      	movs	r1, #2
 8007aec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3304      	adds	r3, #4
 8007af6:	0019      	movs	r1, r3
 8007af8:	0010      	movs	r0, r2
 8007afa:	f000 fac7 	bl	800808c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	223e      	movs	r2, #62	; 0x3e
 8007b02:	2101      	movs	r1, #1
 8007b04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	223a      	movs	r2, #58	; 0x3a
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	5499      	strb	r1, [r3, r2]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	223b      	movs	r2, #59	; 0x3b
 8007b12:	2101      	movs	r1, #1
 8007b14:	5499      	strb	r1, [r3, r2]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	223c      	movs	r2, #60	; 0x3c
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	5499      	strb	r1, [r3, r2]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	223d      	movs	r2, #61	; 0x3d
 8007b22:	2101      	movs	r1, #1
 8007b24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2239      	movs	r2, #57	; 0x39
 8007b2a:	2101      	movs	r1, #1
 8007b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	0018      	movs	r0, r3
 8007b32:	46bd      	mov	sp, r7
 8007b34:	b002      	add	sp, #8
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b40:	46c0      	nop			; (mov r8, r8)
 8007b42:	46bd      	mov	sp, r7
 8007b44:	b002      	add	sp, #8
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2202      	movs	r2, #2
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d124      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	2202      	movs	r2, #2
 8007b66:	4013      	ands	r3, r2
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d11d      	bne.n	8007ba8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2203      	movs	r2, #3
 8007b72:	4252      	negs	r2, r2
 8007b74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	2203      	movs	r2, #3
 8007b84:	4013      	ands	r3, r2
 8007b86:	d004      	beq.n	8007b92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f000 fa66 	bl	800805c <HAL_TIM_IC_CaptureCallback>
 8007b90:	e007      	b.n	8007ba2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	0018      	movs	r0, r3
 8007b96:	f000 fa59 	bl	800804c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f000 fa65 	bl	800806c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2204      	movs	r2, #4
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d125      	bne.n	8007c02 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	2204      	movs	r2, #4
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d11e      	bne.n	8007c02 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2205      	movs	r2, #5
 8007bca:	4252      	negs	r2, r2
 8007bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699a      	ldr	r2, [r3, #24]
 8007bda:	23c0      	movs	r3, #192	; 0xc0
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4013      	ands	r3, r2
 8007be0:	d004      	beq.n	8007bec <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	0018      	movs	r0, r3
 8007be6:	f000 fa39 	bl	800805c <HAL_TIM_IC_CaptureCallback>
 8007bea:	e007      	b.n	8007bfc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f000 fa2c 	bl	800804c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f000 fa38 	bl	800806c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2208      	movs	r2, #8
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	2b08      	cmp	r3, #8
 8007c0e:	d124      	bne.n	8007c5a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2208      	movs	r2, #8
 8007c18:	4013      	ands	r3, r2
 8007c1a:	2b08      	cmp	r3, #8
 8007c1c:	d11d      	bne.n	8007c5a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2209      	movs	r2, #9
 8007c24:	4252      	negs	r2, r2
 8007c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2204      	movs	r2, #4
 8007c2c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	2203      	movs	r2, #3
 8007c36:	4013      	ands	r3, r2
 8007c38:	d004      	beq.n	8007c44 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	0018      	movs	r0, r3
 8007c3e:	f000 fa0d 	bl	800805c <HAL_TIM_IC_CaptureCallback>
 8007c42:	e007      	b.n	8007c54 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	0018      	movs	r0, r3
 8007c48:	f000 fa00 	bl	800804c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	0018      	movs	r0, r3
 8007c50:	f000 fa0c 	bl	800806c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	2210      	movs	r2, #16
 8007c62:	4013      	ands	r3, r2
 8007c64:	2b10      	cmp	r3, #16
 8007c66:	d125      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	2210      	movs	r2, #16
 8007c70:	4013      	ands	r3, r2
 8007c72:	2b10      	cmp	r3, #16
 8007c74:	d11e      	bne.n	8007cb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2211      	movs	r2, #17
 8007c7c:	4252      	negs	r2, r2
 8007c7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2208      	movs	r2, #8
 8007c84:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69da      	ldr	r2, [r3, #28]
 8007c8c:	23c0      	movs	r3, #192	; 0xc0
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4013      	ands	r3, r2
 8007c92:	d004      	beq.n	8007c9e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	0018      	movs	r0, r3
 8007c98:	f000 f9e0 	bl	800805c <HAL_TIM_IC_CaptureCallback>
 8007c9c:	e007      	b.n	8007cae <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f000 f9d3 	bl	800804c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f000 f9df 	bl	800806c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d10f      	bne.n	8007ce2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	4013      	ands	r3, r2
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d108      	bne.n	8007ce2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	4252      	negs	r2, r2
 8007cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	0018      	movs	r0, r3
 8007cde:	f7fc f869 	bl	8003db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	691b      	ldr	r3, [r3, #16]
 8007ce8:	2240      	movs	r2, #64	; 0x40
 8007cea:	4013      	ands	r3, r2
 8007cec:	2b40      	cmp	r3, #64	; 0x40
 8007cee:	d10f      	bne.n	8007d10 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	2240      	movs	r2, #64	; 0x40
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b40      	cmp	r3, #64	; 0x40
 8007cfc:	d108      	bne.n	8007d10 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2241      	movs	r2, #65	; 0x41
 8007d04:	4252      	negs	r2, r2
 8007d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f000 f9b6 	bl	800807c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d10:	46c0      	nop			; (mov r8, r8)
 8007d12:	46bd      	mov	sp, r7
 8007d14:	b002      	add	sp, #8
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d24:	2317      	movs	r3, #23
 8007d26:	18fb      	adds	r3, r7, r3
 8007d28:	2200      	movs	r2, #0
 8007d2a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2238      	movs	r2, #56	; 0x38
 8007d30:	5c9b      	ldrb	r3, [r3, r2]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_TIM_PWM_ConfigChannel+0x22>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e0ad      	b.n	8007e96 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2238      	movs	r2, #56	; 0x38
 8007d3e:	2101      	movs	r1, #1
 8007d40:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b0c      	cmp	r3, #12
 8007d46:	d100      	bne.n	8007d4a <HAL_TIM_PWM_ConfigChannel+0x32>
 8007d48:	e076      	b.n	8007e38 <HAL_TIM_PWM_ConfigChannel+0x120>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b0c      	cmp	r3, #12
 8007d4e:	d900      	bls.n	8007d52 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8007d50:	e095      	b.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x166>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d04e      	beq.n	8007df6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	d900      	bls.n	8007d60 <HAL_TIM_PWM_ConfigChannel+0x48>
 8007d5e:	e08e      	b.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x166>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_TIM_PWM_ConfigChannel+0x56>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b04      	cmp	r3, #4
 8007d6a:	d021      	beq.n	8007db0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8007d6c:	e087      	b.n	8007e7e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	0011      	movs	r1, r2
 8007d76:	0018      	movs	r0, r3
 8007d78:	f000 f9e6 	bl	8008148 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699a      	ldr	r2, [r3, #24]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2108      	movs	r1, #8
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	699a      	ldr	r2, [r3, #24]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2104      	movs	r1, #4
 8007d98:	438a      	bics	r2, r1
 8007d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6999      	ldr	r1, [r3, #24]
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	619a      	str	r2, [r3, #24]
      break;
 8007dae:	e06b      	b.n	8007e88 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	0011      	movs	r1, r2
 8007db8:	0018      	movs	r0, r3
 8007dba:	f000 fa01 	bl	80081c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	699a      	ldr	r2, [r3, #24]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2180      	movs	r1, #128	; 0x80
 8007dca:	0109      	lsls	r1, r1, #4
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699a      	ldr	r2, [r3, #24]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4931      	ldr	r1, [pc, #196]	; (8007ea0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007ddc:	400a      	ands	r2, r1
 8007dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6999      	ldr	r1, [r3, #24]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	021a      	lsls	r2, r3, #8
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	619a      	str	r2, [r3, #24]
      break;
 8007df4:	e048      	b.n	8007e88 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	0011      	movs	r1, r2
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f000 fa20 	bl	8008244 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69da      	ldr	r2, [r3, #28]
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2108      	movs	r1, #8
 8007e10:	430a      	orrs	r2, r1
 8007e12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	69da      	ldr	r2, [r3, #28]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2104      	movs	r1, #4
 8007e20:	438a      	bics	r2, r1
 8007e22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69d9      	ldr	r1, [r3, #28]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	61da      	str	r2, [r3, #28]
      break;
 8007e36:	e027      	b.n	8007e88 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	0011      	movs	r1, r2
 8007e40:	0018      	movs	r0, r3
 8007e42:	f000 fa3f 	bl	80082c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69da      	ldr	r2, [r3, #28]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2180      	movs	r1, #128	; 0x80
 8007e52:	0109      	lsls	r1, r1, #4
 8007e54:	430a      	orrs	r2, r1
 8007e56:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	69da      	ldr	r2, [r3, #28]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	490f      	ldr	r1, [pc, #60]	; (8007ea0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8007e64:	400a      	ands	r2, r1
 8007e66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	69d9      	ldr	r1, [r3, #28]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	021a      	lsls	r2, r3, #8
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	61da      	str	r2, [r3, #28]
      break;
 8007e7c:	e004      	b.n	8007e88 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8007e7e:	2317      	movs	r3, #23
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	2201      	movs	r2, #1
 8007e84:	701a      	strb	r2, [r3, #0]
      break;
 8007e86:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2238      	movs	r2, #56	; 0x38
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	5499      	strb	r1, [r3, r2]

  return status;
 8007e90:	2317      	movs	r3, #23
 8007e92:	18fb      	adds	r3, r7, r3
 8007e94:	781b      	ldrb	r3, [r3, #0]
}
 8007e96:	0018      	movs	r0, r3
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	b006      	add	sp, #24
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	fffffbff 	.word	0xfffffbff

08007ea4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eae:	230f      	movs	r3, #15
 8007eb0:	18fb      	adds	r3, r7, r3
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2238      	movs	r2, #56	; 0x38
 8007eba:	5c9b      	ldrb	r3, [r3, r2]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d101      	bne.n	8007ec4 <HAL_TIM_ConfigClockSource+0x20>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e0bc      	b.n	800803e <HAL_TIM_ConfigClockSource+0x19a>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2238      	movs	r2, #56	; 0x38
 8007ec8:	2101      	movs	r1, #1
 8007eca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2239      	movs	r2, #57	; 0x39
 8007ed0:	2102      	movs	r1, #2
 8007ed2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2277      	movs	r2, #119	; 0x77
 8007ee0:	4393      	bics	r3, r2
 8007ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4a58      	ldr	r2, [pc, #352]	; (8008048 <HAL_TIM_ConfigClockSource+0x1a4>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2280      	movs	r2, #128	; 0x80
 8007efa:	0192      	lsls	r2, r2, #6
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d040      	beq.n	8007f82 <HAL_TIM_ConfigClockSource+0xde>
 8007f00:	2280      	movs	r2, #128	; 0x80
 8007f02:	0192      	lsls	r2, r2, #6
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d900      	bls.n	8007f0a <HAL_TIM_ConfigClockSource+0x66>
 8007f08:	e088      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>
 8007f0a:	2280      	movs	r2, #128	; 0x80
 8007f0c:	0152      	lsls	r2, r2, #5
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d100      	bne.n	8007f14 <HAL_TIM_ConfigClockSource+0x70>
 8007f12:	e088      	b.n	8008026 <HAL_TIM_ConfigClockSource+0x182>
 8007f14:	2280      	movs	r2, #128	; 0x80
 8007f16:	0152      	lsls	r2, r2, #5
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d900      	bls.n	8007f1e <HAL_TIM_ConfigClockSource+0x7a>
 8007f1c:	e07e      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>
 8007f1e:	2b70      	cmp	r3, #112	; 0x70
 8007f20:	d018      	beq.n	8007f54 <HAL_TIM_ConfigClockSource+0xb0>
 8007f22:	d900      	bls.n	8007f26 <HAL_TIM_ConfigClockSource+0x82>
 8007f24:	e07a      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>
 8007f26:	2b60      	cmp	r3, #96	; 0x60
 8007f28:	d04f      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0x126>
 8007f2a:	d900      	bls.n	8007f2e <HAL_TIM_ConfigClockSource+0x8a>
 8007f2c:	e076      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>
 8007f2e:	2b50      	cmp	r3, #80	; 0x50
 8007f30:	d03b      	beq.n	8007faa <HAL_TIM_ConfigClockSource+0x106>
 8007f32:	d900      	bls.n	8007f36 <HAL_TIM_ConfigClockSource+0x92>
 8007f34:	e072      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>
 8007f36:	2b40      	cmp	r3, #64	; 0x40
 8007f38:	d057      	beq.n	8007fea <HAL_TIM_ConfigClockSource+0x146>
 8007f3a:	d900      	bls.n	8007f3e <HAL_TIM_ConfigClockSource+0x9a>
 8007f3c:	e06e      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>
 8007f3e:	2b30      	cmp	r3, #48	; 0x30
 8007f40:	d063      	beq.n	800800a <HAL_TIM_ConfigClockSource+0x166>
 8007f42:	d86b      	bhi.n	800801c <HAL_TIM_ConfigClockSource+0x178>
 8007f44:	2b20      	cmp	r3, #32
 8007f46:	d060      	beq.n	800800a <HAL_TIM_ConfigClockSource+0x166>
 8007f48:	d868      	bhi.n	800801c <HAL_TIM_ConfigClockSource+0x178>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d05d      	beq.n	800800a <HAL_TIM_ConfigClockSource+0x166>
 8007f4e:	2b10      	cmp	r3, #16
 8007f50:	d05b      	beq.n	800800a <HAL_TIM_ConfigClockSource+0x166>
 8007f52:	e063      	b.n	800801c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6818      	ldr	r0, [r3, #0]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	6899      	ldr	r1, [r3, #8]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	f000 fa6e 	bl	8008444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2277      	movs	r2, #119	; 0x77
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	609a      	str	r2, [r3, #8]
      break;
 8007f80:	e052      	b.n	8008028 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	6899      	ldr	r1, [r3, #8]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f000 fa57 	bl	8008444 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2180      	movs	r1, #128	; 0x80
 8007fa2:	01c9      	lsls	r1, r1, #7
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	609a      	str	r2, [r3, #8]
      break;
 8007fa8:	e03e      	b.n	8008028 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	6859      	ldr	r1, [r3, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	001a      	movs	r2, r3
 8007fb8:	f000 f9ca 	bl	8008350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2150      	movs	r1, #80	; 0x50
 8007fc2:	0018      	movs	r0, r3
 8007fc4:	f000 fa24 	bl	8008410 <TIM_ITRx_SetConfig>
      break;
 8007fc8:	e02e      	b.n	8008028 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6818      	ldr	r0, [r3, #0]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	6859      	ldr	r1, [r3, #4]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	001a      	movs	r2, r3
 8007fd8:	f000 f9e8 	bl	80083ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2160      	movs	r1, #96	; 0x60
 8007fe2:	0018      	movs	r0, r3
 8007fe4:	f000 fa14 	bl	8008410 <TIM_ITRx_SetConfig>
      break;
 8007fe8:	e01e      	b.n	8008028 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6818      	ldr	r0, [r3, #0]
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	6859      	ldr	r1, [r3, #4]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	001a      	movs	r2, r3
 8007ff8:	f000 f9aa 	bl	8008350 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2140      	movs	r1, #64	; 0x40
 8008002:	0018      	movs	r0, r3
 8008004:	f000 fa04 	bl	8008410 <TIM_ITRx_SetConfig>
      break;
 8008008:	e00e      	b.n	8008028 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	0019      	movs	r1, r3
 8008014:	0010      	movs	r0, r2
 8008016:	f000 f9fb 	bl	8008410 <TIM_ITRx_SetConfig>
      break;
 800801a:	e005      	b.n	8008028 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800801c:	230f      	movs	r3, #15
 800801e:	18fb      	adds	r3, r7, r3
 8008020:	2201      	movs	r2, #1
 8008022:	701a      	strb	r2, [r3, #0]
      break;
 8008024:	e000      	b.n	8008028 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8008026:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2239      	movs	r2, #57	; 0x39
 800802c:	2101      	movs	r1, #1
 800802e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2238      	movs	r2, #56	; 0x38
 8008034:	2100      	movs	r1, #0
 8008036:	5499      	strb	r1, [r3, r2]

  return status;
 8008038:	230f      	movs	r3, #15
 800803a:	18fb      	adds	r3, r7, r3
 800803c:	781b      	ldrb	r3, [r3, #0]
}
 800803e:	0018      	movs	r0, r3
 8008040:	46bd      	mov	sp, r7
 8008042:	b004      	add	sp, #16
 8008044:	bd80      	pop	{r7, pc}
 8008046:	46c0      	nop			; (mov r8, r8)
 8008048:	ffff00ff 	.word	0xffff00ff

0800804c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008054:	46c0      	nop			; (mov r8, r8)
 8008056:	46bd      	mov	sp, r7
 8008058:	b002      	add	sp, #8
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008064:	46c0      	nop			; (mov r8, r8)
 8008066:	46bd      	mov	sp, r7
 8008068:	b002      	add	sp, #8
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008074:	46c0      	nop			; (mov r8, r8)
 8008076:	46bd      	mov	sp, r7
 8008078:	b002      	add	sp, #8
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008084:	46c0      	nop			; (mov r8, r8)
 8008086:	46bd      	mov	sp, r7
 8008088:	b002      	add	sp, #8
 800808a:	bd80      	pop	{r7, pc}

0800808c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	2380      	movs	r3, #128	; 0x80
 80080a0:	05db      	lsls	r3, r3, #23
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d00b      	beq.n	80080be <TIM_Base_SetConfig+0x32>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a23      	ldr	r2, [pc, #140]	; (8008138 <TIM_Base_SetConfig+0xac>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d007      	beq.n	80080be <TIM_Base_SetConfig+0x32>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a22      	ldr	r2, [pc, #136]	; (800813c <TIM_Base_SetConfig+0xb0>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d003      	beq.n	80080be <TIM_Base_SetConfig+0x32>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a21      	ldr	r2, [pc, #132]	; (8008140 <TIM_Base_SetConfig+0xb4>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d108      	bne.n	80080d0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2270      	movs	r2, #112	; 0x70
 80080c2:	4393      	bics	r3, r2
 80080c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	2380      	movs	r3, #128	; 0x80
 80080d4:	05db      	lsls	r3, r3, #23
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d00b      	beq.n	80080f2 <TIM_Base_SetConfig+0x66>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a16      	ldr	r2, [pc, #88]	; (8008138 <TIM_Base_SetConfig+0xac>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d007      	beq.n	80080f2 <TIM_Base_SetConfig+0x66>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a15      	ldr	r2, [pc, #84]	; (800813c <TIM_Base_SetConfig+0xb0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d003      	beq.n	80080f2 <TIM_Base_SetConfig+0x66>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a14      	ldr	r2, [pc, #80]	; (8008140 <TIM_Base_SetConfig+0xb4>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d108      	bne.n	8008104 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4a13      	ldr	r2, [pc, #76]	; (8008144 <TIM_Base_SetConfig+0xb8>)
 80080f6:	4013      	ands	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2280      	movs	r2, #128	; 0x80
 8008108:	4393      	bics	r3, r2
 800810a:	001a      	movs	r2, r3
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	689a      	ldr	r2, [r3, #8]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	615a      	str	r2, [r3, #20]
}
 8008130:	46c0      	nop			; (mov r8, r8)
 8008132:	46bd      	mov	sp, r7
 8008134:	b004      	add	sp, #16
 8008136:	bd80      	pop	{r7, pc}
 8008138:	40000400 	.word	0x40000400
 800813c:	40010800 	.word	0x40010800
 8008140:	40011400 	.word	0x40011400
 8008144:	fffffcff 	.word	0xfffffcff

08008148 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b086      	sub	sp, #24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	2201      	movs	r2, #1
 8008158:	4393      	bics	r3, r2
 800815a:	001a      	movs	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2270      	movs	r2, #112	; 0x70
 8008176:	4393      	bics	r3, r2
 8008178:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2203      	movs	r2, #3
 800817e:	4393      	bics	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2202      	movs	r2, #2
 8008190:	4393      	bics	r3, r2
 8008192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	4313      	orrs	r3, r2
 800819c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	697a      	ldr	r2, [r7, #20]
 80081b6:	621a      	str	r2, [r3, #32]
}
 80081b8:	46c0      	nop			; (mov r8, r8)
 80081ba:	46bd      	mov	sp, r7
 80081bc:	b006      	add	sp, #24
 80081be:	bd80      	pop	{r7, pc}

080081c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	2210      	movs	r2, #16
 80081d0:	4393      	bics	r3, r2
 80081d2:	001a      	movs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	4a13      	ldr	r2, [pc, #76]	; (800823c <TIM_OC2_SetConfig+0x7c>)
 80081ee:	4013      	ands	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4a12      	ldr	r2, [pc, #72]	; (8008240 <TIM_OC2_SetConfig+0x80>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2220      	movs	r2, #32
 800820a:	4393      	bics	r3, r2
 800820c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	4313      	orrs	r3, r2
 8008218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	685a      	ldr	r2, [r3, #4]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	621a      	str	r2, [r3, #32]
}
 8008234:	46c0      	nop			; (mov r8, r8)
 8008236:	46bd      	mov	sp, r7
 8008238:	b006      	add	sp, #24
 800823a:	bd80      	pop	{r7, pc}
 800823c:	ffff8fff 	.word	0xffff8fff
 8008240:	fffffcff 	.word	0xfffffcff

08008244 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	4a1a      	ldr	r2, [pc, #104]	; (80082bc <TIM_OC3_SetConfig+0x78>)
 8008254:	401a      	ands	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2270      	movs	r2, #112	; 0x70
 8008270:	4393      	bics	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2203      	movs	r2, #3
 8008278:	4393      	bics	r3, r2
 800827a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	4a0d      	ldr	r2, [pc, #52]	; (80082c0 <TIM_OC3_SetConfig+0x7c>)
 800828a:	4013      	ands	r3, r2
 800828c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	021b      	lsls	r3, r3, #8
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	621a      	str	r2, [r3, #32]
}
 80082b4:	46c0      	nop			; (mov r8, r8)
 80082b6:	46bd      	mov	sp, r7
 80082b8:	b006      	add	sp, #24
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	fffffeff 	.word	0xfffffeff
 80082c0:	fffffdff 	.word	0xfffffdff

080082c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b086      	sub	sp, #24
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a1b      	ldr	r3, [r3, #32]
 80082d2:	4a1b      	ldr	r2, [pc, #108]	; (8008340 <TIM_OC4_SetConfig+0x7c>)
 80082d4:	401a      	ands	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69db      	ldr	r3, [r3, #28]
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4a15      	ldr	r2, [pc, #84]	; (8008344 <TIM_OC4_SetConfig+0x80>)
 80082f0:	4013      	ands	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4a14      	ldr	r2, [pc, #80]	; (8008348 <TIM_OC4_SetConfig+0x84>)
 80082f8:	4013      	ands	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	021b      	lsls	r3, r3, #8
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4313      	orrs	r3, r2
 8008306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	4a10      	ldr	r2, [pc, #64]	; (800834c <TIM_OC4_SetConfig+0x88>)
 800830c:	4013      	ands	r3, r2
 800830e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	031b      	lsls	r3, r3, #12
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	4313      	orrs	r3, r2
 800831a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	621a      	str	r2, [r3, #32]
}
 8008336:	46c0      	nop			; (mov r8, r8)
 8008338:	46bd      	mov	sp, r7
 800833a:	b006      	add	sp, #24
 800833c:	bd80      	pop	{r7, pc}
 800833e:	46c0      	nop			; (mov r8, r8)
 8008340:	ffffefff 	.word	0xffffefff
 8008344:	ffff8fff 	.word	0xffff8fff
 8008348:	fffffcff 	.word	0xfffffcff
 800834c:	ffffdfff 	.word	0xffffdfff

08008350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a1b      	ldr	r3, [r3, #32]
 8008360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	2201      	movs	r2, #1
 8008368:	4393      	bics	r3, r2
 800836a:	001a      	movs	r2, r3
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	22f0      	movs	r2, #240	; 0xf0
 800837a:	4393      	bics	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	011b      	lsls	r3, r3, #4
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	4313      	orrs	r3, r2
 8008386:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	220a      	movs	r2, #10
 800838c:	4393      	bics	r3, r2
 800838e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	4313      	orrs	r3, r2
 8008396:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	621a      	str	r2, [r3, #32]
}
 80083a4:	46c0      	nop			; (mov r8, r8)
 80083a6:	46bd      	mov	sp, r7
 80083a8:	b006      	add	sp, #24
 80083aa:	bd80      	pop	{r7, pc}

080083ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	2210      	movs	r2, #16
 80083be:	4393      	bics	r3, r2
 80083c0:	001a      	movs	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	4a0d      	ldr	r2, [pc, #52]	; (800840c <TIM_TI2_ConfigInputStage+0x60>)
 80083d6:	4013      	ands	r3, r2
 80083d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	031b      	lsls	r3, r3, #12
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	22a0      	movs	r2, #160	; 0xa0
 80083e8:	4393      	bics	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	697a      	ldr	r2, [r7, #20]
 80083fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	621a      	str	r2, [r3, #32]
}
 8008402:	46c0      	nop			; (mov r8, r8)
 8008404:	46bd      	mov	sp, r7
 8008406:	b006      	add	sp, #24
 8008408:	bd80      	pop	{r7, pc}
 800840a:	46c0      	nop			; (mov r8, r8)
 800840c:	ffff0fff 	.word	0xffff0fff

08008410 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2270      	movs	r2, #112	; 0x70
 8008424:	4393      	bics	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4313      	orrs	r3, r2
 800842e:	2207      	movs	r2, #7
 8008430:	4313      	orrs	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	609a      	str	r2, [r3, #8]
}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	46bd      	mov	sp, r7
 800843e:	b004      	add	sp, #16
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	4a09      	ldr	r2, [pc, #36]	; (8008480 <TIM_ETR_SetConfig+0x3c>)
 800845c:	4013      	ands	r3, r2
 800845e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	021a      	lsls	r2, r3, #8
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	431a      	orrs	r2, r3
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4313      	orrs	r3, r2
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	609a      	str	r2, [r3, #8]
}
 8008478:	46c0      	nop			; (mov r8, r8)
 800847a:	46bd      	mov	sp, r7
 800847c:	b006      	add	sp, #24
 800847e:	bd80      	pop	{r7, pc}
 8008480:	ffff00ff 	.word	0xffff00ff

08008484 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2238      	movs	r2, #56	; 0x38
 8008492:	5c9b      	ldrb	r3, [r3, r2]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d101      	bne.n	800849c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008498:	2302      	movs	r3, #2
 800849a:	e047      	b.n	800852c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2238      	movs	r2, #56	; 0x38
 80084a0:	2101      	movs	r1, #1
 80084a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2239      	movs	r2, #57	; 0x39
 80084a8:	2102      	movs	r1, #2
 80084aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2270      	movs	r2, #112	; 0x70
 80084c0:	4393      	bics	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	2380      	movs	r3, #128	; 0x80
 80084dc:	05db      	lsls	r3, r3, #23
 80084de:	429a      	cmp	r2, r3
 80084e0:	d00e      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a13      	ldr	r2, [pc, #76]	; (8008534 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d009      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a11      	ldr	r2, [pc, #68]	; (8008538 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a10      	ldr	r2, [pc, #64]	; (800853c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d10c      	bne.n	800851a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2280      	movs	r2, #128	; 0x80
 8008504:	4393      	bics	r3, r2
 8008506:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	4313      	orrs	r3, r2
 8008510:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68ba      	ldr	r2, [r7, #8]
 8008518:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2239      	movs	r2, #57	; 0x39
 800851e:	2101      	movs	r1, #1
 8008520:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2238      	movs	r2, #56	; 0x38
 8008526:	2100      	movs	r1, #0
 8008528:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	0018      	movs	r0, r3
 800852e:	46bd      	mov	sp, r7
 8008530:	b004      	add	sp, #16
 8008532:	bd80      	pop	{r7, pc}
 8008534:	40000400 	.word	0x40000400
 8008538:	40010800 	.word	0x40010800
 800853c:	40011400 	.word	0x40011400

08008540 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e044      	b.n	80085dc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008556:	2b00      	cmp	r3, #0
 8008558:	d107      	bne.n	800856a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2274      	movs	r2, #116	; 0x74
 800855e:	2100      	movs	r1, #0
 8008560:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	0018      	movs	r0, r3
 8008566:	f7fc f98b 	bl	8004880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2224      	movs	r2, #36	; 0x24
 800856e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2101      	movs	r1, #1
 800857c:	438a      	bics	r2, r1
 800857e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	0018      	movs	r0, r3
 8008584:	f000 fc06 	bl	8008d94 <UART_SetConfig>
 8008588:	0003      	movs	r3, r0
 800858a:	2b01      	cmp	r3, #1
 800858c:	d101      	bne.n	8008592 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e024      	b.n	80085dc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	0018      	movs	r0, r3
 800859e:	f000 feb7 	bl	8009310 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	490d      	ldr	r1, [pc, #52]	; (80085e4 <HAL_UART_Init+0xa4>)
 80085ae:	400a      	ands	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	212a      	movs	r1, #42	; 0x2a
 80085be:	438a      	bics	r2, r1
 80085c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2101      	movs	r1, #1
 80085ce:	430a      	orrs	r2, r1
 80085d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	0018      	movs	r0, r3
 80085d6:	f000 ff4f 	bl	8009478 <UART_CheckIdleState>
 80085da:	0003      	movs	r3, r0
}
 80085dc:	0018      	movs	r0, r3
 80085de:	46bd      	mov	sp, r7
 80085e0:	b002      	add	sp, #8
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	ffffb7ff 	.word	0xffffb7ff

080085e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	1dbb      	adds	r3, r7, #6
 80085f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085fa:	2b20      	cmp	r3, #32
 80085fc:	d000      	beq.n	8008600 <HAL_UART_Transmit_IT+0x18>
 80085fe:	e06a      	b.n	80086d6 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <HAL_UART_Transmit_IT+0x26>
 8008606:	1dbb      	adds	r3, r7, #6
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e062      	b.n	80086d8 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	689a      	ldr	r2, [r3, #8]
 8008616:	2380      	movs	r3, #128	; 0x80
 8008618:	015b      	lsls	r3, r3, #5
 800861a:	429a      	cmp	r2, r3
 800861c:	d109      	bne.n	8008632 <HAL_UART_Transmit_IT+0x4a>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d105      	bne.n	8008632 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2201      	movs	r2, #1
 800862a:	4013      	ands	r3, r2
 800862c:	d001      	beq.n	8008632 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e052      	b.n	80086d8 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2274      	movs	r2, #116	; 0x74
 8008636:	5c9b      	ldrb	r3, [r3, r2]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d101      	bne.n	8008640 <HAL_UART_Transmit_IT+0x58>
 800863c:	2302      	movs	r3, #2
 800863e:	e04b      	b.n	80086d8 <HAL_UART_Transmit_IT+0xf0>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2274      	movs	r2, #116	; 0x74
 8008644:	2101      	movs	r1, #1
 8008646:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	1dba      	adds	r2, r7, #6
 8008652:	2150      	movs	r1, #80	; 0x50
 8008654:	8812      	ldrh	r2, [r2, #0]
 8008656:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	1dba      	adds	r2, r7, #6
 800865c:	2152      	movs	r1, #82	; 0x52
 800865e:	8812      	ldrh	r2, [r2, #0]
 8008660:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2280      	movs	r2, #128	; 0x80
 800866c:	2100      	movs	r1, #0
 800866e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2221      	movs	r2, #33	; 0x21
 8008674:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	2380      	movs	r3, #128	; 0x80
 800867c:	015b      	lsls	r3, r3, #5
 800867e:	429a      	cmp	r2, r3
 8008680:	d107      	bne.n	8008692 <HAL_UART_Transmit_IT+0xaa>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d103      	bne.n	8008692 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4a14      	ldr	r2, [pc, #80]	; (80086e0 <HAL_UART_Transmit_IT+0xf8>)
 800868e:	669a      	str	r2, [r3, #104]	; 0x68
 8008690:	e002      	b.n	8008698 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	4a13      	ldr	r2, [pc, #76]	; (80086e4 <HAL_UART_Transmit_IT+0xfc>)
 8008696:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2274      	movs	r2, #116	; 0x74
 800869c:	2100      	movs	r1, #0
 800869e:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086a0:	f3ef 8310 	mrs	r3, PRIMASK
 80086a4:	613b      	str	r3, [r7, #16]
  return(result);
 80086a6:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80086a8:	61fb      	str	r3, [r7, #28]
 80086aa:	2301      	movs	r3, #1
 80086ac:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f383 8810 	msr	PRIMASK, r3
}
 80086b4:	46c0      	nop			; (mov r8, r8)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2180      	movs	r1, #128	; 0x80
 80086c2:	430a      	orrs	r2, r1
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ca:	69bb      	ldr	r3, [r7, #24]
 80086cc:	f383 8810 	msr	PRIMASK, r3
}
 80086d0:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e000      	b.n	80086d8 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 80086d6:	2302      	movs	r3, #2
  }
}
 80086d8:	0018      	movs	r0, r3
 80086da:	46bd      	mov	sp, r7
 80086dc:	b008      	add	sp, #32
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	08009995 	.word	0x08009995
 80086e4:	080098e3 	.word	0x080098e3

080086e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b088      	sub	sp, #32
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	1dbb      	adds	r3, r7, #6
 80086f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086fa:	2b20      	cmp	r3, #32
 80086fc:	d155      	bne.n	80087aa <HAL_UART_Receive_IT+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d003      	beq.n	800870c <HAL_UART_Receive_IT+0x24>
 8008704:	1dbb      	adds	r3, r7, #6
 8008706:	881b      	ldrh	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d101      	bne.n	8008710 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e04d      	b.n	80087ac <HAL_UART_Receive_IT+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	2380      	movs	r3, #128	; 0x80
 8008716:	015b      	lsls	r3, r3, #5
 8008718:	429a      	cmp	r2, r3
 800871a:	d109      	bne.n	8008730 <HAL_UART_Receive_IT+0x48>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d105      	bne.n	8008730 <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2201      	movs	r2, #1
 8008728:	4013      	ands	r3, r2
 800872a:	d001      	beq.n	8008730 <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e03d      	b.n	80087ac <HAL_UART_Receive_IT+0xc4>
      }
    }

    __HAL_LOCK(huart);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2274      	movs	r2, #116	; 0x74
 8008734:	5c9b      	ldrb	r3, [r3, r2]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d101      	bne.n	800873e <HAL_UART_Receive_IT+0x56>
 800873a:	2302      	movs	r3, #2
 800873c:	e036      	b.n	80087ac <HAL_UART_Receive_IT+0xc4>
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2274      	movs	r2, #116	; 0x74
 8008742:	2101      	movs	r1, #1
 8008744:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a18      	ldr	r2, [pc, #96]	; (80087b4 <HAL_UART_Receive_IT+0xcc>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d020      	beq.n	8008798 <HAL_UART_Receive_IT+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	2380      	movs	r3, #128	; 0x80
 800875e:	041b      	lsls	r3, r3, #16
 8008760:	4013      	ands	r3, r2
 8008762:	d019      	beq.n	8008798 <HAL_UART_Receive_IT+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008764:	f3ef 8310 	mrs	r3, PRIMASK
 8008768:	613b      	str	r3, [r7, #16]
  return(result);
 800876a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800876c:	61fb      	str	r3, [r7, #28]
 800876e:	2301      	movs	r3, #1
 8008770:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f383 8810 	msr	PRIMASK, r3
}
 8008778:	46c0      	nop			; (mov r8, r8)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2180      	movs	r1, #128	; 0x80
 8008786:	04c9      	lsls	r1, r1, #19
 8008788:	430a      	orrs	r2, r1
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	f383 8810 	msr	PRIMASK, r3
}
 8008796:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008798:	1dbb      	adds	r3, r7, #6
 800879a:	881a      	ldrh	r2, [r3, #0]
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	0018      	movs	r0, r3
 80087a2:	f000 ff75 	bl	8009690 <UART_Start_Receive_IT>
 80087a6:	0003      	movs	r3, r0
 80087a8:	e000      	b.n	80087ac <HAL_UART_Receive_IT+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80087aa:	2302      	movs	r3, #2
  }
}
 80087ac:	0018      	movs	r0, r3
 80087ae:	46bd      	mov	sp, r7
 80087b0:	b008      	add	sp, #32
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	40004800 	.word	0x40004800

080087b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087b8:	b590      	push	{r4, r7, lr}
 80087ba:	b0ab      	sub	sp, #172	; 0xac
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	22a4      	movs	r2, #164	; 0xa4
 80087c8:	18b9      	adds	r1, r7, r2
 80087ca:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	20a0      	movs	r0, #160	; 0xa0
 80087d4:	1839      	adds	r1, r7, r0
 80087d6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	689b      	ldr	r3, [r3, #8]
 80087de:	219c      	movs	r1, #156	; 0x9c
 80087e0:	1879      	adds	r1, r7, r1
 80087e2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087e4:	0011      	movs	r1, r2
 80087e6:	18bb      	adds	r3, r7, r2
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a99      	ldr	r2, [pc, #612]	; (8008a50 <HAL_UART_IRQHandler+0x298>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	2298      	movs	r2, #152	; 0x98
 80087f0:	18bc      	adds	r4, r7, r2
 80087f2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80087f4:	18bb      	adds	r3, r7, r2
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d114      	bne.n	8008826 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80087fc:	187b      	adds	r3, r7, r1
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2220      	movs	r2, #32
 8008802:	4013      	ands	r3, r2
 8008804:	d00f      	beq.n	8008826 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008806:	183b      	adds	r3, r7, r0
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2220      	movs	r2, #32
 800880c:	4013      	ands	r3, r2
 800880e:	d00a      	beq.n	8008826 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008814:	2b00      	cmp	r3, #0
 8008816:	d100      	bne.n	800881a <HAL_UART_IRQHandler+0x62>
 8008818:	e298      	b.n	8008d4c <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	0010      	movs	r0, r2
 8008822:	4798      	blx	r3
      }
      return;
 8008824:	e292      	b.n	8008d4c <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008826:	2398      	movs	r3, #152	; 0x98
 8008828:	18fb      	adds	r3, r7, r3
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d100      	bne.n	8008832 <HAL_UART_IRQHandler+0x7a>
 8008830:	e114      	b.n	8008a5c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008832:	239c      	movs	r3, #156	; 0x9c
 8008834:	18fb      	adds	r3, r7, r3
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2201      	movs	r2, #1
 800883a:	4013      	ands	r3, r2
 800883c:	d106      	bne.n	800884c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800883e:	23a0      	movs	r3, #160	; 0xa0
 8008840:	18fb      	adds	r3, r7, r3
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a83      	ldr	r2, [pc, #524]	; (8008a54 <HAL_UART_IRQHandler+0x29c>)
 8008846:	4013      	ands	r3, r2
 8008848:	d100      	bne.n	800884c <HAL_UART_IRQHandler+0x94>
 800884a:	e107      	b.n	8008a5c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800884c:	23a4      	movs	r3, #164	; 0xa4
 800884e:	18fb      	adds	r3, r7, r3
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2201      	movs	r2, #1
 8008854:	4013      	ands	r3, r2
 8008856:	d012      	beq.n	800887e <HAL_UART_IRQHandler+0xc6>
 8008858:	23a0      	movs	r3, #160	; 0xa0
 800885a:	18fb      	adds	r3, r7, r3
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	2380      	movs	r3, #128	; 0x80
 8008860:	005b      	lsls	r3, r3, #1
 8008862:	4013      	ands	r3, r2
 8008864:	d00b      	beq.n	800887e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2201      	movs	r2, #1
 800886c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2280      	movs	r2, #128	; 0x80
 8008872:	589b      	ldr	r3, [r3, r2]
 8008874:	2201      	movs	r2, #1
 8008876:	431a      	orrs	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2180      	movs	r1, #128	; 0x80
 800887c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800887e:	23a4      	movs	r3, #164	; 0xa4
 8008880:	18fb      	adds	r3, r7, r3
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2202      	movs	r2, #2
 8008886:	4013      	ands	r3, r2
 8008888:	d011      	beq.n	80088ae <HAL_UART_IRQHandler+0xf6>
 800888a:	239c      	movs	r3, #156	; 0x9c
 800888c:	18fb      	adds	r3, r7, r3
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2201      	movs	r2, #1
 8008892:	4013      	ands	r3, r2
 8008894:	d00b      	beq.n	80088ae <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2202      	movs	r2, #2
 800889c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2280      	movs	r2, #128	; 0x80
 80088a2:	589b      	ldr	r3, [r3, r2]
 80088a4:	2204      	movs	r2, #4
 80088a6:	431a      	orrs	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2180      	movs	r1, #128	; 0x80
 80088ac:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088ae:	23a4      	movs	r3, #164	; 0xa4
 80088b0:	18fb      	adds	r3, r7, r3
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2204      	movs	r2, #4
 80088b6:	4013      	ands	r3, r2
 80088b8:	d011      	beq.n	80088de <HAL_UART_IRQHandler+0x126>
 80088ba:	239c      	movs	r3, #156	; 0x9c
 80088bc:	18fb      	adds	r3, r7, r3
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2201      	movs	r2, #1
 80088c2:	4013      	ands	r3, r2
 80088c4:	d00b      	beq.n	80088de <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2204      	movs	r2, #4
 80088cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2280      	movs	r2, #128	; 0x80
 80088d2:	589b      	ldr	r3, [r3, r2]
 80088d4:	2202      	movs	r2, #2
 80088d6:	431a      	orrs	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2180      	movs	r1, #128	; 0x80
 80088dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80088de:	23a4      	movs	r3, #164	; 0xa4
 80088e0:	18fb      	adds	r3, r7, r3
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2208      	movs	r2, #8
 80088e6:	4013      	ands	r3, r2
 80088e8:	d017      	beq.n	800891a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80088ea:	23a0      	movs	r3, #160	; 0xa0
 80088ec:	18fb      	adds	r3, r7, r3
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2220      	movs	r2, #32
 80088f2:	4013      	ands	r3, r2
 80088f4:	d105      	bne.n	8008902 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80088f6:	239c      	movs	r3, #156	; 0x9c
 80088f8:	18fb      	adds	r3, r7, r3
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2201      	movs	r2, #1
 80088fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008900:	d00b      	beq.n	800891a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2208      	movs	r2, #8
 8008908:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2280      	movs	r2, #128	; 0x80
 800890e:	589b      	ldr	r3, [r3, r2]
 8008910:	2208      	movs	r2, #8
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2180      	movs	r1, #128	; 0x80
 8008918:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800891a:	23a4      	movs	r3, #164	; 0xa4
 800891c:	18fb      	adds	r3, r7, r3
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	2380      	movs	r3, #128	; 0x80
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	4013      	ands	r3, r2
 8008926:	d013      	beq.n	8008950 <HAL_UART_IRQHandler+0x198>
 8008928:	23a0      	movs	r3, #160	; 0xa0
 800892a:	18fb      	adds	r3, r7, r3
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	2380      	movs	r3, #128	; 0x80
 8008930:	04db      	lsls	r3, r3, #19
 8008932:	4013      	ands	r3, r2
 8008934:	d00c      	beq.n	8008950 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2280      	movs	r2, #128	; 0x80
 800893c:	0112      	lsls	r2, r2, #4
 800893e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2280      	movs	r2, #128	; 0x80
 8008944:	589b      	ldr	r3, [r3, r2]
 8008946:	2220      	movs	r2, #32
 8008948:	431a      	orrs	r2, r3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2180      	movs	r1, #128	; 0x80
 800894e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2280      	movs	r2, #128	; 0x80
 8008954:	589b      	ldr	r3, [r3, r2]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d100      	bne.n	800895c <HAL_UART_IRQHandler+0x1a4>
 800895a:	e1f9      	b.n	8008d50 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800895c:	23a4      	movs	r3, #164	; 0xa4
 800895e:	18fb      	adds	r3, r7, r3
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2220      	movs	r2, #32
 8008964:	4013      	ands	r3, r2
 8008966:	d00e      	beq.n	8008986 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008968:	23a0      	movs	r3, #160	; 0xa0
 800896a:	18fb      	adds	r3, r7, r3
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2220      	movs	r2, #32
 8008970:	4013      	ands	r3, r2
 8008972:	d008      	beq.n	8008986 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008978:	2b00      	cmp	r3, #0
 800897a:	d004      	beq.n	8008986 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	0010      	movs	r0, r2
 8008984:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2280      	movs	r2, #128	; 0x80
 800898a:	589b      	ldr	r3, [r3, r2]
 800898c:	2194      	movs	r1, #148	; 0x94
 800898e:	187a      	adds	r2, r7, r1
 8008990:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	2240      	movs	r2, #64	; 0x40
 800899a:	4013      	ands	r3, r2
 800899c:	2b40      	cmp	r3, #64	; 0x40
 800899e:	d004      	beq.n	80089aa <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80089a0:	187b      	adds	r3, r7, r1
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2228      	movs	r2, #40	; 0x28
 80089a6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80089a8:	d047      	beq.n	8008a3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	0018      	movs	r0, r3
 80089ae:	f000 ff1f 	bl	80097f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2240      	movs	r2, #64	; 0x40
 80089ba:	4013      	ands	r3, r2
 80089bc:	2b40      	cmp	r3, #64	; 0x40
 80089be:	d137      	bne.n	8008a30 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089c0:	f3ef 8310 	mrs	r3, PRIMASK
 80089c4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80089c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089c8:	2090      	movs	r0, #144	; 0x90
 80089ca:	183a      	adds	r2, r7, r0
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	2301      	movs	r3, #1
 80089d0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089d4:	f383 8810 	msr	PRIMASK, r3
}
 80089d8:	46c0      	nop			; (mov r8, r8)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2140      	movs	r1, #64	; 0x40
 80089e6:	438a      	bics	r2, r1
 80089e8:	609a      	str	r2, [r3, #8]
 80089ea:	183b      	adds	r3, r7, r0
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089f2:	f383 8810 	msr	PRIMASK, r3
}
 80089f6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d012      	beq.n	8008a26 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a04:	4a14      	ldr	r2, [pc, #80]	; (8008a58 <HAL_UART_IRQHandler+0x2a0>)
 8008a06:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f7fd f8d7 	bl	8005bc0 <HAL_DMA_Abort_IT>
 8008a12:	1e03      	subs	r3, r0, #0
 8008a14:	d01a      	beq.n	8008a4c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a20:	0018      	movs	r0, r3
 8008a22:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a24:	e012      	b.n	8008a4c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f000 f99f 	bl	8008d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a2e:	e00d      	b.n	8008a4c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	0018      	movs	r0, r3
 8008a34:	f000 f99a 	bl	8008d6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a38:	e008      	b.n	8008a4c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f000 f995 	bl	8008d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2280      	movs	r2, #128	; 0x80
 8008a46:	2100      	movs	r1, #0
 8008a48:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008a4a:	e181      	b.n	8008d50 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a4c:	46c0      	nop			; (mov r8, r8)
    return;
 8008a4e:	e17f      	b.n	8008d50 <HAL_UART_IRQHandler+0x598>
 8008a50:	0000080f 	.word	0x0000080f
 8008a54:	04000120 	.word	0x04000120
 8008a58:	080098b5 	.word	0x080098b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d000      	beq.n	8008a66 <HAL_UART_IRQHandler+0x2ae>
 8008a64:	e133      	b.n	8008cce <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a66:	23a4      	movs	r3, #164	; 0xa4
 8008a68:	18fb      	adds	r3, r7, r3
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	2210      	movs	r2, #16
 8008a6e:	4013      	ands	r3, r2
 8008a70:	d100      	bne.n	8008a74 <HAL_UART_IRQHandler+0x2bc>
 8008a72:	e12c      	b.n	8008cce <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a74:	23a0      	movs	r3, #160	; 0xa0
 8008a76:	18fb      	adds	r3, r7, r3
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2210      	movs	r2, #16
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	d100      	bne.n	8008a82 <HAL_UART_IRQHandler+0x2ca>
 8008a80:	e125      	b.n	8008cce <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	2210      	movs	r2, #16
 8008a88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2240      	movs	r2, #64	; 0x40
 8008a92:	4013      	ands	r3, r2
 8008a94:	2b40      	cmp	r3, #64	; 0x40
 8008a96:	d000      	beq.n	8008a9a <HAL_UART_IRQHandler+0x2e2>
 8008a98:	e09d      	b.n	8008bd6 <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	217e      	movs	r1, #126	; 0x7e
 8008aa4:	187b      	adds	r3, r7, r1
 8008aa6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008aa8:	187b      	adds	r3, r7, r1
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d100      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x2fa>
 8008ab0:	e150      	b.n	8008d54 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2258      	movs	r2, #88	; 0x58
 8008ab6:	5a9b      	ldrh	r3, [r3, r2]
 8008ab8:	187a      	adds	r2, r7, r1
 8008aba:	8812      	ldrh	r2, [r2, #0]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d300      	bcc.n	8008ac2 <HAL_UART_IRQHandler+0x30a>
 8008ac0:	e148      	b.n	8008d54 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	187a      	adds	r2, r7, r1
 8008ac6:	215a      	movs	r1, #90	; 0x5a
 8008ac8:	8812      	ldrh	r2, [r2, #0]
 8008aca:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	d16e      	bne.n	8008bb8 <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ada:	f3ef 8310 	mrs	r3, PRIMASK
 8008ade:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ae2:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aea:	f383 8810 	msr	PRIMASK, r3
}
 8008aee:	46c0      	nop			; (mov r8, r8)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	499a      	ldr	r1, [pc, #616]	; (8008d64 <HAL_UART_IRQHandler+0x5ac>)
 8008afc:	400a      	ands	r2, r1
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b02:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b06:	f383 8810 	msr	PRIMASK, r3
}
 8008b0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b14:	677b      	str	r3, [r7, #116]	; 0x74
 8008b16:	2301      	movs	r3, #1
 8008b18:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b1c:	f383 8810 	msr	PRIMASK, r3
}
 8008b20:	46c0      	nop			; (mov r8, r8)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	689a      	ldr	r2, [r3, #8]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	438a      	bics	r2, r1
 8008b30:	609a      	str	r2, [r3, #8]
 8008b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b34:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b38:	f383 8810 	msr	PRIMASK, r3
}
 8008b3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b42:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b46:	673b      	str	r3, [r7, #112]	; 0x70
 8008b48:	2301      	movs	r3, #1
 8008b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b4e:	f383 8810 	msr	PRIMASK, r3
}
 8008b52:	46c0      	nop			; (mov r8, r8)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689a      	ldr	r2, [r3, #8]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2140      	movs	r1, #64	; 0x40
 8008b60:	438a      	bics	r2, r1
 8008b62:	609a      	str	r2, [r3, #8]
 8008b64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b66:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b6a:	f383 8810 	msr	PRIMASK, r3
}
 8008b6e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2220      	movs	r2, #32
 8008b74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8008b80:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8008b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b86:	2301      	movs	r3, #1
 8008b88:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b8c:	f383 8810 	msr	PRIMASK, r3
}
 8008b90:	46c0      	nop			; (mov r8, r8)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2110      	movs	r1, #16
 8008b9e:	438a      	bics	r2, r1
 8008ba0:	601a      	str	r2, [r3, #0]
 8008ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ba8:	f383 8810 	msr	PRIMASK, r3
}
 8008bac:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	f7fc ffc4 	bl	8005b40 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2258      	movs	r2, #88	; 0x58
 8008bbc:	5a9a      	ldrh	r2, [r3, r2]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	215a      	movs	r1, #90	; 0x5a
 8008bc2:	5a5b      	ldrh	r3, [r3, r1]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	1ad3      	subs	r3, r2, r3
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	0011      	movs	r1, r2
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f000 f8d4 	bl	8008d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bd4:	e0be      	b.n	8008d54 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2258      	movs	r2, #88	; 0x58
 8008bda:	5a99      	ldrh	r1, [r3, r2]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	225a      	movs	r2, #90	; 0x5a
 8008be0:	5a9b      	ldrh	r3, [r3, r2]
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	208e      	movs	r0, #142	; 0x8e
 8008be6:	183b      	adds	r3, r7, r0
 8008be8:	1a8a      	subs	r2, r1, r2
 8008bea:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	225a      	movs	r2, #90	; 0x5a
 8008bf0:	5a9b      	ldrh	r3, [r3, r2]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d100      	bne.n	8008bfa <HAL_UART_IRQHandler+0x442>
 8008bf8:	e0ae      	b.n	8008d58 <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 8008bfa:	183b      	adds	r3, r7, r0
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d100      	bne.n	8008c04 <HAL_UART_IRQHandler+0x44c>
 8008c02:	e0a9      	b.n	8008d58 <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c04:	f3ef 8310 	mrs	r3, PRIMASK
 8008c08:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c0c:	2488      	movs	r4, #136	; 0x88
 8008c0e:	193a      	adds	r2, r7, r4
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	2301      	movs	r3, #1
 8008c14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	f383 8810 	msr	PRIMASK, r3
}
 8008c1c:	46c0      	nop			; (mov r8, r8)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	494f      	ldr	r1, [pc, #316]	; (8008d68 <HAL_UART_IRQHandler+0x5b0>)
 8008c2a:	400a      	ands	r2, r1
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	193b      	adds	r3, r7, r4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f383 8810 	msr	PRIMASK, r3
}
 8008c3a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c40:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c42:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c44:	2484      	movs	r4, #132	; 0x84
 8008c46:	193a      	adds	r2, r7, r4
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	f383 8810 	msr	PRIMASK, r3
}
 8008c54:	46c0      	nop			; (mov r8, r8)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2101      	movs	r1, #1
 8008c62:	438a      	bics	r2, r1
 8008c64:	609a      	str	r2, [r3, #8]
 8008c66:	193b      	adds	r3, r7, r4
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c6c:	6a3b      	ldr	r3, [r7, #32]
 8008c6e:	f383 8810 	msr	PRIMASK, r3
}
 8008c72:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2220      	movs	r2, #32
 8008c78:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c86:	f3ef 8310 	mrs	r3, PRIMASK
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c8e:	2480      	movs	r4, #128	; 0x80
 8008c90:	193a      	adds	r2, r7, r4
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	2301      	movs	r3, #1
 8008c96:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9a:	f383 8810 	msr	PRIMASK, r3
}
 8008c9e:	46c0      	nop			; (mov r8, r8)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2110      	movs	r1, #16
 8008cac:	438a      	bics	r2, r1
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	193b      	adds	r3, r7, r4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	f383 8810 	msr	PRIMASK, r3
}
 8008cbc:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cbe:	183b      	adds	r3, r7, r0
 8008cc0:	881a      	ldrh	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	0011      	movs	r1, r2
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f000 f858 	bl	8008d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ccc:	e044      	b.n	8008d58 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008cce:	23a4      	movs	r3, #164	; 0xa4
 8008cd0:	18fb      	adds	r3, r7, r3
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	2380      	movs	r3, #128	; 0x80
 8008cd6:	035b      	lsls	r3, r3, #13
 8008cd8:	4013      	ands	r3, r2
 8008cda:	d010      	beq.n	8008cfe <HAL_UART_IRQHandler+0x546>
 8008cdc:	239c      	movs	r3, #156	; 0x9c
 8008cde:	18fb      	adds	r3, r7, r3
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	2380      	movs	r3, #128	; 0x80
 8008ce4:	03db      	lsls	r3, r3, #15
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	d009      	beq.n	8008cfe <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2280      	movs	r2, #128	; 0x80
 8008cf0:	0352      	lsls	r2, r2, #13
 8008cf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	0018      	movs	r0, r3
 8008cf8:	f001 f83e 	bl	8009d78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cfc:	e02f      	b.n	8008d5e <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008cfe:	23a4      	movs	r3, #164	; 0xa4
 8008d00:	18fb      	adds	r3, r7, r3
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2280      	movs	r2, #128	; 0x80
 8008d06:	4013      	ands	r3, r2
 8008d08:	d00f      	beq.n	8008d2a <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d0a:	23a0      	movs	r3, #160	; 0xa0
 8008d0c:	18fb      	adds	r3, r7, r3
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2280      	movs	r2, #128	; 0x80
 8008d12:	4013      	ands	r3, r2
 8008d14:	d009      	beq.n	8008d2a <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d01e      	beq.n	8008d5c <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	0010      	movs	r0, r2
 8008d26:	4798      	blx	r3
    }
    return;
 8008d28:	e018      	b.n	8008d5c <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d2a:	23a4      	movs	r3, #164	; 0xa4
 8008d2c:	18fb      	adds	r3, r7, r3
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	2240      	movs	r2, #64	; 0x40
 8008d32:	4013      	ands	r3, r2
 8008d34:	d013      	beq.n	8008d5e <HAL_UART_IRQHandler+0x5a6>
 8008d36:	23a0      	movs	r3, #160	; 0xa0
 8008d38:	18fb      	adds	r3, r7, r3
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2240      	movs	r2, #64	; 0x40
 8008d3e:	4013      	ands	r3, r2
 8008d40:	d00d      	beq.n	8008d5e <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	0018      	movs	r0, r3
 8008d46:	f000 fe83 	bl	8009a50 <UART_EndTransmit_IT>
    return;
 8008d4a:	e008      	b.n	8008d5e <HAL_UART_IRQHandler+0x5a6>
      return;
 8008d4c:	46c0      	nop			; (mov r8, r8)
 8008d4e:	e006      	b.n	8008d5e <HAL_UART_IRQHandler+0x5a6>
    return;
 8008d50:	46c0      	nop			; (mov r8, r8)
 8008d52:	e004      	b.n	8008d5e <HAL_UART_IRQHandler+0x5a6>
      return;
 8008d54:	46c0      	nop			; (mov r8, r8)
 8008d56:	e002      	b.n	8008d5e <HAL_UART_IRQHandler+0x5a6>
      return;
 8008d58:	46c0      	nop			; (mov r8, r8)
 8008d5a:	e000      	b.n	8008d5e <HAL_UART_IRQHandler+0x5a6>
    return;
 8008d5c:	46c0      	nop			; (mov r8, r8)
  }

}
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	b02b      	add	sp, #172	; 0xac
 8008d62:	bd90      	pop	{r4, r7, pc}
 8008d64:	fffffeff 	.word	0xfffffeff
 8008d68:	fffffedf 	.word	0xfffffedf

08008d6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d74:	46c0      	nop			; (mov r8, r8)
 8008d76:	46bd      	mov	sp, r7
 8008d78:	b002      	add	sp, #8
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	000a      	movs	r2, r1
 8008d86:	1cbb      	adds	r3, r7, #2
 8008d88:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d8a:	46c0      	nop			; (mov r8, r8)
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	b002      	add	sp, #8
 8008d90:	bd80      	pop	{r7, pc}
	...

08008d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d94:	b5b0      	push	{r4, r5, r7, lr}
 8008d96:	b08e      	sub	sp, #56	; 0x38
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d9c:	231a      	movs	r3, #26
 8008d9e:	2218      	movs	r2, #24
 8008da0:	4694      	mov	ip, r2
 8008da2:	44bc      	add	ip, r7
 8008da4:	4463      	add	r3, ip
 8008da6:	2200      	movs	r2, #0
 8008da8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	689a      	ldr	r2, [r3, #8]
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	431a      	orrs	r2, r3
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	431a      	orrs	r2, r3
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4ab0      	ldr	r2, [pc, #704]	; (800908c <UART_SetConfig+0x2f8>)
 8008dca:	4013      	ands	r3, r2
 8008dcc:	0019      	movs	r1, r3
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	4aac      	ldr	r2, [pc, #688]	; (8009090 <UART_SetConfig+0x2fc>)
 8008de0:	4013      	ands	r3, r2
 8008de2:	0019      	movs	r1, r3
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	68da      	ldr	r2, [r3, #12]
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	430a      	orrs	r2, r1
 8008dee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4aa6      	ldr	r2, [pc, #664]	; (8009094 <UART_SetConfig+0x300>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d004      	beq.n	8008e0a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e06:	4313      	orrs	r3, r2
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	4aa1      	ldr	r2, [pc, #644]	; (8009098 <UART_SetConfig+0x304>)
 8008e12:	4013      	ands	r3, r2
 8008e14:	0019      	movs	r1, r3
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e1c:	430a      	orrs	r2, r1
 8008e1e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a9d      	ldr	r2, [pc, #628]	; (800909c <UART_SetConfig+0x308>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d136      	bne.n	8008e98 <UART_SetConfig+0x104>
 8008e2a:	4b9d      	ldr	r3, [pc, #628]	; (80090a0 <UART_SetConfig+0x30c>)
 8008e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e2e:	2203      	movs	r2, #3
 8008e30:	4013      	ands	r3, r2
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d020      	beq.n	8008e78 <UART_SetConfig+0xe4>
 8008e36:	d827      	bhi.n	8008e88 <UART_SetConfig+0xf4>
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d00d      	beq.n	8008e58 <UART_SetConfig+0xc4>
 8008e3c:	d824      	bhi.n	8008e88 <UART_SetConfig+0xf4>
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d002      	beq.n	8008e48 <UART_SetConfig+0xb4>
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d010      	beq.n	8008e68 <UART_SetConfig+0xd4>
 8008e46:	e01f      	b.n	8008e88 <UART_SetConfig+0xf4>
 8008e48:	231b      	movs	r3, #27
 8008e4a:	2218      	movs	r2, #24
 8008e4c:	4694      	mov	ip, r2
 8008e4e:	44bc      	add	ip, r7
 8008e50:	4463      	add	r3, ip
 8008e52:	2201      	movs	r2, #1
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	e0c5      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008e58:	231b      	movs	r3, #27
 8008e5a:	2218      	movs	r2, #24
 8008e5c:	4694      	mov	ip, r2
 8008e5e:	44bc      	add	ip, r7
 8008e60:	4463      	add	r3, ip
 8008e62:	2202      	movs	r2, #2
 8008e64:	701a      	strb	r2, [r3, #0]
 8008e66:	e0bd      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008e68:	231b      	movs	r3, #27
 8008e6a:	2218      	movs	r2, #24
 8008e6c:	4694      	mov	ip, r2
 8008e6e:	44bc      	add	ip, r7
 8008e70:	4463      	add	r3, ip
 8008e72:	2204      	movs	r2, #4
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	e0b5      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008e78:	231b      	movs	r3, #27
 8008e7a:	2218      	movs	r2, #24
 8008e7c:	4694      	mov	ip, r2
 8008e7e:	44bc      	add	ip, r7
 8008e80:	4463      	add	r3, ip
 8008e82:	2208      	movs	r2, #8
 8008e84:	701a      	strb	r2, [r3, #0]
 8008e86:	e0ad      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008e88:	231b      	movs	r3, #27
 8008e8a:	2218      	movs	r2, #24
 8008e8c:	4694      	mov	ip, r2
 8008e8e:	44bc      	add	ip, r7
 8008e90:	4463      	add	r3, ip
 8008e92:	2210      	movs	r2, #16
 8008e94:	701a      	strb	r2, [r3, #0]
 8008e96:	e0a5      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a81      	ldr	r2, [pc, #516]	; (80090a4 <UART_SetConfig+0x310>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d136      	bne.n	8008f10 <UART_SetConfig+0x17c>
 8008ea2:	4b7f      	ldr	r3, [pc, #508]	; (80090a0 <UART_SetConfig+0x30c>)
 8008ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea6:	220c      	movs	r2, #12
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	2b0c      	cmp	r3, #12
 8008eac:	d020      	beq.n	8008ef0 <UART_SetConfig+0x15c>
 8008eae:	d827      	bhi.n	8008f00 <UART_SetConfig+0x16c>
 8008eb0:	2b08      	cmp	r3, #8
 8008eb2:	d00d      	beq.n	8008ed0 <UART_SetConfig+0x13c>
 8008eb4:	d824      	bhi.n	8008f00 <UART_SetConfig+0x16c>
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d002      	beq.n	8008ec0 <UART_SetConfig+0x12c>
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	d010      	beq.n	8008ee0 <UART_SetConfig+0x14c>
 8008ebe:	e01f      	b.n	8008f00 <UART_SetConfig+0x16c>
 8008ec0:	231b      	movs	r3, #27
 8008ec2:	2218      	movs	r2, #24
 8008ec4:	4694      	mov	ip, r2
 8008ec6:	44bc      	add	ip, r7
 8008ec8:	4463      	add	r3, ip
 8008eca:	2200      	movs	r2, #0
 8008ecc:	701a      	strb	r2, [r3, #0]
 8008ece:	e089      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008ed0:	231b      	movs	r3, #27
 8008ed2:	2218      	movs	r2, #24
 8008ed4:	4694      	mov	ip, r2
 8008ed6:	44bc      	add	ip, r7
 8008ed8:	4463      	add	r3, ip
 8008eda:	2202      	movs	r2, #2
 8008edc:	701a      	strb	r2, [r3, #0]
 8008ede:	e081      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008ee0:	231b      	movs	r3, #27
 8008ee2:	2218      	movs	r2, #24
 8008ee4:	4694      	mov	ip, r2
 8008ee6:	44bc      	add	ip, r7
 8008ee8:	4463      	add	r3, ip
 8008eea:	2204      	movs	r2, #4
 8008eec:	701a      	strb	r2, [r3, #0]
 8008eee:	e079      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008ef0:	231b      	movs	r3, #27
 8008ef2:	2218      	movs	r2, #24
 8008ef4:	4694      	mov	ip, r2
 8008ef6:	44bc      	add	ip, r7
 8008ef8:	4463      	add	r3, ip
 8008efa:	2208      	movs	r2, #8
 8008efc:	701a      	strb	r2, [r3, #0]
 8008efe:	e071      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008f00:	231b      	movs	r3, #27
 8008f02:	2218      	movs	r2, #24
 8008f04:	4694      	mov	ip, r2
 8008f06:	44bc      	add	ip, r7
 8008f08:	4463      	add	r3, ip
 8008f0a:	2210      	movs	r2, #16
 8008f0c:	701a      	strb	r2, [r3, #0]
 8008f0e:	e069      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a64      	ldr	r2, [pc, #400]	; (80090a8 <UART_SetConfig+0x314>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d107      	bne.n	8008f2a <UART_SetConfig+0x196>
 8008f1a:	231b      	movs	r3, #27
 8008f1c:	2218      	movs	r2, #24
 8008f1e:	4694      	mov	ip, r2
 8008f20:	44bc      	add	ip, r7
 8008f22:	4463      	add	r3, ip
 8008f24:	2200      	movs	r2, #0
 8008f26:	701a      	strb	r2, [r3, #0]
 8008f28:	e05c      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a5f      	ldr	r2, [pc, #380]	; (80090ac <UART_SetConfig+0x318>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d107      	bne.n	8008f44 <UART_SetConfig+0x1b0>
 8008f34:	231b      	movs	r3, #27
 8008f36:	2218      	movs	r2, #24
 8008f38:	4694      	mov	ip, r2
 8008f3a:	44bc      	add	ip, r7
 8008f3c:	4463      	add	r3, ip
 8008f3e:	2200      	movs	r2, #0
 8008f40:	701a      	strb	r2, [r3, #0]
 8008f42:	e04f      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a52      	ldr	r2, [pc, #328]	; (8009094 <UART_SetConfig+0x300>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d143      	bne.n	8008fd6 <UART_SetConfig+0x242>
 8008f4e:	4b54      	ldr	r3, [pc, #336]	; (80090a0 <UART_SetConfig+0x30c>)
 8008f50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f52:	23c0      	movs	r3, #192	; 0xc0
 8008f54:	011b      	lsls	r3, r3, #4
 8008f56:	4013      	ands	r3, r2
 8008f58:	22c0      	movs	r2, #192	; 0xc0
 8008f5a:	0112      	lsls	r2, r2, #4
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d02a      	beq.n	8008fb6 <UART_SetConfig+0x222>
 8008f60:	22c0      	movs	r2, #192	; 0xc0
 8008f62:	0112      	lsls	r2, r2, #4
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d82e      	bhi.n	8008fc6 <UART_SetConfig+0x232>
 8008f68:	2280      	movs	r2, #128	; 0x80
 8008f6a:	0112      	lsls	r2, r2, #4
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d012      	beq.n	8008f96 <UART_SetConfig+0x202>
 8008f70:	2280      	movs	r2, #128	; 0x80
 8008f72:	0112      	lsls	r2, r2, #4
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d826      	bhi.n	8008fc6 <UART_SetConfig+0x232>
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d004      	beq.n	8008f86 <UART_SetConfig+0x1f2>
 8008f7c:	2280      	movs	r2, #128	; 0x80
 8008f7e:	00d2      	lsls	r2, r2, #3
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d010      	beq.n	8008fa6 <UART_SetConfig+0x212>
 8008f84:	e01f      	b.n	8008fc6 <UART_SetConfig+0x232>
 8008f86:	231b      	movs	r3, #27
 8008f88:	2218      	movs	r2, #24
 8008f8a:	4694      	mov	ip, r2
 8008f8c:	44bc      	add	ip, r7
 8008f8e:	4463      	add	r3, ip
 8008f90:	2200      	movs	r2, #0
 8008f92:	701a      	strb	r2, [r3, #0]
 8008f94:	e026      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008f96:	231b      	movs	r3, #27
 8008f98:	2218      	movs	r2, #24
 8008f9a:	4694      	mov	ip, r2
 8008f9c:	44bc      	add	ip, r7
 8008f9e:	4463      	add	r3, ip
 8008fa0:	2202      	movs	r2, #2
 8008fa2:	701a      	strb	r2, [r3, #0]
 8008fa4:	e01e      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008fa6:	231b      	movs	r3, #27
 8008fa8:	2218      	movs	r2, #24
 8008faa:	4694      	mov	ip, r2
 8008fac:	44bc      	add	ip, r7
 8008fae:	4463      	add	r3, ip
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	701a      	strb	r2, [r3, #0]
 8008fb4:	e016      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008fb6:	231b      	movs	r3, #27
 8008fb8:	2218      	movs	r2, #24
 8008fba:	4694      	mov	ip, r2
 8008fbc:	44bc      	add	ip, r7
 8008fbe:	4463      	add	r3, ip
 8008fc0:	2208      	movs	r2, #8
 8008fc2:	701a      	strb	r2, [r3, #0]
 8008fc4:	e00e      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008fc6:	231b      	movs	r3, #27
 8008fc8:	2218      	movs	r2, #24
 8008fca:	4694      	mov	ip, r2
 8008fcc:	44bc      	add	ip, r7
 8008fce:	4463      	add	r3, ip
 8008fd0:	2210      	movs	r2, #16
 8008fd2:	701a      	strb	r2, [r3, #0]
 8008fd4:	e006      	b.n	8008fe4 <UART_SetConfig+0x250>
 8008fd6:	231b      	movs	r3, #27
 8008fd8:	2218      	movs	r2, #24
 8008fda:	4694      	mov	ip, r2
 8008fdc:	44bc      	add	ip, r7
 8008fde:	4463      	add	r3, ip
 8008fe0:	2210      	movs	r2, #16
 8008fe2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a2a      	ldr	r2, [pc, #168]	; (8009094 <UART_SetConfig+0x300>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d000      	beq.n	8008ff0 <UART_SetConfig+0x25c>
 8008fee:	e09e      	b.n	800912e <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ff0:	231b      	movs	r3, #27
 8008ff2:	2218      	movs	r2, #24
 8008ff4:	4694      	mov	ip, r2
 8008ff6:	44bc      	add	ip, r7
 8008ff8:	4463      	add	r3, ip
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b08      	cmp	r3, #8
 8008ffe:	d01d      	beq.n	800903c <UART_SetConfig+0x2a8>
 8009000:	dc20      	bgt.n	8009044 <UART_SetConfig+0x2b0>
 8009002:	2b04      	cmp	r3, #4
 8009004:	d015      	beq.n	8009032 <UART_SetConfig+0x29e>
 8009006:	dc1d      	bgt.n	8009044 <UART_SetConfig+0x2b0>
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <UART_SetConfig+0x27e>
 800900c:	2b02      	cmp	r3, #2
 800900e:	d005      	beq.n	800901c <UART_SetConfig+0x288>
 8009010:	e018      	b.n	8009044 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009012:	f7fd fea7 	bl	8006d64 <HAL_RCC_GetPCLK1Freq>
 8009016:	0003      	movs	r3, r0
 8009018:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800901a:	e01d      	b.n	8009058 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800901c:	4b20      	ldr	r3, [pc, #128]	; (80090a0 <UART_SetConfig+0x30c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2210      	movs	r2, #16
 8009022:	4013      	ands	r3, r2
 8009024:	d002      	beq.n	800902c <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009026:	4b22      	ldr	r3, [pc, #136]	; (80090b0 <UART_SetConfig+0x31c>)
 8009028:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800902a:	e015      	b.n	8009058 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800902c:	4b21      	ldr	r3, [pc, #132]	; (80090b4 <UART_SetConfig+0x320>)
 800902e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009030:	e012      	b.n	8009058 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009032:	f7fd fde7 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 8009036:	0003      	movs	r3, r0
 8009038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800903a:	e00d      	b.n	8009058 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800903c:	2380      	movs	r3, #128	; 0x80
 800903e:	021b      	lsls	r3, r3, #8
 8009040:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009042:	e009      	b.n	8009058 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009048:	231a      	movs	r3, #26
 800904a:	2218      	movs	r2, #24
 800904c:	4694      	mov	ip, r2
 800904e:	44bc      	add	ip, r7
 8009050:	4463      	add	r3, ip
 8009052:	2201      	movs	r2, #1
 8009054:	701a      	strb	r2, [r3, #0]
        break;
 8009056:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905a:	2b00      	cmp	r3, #0
 800905c:	d100      	bne.n	8009060 <UART_SetConfig+0x2cc>
 800905e:	e13c      	b.n	80092da <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	0013      	movs	r3, r2
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	189b      	adds	r3, r3, r2
 800906a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800906c:	429a      	cmp	r2, r3
 800906e:	d305      	bcc.n	800907c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009078:	429a      	cmp	r2, r3
 800907a:	d91d      	bls.n	80090b8 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800907c:	231a      	movs	r3, #26
 800907e:	2218      	movs	r2, #24
 8009080:	4694      	mov	ip, r2
 8009082:	44bc      	add	ip, r7
 8009084:	4463      	add	r3, ip
 8009086:	2201      	movs	r2, #1
 8009088:	701a      	strb	r2, [r3, #0]
 800908a:	e126      	b.n	80092da <UART_SetConfig+0x546>
 800908c:	efff69f3 	.word	0xefff69f3
 8009090:	ffffcfff 	.word	0xffffcfff
 8009094:	40004800 	.word	0x40004800
 8009098:	fffff4ff 	.word	0xfffff4ff
 800909c:	40013800 	.word	0x40013800
 80090a0:	40021000 	.word	0x40021000
 80090a4:	40004400 	.word	0x40004400
 80090a8:	40004c00 	.word	0x40004c00
 80090ac:	40005000 	.word	0x40005000
 80090b0:	003d0900 	.word	0x003d0900
 80090b4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	613b      	str	r3, [r7, #16]
 80090bc:	2300      	movs	r3, #0
 80090be:	617b      	str	r3, [r7, #20]
 80090c0:	6939      	ldr	r1, [r7, #16]
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	000b      	movs	r3, r1
 80090c6:	0e1b      	lsrs	r3, r3, #24
 80090c8:	0010      	movs	r0, r2
 80090ca:	0205      	lsls	r5, r0, #8
 80090cc:	431d      	orrs	r5, r3
 80090ce:	000b      	movs	r3, r1
 80090d0:	021c      	lsls	r4, r3, #8
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	085b      	lsrs	r3, r3, #1
 80090d8:	60bb      	str	r3, [r7, #8]
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	68b8      	ldr	r0, [r7, #8]
 80090e0:	68f9      	ldr	r1, [r7, #12]
 80090e2:	1900      	adds	r0, r0, r4
 80090e4:	4169      	adcs	r1, r5
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	603b      	str	r3, [r7, #0]
 80090ec:	2300      	movs	r3, #0
 80090ee:	607b      	str	r3, [r7, #4]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f7f7 f9e2 	bl	80004bc <__aeabi_uldivmod>
 80090f8:	0002      	movs	r2, r0
 80090fa:	000b      	movs	r3, r1
 80090fc:	0013      	movs	r3, r2
 80090fe:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009102:	23c0      	movs	r3, #192	; 0xc0
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	429a      	cmp	r2, r3
 8009108:	d309      	bcc.n	800911e <UART_SetConfig+0x38a>
 800910a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800910c:	2380      	movs	r3, #128	; 0x80
 800910e:	035b      	lsls	r3, r3, #13
 8009110:	429a      	cmp	r2, r3
 8009112:	d204      	bcs.n	800911e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800911a:	60da      	str	r2, [r3, #12]
 800911c:	e0dd      	b.n	80092da <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800911e:	231a      	movs	r3, #26
 8009120:	2218      	movs	r2, #24
 8009122:	4694      	mov	ip, r2
 8009124:	44bc      	add	ip, r7
 8009126:	4463      	add	r3, ip
 8009128:	2201      	movs	r2, #1
 800912a:	701a      	strb	r2, [r3, #0]
 800912c:	e0d5      	b.n	80092da <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	69da      	ldr	r2, [r3, #28]
 8009132:	2380      	movs	r3, #128	; 0x80
 8009134:	021b      	lsls	r3, r3, #8
 8009136:	429a      	cmp	r2, r3
 8009138:	d000      	beq.n	800913c <UART_SetConfig+0x3a8>
 800913a:	e074      	b.n	8009226 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800913c:	231b      	movs	r3, #27
 800913e:	2218      	movs	r2, #24
 8009140:	4694      	mov	ip, r2
 8009142:	44bc      	add	ip, r7
 8009144:	4463      	add	r3, ip
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	2b08      	cmp	r3, #8
 800914a:	d822      	bhi.n	8009192 <UART_SetConfig+0x3fe>
 800914c:	009a      	lsls	r2, r3, #2
 800914e:	4b6b      	ldr	r3, [pc, #428]	; (80092fc <UART_SetConfig+0x568>)
 8009150:	18d3      	adds	r3, r2, r3
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009156:	f7fd fe05 	bl	8006d64 <HAL_RCC_GetPCLK1Freq>
 800915a:	0003      	movs	r3, r0
 800915c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800915e:	e022      	b.n	80091a6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009160:	f7fd fe16 	bl	8006d90 <HAL_RCC_GetPCLK2Freq>
 8009164:	0003      	movs	r3, r0
 8009166:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009168:	e01d      	b.n	80091a6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800916a:	4b65      	ldr	r3, [pc, #404]	; (8009300 <UART_SetConfig+0x56c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2210      	movs	r2, #16
 8009170:	4013      	ands	r3, r2
 8009172:	d002      	beq.n	800917a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009174:	4b63      	ldr	r3, [pc, #396]	; (8009304 <UART_SetConfig+0x570>)
 8009176:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009178:	e015      	b.n	80091a6 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800917a:	4b63      	ldr	r3, [pc, #396]	; (8009308 <UART_SetConfig+0x574>)
 800917c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800917e:	e012      	b.n	80091a6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009180:	f7fd fd40 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 8009184:	0003      	movs	r3, r0
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009188:	e00d      	b.n	80091a6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800918a:	2380      	movs	r3, #128	; 0x80
 800918c:	021b      	lsls	r3, r3, #8
 800918e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009190:	e009      	b.n	80091a6 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009196:	231a      	movs	r3, #26
 8009198:	2218      	movs	r2, #24
 800919a:	4694      	mov	ip, r2
 800919c:	44bc      	add	ip, r7
 800919e:	4463      	add	r3, ip
 80091a0:	2201      	movs	r2, #1
 80091a2:	701a      	strb	r2, [r3, #0]
        break;
 80091a4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d100      	bne.n	80091ae <UART_SetConfig+0x41a>
 80091ac:	e095      	b.n	80092da <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	005a      	lsls	r2, r3, #1
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	085b      	lsrs	r3, r3, #1
 80091b8:	18d2      	adds	r2, r2, r3
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	0019      	movs	r1, r3
 80091c0:	0010      	movs	r0, r2
 80091c2:	f7f6 ffc7 	bl	8000154 <__udivsi3>
 80091c6:	0003      	movs	r3, r0
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	2b0f      	cmp	r3, #15
 80091d0:	d921      	bls.n	8009216 <UART_SetConfig+0x482>
 80091d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091d4:	2380      	movs	r3, #128	; 0x80
 80091d6:	025b      	lsls	r3, r3, #9
 80091d8:	429a      	cmp	r2, r3
 80091da:	d21c      	bcs.n	8009216 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091de:	b29a      	uxth	r2, r3
 80091e0:	200e      	movs	r0, #14
 80091e2:	2418      	movs	r4, #24
 80091e4:	193b      	adds	r3, r7, r4
 80091e6:	181b      	adds	r3, r3, r0
 80091e8:	210f      	movs	r1, #15
 80091ea:	438a      	bics	r2, r1
 80091ec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091f0:	085b      	lsrs	r3, r3, #1
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	2207      	movs	r2, #7
 80091f6:	4013      	ands	r3, r2
 80091f8:	b299      	uxth	r1, r3
 80091fa:	193b      	adds	r3, r7, r4
 80091fc:	181b      	adds	r3, r3, r0
 80091fe:	193a      	adds	r2, r7, r4
 8009200:	1812      	adds	r2, r2, r0
 8009202:	8812      	ldrh	r2, [r2, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	193a      	adds	r2, r7, r4
 800920e:	1812      	adds	r2, r2, r0
 8009210:	8812      	ldrh	r2, [r2, #0]
 8009212:	60da      	str	r2, [r3, #12]
 8009214:	e061      	b.n	80092da <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8009216:	231a      	movs	r3, #26
 8009218:	2218      	movs	r2, #24
 800921a:	4694      	mov	ip, r2
 800921c:	44bc      	add	ip, r7
 800921e:	4463      	add	r3, ip
 8009220:	2201      	movs	r2, #1
 8009222:	701a      	strb	r2, [r3, #0]
 8009224:	e059      	b.n	80092da <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009226:	231b      	movs	r3, #27
 8009228:	2218      	movs	r2, #24
 800922a:	4694      	mov	ip, r2
 800922c:	44bc      	add	ip, r7
 800922e:	4463      	add	r3, ip
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2b08      	cmp	r3, #8
 8009234:	d822      	bhi.n	800927c <UART_SetConfig+0x4e8>
 8009236:	009a      	lsls	r2, r3, #2
 8009238:	4b34      	ldr	r3, [pc, #208]	; (800930c <UART_SetConfig+0x578>)
 800923a:	18d3      	adds	r3, r2, r3
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009240:	f7fd fd90 	bl	8006d64 <HAL_RCC_GetPCLK1Freq>
 8009244:	0003      	movs	r3, r0
 8009246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009248:	e022      	b.n	8009290 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800924a:	f7fd fda1 	bl	8006d90 <HAL_RCC_GetPCLK2Freq>
 800924e:	0003      	movs	r3, r0
 8009250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009252:	e01d      	b.n	8009290 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009254:	4b2a      	ldr	r3, [pc, #168]	; (8009300 <UART_SetConfig+0x56c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2210      	movs	r2, #16
 800925a:	4013      	ands	r3, r2
 800925c:	d002      	beq.n	8009264 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800925e:	4b29      	ldr	r3, [pc, #164]	; (8009304 <UART_SetConfig+0x570>)
 8009260:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009262:	e015      	b.n	8009290 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8009264:	4b28      	ldr	r3, [pc, #160]	; (8009308 <UART_SetConfig+0x574>)
 8009266:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009268:	e012      	b.n	8009290 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800926a:	f7fd fccb 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 800926e:	0003      	movs	r3, r0
 8009270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009272:	e00d      	b.n	8009290 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009274:	2380      	movs	r3, #128	; 0x80
 8009276:	021b      	lsls	r3, r3, #8
 8009278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800927a:	e009      	b.n	8009290 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009280:	231a      	movs	r3, #26
 8009282:	2218      	movs	r2, #24
 8009284:	4694      	mov	ip, r2
 8009286:	44bc      	add	ip, r7
 8009288:	4463      	add	r3, ip
 800928a:	2201      	movs	r2, #1
 800928c:	701a      	strb	r2, [r3, #0]
        break;
 800928e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	2b00      	cmp	r3, #0
 8009294:	d021      	beq.n	80092da <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	085a      	lsrs	r2, r3, #1
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	18d2      	adds	r2, r2, r3
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	0019      	movs	r1, r3
 80092a6:	0010      	movs	r0, r2
 80092a8:	f7f6 ff54 	bl	8000154 <__udivsi3>
 80092ac:	0003      	movs	r3, r0
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b4:	2b0f      	cmp	r3, #15
 80092b6:	d909      	bls.n	80092cc <UART_SetConfig+0x538>
 80092b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092ba:	2380      	movs	r3, #128	; 0x80
 80092bc:	025b      	lsls	r3, r3, #9
 80092be:	429a      	cmp	r2, r3
 80092c0:	d204      	bcs.n	80092cc <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092c8:	60da      	str	r2, [r3, #12]
 80092ca:	e006      	b.n	80092da <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80092cc:	231a      	movs	r3, #26
 80092ce:	2218      	movs	r2, #24
 80092d0:	4694      	mov	ip, r2
 80092d2:	44bc      	add	ip, r7
 80092d4:	4463      	add	r3, ip
 80092d6:	2201      	movs	r2, #1
 80092d8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	2200      	movs	r2, #0
 80092de:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	2200      	movs	r2, #0
 80092e4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80092e6:	231a      	movs	r3, #26
 80092e8:	2218      	movs	r2, #24
 80092ea:	4694      	mov	ip, r2
 80092ec:	44bc      	add	ip, r7
 80092ee:	4463      	add	r3, ip
 80092f0:	781b      	ldrb	r3, [r3, #0]
}
 80092f2:	0018      	movs	r0, r3
 80092f4:	46bd      	mov	sp, r7
 80092f6:	b00e      	add	sp, #56	; 0x38
 80092f8:	bdb0      	pop	{r4, r5, r7, pc}
 80092fa:	46c0      	nop			; (mov r8, r8)
 80092fc:	0800e650 	.word	0x0800e650
 8009300:	40021000 	.word	0x40021000
 8009304:	003d0900 	.word	0x003d0900
 8009308:	00f42400 	.word	0x00f42400
 800930c:	0800e674 	.word	0x0800e674

08009310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	2201      	movs	r2, #1
 800931e:	4013      	ands	r3, r2
 8009320:	d00b      	beq.n	800933a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	4a4a      	ldr	r2, [pc, #296]	; (8009454 <UART_AdvFeatureConfig+0x144>)
 800932a:	4013      	ands	r3, r2
 800932c:	0019      	movs	r1, r3
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933e:	2202      	movs	r2, #2
 8009340:	4013      	ands	r3, r2
 8009342:	d00b      	beq.n	800935c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	4a43      	ldr	r2, [pc, #268]	; (8009458 <UART_AdvFeatureConfig+0x148>)
 800934c:	4013      	ands	r3, r2
 800934e:	0019      	movs	r1, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	430a      	orrs	r2, r1
 800935a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009360:	2204      	movs	r2, #4
 8009362:	4013      	ands	r3, r2
 8009364:	d00b      	beq.n	800937e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	4a3b      	ldr	r2, [pc, #236]	; (800945c <UART_AdvFeatureConfig+0x14c>)
 800936e:	4013      	ands	r3, r2
 8009370:	0019      	movs	r1, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	2208      	movs	r2, #8
 8009384:	4013      	ands	r3, r2
 8009386:	d00b      	beq.n	80093a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	4a34      	ldr	r2, [pc, #208]	; (8009460 <UART_AdvFeatureConfig+0x150>)
 8009390:	4013      	ands	r3, r2
 8009392:	0019      	movs	r1, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	2210      	movs	r2, #16
 80093a6:	4013      	ands	r3, r2
 80093a8:	d00b      	beq.n	80093c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	4a2c      	ldr	r2, [pc, #176]	; (8009464 <UART_AdvFeatureConfig+0x154>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	0019      	movs	r1, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c6:	2220      	movs	r2, #32
 80093c8:	4013      	ands	r3, r2
 80093ca:	d00b      	beq.n	80093e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	4a25      	ldr	r2, [pc, #148]	; (8009468 <UART_AdvFeatureConfig+0x158>)
 80093d4:	4013      	ands	r3, r2
 80093d6:	0019      	movs	r1, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e8:	2240      	movs	r2, #64	; 0x40
 80093ea:	4013      	ands	r3, r2
 80093ec:	d01d      	beq.n	800942a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	4a1d      	ldr	r2, [pc, #116]	; (800946c <UART_AdvFeatureConfig+0x15c>)
 80093f6:	4013      	ands	r3, r2
 80093f8:	0019      	movs	r1, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800940a:	2380      	movs	r3, #128	; 0x80
 800940c:	035b      	lsls	r3, r3, #13
 800940e:	429a      	cmp	r2, r3
 8009410:	d10b      	bne.n	800942a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	4a15      	ldr	r2, [pc, #84]	; (8009470 <UART_AdvFeatureConfig+0x160>)
 800941a:	4013      	ands	r3, r2
 800941c:	0019      	movs	r1, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	2280      	movs	r2, #128	; 0x80
 8009430:	4013      	ands	r3, r2
 8009432:	d00b      	beq.n	800944c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	4a0e      	ldr	r2, [pc, #56]	; (8009474 <UART_AdvFeatureConfig+0x164>)
 800943c:	4013      	ands	r3, r2
 800943e:	0019      	movs	r1, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	605a      	str	r2, [r3, #4]
  }
}
 800944c:	46c0      	nop			; (mov r8, r8)
 800944e:	46bd      	mov	sp, r7
 8009450:	b002      	add	sp, #8
 8009452:	bd80      	pop	{r7, pc}
 8009454:	fffdffff 	.word	0xfffdffff
 8009458:	fffeffff 	.word	0xfffeffff
 800945c:	fffbffff 	.word	0xfffbffff
 8009460:	ffff7fff 	.word	0xffff7fff
 8009464:	ffffefff 	.word	0xffffefff
 8009468:	ffffdfff 	.word	0xffffdfff
 800946c:	ffefffff 	.word	0xffefffff
 8009470:	ff9fffff 	.word	0xff9fffff
 8009474:	fff7ffff 	.word	0xfff7ffff

08009478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af02      	add	r7, sp, #8
 800947e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2280      	movs	r2, #128	; 0x80
 8009484:	2100      	movs	r1, #0
 8009486:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009488:	f7fb fd18 	bl	8004ebc <HAL_GetTick>
 800948c:	0003      	movs	r3, r0
 800948e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2208      	movs	r2, #8
 8009498:	4013      	ands	r3, r2
 800949a:	2b08      	cmp	r3, #8
 800949c:	d10c      	bne.n	80094b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2280      	movs	r2, #128	; 0x80
 80094a2:	0391      	lsls	r1, r2, #14
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	4a17      	ldr	r2, [pc, #92]	; (8009504 <UART_CheckIdleState+0x8c>)
 80094a8:	9200      	str	r2, [sp, #0]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f000 f82c 	bl	8009508 <UART_WaitOnFlagUntilTimeout>
 80094b0:	1e03      	subs	r3, r0, #0
 80094b2:	d001      	beq.n	80094b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e021      	b.n	80094fc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2204      	movs	r2, #4
 80094c0:	4013      	ands	r3, r2
 80094c2:	2b04      	cmp	r3, #4
 80094c4:	d10c      	bne.n	80094e0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2280      	movs	r2, #128	; 0x80
 80094ca:	03d1      	lsls	r1, r2, #15
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	4a0d      	ldr	r2, [pc, #52]	; (8009504 <UART_CheckIdleState+0x8c>)
 80094d0:	9200      	str	r2, [sp, #0]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f000 f818 	bl	8009508 <UART_WaitOnFlagUntilTimeout>
 80094d8:	1e03      	subs	r3, r0, #0
 80094da:	d001      	beq.n	80094e0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094dc:	2303      	movs	r3, #3
 80094de:	e00d      	b.n	80094fc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2220      	movs	r2, #32
 80094e4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2220      	movs	r2, #32
 80094ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2274      	movs	r2, #116	; 0x74
 80094f6:	2100      	movs	r1, #0
 80094f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	0018      	movs	r0, r3
 80094fe:	46bd      	mov	sp, r7
 8009500:	b004      	add	sp, #16
 8009502:	bd80      	pop	{r7, pc}
 8009504:	01ffffff 	.word	0x01ffffff

08009508 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b094      	sub	sp, #80	; 0x50
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	603b      	str	r3, [r7, #0]
 8009514:	1dfb      	adds	r3, r7, #7
 8009516:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009518:	e0a3      	b.n	8009662 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800951a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800951c:	3301      	adds	r3, #1
 800951e:	d100      	bne.n	8009522 <UART_WaitOnFlagUntilTimeout+0x1a>
 8009520:	e09f      	b.n	8009662 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009522:	f7fb fccb 	bl	8004ebc <HAL_GetTick>
 8009526:	0002      	movs	r2, r0
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800952e:	429a      	cmp	r2, r3
 8009530:	d302      	bcc.n	8009538 <UART_WaitOnFlagUntilTimeout+0x30>
 8009532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009534:	2b00      	cmp	r3, #0
 8009536:	d13d      	bne.n	80095b4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009538:	f3ef 8310 	mrs	r3, PRIMASK
 800953c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009540:	647b      	str	r3, [r7, #68]	; 0x44
 8009542:	2301      	movs	r3, #1
 8009544:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009548:	f383 8810 	msr	PRIMASK, r3
}
 800954c:	46c0      	nop			; (mov r8, r8)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	494c      	ldr	r1, [pc, #304]	; (800968c <UART_WaitOnFlagUntilTimeout+0x184>)
 800955a:	400a      	ands	r2, r1
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009560:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	f383 8810 	msr	PRIMASK, r3
}
 8009568:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800956a:	f3ef 8310 	mrs	r3, PRIMASK
 800956e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009572:	643b      	str	r3, [r7, #64]	; 0x40
 8009574:	2301      	movs	r3, #1
 8009576:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957a:	f383 8810 	msr	PRIMASK, r3
}
 800957e:	46c0      	nop			; (mov r8, r8)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2101      	movs	r1, #1
 800958c:	438a      	bics	r2, r1
 800958e:	609a      	str	r2, [r3, #8]
 8009590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009592:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009596:	f383 8810 	msr	PRIMASK, r3
}
 800959a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2220      	movs	r2, #32
 80095a0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2220      	movs	r2, #32
 80095a6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2274      	movs	r2, #116	; 0x74
 80095ac:	2100      	movs	r1, #0
 80095ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80095b0:	2303      	movs	r3, #3
 80095b2:	e067      	b.n	8009684 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2204      	movs	r2, #4
 80095bc:	4013      	ands	r3, r2
 80095be:	d050      	beq.n	8009662 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	69da      	ldr	r2, [r3, #28]
 80095c6:	2380      	movs	r3, #128	; 0x80
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	401a      	ands	r2, r3
 80095cc:	2380      	movs	r3, #128	; 0x80
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d146      	bne.n	8009662 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2280      	movs	r2, #128	; 0x80
 80095da:	0112      	lsls	r2, r2, #4
 80095dc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095de:	f3ef 8310 	mrs	r3, PRIMASK
 80095e2:	613b      	str	r3, [r7, #16]
  return(result);
 80095e4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095e8:	2301      	movs	r3, #1
 80095ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f383 8810 	msr	PRIMASK, r3
}
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4923      	ldr	r1, [pc, #140]	; (800968c <UART_WaitOnFlagUntilTimeout+0x184>)
 8009600:	400a      	ands	r2, r1
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009606:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	f383 8810 	msr	PRIMASK, r3
}
 800960e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009610:	f3ef 8310 	mrs	r3, PRIMASK
 8009614:	61fb      	str	r3, [r7, #28]
  return(result);
 8009616:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009618:	64bb      	str	r3, [r7, #72]	; 0x48
 800961a:	2301      	movs	r3, #1
 800961c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	f383 8810 	msr	PRIMASK, r3
}
 8009624:	46c0      	nop			; (mov r8, r8)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689a      	ldr	r2, [r3, #8]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2101      	movs	r1, #1
 8009632:	438a      	bics	r2, r1
 8009634:	609a      	str	r2, [r3, #8]
 8009636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	f383 8810 	msr	PRIMASK, r3
}
 8009640:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2220      	movs	r2, #32
 8009646:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2220      	movs	r2, #32
 800964c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2280      	movs	r2, #128	; 0x80
 8009652:	2120      	movs	r1, #32
 8009654:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2274      	movs	r2, #116	; 0x74
 800965a:	2100      	movs	r1, #0
 800965c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e010      	b.n	8009684 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	68ba      	ldr	r2, [r7, #8]
 800966a:	4013      	ands	r3, r2
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	425a      	negs	r2, r3
 8009672:	4153      	adcs	r3, r2
 8009674:	b2db      	uxtb	r3, r3
 8009676:	001a      	movs	r2, r3
 8009678:	1dfb      	adds	r3, r7, #7
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	429a      	cmp	r2, r3
 800967e:	d100      	bne.n	8009682 <UART_WaitOnFlagUntilTimeout+0x17a>
 8009680:	e74b      	b.n	800951a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	0018      	movs	r0, r3
 8009686:	46bd      	mov	sp, r7
 8009688:	b014      	add	sp, #80	; 0x50
 800968a:	bd80      	pop	{r7, pc}
 800968c:	fffffe5f 	.word	0xfffffe5f

08009690 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b08c      	sub	sp, #48	; 0x30
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	1dbb      	adds	r3, r7, #6
 800969c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	1dba      	adds	r2, r7, #6
 80096a8:	2158      	movs	r1, #88	; 0x58
 80096aa:	8812      	ldrh	r2, [r2, #0]
 80096ac:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	1dba      	adds	r2, r7, #6
 80096b2:	215a      	movs	r1, #90	; 0x5a
 80096b4:	8812      	ldrh	r2, [r2, #0]
 80096b6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	2380      	movs	r3, #128	; 0x80
 80096c4:	015b      	lsls	r3, r3, #5
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d10d      	bne.n	80096e6 <UART_Start_Receive_IT+0x56>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d104      	bne.n	80096dc <UART_Start_Receive_IT+0x4c>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	225c      	movs	r2, #92	; 0x5c
 80096d6:	4943      	ldr	r1, [pc, #268]	; (80097e4 <UART_Start_Receive_IT+0x154>)
 80096d8:	5299      	strh	r1, [r3, r2]
 80096da:	e02e      	b.n	800973a <UART_Start_Receive_IT+0xaa>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	225c      	movs	r2, #92	; 0x5c
 80096e0:	21ff      	movs	r1, #255	; 0xff
 80096e2:	5299      	strh	r1, [r3, r2]
 80096e4:	e029      	b.n	800973a <UART_Start_Receive_IT+0xaa>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10d      	bne.n	800970a <UART_Start_Receive_IT+0x7a>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d104      	bne.n	8009700 <UART_Start_Receive_IT+0x70>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	225c      	movs	r2, #92	; 0x5c
 80096fa:	21ff      	movs	r1, #255	; 0xff
 80096fc:	5299      	strh	r1, [r3, r2]
 80096fe:	e01c      	b.n	800973a <UART_Start_Receive_IT+0xaa>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	225c      	movs	r2, #92	; 0x5c
 8009704:	217f      	movs	r1, #127	; 0x7f
 8009706:	5299      	strh	r1, [r3, r2]
 8009708:	e017      	b.n	800973a <UART_Start_Receive_IT+0xaa>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	2380      	movs	r3, #128	; 0x80
 8009710:	055b      	lsls	r3, r3, #21
 8009712:	429a      	cmp	r2, r3
 8009714:	d10d      	bne.n	8009732 <UART_Start_Receive_IT+0xa2>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d104      	bne.n	8009728 <UART_Start_Receive_IT+0x98>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	225c      	movs	r2, #92	; 0x5c
 8009722:	217f      	movs	r1, #127	; 0x7f
 8009724:	5299      	strh	r1, [r3, r2]
 8009726:	e008      	b.n	800973a <UART_Start_Receive_IT+0xaa>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	225c      	movs	r2, #92	; 0x5c
 800972c:	213f      	movs	r1, #63	; 0x3f
 800972e:	5299      	strh	r1, [r3, r2]
 8009730:	e003      	b.n	800973a <UART_Start_Receive_IT+0xaa>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	225c      	movs	r2, #92	; 0x5c
 8009736:	2100      	movs	r1, #0
 8009738:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2280      	movs	r2, #128	; 0x80
 800973e:	2100      	movs	r1, #0
 8009740:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2222      	movs	r2, #34	; 0x22
 8009746:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009748:	f3ef 8310 	mrs	r3, PRIMASK
 800974c:	61fb      	str	r3, [r7, #28]
  return(result);
 800974e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009752:	2301      	movs	r3, #1
 8009754:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009756:	6a3b      	ldr	r3, [r7, #32]
 8009758:	f383 8810 	msr	PRIMASK, r3
}
 800975c:	46c0      	nop			; (mov r8, r8)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	689a      	ldr	r2, [r3, #8]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2101      	movs	r1, #1
 800976a:	430a      	orrs	r2, r1
 800976c:	609a      	str	r2, [r3, #8]
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009774:	f383 8810 	msr	PRIMASK, r3
}
 8009778:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	689a      	ldr	r2, [r3, #8]
 800977e:	2380      	movs	r3, #128	; 0x80
 8009780:	015b      	lsls	r3, r3, #5
 8009782:	429a      	cmp	r2, r3
 8009784:	d107      	bne.n	8009796 <UART_Start_Receive_IT+0x106>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d103      	bne.n	8009796 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4a15      	ldr	r2, [pc, #84]	; (80097e8 <UART_Start_Receive_IT+0x158>)
 8009792:	665a      	str	r2, [r3, #100]	; 0x64
 8009794:	e002      	b.n	800979c <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4a14      	ldr	r2, [pc, #80]	; (80097ec <UART_Start_Receive_IT+0x15c>)
 800979a:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2274      	movs	r2, #116	; 0x74
 80097a0:	2100      	movs	r1, #0
 80097a2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a4:	f3ef 8310 	mrs	r3, PRIMASK
 80097a8:	613b      	str	r3, [r7, #16]
  return(result);
 80097aa:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80097ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80097ae:	2301      	movs	r3, #1
 80097b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f383 8810 	msr	PRIMASK, r3
}
 80097b8:	46c0      	nop			; (mov r8, r8)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2190      	movs	r1, #144	; 0x90
 80097c6:	0049      	lsls	r1, r1, #1
 80097c8:	430a      	orrs	r2, r1
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	f383 8810 	msr	PRIMASK, r3
}
 80097d6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	0018      	movs	r0, r3
 80097dc:	46bd      	mov	sp, r7
 80097de:	b00c      	add	sp, #48	; 0x30
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	46c0      	nop			; (mov r8, r8)
 80097e4:	000001ff 	.word	0x000001ff
 80097e8:	08009c11 	.word	0x08009c11
 80097ec:	08009aa9 	.word	0x08009aa9

080097f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b08e      	sub	sp, #56	; 0x38
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097f8:	f3ef 8310 	mrs	r3, PRIMASK
 80097fc:	617b      	str	r3, [r7, #20]
  return(result);
 80097fe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009800:	637b      	str	r3, [r7, #52]	; 0x34
 8009802:	2301      	movs	r3, #1
 8009804:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	f383 8810 	msr	PRIMASK, r3
}
 800980c:	46c0      	nop			; (mov r8, r8)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4925      	ldr	r1, [pc, #148]	; (80098b0 <UART_EndRxTransfer+0xc0>)
 800981a:	400a      	ands	r2, r1
 800981c:	601a      	str	r2, [r3, #0]
 800981e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009820:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	f383 8810 	msr	PRIMASK, r3
}
 8009828:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800982a:	f3ef 8310 	mrs	r3, PRIMASK
 800982e:	623b      	str	r3, [r7, #32]
  return(result);
 8009830:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009832:	633b      	str	r3, [r7, #48]	; 0x30
 8009834:	2301      	movs	r3, #1
 8009836:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983a:	f383 8810 	msr	PRIMASK, r3
}
 800983e:	46c0      	nop			; (mov r8, r8)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	689a      	ldr	r2, [r3, #8]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2101      	movs	r1, #1
 800984c:	438a      	bics	r2, r1
 800984e:	609a      	str	r2, [r3, #8]
 8009850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009852:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	f383 8810 	msr	PRIMASK, r3
}
 800985a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009860:	2b01      	cmp	r3, #1
 8009862:	d118      	bne.n	8009896 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009864:	f3ef 8310 	mrs	r3, PRIMASK
 8009868:	60bb      	str	r3, [r7, #8]
  return(result);
 800986a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800986c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800986e:	2301      	movs	r3, #1
 8009870:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f383 8810 	msr	PRIMASK, r3
}
 8009878:	46c0      	nop			; (mov r8, r8)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2110      	movs	r1, #16
 8009886:	438a      	bics	r2, r1
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f383 8810 	msr	PRIMASK, r3
}
 8009894:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2220      	movs	r2, #32
 800989a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80098a8:	46c0      	nop			; (mov r8, r8)
 80098aa:	46bd      	mov	sp, r7
 80098ac:	b00e      	add	sp, #56	; 0x38
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	fffffedf 	.word	0xfffffedf

080098b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	225a      	movs	r2, #90	; 0x5a
 80098c6:	2100      	movs	r1, #0
 80098c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2252      	movs	r2, #82	; 0x52
 80098ce:	2100      	movs	r1, #0
 80098d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	0018      	movs	r0, r3
 80098d6:	f7ff fa49 	bl	8008d6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098da:	46c0      	nop			; (mov r8, r8)
 80098dc:	46bd      	mov	sp, r7
 80098de:	b004      	add	sp, #16
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b08a      	sub	sp, #40	; 0x28
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ee:	2b21      	cmp	r3, #33	; 0x21
 80098f0:	d14c      	bne.n	800998c <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2252      	movs	r2, #82	; 0x52
 80098f6:	5a9b      	ldrh	r3, [r3, r2]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d132      	bne.n	8009964 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009902:	60bb      	str	r3, [r7, #8]
  return(result);
 8009904:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009906:	627b      	str	r3, [r7, #36]	; 0x24
 8009908:	2301      	movs	r3, #1
 800990a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f383 8810 	msr	PRIMASK, r3
}
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2180      	movs	r1, #128	; 0x80
 8009920:	438a      	bics	r2, r1
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	f383 8810 	msr	PRIMASK, r3
}
 800992e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009930:	f3ef 8310 	mrs	r3, PRIMASK
 8009934:	617b      	str	r3, [r7, #20]
  return(result);
 8009936:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009938:	623b      	str	r3, [r7, #32]
 800993a:	2301      	movs	r3, #1
 800993c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	f383 8810 	msr	PRIMASK, r3
}
 8009944:	46c0      	nop			; (mov r8, r8)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2140      	movs	r1, #64	; 0x40
 8009952:	430a      	orrs	r2, r1
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	f383 8810 	msr	PRIMASK, r3
}
 8009960:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009962:	e013      	b.n	800998c <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009974:	1c5a      	adds	r2, r3, #1
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2252      	movs	r2, #82	; 0x52
 800997e:	5a9b      	ldrh	r3, [r3, r2]
 8009980:	b29b      	uxth	r3, r3
 8009982:	3b01      	subs	r3, #1
 8009984:	b299      	uxth	r1, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2252      	movs	r2, #82	; 0x52
 800998a:	5299      	strh	r1, [r3, r2]
}
 800998c:	46c0      	nop			; (mov r8, r8)
 800998e:	46bd      	mov	sp, r7
 8009990:	b00a      	add	sp, #40	; 0x28
 8009992:	bd80      	pop	{r7, pc}

08009994 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08c      	sub	sp, #48	; 0x30
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099a0:	2b21      	cmp	r3, #33	; 0x21
 80099a2:	d151      	bne.n	8009a48 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2252      	movs	r2, #82	; 0x52
 80099a8:	5a9b      	ldrh	r3, [r3, r2]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d132      	bne.n	8009a16 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099b0:	f3ef 8310 	mrs	r3, PRIMASK
 80099b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80099b6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80099ba:	2301      	movs	r3, #1
 80099bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f383 8810 	msr	PRIMASK, r3
}
 80099c4:	46c0      	nop			; (mov r8, r8)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2180      	movs	r1, #128	; 0x80
 80099d2:	438a      	bics	r2, r1
 80099d4:	601a      	str	r2, [r3, #0]
 80099d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f383 8810 	msr	PRIMASK, r3
}
 80099e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099e2:	f3ef 8310 	mrs	r3, PRIMASK
 80099e6:	61bb      	str	r3, [r7, #24]
  return(result);
 80099e8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099ea:	627b      	str	r3, [r7, #36]	; 0x24
 80099ec:	2301      	movs	r3, #1
 80099ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	f383 8810 	msr	PRIMASK, r3
}
 80099f6:	46c0      	nop			; (mov r8, r8)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2140      	movs	r1, #64	; 0x40
 8009a04:	430a      	orrs	r2, r1
 8009a06:	601a      	str	r2, [r3, #0]
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	f383 8810 	msr	PRIMASK, r3
}
 8009a12:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009a14:	e018      	b.n	8009a48 <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	001a      	movs	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	05d2      	lsls	r2, r2, #23
 8009a28:	0dd2      	lsrs	r2, r2, #23
 8009a2a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a30:	1c9a      	adds	r2, r3, #2
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2252      	movs	r2, #82	; 0x52
 8009a3a:	5a9b      	ldrh	r3, [r3, r2]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	b299      	uxth	r1, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2252      	movs	r2, #82	; 0x52
 8009a46:	5299      	strh	r1, [r3, r2]
}
 8009a48:	46c0      	nop			; (mov r8, r8)
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	b00c      	add	sp, #48	; 0x30
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a58:	f3ef 8310 	mrs	r3, PRIMASK
 8009a5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a5e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	2301      	movs	r3, #1
 8009a64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f383 8810 	msr	PRIMASK, r3
}
 8009a6c:	46c0      	nop			; (mov r8, r8)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2140      	movs	r1, #64	; 0x40
 8009a7a:	438a      	bics	r2, r1
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f383 8810 	msr	PRIMASK, r3
}
 8009a88:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	0018      	movs	r0, r3
 8009a9a:	f7fb f855 	bl	8004b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a9e:	46c0      	nop			; (mov r8, r8)
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	b006      	add	sp, #24
 8009aa4:	bd80      	pop	{r7, pc}
	...

08009aa8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b090      	sub	sp, #64	; 0x40
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009ab0:	203e      	movs	r0, #62	; 0x3e
 8009ab2:	183b      	adds	r3, r7, r0
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	215c      	movs	r1, #92	; 0x5c
 8009ab8:	5a52      	ldrh	r2, [r2, r1]
 8009aba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac0:	2b22      	cmp	r3, #34	; 0x22
 8009ac2:	d000      	beq.n	8009ac6 <UART_RxISR_8BIT+0x1e>
 8009ac4:	e095      	b.n	8009bf2 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009acc:	213c      	movs	r1, #60	; 0x3c
 8009ace:	187b      	adds	r3, r7, r1
 8009ad0:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009ad2:	187b      	adds	r3, r7, r1
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	183b      	adds	r3, r7, r0
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	b2d9      	uxtb	r1, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ae2:	400a      	ands	r2, r1
 8009ae4:	b2d2      	uxtb	r2, r2
 8009ae6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aec:	1c5a      	adds	r2, r3, #1
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	225a      	movs	r2, #90	; 0x5a
 8009af6:	5a9b      	ldrh	r3, [r3, r2]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	3b01      	subs	r3, #1
 8009afc:	b299      	uxth	r1, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	225a      	movs	r2, #90	; 0x5a
 8009b02:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	225a      	movs	r2, #90	; 0x5a
 8009b08:	5a9b      	ldrh	r3, [r3, r2]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d178      	bne.n	8009c02 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b10:	f3ef 8310 	mrs	r3, PRIMASK
 8009b14:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b16:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	f383 8810 	msr	PRIMASK, r3
}
 8009b24:	46c0      	nop			; (mov r8, r8)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4936      	ldr	r1, [pc, #216]	; (8009c0c <UART_RxISR_8BIT+0x164>)
 8009b32:	400a      	ands	r2, r1
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b3a:	6a3b      	ldr	r3, [r7, #32]
 8009b3c:	f383 8810 	msr	PRIMASK, r3
}
 8009b40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b42:	f3ef 8310 	mrs	r3, PRIMASK
 8009b46:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8009b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	f383 8810 	msr	PRIMASK, r3
}
 8009b56:	46c0      	nop			; (mov r8, r8)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	689a      	ldr	r2, [r3, #8]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2101      	movs	r1, #1
 8009b64:	438a      	bics	r2, r1
 8009b66:	609a      	str	r2, [r3, #8]
 8009b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6e:	f383 8810 	msr	PRIMASK, r3
}
 8009b72:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2220      	movs	r2, #32
 8009b78:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d12f      	bne.n	8009be8 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8009b92:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b94:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b96:	633b      	str	r3, [r7, #48]	; 0x30
 8009b98:	2301      	movs	r3, #1
 8009b9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f383 8810 	msr	PRIMASK, r3
}
 8009ba2:	46c0      	nop			; (mov r8, r8)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2110      	movs	r1, #16
 8009bb0:	438a      	bics	r2, r1
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f383 8810 	msr	PRIMASK, r3
}
 8009bbe:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	69db      	ldr	r3, [r3, #28]
 8009bc6:	2210      	movs	r2, #16
 8009bc8:	4013      	ands	r3, r2
 8009bca:	2b10      	cmp	r3, #16
 8009bcc:	d103      	bne.n	8009bd6 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	2210      	movs	r2, #16
 8009bd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2258      	movs	r2, #88	; 0x58
 8009bda:	5a9a      	ldrh	r2, [r3, r2]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	0011      	movs	r1, r2
 8009be0:	0018      	movs	r0, r3
 8009be2:	f7ff f8cb 	bl	8008d7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009be6:	e00c      	b.n	8009c02 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	0018      	movs	r0, r3
 8009bec:	f7fa ff74 	bl	8004ad8 <HAL_UART_RxCpltCallback>
}
 8009bf0:	e007      	b.n	8009c02 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	699a      	ldr	r2, [r3, #24]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2108      	movs	r1, #8
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	619a      	str	r2, [r3, #24]
}
 8009c02:	46c0      	nop			; (mov r8, r8)
 8009c04:	46bd      	mov	sp, r7
 8009c06:	b010      	add	sp, #64	; 0x40
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	46c0      	nop			; (mov r8, r8)
 8009c0c:	fffffedf 	.word	0xfffffedf

08009c10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b090      	sub	sp, #64	; 0x40
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009c18:	203e      	movs	r0, #62	; 0x3e
 8009c1a:	183b      	adds	r3, r7, r0
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	215c      	movs	r1, #92	; 0x5c
 8009c20:	5a52      	ldrh	r2, [r2, r1]
 8009c22:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c28:	2b22      	cmp	r3, #34	; 0x22
 8009c2a:	d000      	beq.n	8009c2e <UART_RxISR_16BIT+0x1e>
 8009c2c:	e095      	b.n	8009d5a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c34:	213c      	movs	r1, #60	; 0x3c
 8009c36:	187b      	adds	r3, r7, r1
 8009c38:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8009c40:	187b      	adds	r3, r7, r1
 8009c42:	183a      	adds	r2, r7, r0
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	8812      	ldrh	r2, [r2, #0]
 8009c48:	4013      	ands	r3, r2
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c54:	1c9a      	adds	r2, r3, #2
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	225a      	movs	r2, #90	; 0x5a
 8009c5e:	5a9b      	ldrh	r3, [r3, r2]
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b299      	uxth	r1, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	225a      	movs	r2, #90	; 0x5a
 8009c6a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	225a      	movs	r2, #90	; 0x5a
 8009c70:	5a9b      	ldrh	r3, [r3, r2]
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d178      	bne.n	8009d6a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c78:	f3ef 8310 	mrs	r3, PRIMASK
 8009c7c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c7e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c80:	637b      	str	r3, [r7, #52]	; 0x34
 8009c82:	2301      	movs	r3, #1
 8009c84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	f383 8810 	msr	PRIMASK, r3
}
 8009c8c:	46c0      	nop			; (mov r8, r8)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4936      	ldr	r1, [pc, #216]	; (8009d74 <UART_RxISR_16BIT+0x164>)
 8009c9a:	400a      	ands	r2, r1
 8009c9c:	601a      	str	r2, [r3, #0]
 8009c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ca0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	f383 8810 	msr	PRIMASK, r3
}
 8009ca8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009caa:	f3ef 8310 	mrs	r3, PRIMASK
 8009cae:	623b      	str	r3, [r7, #32]
  return(result);
 8009cb0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	f383 8810 	msr	PRIMASK, r3
}
 8009cbe:	46c0      	nop			; (mov r8, r8)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2101      	movs	r1, #1
 8009ccc:	438a      	bics	r2, r1
 8009cce:	609a      	str	r2, [r3, #8]
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	f383 8810 	msr	PRIMASK, r3
}
 8009cda:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2220      	movs	r2, #32
 8009ce0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d12f      	bne.n	8009d50 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8009cfa:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cfc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d00:	2301      	movs	r3, #1
 8009d02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f383 8810 	msr	PRIMASK, r3
}
 8009d0a:	46c0      	nop			; (mov r8, r8)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2110      	movs	r1, #16
 8009d18:	438a      	bics	r2, r1
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f383 8810 	msr	PRIMASK, r3
}
 8009d26:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	69db      	ldr	r3, [r3, #28]
 8009d2e:	2210      	movs	r2, #16
 8009d30:	4013      	ands	r3, r2
 8009d32:	2b10      	cmp	r3, #16
 8009d34:	d103      	bne.n	8009d3e <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2210      	movs	r2, #16
 8009d3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2258      	movs	r2, #88	; 0x58
 8009d42:	5a9a      	ldrh	r2, [r3, r2]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	0011      	movs	r1, r2
 8009d48:	0018      	movs	r0, r3
 8009d4a:	f7ff f817 	bl	8008d7c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d4e:	e00c      	b.n	8009d6a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	0018      	movs	r0, r3
 8009d54:	f7fa fec0 	bl	8004ad8 <HAL_UART_RxCpltCallback>
}
 8009d58:	e007      	b.n	8009d6a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	699a      	ldr	r2, [r3, #24]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2108      	movs	r1, #8
 8009d66:	430a      	orrs	r2, r1
 8009d68:	619a      	str	r2, [r3, #24]
}
 8009d6a:	46c0      	nop			; (mov r8, r8)
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	b010      	add	sp, #64	; 0x40
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	46c0      	nop			; (mov r8, r8)
 8009d74:	fffffedf 	.word	0xfffffedf

08009d78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009d80:	46c0      	nop			; (mov r8, r8)
 8009d82:	46bd      	mov	sp, r7
 8009d84:	b002      	add	sp, #8
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <atof>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	f001 fb32 	bl	800b3f4 <strtod>
 8009d90:	bd10      	pop	{r4, pc}

08009d92 <atoi>:
 8009d92:	b510      	push	{r4, lr}
 8009d94:	220a      	movs	r2, #10
 8009d96:	2100      	movs	r1, #0
 8009d98:	f001 fbc8 	bl	800b52c <strtol>
 8009d9c:	bd10      	pop	{r4, pc}
	...

08009da0 <__errno>:
 8009da0:	4b01      	ldr	r3, [pc, #4]	; (8009da8 <__errno+0x8>)
 8009da2:	6818      	ldr	r0, [r3, #0]
 8009da4:	4770      	bx	lr
 8009da6:	46c0      	nop			; (mov r8, r8)
 8009da8:	2000000c 	.word	0x2000000c

08009dac <__libc_init_array>:
 8009dac:	b570      	push	{r4, r5, r6, lr}
 8009dae:	2600      	movs	r6, #0
 8009db0:	4d0c      	ldr	r5, [pc, #48]	; (8009de4 <__libc_init_array+0x38>)
 8009db2:	4c0d      	ldr	r4, [pc, #52]	; (8009de8 <__libc_init_array+0x3c>)
 8009db4:	1b64      	subs	r4, r4, r5
 8009db6:	10a4      	asrs	r4, r4, #2
 8009db8:	42a6      	cmp	r6, r4
 8009dba:	d109      	bne.n	8009dd0 <__libc_init_array+0x24>
 8009dbc:	2600      	movs	r6, #0
 8009dbe:	f004 fb27 	bl	800e410 <_init>
 8009dc2:	4d0a      	ldr	r5, [pc, #40]	; (8009dec <__libc_init_array+0x40>)
 8009dc4:	4c0a      	ldr	r4, [pc, #40]	; (8009df0 <__libc_init_array+0x44>)
 8009dc6:	1b64      	subs	r4, r4, r5
 8009dc8:	10a4      	asrs	r4, r4, #2
 8009dca:	42a6      	cmp	r6, r4
 8009dcc:	d105      	bne.n	8009dda <__libc_init_array+0x2e>
 8009dce:	bd70      	pop	{r4, r5, r6, pc}
 8009dd0:	00b3      	lsls	r3, r6, #2
 8009dd2:	58eb      	ldr	r3, [r5, r3]
 8009dd4:	4798      	blx	r3
 8009dd6:	3601      	adds	r6, #1
 8009dd8:	e7ee      	b.n	8009db8 <__libc_init_array+0xc>
 8009dda:	00b3      	lsls	r3, r6, #2
 8009ddc:	58eb      	ldr	r3, [r5, r3]
 8009dde:	4798      	blx	r3
 8009de0:	3601      	adds	r6, #1
 8009de2:	e7f2      	b.n	8009dca <__libc_init_array+0x1e>
 8009de4:	0800eb4c 	.word	0x0800eb4c
 8009de8:	0800eb4c 	.word	0x0800eb4c
 8009dec:	0800eb4c 	.word	0x0800eb4c
 8009df0:	0800eb50 	.word	0x0800eb50

08009df4 <memset>:
 8009df4:	0003      	movs	r3, r0
 8009df6:	1882      	adds	r2, r0, r2
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d100      	bne.n	8009dfe <memset+0xa>
 8009dfc:	4770      	bx	lr
 8009dfe:	7019      	strb	r1, [r3, #0]
 8009e00:	3301      	adds	r3, #1
 8009e02:	e7f9      	b.n	8009df8 <memset+0x4>

08009e04 <__cvt>:
 8009e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e06:	001e      	movs	r6, r3
 8009e08:	2300      	movs	r3, #0
 8009e0a:	0014      	movs	r4, r2
 8009e0c:	b08b      	sub	sp, #44	; 0x2c
 8009e0e:	429e      	cmp	r6, r3
 8009e10:	da04      	bge.n	8009e1c <__cvt+0x18>
 8009e12:	2180      	movs	r1, #128	; 0x80
 8009e14:	0609      	lsls	r1, r1, #24
 8009e16:	1873      	adds	r3, r6, r1
 8009e18:	001e      	movs	r6, r3
 8009e1a:	232d      	movs	r3, #45	; 0x2d
 8009e1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e1e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e20:	7013      	strb	r3, [r2, #0]
 8009e22:	2320      	movs	r3, #32
 8009e24:	2203      	movs	r2, #3
 8009e26:	439f      	bics	r7, r3
 8009e28:	2f46      	cmp	r7, #70	; 0x46
 8009e2a:	d007      	beq.n	8009e3c <__cvt+0x38>
 8009e2c:	003b      	movs	r3, r7
 8009e2e:	3b45      	subs	r3, #69	; 0x45
 8009e30:	4259      	negs	r1, r3
 8009e32:	414b      	adcs	r3, r1
 8009e34:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009e36:	3a01      	subs	r2, #1
 8009e38:	18cb      	adds	r3, r1, r3
 8009e3a:	9310      	str	r3, [sp, #64]	; 0x40
 8009e3c:	ab09      	add	r3, sp, #36	; 0x24
 8009e3e:	9304      	str	r3, [sp, #16]
 8009e40:	ab08      	add	r3, sp, #32
 8009e42:	9303      	str	r3, [sp, #12]
 8009e44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e46:	9200      	str	r2, [sp, #0]
 8009e48:	9302      	str	r3, [sp, #8]
 8009e4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e4c:	0022      	movs	r2, r4
 8009e4e:	9301      	str	r3, [sp, #4]
 8009e50:	0033      	movs	r3, r6
 8009e52:	f001 fc03 	bl	800b65c <_dtoa_r>
 8009e56:	0005      	movs	r5, r0
 8009e58:	2f47      	cmp	r7, #71	; 0x47
 8009e5a:	d102      	bne.n	8009e62 <__cvt+0x5e>
 8009e5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e5e:	07db      	lsls	r3, r3, #31
 8009e60:	d528      	bpl.n	8009eb4 <__cvt+0xb0>
 8009e62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e64:	18eb      	adds	r3, r5, r3
 8009e66:	9307      	str	r3, [sp, #28]
 8009e68:	2f46      	cmp	r7, #70	; 0x46
 8009e6a:	d114      	bne.n	8009e96 <__cvt+0x92>
 8009e6c:	782b      	ldrb	r3, [r5, #0]
 8009e6e:	2b30      	cmp	r3, #48	; 0x30
 8009e70:	d10c      	bne.n	8009e8c <__cvt+0x88>
 8009e72:	2200      	movs	r2, #0
 8009e74:	2300      	movs	r3, #0
 8009e76:	0020      	movs	r0, r4
 8009e78:	0031      	movs	r1, r6
 8009e7a:	f7f6 faf1 	bl	8000460 <__aeabi_dcmpeq>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d104      	bne.n	8009e8c <__cvt+0x88>
 8009e82:	2301      	movs	r3, #1
 8009e84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e86:	1a9b      	subs	r3, r3, r2
 8009e88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e8a:	6013      	str	r3, [r2, #0]
 8009e8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e8e:	9a07      	ldr	r2, [sp, #28]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	18d3      	adds	r3, r2, r3
 8009e94:	9307      	str	r3, [sp, #28]
 8009e96:	2200      	movs	r2, #0
 8009e98:	2300      	movs	r3, #0
 8009e9a:	0020      	movs	r0, r4
 8009e9c:	0031      	movs	r1, r6
 8009e9e:	f7f6 fadf 	bl	8000460 <__aeabi_dcmpeq>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d001      	beq.n	8009eaa <__cvt+0xa6>
 8009ea6:	9b07      	ldr	r3, [sp, #28]
 8009ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eaa:	2230      	movs	r2, #48	; 0x30
 8009eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eae:	9907      	ldr	r1, [sp, #28]
 8009eb0:	428b      	cmp	r3, r1
 8009eb2:	d306      	bcc.n	8009ec2 <__cvt+0xbe>
 8009eb4:	0028      	movs	r0, r5
 8009eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009eba:	1b5b      	subs	r3, r3, r5
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	b00b      	add	sp, #44	; 0x2c
 8009ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ec2:	1c59      	adds	r1, r3, #1
 8009ec4:	9109      	str	r1, [sp, #36]	; 0x24
 8009ec6:	701a      	strb	r2, [r3, #0]
 8009ec8:	e7f0      	b.n	8009eac <__cvt+0xa8>

08009eca <__exponent>:
 8009eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ecc:	1c83      	adds	r3, r0, #2
 8009ece:	b087      	sub	sp, #28
 8009ed0:	9303      	str	r3, [sp, #12]
 8009ed2:	0005      	movs	r5, r0
 8009ed4:	000c      	movs	r4, r1
 8009ed6:	232b      	movs	r3, #43	; 0x2b
 8009ed8:	7002      	strb	r2, [r0, #0]
 8009eda:	2900      	cmp	r1, #0
 8009edc:	da01      	bge.n	8009ee2 <__exponent+0x18>
 8009ede:	424c      	negs	r4, r1
 8009ee0:	3302      	adds	r3, #2
 8009ee2:	706b      	strb	r3, [r5, #1]
 8009ee4:	2c09      	cmp	r4, #9
 8009ee6:	dd31      	ble.n	8009f4c <__exponent+0x82>
 8009ee8:	270a      	movs	r7, #10
 8009eea:	ab04      	add	r3, sp, #16
 8009eec:	1dde      	adds	r6, r3, #7
 8009eee:	0020      	movs	r0, r4
 8009ef0:	0039      	movs	r1, r7
 8009ef2:	9601      	str	r6, [sp, #4]
 8009ef4:	f7f6 fa9e 	bl	8000434 <__aeabi_idivmod>
 8009ef8:	3e01      	subs	r6, #1
 8009efa:	3130      	adds	r1, #48	; 0x30
 8009efc:	0020      	movs	r0, r4
 8009efe:	7031      	strb	r1, [r6, #0]
 8009f00:	0039      	movs	r1, r7
 8009f02:	9402      	str	r4, [sp, #8]
 8009f04:	f7f6 f9b0 	bl	8000268 <__divsi3>
 8009f08:	9b02      	ldr	r3, [sp, #8]
 8009f0a:	0004      	movs	r4, r0
 8009f0c:	2b63      	cmp	r3, #99	; 0x63
 8009f0e:	dcee      	bgt.n	8009eee <__exponent+0x24>
 8009f10:	9b01      	ldr	r3, [sp, #4]
 8009f12:	3430      	adds	r4, #48	; 0x30
 8009f14:	1e9a      	subs	r2, r3, #2
 8009f16:	0013      	movs	r3, r2
 8009f18:	9903      	ldr	r1, [sp, #12]
 8009f1a:	7014      	strb	r4, [r2, #0]
 8009f1c:	a804      	add	r0, sp, #16
 8009f1e:	3007      	adds	r0, #7
 8009f20:	4298      	cmp	r0, r3
 8009f22:	d80e      	bhi.n	8009f42 <__exponent+0x78>
 8009f24:	ab04      	add	r3, sp, #16
 8009f26:	3307      	adds	r3, #7
 8009f28:	2000      	movs	r0, #0
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d804      	bhi.n	8009f38 <__exponent+0x6e>
 8009f2e:	ab04      	add	r3, sp, #16
 8009f30:	3009      	adds	r0, #9
 8009f32:	18c0      	adds	r0, r0, r3
 8009f34:	9b01      	ldr	r3, [sp, #4]
 8009f36:	1ac0      	subs	r0, r0, r3
 8009f38:	9b03      	ldr	r3, [sp, #12]
 8009f3a:	1818      	adds	r0, r3, r0
 8009f3c:	1b40      	subs	r0, r0, r5
 8009f3e:	b007      	add	sp, #28
 8009f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f42:	7818      	ldrb	r0, [r3, #0]
 8009f44:	3301      	adds	r3, #1
 8009f46:	7008      	strb	r0, [r1, #0]
 8009f48:	3101      	adds	r1, #1
 8009f4a:	e7e7      	b.n	8009f1c <__exponent+0x52>
 8009f4c:	2330      	movs	r3, #48	; 0x30
 8009f4e:	18e4      	adds	r4, r4, r3
 8009f50:	70ab      	strb	r3, [r5, #2]
 8009f52:	1d28      	adds	r0, r5, #4
 8009f54:	70ec      	strb	r4, [r5, #3]
 8009f56:	e7f1      	b.n	8009f3c <__exponent+0x72>

08009f58 <_printf_float>:
 8009f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f5a:	b095      	sub	sp, #84	; 0x54
 8009f5c:	000c      	movs	r4, r1
 8009f5e:	9208      	str	r2, [sp, #32]
 8009f60:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8009f62:	9309      	str	r3, [sp, #36]	; 0x24
 8009f64:	0007      	movs	r7, r0
 8009f66:	f002 fd09 	bl	800c97c <_localeconv_r>
 8009f6a:	6803      	ldr	r3, [r0, #0]
 8009f6c:	0018      	movs	r0, r3
 8009f6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f70:	f7f6 f8d4 	bl	800011c <strlen>
 8009f74:	2300      	movs	r3, #0
 8009f76:	9312      	str	r3, [sp, #72]	; 0x48
 8009f78:	7e23      	ldrb	r3, [r4, #24]
 8009f7a:	2207      	movs	r2, #7
 8009f7c:	001e      	movs	r6, r3
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	900d      	str	r0, [sp, #52]	; 0x34
 8009f82:	930c      	str	r3, [sp, #48]	; 0x30
 8009f84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009f86:	682b      	ldr	r3, [r5, #0]
 8009f88:	05c9      	lsls	r1, r1, #23
 8009f8a:	d547      	bpl.n	800a01c <_printf_float+0xc4>
 8009f8c:	189b      	adds	r3, r3, r2
 8009f8e:	4393      	bics	r3, r2
 8009f90:	001a      	movs	r2, r3
 8009f92:	3208      	adds	r2, #8
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	64a2      	str	r2, [r4, #72]	; 0x48
 8009f9c:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009fa2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8009fa6:	006b      	lsls	r3, r5, #1
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	930e      	str	r3, [sp, #56]	; 0x38
 8009fac:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fae:	4ba8      	ldr	r3, [pc, #672]	; (800a250 <_printf_float+0x2f8>)
 8009fb0:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009fb2:	4252      	negs	r2, r2
 8009fb4:	f7f8 f974 	bl	80022a0 <__aeabi_dcmpun>
 8009fb8:	2800      	cmp	r0, #0
 8009fba:	d131      	bne.n	800a020 <_printf_float+0xc8>
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	4ba4      	ldr	r3, [pc, #656]	; (800a250 <_printf_float+0x2f8>)
 8009fc0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fc2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009fc4:	4252      	negs	r2, r2
 8009fc6:	f7f6 fa5b 	bl	8000480 <__aeabi_dcmple>
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	d128      	bne.n	800a020 <_printf_float+0xc8>
 8009fce:	2200      	movs	r2, #0
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	0029      	movs	r1, r5
 8009fd4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009fd6:	f7f6 fa49 	bl	800046c <__aeabi_dcmplt>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d003      	beq.n	8009fe6 <_printf_float+0x8e>
 8009fde:	0023      	movs	r3, r4
 8009fe0:	222d      	movs	r2, #45	; 0x2d
 8009fe2:	3343      	adds	r3, #67	; 0x43
 8009fe4:	701a      	strb	r2, [r3, #0]
 8009fe6:	4d9b      	ldr	r5, [pc, #620]	; (800a254 <_printf_float+0x2fc>)
 8009fe8:	2e47      	cmp	r6, #71	; 0x47
 8009fea:	d900      	bls.n	8009fee <_printf_float+0x96>
 8009fec:	4d9a      	ldr	r5, [pc, #616]	; (800a258 <_printf_float+0x300>)
 8009fee:	2303      	movs	r3, #3
 8009ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ff2:	6123      	str	r3, [r4, #16]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	439a      	bics	r2, r3
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	6022      	str	r2, [r4, #0]
 8009ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8009ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a000:	0021      	movs	r1, r4
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	0038      	movs	r0, r7
 800a006:	9b08      	ldr	r3, [sp, #32]
 800a008:	aa13      	add	r2, sp, #76	; 0x4c
 800a00a:	f000 f9f3 	bl	800a3f4 <_printf_common>
 800a00e:	1c43      	adds	r3, r0, #1
 800a010:	d000      	beq.n	800a014 <_printf_float+0xbc>
 800a012:	e09e      	b.n	800a152 <_printf_float+0x1fa>
 800a014:	2001      	movs	r0, #1
 800a016:	4240      	negs	r0, r0
 800a018:	b015      	add	sp, #84	; 0x54
 800a01a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a01c:	3307      	adds	r3, #7
 800a01e:	e7b6      	b.n	8009f8e <_printf_float+0x36>
 800a020:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a022:	002b      	movs	r3, r5
 800a024:	0010      	movs	r0, r2
 800a026:	0029      	movs	r1, r5
 800a028:	f7f8 f93a 	bl	80022a0 <__aeabi_dcmpun>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d00a      	beq.n	800a046 <_printf_float+0xee>
 800a030:	2d00      	cmp	r5, #0
 800a032:	da03      	bge.n	800a03c <_printf_float+0xe4>
 800a034:	0023      	movs	r3, r4
 800a036:	222d      	movs	r2, #45	; 0x2d
 800a038:	3343      	adds	r3, #67	; 0x43
 800a03a:	701a      	strb	r2, [r3, #0]
 800a03c:	4d87      	ldr	r5, [pc, #540]	; (800a25c <_printf_float+0x304>)
 800a03e:	2e47      	cmp	r6, #71	; 0x47
 800a040:	d9d5      	bls.n	8009fee <_printf_float+0x96>
 800a042:	4d87      	ldr	r5, [pc, #540]	; (800a260 <_printf_float+0x308>)
 800a044:	e7d3      	b.n	8009fee <_printf_float+0x96>
 800a046:	2220      	movs	r2, #32
 800a048:	0031      	movs	r1, r6
 800a04a:	6863      	ldr	r3, [r4, #4]
 800a04c:	4391      	bics	r1, r2
 800a04e:	910e      	str	r1, [sp, #56]	; 0x38
 800a050:	1c5a      	adds	r2, r3, #1
 800a052:	d147      	bne.n	800a0e4 <_printf_float+0x18c>
 800a054:	3307      	adds	r3, #7
 800a056:	6063      	str	r3, [r4, #4]
 800a058:	2380      	movs	r3, #128	; 0x80
 800a05a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a05c:	00db      	lsls	r3, r3, #3
 800a05e:	4313      	orrs	r3, r2
 800a060:	2200      	movs	r2, #0
 800a062:	9206      	str	r2, [sp, #24]
 800a064:	aa12      	add	r2, sp, #72	; 0x48
 800a066:	9205      	str	r2, [sp, #20]
 800a068:	aa11      	add	r2, sp, #68	; 0x44
 800a06a:	9203      	str	r2, [sp, #12]
 800a06c:	2223      	movs	r2, #35	; 0x23
 800a06e:	a908      	add	r1, sp, #32
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	6863      	ldr	r3, [r4, #4]
 800a076:	1852      	adds	r2, r2, r1
 800a078:	9202      	str	r2, [sp, #8]
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	0038      	movs	r0, r7
 800a07e:	002b      	movs	r3, r5
 800a080:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a082:	9604      	str	r6, [sp, #16]
 800a084:	f7ff febe 	bl	8009e04 <__cvt>
 800a088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a08a:	0005      	movs	r5, r0
 800a08c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a08e:	2b47      	cmp	r3, #71	; 0x47
 800a090:	d108      	bne.n	800a0a4 <_printf_float+0x14c>
 800a092:	1ccb      	adds	r3, r1, #3
 800a094:	db02      	blt.n	800a09c <_printf_float+0x144>
 800a096:	6863      	ldr	r3, [r4, #4]
 800a098:	4299      	cmp	r1, r3
 800a09a:	dd46      	ble.n	800a12a <_printf_float+0x1d2>
 800a09c:	0033      	movs	r3, r6
 800a09e:	3b02      	subs	r3, #2
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	001e      	movs	r6, r3
 800a0a4:	2e65      	cmp	r6, #101	; 0x65
 800a0a6:	d824      	bhi.n	800a0f2 <_printf_float+0x19a>
 800a0a8:	0020      	movs	r0, r4
 800a0aa:	0032      	movs	r2, r6
 800a0ac:	3901      	subs	r1, #1
 800a0ae:	3050      	adds	r0, #80	; 0x50
 800a0b0:	9111      	str	r1, [sp, #68]	; 0x44
 800a0b2:	f7ff ff0a 	bl	8009eca <__exponent>
 800a0b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0b8:	900a      	str	r0, [sp, #40]	; 0x28
 800a0ba:	1813      	adds	r3, r2, r0
 800a0bc:	6123      	str	r3, [r4, #16]
 800a0be:	2a01      	cmp	r2, #1
 800a0c0:	dc02      	bgt.n	800a0c8 <_printf_float+0x170>
 800a0c2:	6822      	ldr	r2, [r4, #0]
 800a0c4:	07d2      	lsls	r2, r2, #31
 800a0c6:	d501      	bpl.n	800a0cc <_printf_float+0x174>
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	6123      	str	r3, [r4, #16]
 800a0cc:	2323      	movs	r3, #35	; 0x23
 800a0ce:	aa08      	add	r2, sp, #32
 800a0d0:	189b      	adds	r3, r3, r2
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d100      	bne.n	800a0da <_printf_float+0x182>
 800a0d8:	e791      	b.n	8009ffe <_printf_float+0xa6>
 800a0da:	0023      	movs	r3, r4
 800a0dc:	222d      	movs	r2, #45	; 0x2d
 800a0de:	3343      	adds	r3, #67	; 0x43
 800a0e0:	701a      	strb	r2, [r3, #0]
 800a0e2:	e78c      	b.n	8009ffe <_printf_float+0xa6>
 800a0e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0e6:	2a47      	cmp	r2, #71	; 0x47
 800a0e8:	d1b6      	bne.n	800a058 <_printf_float+0x100>
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1b4      	bne.n	800a058 <_printf_float+0x100>
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	e7b1      	b.n	800a056 <_printf_float+0xfe>
 800a0f2:	2e66      	cmp	r6, #102	; 0x66
 800a0f4:	d11b      	bne.n	800a12e <_printf_float+0x1d6>
 800a0f6:	6863      	ldr	r3, [r4, #4]
 800a0f8:	2900      	cmp	r1, #0
 800a0fa:	dd0d      	ble.n	800a118 <_printf_float+0x1c0>
 800a0fc:	6121      	str	r1, [r4, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d102      	bne.n	800a108 <_printf_float+0x1b0>
 800a102:	6822      	ldr	r2, [r4, #0]
 800a104:	07d2      	lsls	r2, r2, #31
 800a106:	d502      	bpl.n	800a10e <_printf_float+0x1b6>
 800a108:	3301      	adds	r3, #1
 800a10a:	1859      	adds	r1, r3, r1
 800a10c:	6121      	str	r1, [r4, #16]
 800a10e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a110:	65a3      	str	r3, [r4, #88]	; 0x58
 800a112:	2300      	movs	r3, #0
 800a114:	930a      	str	r3, [sp, #40]	; 0x28
 800a116:	e7d9      	b.n	800a0cc <_printf_float+0x174>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d103      	bne.n	800a124 <_printf_float+0x1cc>
 800a11c:	2201      	movs	r2, #1
 800a11e:	6821      	ldr	r1, [r4, #0]
 800a120:	4211      	tst	r1, r2
 800a122:	d000      	beq.n	800a126 <_printf_float+0x1ce>
 800a124:	1c9a      	adds	r2, r3, #2
 800a126:	6122      	str	r2, [r4, #16]
 800a128:	e7f1      	b.n	800a10e <_printf_float+0x1b6>
 800a12a:	2367      	movs	r3, #103	; 0x67
 800a12c:	001e      	movs	r6, r3
 800a12e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a130:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a132:	4293      	cmp	r3, r2
 800a134:	db06      	blt.n	800a144 <_printf_float+0x1ec>
 800a136:	6822      	ldr	r2, [r4, #0]
 800a138:	6123      	str	r3, [r4, #16]
 800a13a:	07d2      	lsls	r2, r2, #31
 800a13c:	d5e7      	bpl.n	800a10e <_printf_float+0x1b6>
 800a13e:	3301      	adds	r3, #1
 800a140:	6123      	str	r3, [r4, #16]
 800a142:	e7e4      	b.n	800a10e <_printf_float+0x1b6>
 800a144:	2101      	movs	r1, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	dc01      	bgt.n	800a14e <_printf_float+0x1f6>
 800a14a:	1849      	adds	r1, r1, r1
 800a14c:	1ac9      	subs	r1, r1, r3
 800a14e:	1852      	adds	r2, r2, r1
 800a150:	e7e9      	b.n	800a126 <_printf_float+0x1ce>
 800a152:	6822      	ldr	r2, [r4, #0]
 800a154:	0553      	lsls	r3, r2, #21
 800a156:	d408      	bmi.n	800a16a <_printf_float+0x212>
 800a158:	6923      	ldr	r3, [r4, #16]
 800a15a:	002a      	movs	r2, r5
 800a15c:	0038      	movs	r0, r7
 800a15e:	9908      	ldr	r1, [sp, #32]
 800a160:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a162:	47a8      	blx	r5
 800a164:	1c43      	adds	r3, r0, #1
 800a166:	d129      	bne.n	800a1bc <_printf_float+0x264>
 800a168:	e754      	b.n	800a014 <_printf_float+0xbc>
 800a16a:	2e65      	cmp	r6, #101	; 0x65
 800a16c:	d800      	bhi.n	800a170 <_printf_float+0x218>
 800a16e:	e0ec      	b.n	800a34a <_printf_float+0x3f2>
 800a170:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a172:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a174:	2200      	movs	r2, #0
 800a176:	2300      	movs	r3, #0
 800a178:	f7f6 f972 	bl	8000460 <__aeabi_dcmpeq>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d034      	beq.n	800a1ea <_printf_float+0x292>
 800a180:	2301      	movs	r3, #1
 800a182:	0038      	movs	r0, r7
 800a184:	4a37      	ldr	r2, [pc, #220]	; (800a264 <_printf_float+0x30c>)
 800a186:	9908      	ldr	r1, [sp, #32]
 800a188:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a18a:	47a8      	blx	r5
 800a18c:	1c43      	adds	r3, r0, #1
 800a18e:	d100      	bne.n	800a192 <_printf_float+0x23a>
 800a190:	e740      	b.n	800a014 <_printf_float+0xbc>
 800a192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a196:	4293      	cmp	r3, r2
 800a198:	db02      	blt.n	800a1a0 <_printf_float+0x248>
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	07db      	lsls	r3, r3, #31
 800a19e:	d50d      	bpl.n	800a1bc <_printf_float+0x264>
 800a1a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a1a2:	0038      	movs	r0, r7
 800a1a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1a8:	9908      	ldr	r1, [sp, #32]
 800a1aa:	47a8      	blx	r5
 800a1ac:	2500      	movs	r5, #0
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	d100      	bne.n	800a1b4 <_printf_float+0x25c>
 800a1b2:	e72f      	b.n	800a014 <_printf_float+0xbc>
 800a1b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	42ab      	cmp	r3, r5
 800a1ba:	dc0a      	bgt.n	800a1d2 <_printf_float+0x27a>
 800a1bc:	6823      	ldr	r3, [r4, #0]
 800a1be:	079b      	lsls	r3, r3, #30
 800a1c0:	d500      	bpl.n	800a1c4 <_printf_float+0x26c>
 800a1c2:	e114      	b.n	800a3ee <_printf_float+0x496>
 800a1c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1c6:	68e0      	ldr	r0, [r4, #12]
 800a1c8:	4298      	cmp	r0, r3
 800a1ca:	db00      	blt.n	800a1ce <_printf_float+0x276>
 800a1cc:	e724      	b.n	800a018 <_printf_float+0xc0>
 800a1ce:	0018      	movs	r0, r3
 800a1d0:	e722      	b.n	800a018 <_printf_float+0xc0>
 800a1d2:	0022      	movs	r2, r4
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	0038      	movs	r0, r7
 800a1d8:	9908      	ldr	r1, [sp, #32]
 800a1da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1dc:	321a      	adds	r2, #26
 800a1de:	47b0      	blx	r6
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d100      	bne.n	800a1e6 <_printf_float+0x28e>
 800a1e4:	e716      	b.n	800a014 <_printf_float+0xbc>
 800a1e6:	3501      	adds	r5, #1
 800a1e8:	e7e4      	b.n	800a1b4 <_printf_float+0x25c>
 800a1ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	dc3b      	bgt.n	800a268 <_printf_float+0x310>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	0038      	movs	r0, r7
 800a1f4:	4a1b      	ldr	r2, [pc, #108]	; (800a264 <_printf_float+0x30c>)
 800a1f6:	9908      	ldr	r1, [sp, #32]
 800a1f8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a1fa:	47b0      	blx	r6
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d100      	bne.n	800a202 <_printf_float+0x2aa>
 800a200:	e708      	b.n	800a014 <_printf_float+0xbc>
 800a202:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a204:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a206:	4313      	orrs	r3, r2
 800a208:	d102      	bne.n	800a210 <_printf_float+0x2b8>
 800a20a:	6823      	ldr	r3, [r4, #0]
 800a20c:	07db      	lsls	r3, r3, #31
 800a20e:	d5d5      	bpl.n	800a1bc <_printf_float+0x264>
 800a210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a212:	0038      	movs	r0, r7
 800a214:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a216:	9908      	ldr	r1, [sp, #32]
 800a218:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a21a:	47b0      	blx	r6
 800a21c:	1c43      	adds	r3, r0, #1
 800a21e:	d100      	bne.n	800a222 <_printf_float+0x2ca>
 800a220:	e6f8      	b.n	800a014 <_printf_float+0xbc>
 800a222:	2300      	movs	r3, #0
 800a224:	930a      	str	r3, [sp, #40]	; 0x28
 800a226:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a22a:	425b      	negs	r3, r3
 800a22c:	4293      	cmp	r3, r2
 800a22e:	dc01      	bgt.n	800a234 <_printf_float+0x2dc>
 800a230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a232:	e792      	b.n	800a15a <_printf_float+0x202>
 800a234:	0022      	movs	r2, r4
 800a236:	2301      	movs	r3, #1
 800a238:	0038      	movs	r0, r7
 800a23a:	9908      	ldr	r1, [sp, #32]
 800a23c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a23e:	321a      	adds	r2, #26
 800a240:	47b0      	blx	r6
 800a242:	1c43      	adds	r3, r0, #1
 800a244:	d100      	bne.n	800a248 <_printf_float+0x2f0>
 800a246:	e6e5      	b.n	800a014 <_printf_float+0xbc>
 800a248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a24a:	3301      	adds	r3, #1
 800a24c:	e7ea      	b.n	800a224 <_printf_float+0x2cc>
 800a24e:	46c0      	nop			; (mov r8, r8)
 800a250:	7fefffff 	.word	0x7fefffff
 800a254:	0800e69c 	.word	0x0800e69c
 800a258:	0800e6a0 	.word	0x0800e6a0
 800a25c:	0800e6a4 	.word	0x0800e6a4
 800a260:	0800e6a8 	.word	0x0800e6a8
 800a264:	0800e6ac 	.word	0x0800e6ac
 800a268:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a26a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a26c:	920a      	str	r2, [sp, #40]	; 0x28
 800a26e:	429a      	cmp	r2, r3
 800a270:	dd00      	ble.n	800a274 <_printf_float+0x31c>
 800a272:	930a      	str	r3, [sp, #40]	; 0x28
 800a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a276:	2b00      	cmp	r3, #0
 800a278:	dc3d      	bgt.n	800a2f6 <_printf_float+0x39e>
 800a27a:	2300      	movs	r3, #0
 800a27c:	930e      	str	r3, [sp, #56]	; 0x38
 800a27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a280:	43db      	mvns	r3, r3
 800a282:	17db      	asrs	r3, r3, #31
 800a284:	930f      	str	r3, [sp, #60]	; 0x3c
 800a286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a288:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a28a:	930c      	str	r3, [sp, #48]	; 0x30
 800a28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a28e:	4013      	ands	r3, r2
 800a290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a296:	4293      	cmp	r3, r2
 800a298:	dc36      	bgt.n	800a308 <_printf_float+0x3b0>
 800a29a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a29c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	db40      	blt.n	800a324 <_printf_float+0x3cc>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	07db      	lsls	r3, r3, #31
 800a2a6:	d43d      	bmi.n	800a324 <_printf_float+0x3cc>
 800a2a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2ac:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a2ae:	1ad3      	subs	r3, r2, r3
 800a2b0:	1a52      	subs	r2, r2, r1
 800a2b2:	920a      	str	r2, [sp, #40]	; 0x28
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	dd00      	ble.n	800a2ba <_printf_float+0x362>
 800a2b8:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	dc3a      	bgt.n	800a336 <_printf_float+0x3de>
 800a2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c2:	2500      	movs	r5, #0
 800a2c4:	43db      	mvns	r3, r3
 800a2c6:	17db      	asrs	r3, r3, #31
 800a2c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a2cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a2d0:	1a9b      	subs	r3, r3, r2
 800a2d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2d4:	400a      	ands	r2, r1
 800a2d6:	1a9b      	subs	r3, r3, r2
 800a2d8:	42ab      	cmp	r3, r5
 800a2da:	dc00      	bgt.n	800a2de <_printf_float+0x386>
 800a2dc:	e76e      	b.n	800a1bc <_printf_float+0x264>
 800a2de:	0022      	movs	r2, r4
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	0038      	movs	r0, r7
 800a2e4:	9908      	ldr	r1, [sp, #32]
 800a2e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2e8:	321a      	adds	r2, #26
 800a2ea:	47b0      	blx	r6
 800a2ec:	1c43      	adds	r3, r0, #1
 800a2ee:	d100      	bne.n	800a2f2 <_printf_float+0x39a>
 800a2f0:	e690      	b.n	800a014 <_printf_float+0xbc>
 800a2f2:	3501      	adds	r5, #1
 800a2f4:	e7e9      	b.n	800a2ca <_printf_float+0x372>
 800a2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f8:	002a      	movs	r2, r5
 800a2fa:	0038      	movs	r0, r7
 800a2fc:	9908      	ldr	r1, [sp, #32]
 800a2fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a300:	47b0      	blx	r6
 800a302:	1c43      	adds	r3, r0, #1
 800a304:	d1b9      	bne.n	800a27a <_printf_float+0x322>
 800a306:	e685      	b.n	800a014 <_printf_float+0xbc>
 800a308:	0022      	movs	r2, r4
 800a30a:	2301      	movs	r3, #1
 800a30c:	0038      	movs	r0, r7
 800a30e:	9908      	ldr	r1, [sp, #32]
 800a310:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a312:	321a      	adds	r2, #26
 800a314:	47b0      	blx	r6
 800a316:	1c43      	adds	r3, r0, #1
 800a318:	d100      	bne.n	800a31c <_printf_float+0x3c4>
 800a31a:	e67b      	b.n	800a014 <_printf_float+0xbc>
 800a31c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a31e:	3301      	adds	r3, #1
 800a320:	930e      	str	r3, [sp, #56]	; 0x38
 800a322:	e7b0      	b.n	800a286 <_printf_float+0x32e>
 800a324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a326:	0038      	movs	r0, r7
 800a328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a32a:	9908      	ldr	r1, [sp, #32]
 800a32c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a32e:	47b0      	blx	r6
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	d1b9      	bne.n	800a2a8 <_printf_float+0x350>
 800a334:	e66e      	b.n	800a014 <_printf_float+0xbc>
 800a336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a338:	0038      	movs	r0, r7
 800a33a:	18ea      	adds	r2, r5, r3
 800a33c:	9908      	ldr	r1, [sp, #32]
 800a33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a340:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a342:	47a8      	blx	r5
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	d1bb      	bne.n	800a2c0 <_printf_float+0x368>
 800a348:	e664      	b.n	800a014 <_printf_float+0xbc>
 800a34a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	dc02      	bgt.n	800a356 <_printf_float+0x3fe>
 800a350:	2301      	movs	r3, #1
 800a352:	421a      	tst	r2, r3
 800a354:	d038      	beq.n	800a3c8 <_printf_float+0x470>
 800a356:	2301      	movs	r3, #1
 800a358:	002a      	movs	r2, r5
 800a35a:	0038      	movs	r0, r7
 800a35c:	9908      	ldr	r1, [sp, #32]
 800a35e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a360:	47b0      	blx	r6
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	d100      	bne.n	800a368 <_printf_float+0x410>
 800a366:	e655      	b.n	800a014 <_printf_float+0xbc>
 800a368:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a36a:	0038      	movs	r0, r7
 800a36c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a36e:	9908      	ldr	r1, [sp, #32]
 800a370:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a372:	47b0      	blx	r6
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d100      	bne.n	800a37a <_printf_float+0x422>
 800a378:	e64c      	b.n	800a014 <_printf_float+0xbc>
 800a37a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a37c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a37e:	2200      	movs	r2, #0
 800a380:	2300      	movs	r3, #0
 800a382:	f7f6 f86d 	bl	8000460 <__aeabi_dcmpeq>
 800a386:	2800      	cmp	r0, #0
 800a388:	d11c      	bne.n	800a3c4 <_printf_float+0x46c>
 800a38a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a38c:	1c6a      	adds	r2, r5, #1
 800a38e:	3b01      	subs	r3, #1
 800a390:	0038      	movs	r0, r7
 800a392:	9908      	ldr	r1, [sp, #32]
 800a394:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a396:	47a8      	blx	r5
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d10f      	bne.n	800a3bc <_printf_float+0x464>
 800a39c:	e63a      	b.n	800a014 <_printf_float+0xbc>
 800a39e:	0022      	movs	r2, r4
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	0038      	movs	r0, r7
 800a3a4:	9908      	ldr	r1, [sp, #32]
 800a3a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a3a8:	321a      	adds	r2, #26
 800a3aa:	47b0      	blx	r6
 800a3ac:	1c43      	adds	r3, r0, #1
 800a3ae:	d100      	bne.n	800a3b2 <_printf_float+0x45a>
 800a3b0:	e630      	b.n	800a014 <_printf_float+0xbc>
 800a3b2:	3501      	adds	r5, #1
 800a3b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	42ab      	cmp	r3, r5
 800a3ba:	dcf0      	bgt.n	800a39e <_printf_float+0x446>
 800a3bc:	0022      	movs	r2, r4
 800a3be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c0:	3250      	adds	r2, #80	; 0x50
 800a3c2:	e6cb      	b.n	800a15c <_printf_float+0x204>
 800a3c4:	2500      	movs	r5, #0
 800a3c6:	e7f5      	b.n	800a3b4 <_printf_float+0x45c>
 800a3c8:	002a      	movs	r2, r5
 800a3ca:	e7e1      	b.n	800a390 <_printf_float+0x438>
 800a3cc:	0022      	movs	r2, r4
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	0038      	movs	r0, r7
 800a3d2:	9908      	ldr	r1, [sp, #32]
 800a3d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a3d6:	3219      	adds	r2, #25
 800a3d8:	47b0      	blx	r6
 800a3da:	1c43      	adds	r3, r0, #1
 800a3dc:	d100      	bne.n	800a3e0 <_printf_float+0x488>
 800a3de:	e619      	b.n	800a014 <_printf_float+0xbc>
 800a3e0:	3501      	adds	r5, #1
 800a3e2:	68e3      	ldr	r3, [r4, #12]
 800a3e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3e6:	1a9b      	subs	r3, r3, r2
 800a3e8:	42ab      	cmp	r3, r5
 800a3ea:	dcef      	bgt.n	800a3cc <_printf_float+0x474>
 800a3ec:	e6ea      	b.n	800a1c4 <_printf_float+0x26c>
 800a3ee:	2500      	movs	r5, #0
 800a3f0:	e7f7      	b.n	800a3e2 <_printf_float+0x48a>
 800a3f2:	46c0      	nop			; (mov r8, r8)

0800a3f4 <_printf_common>:
 800a3f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3f6:	0015      	movs	r5, r2
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	688a      	ldr	r2, [r1, #8]
 800a3fc:	690b      	ldr	r3, [r1, #16]
 800a3fe:	000c      	movs	r4, r1
 800a400:	9000      	str	r0, [sp, #0]
 800a402:	4293      	cmp	r3, r2
 800a404:	da00      	bge.n	800a408 <_printf_common+0x14>
 800a406:	0013      	movs	r3, r2
 800a408:	0022      	movs	r2, r4
 800a40a:	602b      	str	r3, [r5, #0]
 800a40c:	3243      	adds	r2, #67	; 0x43
 800a40e:	7812      	ldrb	r2, [r2, #0]
 800a410:	2a00      	cmp	r2, #0
 800a412:	d001      	beq.n	800a418 <_printf_common+0x24>
 800a414:	3301      	adds	r3, #1
 800a416:	602b      	str	r3, [r5, #0]
 800a418:	6823      	ldr	r3, [r4, #0]
 800a41a:	069b      	lsls	r3, r3, #26
 800a41c:	d502      	bpl.n	800a424 <_printf_common+0x30>
 800a41e:	682b      	ldr	r3, [r5, #0]
 800a420:	3302      	adds	r3, #2
 800a422:	602b      	str	r3, [r5, #0]
 800a424:	6822      	ldr	r2, [r4, #0]
 800a426:	2306      	movs	r3, #6
 800a428:	0017      	movs	r7, r2
 800a42a:	401f      	ands	r7, r3
 800a42c:	421a      	tst	r2, r3
 800a42e:	d027      	beq.n	800a480 <_printf_common+0x8c>
 800a430:	0023      	movs	r3, r4
 800a432:	3343      	adds	r3, #67	; 0x43
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	1e5a      	subs	r2, r3, #1
 800a438:	4193      	sbcs	r3, r2
 800a43a:	6822      	ldr	r2, [r4, #0]
 800a43c:	0692      	lsls	r2, r2, #26
 800a43e:	d430      	bmi.n	800a4a2 <_printf_common+0xae>
 800a440:	0022      	movs	r2, r4
 800a442:	9901      	ldr	r1, [sp, #4]
 800a444:	9800      	ldr	r0, [sp, #0]
 800a446:	9e08      	ldr	r6, [sp, #32]
 800a448:	3243      	adds	r2, #67	; 0x43
 800a44a:	47b0      	blx	r6
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	d025      	beq.n	800a49c <_printf_common+0xa8>
 800a450:	2306      	movs	r3, #6
 800a452:	6820      	ldr	r0, [r4, #0]
 800a454:	682a      	ldr	r2, [r5, #0]
 800a456:	68e1      	ldr	r1, [r4, #12]
 800a458:	2500      	movs	r5, #0
 800a45a:	4003      	ands	r3, r0
 800a45c:	2b04      	cmp	r3, #4
 800a45e:	d103      	bne.n	800a468 <_printf_common+0x74>
 800a460:	1a8d      	subs	r5, r1, r2
 800a462:	43eb      	mvns	r3, r5
 800a464:	17db      	asrs	r3, r3, #31
 800a466:	401d      	ands	r5, r3
 800a468:	68a3      	ldr	r3, [r4, #8]
 800a46a:	6922      	ldr	r2, [r4, #16]
 800a46c:	4293      	cmp	r3, r2
 800a46e:	dd01      	ble.n	800a474 <_printf_common+0x80>
 800a470:	1a9b      	subs	r3, r3, r2
 800a472:	18ed      	adds	r5, r5, r3
 800a474:	2700      	movs	r7, #0
 800a476:	42bd      	cmp	r5, r7
 800a478:	d120      	bne.n	800a4bc <_printf_common+0xc8>
 800a47a:	2000      	movs	r0, #0
 800a47c:	e010      	b.n	800a4a0 <_printf_common+0xac>
 800a47e:	3701      	adds	r7, #1
 800a480:	68e3      	ldr	r3, [r4, #12]
 800a482:	682a      	ldr	r2, [r5, #0]
 800a484:	1a9b      	subs	r3, r3, r2
 800a486:	42bb      	cmp	r3, r7
 800a488:	ddd2      	ble.n	800a430 <_printf_common+0x3c>
 800a48a:	0022      	movs	r2, r4
 800a48c:	2301      	movs	r3, #1
 800a48e:	9901      	ldr	r1, [sp, #4]
 800a490:	9800      	ldr	r0, [sp, #0]
 800a492:	9e08      	ldr	r6, [sp, #32]
 800a494:	3219      	adds	r2, #25
 800a496:	47b0      	blx	r6
 800a498:	1c43      	adds	r3, r0, #1
 800a49a:	d1f0      	bne.n	800a47e <_printf_common+0x8a>
 800a49c:	2001      	movs	r0, #1
 800a49e:	4240      	negs	r0, r0
 800a4a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4a2:	2030      	movs	r0, #48	; 0x30
 800a4a4:	18e1      	adds	r1, r4, r3
 800a4a6:	3143      	adds	r1, #67	; 0x43
 800a4a8:	7008      	strb	r0, [r1, #0]
 800a4aa:	0021      	movs	r1, r4
 800a4ac:	1c5a      	adds	r2, r3, #1
 800a4ae:	3145      	adds	r1, #69	; 0x45
 800a4b0:	7809      	ldrb	r1, [r1, #0]
 800a4b2:	18a2      	adds	r2, r4, r2
 800a4b4:	3243      	adds	r2, #67	; 0x43
 800a4b6:	3302      	adds	r3, #2
 800a4b8:	7011      	strb	r1, [r2, #0]
 800a4ba:	e7c1      	b.n	800a440 <_printf_common+0x4c>
 800a4bc:	0022      	movs	r2, r4
 800a4be:	2301      	movs	r3, #1
 800a4c0:	9901      	ldr	r1, [sp, #4]
 800a4c2:	9800      	ldr	r0, [sp, #0]
 800a4c4:	9e08      	ldr	r6, [sp, #32]
 800a4c6:	321a      	adds	r2, #26
 800a4c8:	47b0      	blx	r6
 800a4ca:	1c43      	adds	r3, r0, #1
 800a4cc:	d0e6      	beq.n	800a49c <_printf_common+0xa8>
 800a4ce:	3701      	adds	r7, #1
 800a4d0:	e7d1      	b.n	800a476 <_printf_common+0x82>
	...

0800a4d4 <_printf_i>:
 800a4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4d6:	b08b      	sub	sp, #44	; 0x2c
 800a4d8:	9206      	str	r2, [sp, #24]
 800a4da:	000a      	movs	r2, r1
 800a4dc:	3243      	adds	r2, #67	; 0x43
 800a4de:	9307      	str	r3, [sp, #28]
 800a4e0:	9005      	str	r0, [sp, #20]
 800a4e2:	9204      	str	r2, [sp, #16]
 800a4e4:	7e0a      	ldrb	r2, [r1, #24]
 800a4e6:	000c      	movs	r4, r1
 800a4e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4ea:	2a78      	cmp	r2, #120	; 0x78
 800a4ec:	d806      	bhi.n	800a4fc <_printf_i+0x28>
 800a4ee:	2a62      	cmp	r2, #98	; 0x62
 800a4f0:	d808      	bhi.n	800a504 <_printf_i+0x30>
 800a4f2:	2a00      	cmp	r2, #0
 800a4f4:	d100      	bne.n	800a4f8 <_printf_i+0x24>
 800a4f6:	e0c0      	b.n	800a67a <_printf_i+0x1a6>
 800a4f8:	2a58      	cmp	r2, #88	; 0x58
 800a4fa:	d052      	beq.n	800a5a2 <_printf_i+0xce>
 800a4fc:	0026      	movs	r6, r4
 800a4fe:	3642      	adds	r6, #66	; 0x42
 800a500:	7032      	strb	r2, [r6, #0]
 800a502:	e022      	b.n	800a54a <_printf_i+0x76>
 800a504:	0010      	movs	r0, r2
 800a506:	3863      	subs	r0, #99	; 0x63
 800a508:	2815      	cmp	r0, #21
 800a50a:	d8f7      	bhi.n	800a4fc <_printf_i+0x28>
 800a50c:	f7f5 fe18 	bl	8000140 <__gnu_thumb1_case_shi>
 800a510:	001f0016 	.word	0x001f0016
 800a514:	fff6fff6 	.word	0xfff6fff6
 800a518:	fff6fff6 	.word	0xfff6fff6
 800a51c:	fff6001f 	.word	0xfff6001f
 800a520:	fff6fff6 	.word	0xfff6fff6
 800a524:	00a8fff6 	.word	0x00a8fff6
 800a528:	009a0036 	.word	0x009a0036
 800a52c:	fff6fff6 	.word	0xfff6fff6
 800a530:	fff600b9 	.word	0xfff600b9
 800a534:	fff60036 	.word	0xfff60036
 800a538:	009efff6 	.word	0x009efff6
 800a53c:	0026      	movs	r6, r4
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	3642      	adds	r6, #66	; 0x42
 800a542:	1d11      	adds	r1, r2, #4
 800a544:	6019      	str	r1, [r3, #0]
 800a546:	6813      	ldr	r3, [r2, #0]
 800a548:	7033      	strb	r3, [r6, #0]
 800a54a:	2301      	movs	r3, #1
 800a54c:	e0a7      	b.n	800a69e <_printf_i+0x1ca>
 800a54e:	6808      	ldr	r0, [r1, #0]
 800a550:	6819      	ldr	r1, [r3, #0]
 800a552:	1d0a      	adds	r2, r1, #4
 800a554:	0605      	lsls	r5, r0, #24
 800a556:	d50b      	bpl.n	800a570 <_printf_i+0x9c>
 800a558:	680d      	ldr	r5, [r1, #0]
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	2d00      	cmp	r5, #0
 800a55e:	da03      	bge.n	800a568 <_printf_i+0x94>
 800a560:	232d      	movs	r3, #45	; 0x2d
 800a562:	9a04      	ldr	r2, [sp, #16]
 800a564:	426d      	negs	r5, r5
 800a566:	7013      	strb	r3, [r2, #0]
 800a568:	4b61      	ldr	r3, [pc, #388]	; (800a6f0 <_printf_i+0x21c>)
 800a56a:	270a      	movs	r7, #10
 800a56c:	9303      	str	r3, [sp, #12]
 800a56e:	e032      	b.n	800a5d6 <_printf_i+0x102>
 800a570:	680d      	ldr	r5, [r1, #0]
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	0641      	lsls	r1, r0, #25
 800a576:	d5f1      	bpl.n	800a55c <_printf_i+0x88>
 800a578:	b22d      	sxth	r5, r5
 800a57a:	e7ef      	b.n	800a55c <_printf_i+0x88>
 800a57c:	680d      	ldr	r5, [r1, #0]
 800a57e:	6819      	ldr	r1, [r3, #0]
 800a580:	1d08      	adds	r0, r1, #4
 800a582:	6018      	str	r0, [r3, #0]
 800a584:	062e      	lsls	r6, r5, #24
 800a586:	d501      	bpl.n	800a58c <_printf_i+0xb8>
 800a588:	680d      	ldr	r5, [r1, #0]
 800a58a:	e003      	b.n	800a594 <_printf_i+0xc0>
 800a58c:	066d      	lsls	r5, r5, #25
 800a58e:	d5fb      	bpl.n	800a588 <_printf_i+0xb4>
 800a590:	680d      	ldr	r5, [r1, #0]
 800a592:	b2ad      	uxth	r5, r5
 800a594:	4b56      	ldr	r3, [pc, #344]	; (800a6f0 <_printf_i+0x21c>)
 800a596:	270a      	movs	r7, #10
 800a598:	9303      	str	r3, [sp, #12]
 800a59a:	2a6f      	cmp	r2, #111	; 0x6f
 800a59c:	d117      	bne.n	800a5ce <_printf_i+0xfa>
 800a59e:	2708      	movs	r7, #8
 800a5a0:	e015      	b.n	800a5ce <_printf_i+0xfa>
 800a5a2:	3145      	adds	r1, #69	; 0x45
 800a5a4:	700a      	strb	r2, [r1, #0]
 800a5a6:	4a52      	ldr	r2, [pc, #328]	; (800a6f0 <_printf_i+0x21c>)
 800a5a8:	9203      	str	r2, [sp, #12]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	6821      	ldr	r1, [r4, #0]
 800a5ae:	ca20      	ldmia	r2!, {r5}
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	0608      	lsls	r0, r1, #24
 800a5b4:	d550      	bpl.n	800a658 <_printf_i+0x184>
 800a5b6:	07cb      	lsls	r3, r1, #31
 800a5b8:	d502      	bpl.n	800a5c0 <_printf_i+0xec>
 800a5ba:	2320      	movs	r3, #32
 800a5bc:	4319      	orrs	r1, r3
 800a5be:	6021      	str	r1, [r4, #0]
 800a5c0:	2710      	movs	r7, #16
 800a5c2:	2d00      	cmp	r5, #0
 800a5c4:	d103      	bne.n	800a5ce <_printf_i+0xfa>
 800a5c6:	2320      	movs	r3, #32
 800a5c8:	6822      	ldr	r2, [r4, #0]
 800a5ca:	439a      	bics	r2, r3
 800a5cc:	6022      	str	r2, [r4, #0]
 800a5ce:	0023      	movs	r3, r4
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	3343      	adds	r3, #67	; 0x43
 800a5d4:	701a      	strb	r2, [r3, #0]
 800a5d6:	6863      	ldr	r3, [r4, #4]
 800a5d8:	60a3      	str	r3, [r4, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	db03      	blt.n	800a5e6 <_printf_i+0x112>
 800a5de:	2204      	movs	r2, #4
 800a5e0:	6821      	ldr	r1, [r4, #0]
 800a5e2:	4391      	bics	r1, r2
 800a5e4:	6021      	str	r1, [r4, #0]
 800a5e6:	2d00      	cmp	r5, #0
 800a5e8:	d102      	bne.n	800a5f0 <_printf_i+0x11c>
 800a5ea:	9e04      	ldr	r6, [sp, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00c      	beq.n	800a60a <_printf_i+0x136>
 800a5f0:	9e04      	ldr	r6, [sp, #16]
 800a5f2:	0028      	movs	r0, r5
 800a5f4:	0039      	movs	r1, r7
 800a5f6:	f7f5 fe33 	bl	8000260 <__aeabi_uidivmod>
 800a5fa:	9b03      	ldr	r3, [sp, #12]
 800a5fc:	3e01      	subs	r6, #1
 800a5fe:	5c5b      	ldrb	r3, [r3, r1]
 800a600:	7033      	strb	r3, [r6, #0]
 800a602:	002b      	movs	r3, r5
 800a604:	0005      	movs	r5, r0
 800a606:	429f      	cmp	r7, r3
 800a608:	d9f3      	bls.n	800a5f2 <_printf_i+0x11e>
 800a60a:	2f08      	cmp	r7, #8
 800a60c:	d109      	bne.n	800a622 <_printf_i+0x14e>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	07db      	lsls	r3, r3, #31
 800a612:	d506      	bpl.n	800a622 <_printf_i+0x14e>
 800a614:	6863      	ldr	r3, [r4, #4]
 800a616:	6922      	ldr	r2, [r4, #16]
 800a618:	4293      	cmp	r3, r2
 800a61a:	dc02      	bgt.n	800a622 <_printf_i+0x14e>
 800a61c:	2330      	movs	r3, #48	; 0x30
 800a61e:	3e01      	subs	r6, #1
 800a620:	7033      	strb	r3, [r6, #0]
 800a622:	9b04      	ldr	r3, [sp, #16]
 800a624:	1b9b      	subs	r3, r3, r6
 800a626:	6123      	str	r3, [r4, #16]
 800a628:	9b07      	ldr	r3, [sp, #28]
 800a62a:	0021      	movs	r1, r4
 800a62c:	9300      	str	r3, [sp, #0]
 800a62e:	9805      	ldr	r0, [sp, #20]
 800a630:	9b06      	ldr	r3, [sp, #24]
 800a632:	aa09      	add	r2, sp, #36	; 0x24
 800a634:	f7ff fede 	bl	800a3f4 <_printf_common>
 800a638:	1c43      	adds	r3, r0, #1
 800a63a:	d135      	bne.n	800a6a8 <_printf_i+0x1d4>
 800a63c:	2001      	movs	r0, #1
 800a63e:	4240      	negs	r0, r0
 800a640:	b00b      	add	sp, #44	; 0x2c
 800a642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a644:	2220      	movs	r2, #32
 800a646:	6809      	ldr	r1, [r1, #0]
 800a648:	430a      	orrs	r2, r1
 800a64a:	6022      	str	r2, [r4, #0]
 800a64c:	0022      	movs	r2, r4
 800a64e:	2178      	movs	r1, #120	; 0x78
 800a650:	3245      	adds	r2, #69	; 0x45
 800a652:	7011      	strb	r1, [r2, #0]
 800a654:	4a27      	ldr	r2, [pc, #156]	; (800a6f4 <_printf_i+0x220>)
 800a656:	e7a7      	b.n	800a5a8 <_printf_i+0xd4>
 800a658:	0648      	lsls	r0, r1, #25
 800a65a:	d5ac      	bpl.n	800a5b6 <_printf_i+0xe2>
 800a65c:	b2ad      	uxth	r5, r5
 800a65e:	e7aa      	b.n	800a5b6 <_printf_i+0xe2>
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	680d      	ldr	r5, [r1, #0]
 800a664:	1d10      	adds	r0, r2, #4
 800a666:	6949      	ldr	r1, [r1, #20]
 800a668:	6018      	str	r0, [r3, #0]
 800a66a:	6813      	ldr	r3, [r2, #0]
 800a66c:	062e      	lsls	r6, r5, #24
 800a66e:	d501      	bpl.n	800a674 <_printf_i+0x1a0>
 800a670:	6019      	str	r1, [r3, #0]
 800a672:	e002      	b.n	800a67a <_printf_i+0x1a6>
 800a674:	066d      	lsls	r5, r5, #25
 800a676:	d5fb      	bpl.n	800a670 <_printf_i+0x19c>
 800a678:	8019      	strh	r1, [r3, #0]
 800a67a:	2300      	movs	r3, #0
 800a67c:	9e04      	ldr	r6, [sp, #16]
 800a67e:	6123      	str	r3, [r4, #16]
 800a680:	e7d2      	b.n	800a628 <_printf_i+0x154>
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	1d11      	adds	r1, r2, #4
 800a686:	6019      	str	r1, [r3, #0]
 800a688:	6816      	ldr	r6, [r2, #0]
 800a68a:	2100      	movs	r1, #0
 800a68c:	0030      	movs	r0, r6
 800a68e:	6862      	ldr	r2, [r4, #4]
 800a690:	f002 f994 	bl	800c9bc <memchr>
 800a694:	2800      	cmp	r0, #0
 800a696:	d001      	beq.n	800a69c <_printf_i+0x1c8>
 800a698:	1b80      	subs	r0, r0, r6
 800a69a:	6060      	str	r0, [r4, #4]
 800a69c:	6863      	ldr	r3, [r4, #4]
 800a69e:	6123      	str	r3, [r4, #16]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	9a04      	ldr	r2, [sp, #16]
 800a6a4:	7013      	strb	r3, [r2, #0]
 800a6a6:	e7bf      	b.n	800a628 <_printf_i+0x154>
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	0032      	movs	r2, r6
 800a6ac:	9906      	ldr	r1, [sp, #24]
 800a6ae:	9805      	ldr	r0, [sp, #20]
 800a6b0:	9d07      	ldr	r5, [sp, #28]
 800a6b2:	47a8      	blx	r5
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d0c1      	beq.n	800a63c <_printf_i+0x168>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	079b      	lsls	r3, r3, #30
 800a6bc:	d415      	bmi.n	800a6ea <_printf_i+0x216>
 800a6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c0:	68e0      	ldr	r0, [r4, #12]
 800a6c2:	4298      	cmp	r0, r3
 800a6c4:	dabc      	bge.n	800a640 <_printf_i+0x16c>
 800a6c6:	0018      	movs	r0, r3
 800a6c8:	e7ba      	b.n	800a640 <_printf_i+0x16c>
 800a6ca:	0022      	movs	r2, r4
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	9906      	ldr	r1, [sp, #24]
 800a6d0:	9805      	ldr	r0, [sp, #20]
 800a6d2:	9e07      	ldr	r6, [sp, #28]
 800a6d4:	3219      	adds	r2, #25
 800a6d6:	47b0      	blx	r6
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d0af      	beq.n	800a63c <_printf_i+0x168>
 800a6dc:	3501      	adds	r5, #1
 800a6de:	68e3      	ldr	r3, [r4, #12]
 800a6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6e2:	1a9b      	subs	r3, r3, r2
 800a6e4:	42ab      	cmp	r3, r5
 800a6e6:	dcf0      	bgt.n	800a6ca <_printf_i+0x1f6>
 800a6e8:	e7e9      	b.n	800a6be <_printf_i+0x1ea>
 800a6ea:	2500      	movs	r5, #0
 800a6ec:	e7f7      	b.n	800a6de <_printf_i+0x20a>
 800a6ee:	46c0      	nop			; (mov r8, r8)
 800a6f0:	0800e6ae 	.word	0x0800e6ae
 800a6f4:	0800e6bf 	.word	0x0800e6bf

0800a6f8 <sniprintf>:
 800a6f8:	b40c      	push	{r2, r3}
 800a6fa:	b530      	push	{r4, r5, lr}
 800a6fc:	4b17      	ldr	r3, [pc, #92]	; (800a75c <sniprintf+0x64>)
 800a6fe:	000c      	movs	r4, r1
 800a700:	681d      	ldr	r5, [r3, #0]
 800a702:	b09d      	sub	sp, #116	; 0x74
 800a704:	2900      	cmp	r1, #0
 800a706:	da08      	bge.n	800a71a <sniprintf+0x22>
 800a708:	238b      	movs	r3, #139	; 0x8b
 800a70a:	2001      	movs	r0, #1
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	4240      	negs	r0, r0
 800a710:	b01d      	add	sp, #116	; 0x74
 800a712:	bc30      	pop	{r4, r5}
 800a714:	bc08      	pop	{r3}
 800a716:	b002      	add	sp, #8
 800a718:	4718      	bx	r3
 800a71a:	2382      	movs	r3, #130	; 0x82
 800a71c:	466a      	mov	r2, sp
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	8293      	strh	r3, [r2, #20]
 800a722:	2300      	movs	r3, #0
 800a724:	9002      	str	r0, [sp, #8]
 800a726:	9006      	str	r0, [sp, #24]
 800a728:	4299      	cmp	r1, r3
 800a72a:	d000      	beq.n	800a72e <sniprintf+0x36>
 800a72c:	1e4b      	subs	r3, r1, #1
 800a72e:	9304      	str	r3, [sp, #16]
 800a730:	9307      	str	r3, [sp, #28]
 800a732:	2301      	movs	r3, #1
 800a734:	466a      	mov	r2, sp
 800a736:	425b      	negs	r3, r3
 800a738:	82d3      	strh	r3, [r2, #22]
 800a73a:	0028      	movs	r0, r5
 800a73c:	ab21      	add	r3, sp, #132	; 0x84
 800a73e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a740:	a902      	add	r1, sp, #8
 800a742:	9301      	str	r3, [sp, #4]
 800a744:	f002 ff30 	bl	800d5a8 <_svfiprintf_r>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	da01      	bge.n	800a750 <sniprintf+0x58>
 800a74c:	238b      	movs	r3, #139	; 0x8b
 800a74e:	602b      	str	r3, [r5, #0]
 800a750:	2c00      	cmp	r4, #0
 800a752:	d0dd      	beq.n	800a710 <sniprintf+0x18>
 800a754:	2300      	movs	r3, #0
 800a756:	9a02      	ldr	r2, [sp, #8]
 800a758:	7013      	strb	r3, [r2, #0]
 800a75a:	e7d9      	b.n	800a710 <sniprintf+0x18>
 800a75c:	2000000c 	.word	0x2000000c

0800a760 <strcat>:
 800a760:	0002      	movs	r2, r0
 800a762:	b510      	push	{r4, lr}
 800a764:	7813      	ldrb	r3, [r2, #0]
 800a766:	0014      	movs	r4, r2
 800a768:	3201      	adds	r2, #1
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1fa      	bne.n	800a764 <strcat+0x4>
 800a76e:	5cca      	ldrb	r2, [r1, r3]
 800a770:	54e2      	strb	r2, [r4, r3]
 800a772:	3301      	adds	r3, #1
 800a774:	2a00      	cmp	r2, #0
 800a776:	d1fa      	bne.n	800a76e <strcat+0xe>
 800a778:	bd10      	pop	{r4, pc}
	...

0800a77c <sulp>:
 800a77c:	b570      	push	{r4, r5, r6, lr}
 800a77e:	0016      	movs	r6, r2
 800a780:	000d      	movs	r5, r1
 800a782:	f002 fcb5 	bl	800d0f0 <__ulp>
 800a786:	2e00      	cmp	r6, #0
 800a788:	d00d      	beq.n	800a7a6 <sulp+0x2a>
 800a78a:	236b      	movs	r3, #107	; 0x6b
 800a78c:	006a      	lsls	r2, r5, #1
 800a78e:	0d52      	lsrs	r2, r2, #21
 800a790:	1a9b      	subs	r3, r3, r2
 800a792:	2b00      	cmp	r3, #0
 800a794:	dd07      	ble.n	800a7a6 <sulp+0x2a>
 800a796:	2400      	movs	r4, #0
 800a798:	4a03      	ldr	r2, [pc, #12]	; (800a7a8 <sulp+0x2c>)
 800a79a:	051b      	lsls	r3, r3, #20
 800a79c:	189d      	adds	r5, r3, r2
 800a79e:	002b      	movs	r3, r5
 800a7a0:	0022      	movs	r2, r4
 800a7a2:	f7f6 ff7f 	bl	80016a4 <__aeabi_dmul>
 800a7a6:	bd70      	pop	{r4, r5, r6, pc}
 800a7a8:	3ff00000 	.word	0x3ff00000

0800a7ac <_strtod_l>:
 800a7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7ae:	001d      	movs	r5, r3
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	b0a7      	sub	sp, #156	; 0x9c
 800a7b4:	9322      	str	r3, [sp, #136]	; 0x88
 800a7b6:	4bae      	ldr	r3, [pc, #696]	; (800aa70 <_strtod_l+0x2c4>)
 800a7b8:	9005      	str	r0, [sp, #20]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	9108      	str	r1, [sp, #32]
 800a7be:	0018      	movs	r0, r3
 800a7c0:	9307      	str	r3, [sp, #28]
 800a7c2:	921d      	str	r2, [sp, #116]	; 0x74
 800a7c4:	f7f5 fcaa 	bl	800011c <strlen>
 800a7c8:	2600      	movs	r6, #0
 800a7ca:	0004      	movs	r4, r0
 800a7cc:	2700      	movs	r7, #0
 800a7ce:	9b08      	ldr	r3, [sp, #32]
 800a7d0:	9321      	str	r3, [sp, #132]	; 0x84
 800a7d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7d4:	7813      	ldrb	r3, [r2, #0]
 800a7d6:	2b2b      	cmp	r3, #43	; 0x2b
 800a7d8:	d058      	beq.n	800a88c <_strtod_l+0xe0>
 800a7da:	d844      	bhi.n	800a866 <_strtod_l+0xba>
 800a7dc:	2b0d      	cmp	r3, #13
 800a7de:	d83d      	bhi.n	800a85c <_strtod_l+0xb0>
 800a7e0:	2b08      	cmp	r3, #8
 800a7e2:	d83d      	bhi.n	800a860 <_strtod_l+0xb4>
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d047      	beq.n	800a878 <_strtod_l+0xcc>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	9310      	str	r3, [sp, #64]	; 0x40
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7f0:	920a      	str	r2, [sp, #40]	; 0x28
 800a7f2:	9306      	str	r3, [sp, #24]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	2b30      	cmp	r3, #48	; 0x30
 800a7f8:	d000      	beq.n	800a7fc <_strtod_l+0x50>
 800a7fa:	e083      	b.n	800a904 <_strtod_l+0x158>
 800a7fc:	9b06      	ldr	r3, [sp, #24]
 800a7fe:	3220      	adds	r2, #32
 800a800:	785b      	ldrb	r3, [r3, #1]
 800a802:	4393      	bics	r3, r2
 800a804:	2b58      	cmp	r3, #88	; 0x58
 800a806:	d000      	beq.n	800a80a <_strtod_l+0x5e>
 800a808:	e072      	b.n	800a8f0 <_strtod_l+0x144>
 800a80a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a80c:	9502      	str	r5, [sp, #8]
 800a80e:	9301      	str	r3, [sp, #4]
 800a810:	ab22      	add	r3, sp, #136	; 0x88
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	4a97      	ldr	r2, [pc, #604]	; (800aa74 <_strtod_l+0x2c8>)
 800a816:	ab23      	add	r3, sp, #140	; 0x8c
 800a818:	9805      	ldr	r0, [sp, #20]
 800a81a:	a921      	add	r1, sp, #132	; 0x84
 800a81c:	f001 fda6 	bl	800c36c <__gethex>
 800a820:	2307      	movs	r3, #7
 800a822:	0005      	movs	r5, r0
 800a824:	0004      	movs	r4, r0
 800a826:	401d      	ands	r5, r3
 800a828:	4218      	tst	r0, r3
 800a82a:	d006      	beq.n	800a83a <_strtod_l+0x8e>
 800a82c:	2d06      	cmp	r5, #6
 800a82e:	d12f      	bne.n	800a890 <_strtod_l+0xe4>
 800a830:	9b06      	ldr	r3, [sp, #24]
 800a832:	3301      	adds	r3, #1
 800a834:	9321      	str	r3, [sp, #132]	; 0x84
 800a836:	2300      	movs	r3, #0
 800a838:	9310      	str	r3, [sp, #64]	; 0x40
 800a83a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <_strtod_l+0x9a>
 800a840:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a842:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a844:	601a      	str	r2, [r3, #0]
 800a846:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d01c      	beq.n	800a886 <_strtod_l+0xda>
 800a84c:	2380      	movs	r3, #128	; 0x80
 800a84e:	0032      	movs	r2, r6
 800a850:	061b      	lsls	r3, r3, #24
 800a852:	18fb      	adds	r3, r7, r3
 800a854:	0010      	movs	r0, r2
 800a856:	0019      	movs	r1, r3
 800a858:	b027      	add	sp, #156	; 0x9c
 800a85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	d1c3      	bne.n	800a7e8 <_strtod_l+0x3c>
 800a860:	3201      	adds	r2, #1
 800a862:	9221      	str	r2, [sp, #132]	; 0x84
 800a864:	e7b5      	b.n	800a7d2 <_strtod_l+0x26>
 800a866:	2b2d      	cmp	r3, #45	; 0x2d
 800a868:	d1be      	bne.n	800a7e8 <_strtod_l+0x3c>
 800a86a:	3b2c      	subs	r3, #44	; 0x2c
 800a86c:	9310      	str	r3, [sp, #64]	; 0x40
 800a86e:	1c53      	adds	r3, r2, #1
 800a870:	9321      	str	r3, [sp, #132]	; 0x84
 800a872:	7853      	ldrb	r3, [r2, #1]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1b9      	bne.n	800a7ec <_strtod_l+0x40>
 800a878:	9b08      	ldr	r3, [sp, #32]
 800a87a:	9321      	str	r3, [sp, #132]	; 0x84
 800a87c:	2300      	movs	r3, #0
 800a87e:	9310      	str	r3, [sp, #64]	; 0x40
 800a880:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1dc      	bne.n	800a840 <_strtod_l+0x94>
 800a886:	0032      	movs	r2, r6
 800a888:	003b      	movs	r3, r7
 800a88a:	e7e3      	b.n	800a854 <_strtod_l+0xa8>
 800a88c:	2300      	movs	r3, #0
 800a88e:	e7ed      	b.n	800a86c <_strtod_l+0xc0>
 800a890:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a892:	2a00      	cmp	r2, #0
 800a894:	d007      	beq.n	800a8a6 <_strtod_l+0xfa>
 800a896:	2135      	movs	r1, #53	; 0x35
 800a898:	a824      	add	r0, sp, #144	; 0x90
 800a89a:	f002 fd28 	bl	800d2ee <__copybits>
 800a89e:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a8a0:	9805      	ldr	r0, [sp, #20]
 800a8a2:	f002 f8e3 	bl	800ca6c <_Bfree>
 800a8a6:	1e68      	subs	r0, r5, #1
 800a8a8:	2805      	cmp	r0, #5
 800a8aa:	d806      	bhi.n	800a8ba <_strtod_l+0x10e>
 800a8ac:	f7f5 fc3e 	bl	800012c <__gnu_thumb1_case_uqi>
 800a8b0:	1c190b0e 	.word	0x1c190b0e
 800a8b4:	030e      	.short	0x030e
 800a8b6:	2700      	movs	r7, #0
 800a8b8:	003e      	movs	r6, r7
 800a8ba:	0723      	lsls	r3, r4, #28
 800a8bc:	d5bd      	bpl.n	800a83a <_strtod_l+0x8e>
 800a8be:	2380      	movs	r3, #128	; 0x80
 800a8c0:	061b      	lsls	r3, r3, #24
 800a8c2:	431f      	orrs	r7, r3
 800a8c4:	e7b9      	b.n	800a83a <_strtod_l+0x8e>
 800a8c6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a8c8:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800a8ca:	e7f6      	b.n	800a8ba <_strtod_l+0x10e>
 800a8cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a8ce:	4a6a      	ldr	r2, [pc, #424]	; (800aa78 <_strtod_l+0x2cc>)
 800a8d0:	496a      	ldr	r1, [pc, #424]	; (800aa7c <_strtod_l+0x2d0>)
 800a8d2:	401a      	ands	r2, r3
 800a8d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8d6:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a8d8:	185b      	adds	r3, r3, r1
 800a8da:	051b      	lsls	r3, r3, #20
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	0017      	movs	r7, r2
 800a8e0:	e7eb      	b.n	800a8ba <_strtod_l+0x10e>
 800a8e2:	2600      	movs	r6, #0
 800a8e4:	4f66      	ldr	r7, [pc, #408]	; (800aa80 <_strtod_l+0x2d4>)
 800a8e6:	e7e8      	b.n	800a8ba <_strtod_l+0x10e>
 800a8e8:	2601      	movs	r6, #1
 800a8ea:	4f66      	ldr	r7, [pc, #408]	; (800aa84 <_strtod_l+0x2d8>)
 800a8ec:	4276      	negs	r6, r6
 800a8ee:	e7e4      	b.n	800a8ba <_strtod_l+0x10e>
 800a8f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8f2:	1c5a      	adds	r2, r3, #1
 800a8f4:	9221      	str	r2, [sp, #132]	; 0x84
 800a8f6:	785b      	ldrb	r3, [r3, #1]
 800a8f8:	2b30      	cmp	r3, #48	; 0x30
 800a8fa:	d0f9      	beq.n	800a8f0 <_strtod_l+0x144>
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d09c      	beq.n	800a83a <_strtod_l+0x8e>
 800a900:	2301      	movs	r3, #1
 800a902:	930a      	str	r3, [sp, #40]	; 0x28
 800a904:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a906:	220a      	movs	r2, #10
 800a908:	9311      	str	r3, [sp, #68]	; 0x44
 800a90a:	2300      	movs	r3, #0
 800a90c:	930e      	str	r3, [sp, #56]	; 0x38
 800a90e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a910:	9309      	str	r3, [sp, #36]	; 0x24
 800a912:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a914:	7805      	ldrb	r5, [r0, #0]
 800a916:	002b      	movs	r3, r5
 800a918:	3b30      	subs	r3, #48	; 0x30
 800a91a:	b2d9      	uxtb	r1, r3
 800a91c:	2909      	cmp	r1, #9
 800a91e:	d927      	bls.n	800a970 <_strtod_l+0x1c4>
 800a920:	0022      	movs	r2, r4
 800a922:	9907      	ldr	r1, [sp, #28]
 800a924:	f002 ff58 	bl	800d7d8 <strncmp>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d033      	beq.n	800a994 <_strtod_l+0x1e8>
 800a92c:	2000      	movs	r0, #0
 800a92e:	002b      	movs	r3, r5
 800a930:	4684      	mov	ip, r0
 800a932:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a934:	900c      	str	r0, [sp, #48]	; 0x30
 800a936:	9206      	str	r2, [sp, #24]
 800a938:	2220      	movs	r2, #32
 800a93a:	0019      	movs	r1, r3
 800a93c:	4391      	bics	r1, r2
 800a93e:	000a      	movs	r2, r1
 800a940:	2100      	movs	r1, #0
 800a942:	9107      	str	r1, [sp, #28]
 800a944:	2a45      	cmp	r2, #69	; 0x45
 800a946:	d000      	beq.n	800a94a <_strtod_l+0x19e>
 800a948:	e0c5      	b.n	800aad6 <_strtod_l+0x32a>
 800a94a:	9b06      	ldr	r3, [sp, #24]
 800a94c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a94e:	4303      	orrs	r3, r0
 800a950:	4313      	orrs	r3, r2
 800a952:	428b      	cmp	r3, r1
 800a954:	d090      	beq.n	800a878 <_strtod_l+0xcc>
 800a956:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a958:	9308      	str	r3, [sp, #32]
 800a95a:	3301      	adds	r3, #1
 800a95c:	9321      	str	r3, [sp, #132]	; 0x84
 800a95e:	9b08      	ldr	r3, [sp, #32]
 800a960:	785b      	ldrb	r3, [r3, #1]
 800a962:	2b2b      	cmp	r3, #43	; 0x2b
 800a964:	d075      	beq.n	800aa52 <_strtod_l+0x2a6>
 800a966:	000c      	movs	r4, r1
 800a968:	2b2d      	cmp	r3, #45	; 0x2d
 800a96a:	d178      	bne.n	800aa5e <_strtod_l+0x2b2>
 800a96c:	2401      	movs	r4, #1
 800a96e:	e071      	b.n	800aa54 <_strtod_l+0x2a8>
 800a970:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a972:	2908      	cmp	r1, #8
 800a974:	dc09      	bgt.n	800a98a <_strtod_l+0x1de>
 800a976:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a978:	4351      	muls	r1, r2
 800a97a:	185b      	adds	r3, r3, r1
 800a97c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a980:	3001      	adds	r0, #1
 800a982:	3301      	adds	r3, #1
 800a984:	9309      	str	r3, [sp, #36]	; 0x24
 800a986:	9021      	str	r0, [sp, #132]	; 0x84
 800a988:	e7c3      	b.n	800a912 <_strtod_l+0x166>
 800a98a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a98c:	4351      	muls	r1, r2
 800a98e:	185b      	adds	r3, r3, r1
 800a990:	930e      	str	r3, [sp, #56]	; 0x38
 800a992:	e7f4      	b.n	800a97e <_strtod_l+0x1d2>
 800a994:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a998:	191c      	adds	r4, r3, r4
 800a99a:	9421      	str	r4, [sp, #132]	; 0x84
 800a99c:	7823      	ldrb	r3, [r4, #0]
 800a99e:	2a00      	cmp	r2, #0
 800a9a0:	d039      	beq.n	800aa16 <_strtod_l+0x26a>
 800a9a2:	900c      	str	r0, [sp, #48]	; 0x30
 800a9a4:	9206      	str	r2, [sp, #24]
 800a9a6:	001a      	movs	r2, r3
 800a9a8:	3a30      	subs	r2, #48	; 0x30
 800a9aa:	2a09      	cmp	r2, #9
 800a9ac:	d912      	bls.n	800a9d4 <_strtod_l+0x228>
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	4694      	mov	ip, r2
 800a9b2:	e7c1      	b.n	800a938 <_strtod_l+0x18c>
 800a9b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9b6:	3001      	adds	r0, #1
 800a9b8:	1c5a      	adds	r2, r3, #1
 800a9ba:	9221      	str	r2, [sp, #132]	; 0x84
 800a9bc:	785b      	ldrb	r3, [r3, #1]
 800a9be:	2b30      	cmp	r3, #48	; 0x30
 800a9c0:	d0f8      	beq.n	800a9b4 <_strtod_l+0x208>
 800a9c2:	001a      	movs	r2, r3
 800a9c4:	3a31      	subs	r2, #49	; 0x31
 800a9c6:	2a08      	cmp	r2, #8
 800a9c8:	d83e      	bhi.n	800aa48 <_strtod_l+0x29c>
 800a9ca:	900c      	str	r0, [sp, #48]	; 0x30
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a9d0:	9006      	str	r0, [sp, #24]
 800a9d2:	9211      	str	r2, [sp, #68]	; 0x44
 800a9d4:	001a      	movs	r2, r3
 800a9d6:	9906      	ldr	r1, [sp, #24]
 800a9d8:	1c44      	adds	r4, r0, #1
 800a9da:	3a30      	subs	r2, #48	; 0x30
 800a9dc:	2b30      	cmp	r3, #48	; 0x30
 800a9de:	d013      	beq.n	800aa08 <_strtod_l+0x25c>
 800a9e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9e2:	191b      	adds	r3, r3, r4
 800a9e4:	930c      	str	r3, [sp, #48]	; 0x30
 800a9e6:	1844      	adds	r4, r0, r1
 800a9e8:	000b      	movs	r3, r1
 800a9ea:	210a      	movs	r1, #10
 800a9ec:	429c      	cmp	r4, r3
 800a9ee:	d114      	bne.n	800aa1a <_strtod_l+0x26e>
 800a9f0:	9b06      	ldr	r3, [sp, #24]
 800a9f2:	1c59      	adds	r1, r3, #1
 800a9f4:	1809      	adds	r1, r1, r0
 800a9f6:	1818      	adds	r0, r3, r0
 800a9f8:	2808      	cmp	r0, #8
 800a9fa:	dc1c      	bgt.n	800aa36 <_strtod_l+0x28a>
 800a9fc:	230a      	movs	r3, #10
 800a9fe:	2400      	movs	r4, #0
 800aa00:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aa02:	4343      	muls	r3, r0
 800aa04:	18d3      	adds	r3, r2, r3
 800aa06:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa0a:	0020      	movs	r0, r4
 800aa0c:	1c5a      	adds	r2, r3, #1
 800aa0e:	9221      	str	r2, [sp, #132]	; 0x84
 800aa10:	785b      	ldrb	r3, [r3, #1]
 800aa12:	9106      	str	r1, [sp, #24]
 800aa14:	e7c7      	b.n	800a9a6 <_strtod_l+0x1fa>
 800aa16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa18:	e7d1      	b.n	800a9be <_strtod_l+0x212>
 800aa1a:	2b08      	cmp	r3, #8
 800aa1c:	dc04      	bgt.n	800aa28 <_strtod_l+0x27c>
 800aa1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800aa20:	434d      	muls	r5, r1
 800aa22:	950b      	str	r5, [sp, #44]	; 0x2c
 800aa24:	3301      	adds	r3, #1
 800aa26:	e7e1      	b.n	800a9ec <_strtod_l+0x240>
 800aa28:	1c5d      	adds	r5, r3, #1
 800aa2a:	2d10      	cmp	r5, #16
 800aa2c:	dcfa      	bgt.n	800aa24 <_strtod_l+0x278>
 800aa2e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800aa30:	434d      	muls	r5, r1
 800aa32:	950e      	str	r5, [sp, #56]	; 0x38
 800aa34:	e7f6      	b.n	800aa24 <_strtod_l+0x278>
 800aa36:	2400      	movs	r4, #0
 800aa38:	2910      	cmp	r1, #16
 800aa3a:	dce5      	bgt.n	800aa08 <_strtod_l+0x25c>
 800aa3c:	230a      	movs	r3, #10
 800aa3e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800aa40:	4343      	muls	r3, r0
 800aa42:	18d3      	adds	r3, r2, r3
 800aa44:	930e      	str	r3, [sp, #56]	; 0x38
 800aa46:	e7df      	b.n	800aa08 <_strtod_l+0x25c>
 800aa48:	2200      	movs	r2, #0
 800aa4a:	920c      	str	r2, [sp, #48]	; 0x30
 800aa4c:	9206      	str	r2, [sp, #24]
 800aa4e:	3201      	adds	r2, #1
 800aa50:	e7ae      	b.n	800a9b0 <_strtod_l+0x204>
 800aa52:	2400      	movs	r4, #0
 800aa54:	9b08      	ldr	r3, [sp, #32]
 800aa56:	3302      	adds	r3, #2
 800aa58:	9321      	str	r3, [sp, #132]	; 0x84
 800aa5a:	9b08      	ldr	r3, [sp, #32]
 800aa5c:	789b      	ldrb	r3, [r3, #2]
 800aa5e:	001a      	movs	r2, r3
 800aa60:	3a30      	subs	r2, #48	; 0x30
 800aa62:	2a09      	cmp	r2, #9
 800aa64:	d914      	bls.n	800aa90 <_strtod_l+0x2e4>
 800aa66:	9a08      	ldr	r2, [sp, #32]
 800aa68:	9221      	str	r2, [sp, #132]	; 0x84
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	e032      	b.n	800aad4 <_strtod_l+0x328>
 800aa6e:	46c0      	nop			; (mov r8, r8)
 800aa70:	0800e920 	.word	0x0800e920
 800aa74:	0800e6d0 	.word	0x0800e6d0
 800aa78:	ffefffff 	.word	0xffefffff
 800aa7c:	00000433 	.word	0x00000433
 800aa80:	7ff00000 	.word	0x7ff00000
 800aa84:	7fffffff 	.word	0x7fffffff
 800aa88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa8a:	1c5a      	adds	r2, r3, #1
 800aa8c:	9221      	str	r2, [sp, #132]	; 0x84
 800aa8e:	785b      	ldrb	r3, [r3, #1]
 800aa90:	2b30      	cmp	r3, #48	; 0x30
 800aa92:	d0f9      	beq.n	800aa88 <_strtod_l+0x2dc>
 800aa94:	2200      	movs	r2, #0
 800aa96:	9207      	str	r2, [sp, #28]
 800aa98:	001a      	movs	r2, r3
 800aa9a:	3a31      	subs	r2, #49	; 0x31
 800aa9c:	2a08      	cmp	r2, #8
 800aa9e:	d81a      	bhi.n	800aad6 <_strtod_l+0x32a>
 800aaa0:	3b30      	subs	r3, #48	; 0x30
 800aaa2:	001a      	movs	r2, r3
 800aaa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaa6:	9307      	str	r3, [sp, #28]
 800aaa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaaa:	1c59      	adds	r1, r3, #1
 800aaac:	9121      	str	r1, [sp, #132]	; 0x84
 800aaae:	785b      	ldrb	r3, [r3, #1]
 800aab0:	001d      	movs	r5, r3
 800aab2:	3d30      	subs	r5, #48	; 0x30
 800aab4:	2d09      	cmp	r5, #9
 800aab6:	d939      	bls.n	800ab2c <_strtod_l+0x380>
 800aab8:	9d07      	ldr	r5, [sp, #28]
 800aaba:	1b49      	subs	r1, r1, r5
 800aabc:	4daf      	ldr	r5, [pc, #700]	; (800ad7c <_strtod_l+0x5d0>)
 800aabe:	9507      	str	r5, [sp, #28]
 800aac0:	2908      	cmp	r1, #8
 800aac2:	dc03      	bgt.n	800aacc <_strtod_l+0x320>
 800aac4:	9207      	str	r2, [sp, #28]
 800aac6:	42aa      	cmp	r2, r5
 800aac8:	dd00      	ble.n	800aacc <_strtod_l+0x320>
 800aaca:	9507      	str	r5, [sp, #28]
 800aacc:	2c00      	cmp	r4, #0
 800aace:	d002      	beq.n	800aad6 <_strtod_l+0x32a>
 800aad0:	9a07      	ldr	r2, [sp, #28]
 800aad2:	4252      	negs	r2, r2
 800aad4:	9207      	str	r2, [sp, #28]
 800aad6:	9a06      	ldr	r2, [sp, #24]
 800aad8:	2a00      	cmp	r2, #0
 800aada:	d14b      	bne.n	800ab74 <_strtod_l+0x3c8>
 800aadc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aade:	4310      	orrs	r0, r2
 800aae0:	d000      	beq.n	800aae4 <_strtod_l+0x338>
 800aae2:	e6aa      	b.n	800a83a <_strtod_l+0x8e>
 800aae4:	4662      	mov	r2, ip
 800aae6:	2a00      	cmp	r2, #0
 800aae8:	d000      	beq.n	800aaec <_strtod_l+0x340>
 800aaea:	e6c5      	b.n	800a878 <_strtod_l+0xcc>
 800aaec:	2b69      	cmp	r3, #105	; 0x69
 800aaee:	d025      	beq.n	800ab3c <_strtod_l+0x390>
 800aaf0:	dc21      	bgt.n	800ab36 <_strtod_l+0x38a>
 800aaf2:	2b49      	cmp	r3, #73	; 0x49
 800aaf4:	d022      	beq.n	800ab3c <_strtod_l+0x390>
 800aaf6:	2b4e      	cmp	r3, #78	; 0x4e
 800aaf8:	d000      	beq.n	800aafc <_strtod_l+0x350>
 800aafa:	e6bd      	b.n	800a878 <_strtod_l+0xcc>
 800aafc:	49a0      	ldr	r1, [pc, #640]	; (800ad80 <_strtod_l+0x5d4>)
 800aafe:	a821      	add	r0, sp, #132	; 0x84
 800ab00:	f001 fe82 	bl	800c808 <__match>
 800ab04:	2800      	cmp	r0, #0
 800ab06:	d100      	bne.n	800ab0a <_strtod_l+0x35e>
 800ab08:	e6b6      	b.n	800a878 <_strtod_l+0xcc>
 800ab0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2b28      	cmp	r3, #40	; 0x28
 800ab10:	d12a      	bne.n	800ab68 <_strtod_l+0x3bc>
 800ab12:	499c      	ldr	r1, [pc, #624]	; (800ad84 <_strtod_l+0x5d8>)
 800ab14:	aa24      	add	r2, sp, #144	; 0x90
 800ab16:	a821      	add	r0, sp, #132	; 0x84
 800ab18:	f001 fe8a 	bl	800c830 <__hexnan>
 800ab1c:	2805      	cmp	r0, #5
 800ab1e:	d123      	bne.n	800ab68 <_strtod_l+0x3bc>
 800ab20:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ab22:	4a99      	ldr	r2, [pc, #612]	; (800ad88 <_strtod_l+0x5dc>)
 800ab24:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ab26:	431a      	orrs	r2, r3
 800ab28:	0017      	movs	r7, r2
 800ab2a:	e686      	b.n	800a83a <_strtod_l+0x8e>
 800ab2c:	210a      	movs	r1, #10
 800ab2e:	434a      	muls	r2, r1
 800ab30:	18d2      	adds	r2, r2, r3
 800ab32:	3a30      	subs	r2, #48	; 0x30
 800ab34:	e7b8      	b.n	800aaa8 <_strtod_l+0x2fc>
 800ab36:	2b6e      	cmp	r3, #110	; 0x6e
 800ab38:	d0e0      	beq.n	800aafc <_strtod_l+0x350>
 800ab3a:	e69d      	b.n	800a878 <_strtod_l+0xcc>
 800ab3c:	4993      	ldr	r1, [pc, #588]	; (800ad8c <_strtod_l+0x5e0>)
 800ab3e:	a821      	add	r0, sp, #132	; 0x84
 800ab40:	f001 fe62 	bl	800c808 <__match>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	d100      	bne.n	800ab4a <_strtod_l+0x39e>
 800ab48:	e696      	b.n	800a878 <_strtod_l+0xcc>
 800ab4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab4c:	4990      	ldr	r1, [pc, #576]	; (800ad90 <_strtod_l+0x5e4>)
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	a821      	add	r0, sp, #132	; 0x84
 800ab52:	9321      	str	r3, [sp, #132]	; 0x84
 800ab54:	f001 fe58 	bl	800c808 <__match>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	d102      	bne.n	800ab62 <_strtod_l+0x3b6>
 800ab5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab5e:	3301      	adds	r3, #1
 800ab60:	9321      	str	r3, [sp, #132]	; 0x84
 800ab62:	2600      	movs	r6, #0
 800ab64:	4f88      	ldr	r7, [pc, #544]	; (800ad88 <_strtod_l+0x5dc>)
 800ab66:	e668      	b.n	800a83a <_strtod_l+0x8e>
 800ab68:	488a      	ldr	r0, [pc, #552]	; (800ad94 <_strtod_l+0x5e8>)
 800ab6a:	f002 fe1d 	bl	800d7a8 <nan>
 800ab6e:	0006      	movs	r6, r0
 800ab70:	000f      	movs	r7, r1
 800ab72:	e662      	b.n	800a83a <_strtod_l+0x8e>
 800ab74:	9b07      	ldr	r3, [sp, #28]
 800ab76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab78:	1a9b      	subs	r3, r3, r2
 800ab7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <_strtod_l+0x3da>
 800ab82:	9b06      	ldr	r3, [sp, #24]
 800ab84:	9309      	str	r3, [sp, #36]	; 0x24
 800ab86:	9c06      	ldr	r4, [sp, #24]
 800ab88:	2c10      	cmp	r4, #16
 800ab8a:	dd00      	ble.n	800ab8e <_strtod_l+0x3e2>
 800ab8c:	2410      	movs	r4, #16
 800ab8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ab90:	f7f7 fc0a 	bl	80023a8 <__aeabi_ui2d>
 800ab94:	9b06      	ldr	r3, [sp, #24]
 800ab96:	0006      	movs	r6, r0
 800ab98:	000f      	movs	r7, r1
 800ab9a:	2b09      	cmp	r3, #9
 800ab9c:	dd15      	ble.n	800abca <_strtod_l+0x41e>
 800ab9e:	0022      	movs	r2, r4
 800aba0:	4b7d      	ldr	r3, [pc, #500]	; (800ad98 <_strtod_l+0x5ec>)
 800aba2:	3a09      	subs	r2, #9
 800aba4:	00d2      	lsls	r2, r2, #3
 800aba6:	189b      	adds	r3, r3, r2
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	f7f6 fd7a 	bl	80016a4 <__aeabi_dmul>
 800abb0:	0006      	movs	r6, r0
 800abb2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800abb4:	000f      	movs	r7, r1
 800abb6:	f7f7 fbf7 	bl	80023a8 <__aeabi_ui2d>
 800abba:	0002      	movs	r2, r0
 800abbc:	000b      	movs	r3, r1
 800abbe:	0030      	movs	r0, r6
 800abc0:	0039      	movs	r1, r7
 800abc2:	f7f5 fdff 	bl	80007c4 <__aeabi_dadd>
 800abc6:	0006      	movs	r6, r0
 800abc8:	000f      	movs	r7, r1
 800abca:	9b06      	ldr	r3, [sp, #24]
 800abcc:	2b0f      	cmp	r3, #15
 800abce:	dc39      	bgt.n	800ac44 <_strtod_l+0x498>
 800abd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d100      	bne.n	800abd8 <_strtod_l+0x42c>
 800abd6:	e630      	b.n	800a83a <_strtod_l+0x8e>
 800abd8:	dd24      	ble.n	800ac24 <_strtod_l+0x478>
 800abda:	2b16      	cmp	r3, #22
 800abdc:	dc09      	bgt.n	800abf2 <_strtod_l+0x446>
 800abde:	00dd      	lsls	r5, r3, #3
 800abe0:	0032      	movs	r2, r6
 800abe2:	003b      	movs	r3, r7
 800abe4:	4c6c      	ldr	r4, [pc, #432]	; (800ad98 <_strtod_l+0x5ec>)
 800abe6:	1964      	adds	r4, r4, r5
 800abe8:	6820      	ldr	r0, [r4, #0]
 800abea:	6861      	ldr	r1, [r4, #4]
 800abec:	f7f6 fd5a 	bl	80016a4 <__aeabi_dmul>
 800abf0:	e7bd      	b.n	800ab6e <_strtod_l+0x3c2>
 800abf2:	2325      	movs	r3, #37	; 0x25
 800abf4:	9a06      	ldr	r2, [sp, #24]
 800abf6:	1a9b      	subs	r3, r3, r2
 800abf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abfa:	4293      	cmp	r3, r2
 800abfc:	db22      	blt.n	800ac44 <_strtod_l+0x498>
 800abfe:	240f      	movs	r4, #15
 800ac00:	9b06      	ldr	r3, [sp, #24]
 800ac02:	4d65      	ldr	r5, [pc, #404]	; (800ad98 <_strtod_l+0x5ec>)
 800ac04:	1ae4      	subs	r4, r4, r3
 800ac06:	00e1      	lsls	r1, r4, #3
 800ac08:	1869      	adds	r1, r5, r1
 800ac0a:	0032      	movs	r2, r6
 800ac0c:	6808      	ldr	r0, [r1, #0]
 800ac0e:	6849      	ldr	r1, [r1, #4]
 800ac10:	003b      	movs	r3, r7
 800ac12:	f7f6 fd47 	bl	80016a4 <__aeabi_dmul>
 800ac16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac18:	1b1c      	subs	r4, r3, r4
 800ac1a:	00e4      	lsls	r4, r4, #3
 800ac1c:	192c      	adds	r4, r5, r4
 800ac1e:	6822      	ldr	r2, [r4, #0]
 800ac20:	6863      	ldr	r3, [r4, #4]
 800ac22:	e7e3      	b.n	800abec <_strtod_l+0x440>
 800ac24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac26:	3316      	adds	r3, #22
 800ac28:	db0c      	blt.n	800ac44 <_strtod_l+0x498>
 800ac2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac2c:	9a07      	ldr	r2, [sp, #28]
 800ac2e:	0030      	movs	r0, r6
 800ac30:	1a9a      	subs	r2, r3, r2
 800ac32:	4b59      	ldr	r3, [pc, #356]	; (800ad98 <_strtod_l+0x5ec>)
 800ac34:	00d2      	lsls	r2, r2, #3
 800ac36:	189b      	adds	r3, r3, r2
 800ac38:	0039      	movs	r1, r7
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f7f6 f92b 	bl	8000e98 <__aeabi_ddiv>
 800ac42:	e794      	b.n	800ab6e <_strtod_l+0x3c2>
 800ac44:	9b06      	ldr	r3, [sp, #24]
 800ac46:	1b1c      	subs	r4, r3, r4
 800ac48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac4a:	18e4      	adds	r4, r4, r3
 800ac4c:	2c00      	cmp	r4, #0
 800ac4e:	dd70      	ble.n	800ad32 <_strtod_l+0x586>
 800ac50:	230f      	movs	r3, #15
 800ac52:	0021      	movs	r1, r4
 800ac54:	4019      	ands	r1, r3
 800ac56:	421c      	tst	r4, r3
 800ac58:	d00a      	beq.n	800ac70 <_strtod_l+0x4c4>
 800ac5a:	00cb      	lsls	r3, r1, #3
 800ac5c:	494e      	ldr	r1, [pc, #312]	; (800ad98 <_strtod_l+0x5ec>)
 800ac5e:	0032      	movs	r2, r6
 800ac60:	18c9      	adds	r1, r1, r3
 800ac62:	6808      	ldr	r0, [r1, #0]
 800ac64:	6849      	ldr	r1, [r1, #4]
 800ac66:	003b      	movs	r3, r7
 800ac68:	f7f6 fd1c 	bl	80016a4 <__aeabi_dmul>
 800ac6c:	0006      	movs	r6, r0
 800ac6e:	000f      	movs	r7, r1
 800ac70:	230f      	movs	r3, #15
 800ac72:	439c      	bics	r4, r3
 800ac74:	d048      	beq.n	800ad08 <_strtod_l+0x55c>
 800ac76:	3326      	adds	r3, #38	; 0x26
 800ac78:	33ff      	adds	r3, #255	; 0xff
 800ac7a:	429c      	cmp	r4, r3
 800ac7c:	dd22      	ble.n	800acc4 <_strtod_l+0x518>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	9306      	str	r3, [sp, #24]
 800ac82:	9307      	str	r3, [sp, #28]
 800ac84:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac86:	9309      	str	r3, [sp, #36]	; 0x24
 800ac88:	2322      	movs	r3, #34	; 0x22
 800ac8a:	2600      	movs	r6, #0
 800ac8c:	9a05      	ldr	r2, [sp, #20]
 800ac8e:	4f3e      	ldr	r7, [pc, #248]	; (800ad88 <_strtod_l+0x5dc>)
 800ac90:	6013      	str	r3, [r2, #0]
 800ac92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac94:	42b3      	cmp	r3, r6
 800ac96:	d100      	bne.n	800ac9a <_strtod_l+0x4ee>
 800ac98:	e5cf      	b.n	800a83a <_strtod_l+0x8e>
 800ac9a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ac9c:	9805      	ldr	r0, [sp, #20]
 800ac9e:	f001 fee5 	bl	800ca6c <_Bfree>
 800aca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aca4:	9805      	ldr	r0, [sp, #20]
 800aca6:	f001 fee1 	bl	800ca6c <_Bfree>
 800acaa:	9907      	ldr	r1, [sp, #28]
 800acac:	9805      	ldr	r0, [sp, #20]
 800acae:	f001 fedd 	bl	800ca6c <_Bfree>
 800acb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800acb4:	9805      	ldr	r0, [sp, #20]
 800acb6:	f001 fed9 	bl	800ca6c <_Bfree>
 800acba:	9906      	ldr	r1, [sp, #24]
 800acbc:	9805      	ldr	r0, [sp, #20]
 800acbe:	f001 fed5 	bl	800ca6c <_Bfree>
 800acc2:	e5ba      	b.n	800a83a <_strtod_l+0x8e>
 800acc4:	2300      	movs	r3, #0
 800acc6:	0030      	movs	r0, r6
 800acc8:	0039      	movs	r1, r7
 800acca:	001d      	movs	r5, r3
 800accc:	1124      	asrs	r4, r4, #4
 800acce:	2c01      	cmp	r4, #1
 800acd0:	dc1d      	bgt.n	800ad0e <_strtod_l+0x562>
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d001      	beq.n	800acda <_strtod_l+0x52e>
 800acd6:	0006      	movs	r6, r0
 800acd8:	000f      	movs	r7, r1
 800acda:	4b30      	ldr	r3, [pc, #192]	; (800ad9c <_strtod_l+0x5f0>)
 800acdc:	00ed      	lsls	r5, r5, #3
 800acde:	18ff      	adds	r7, r7, r3
 800ace0:	4b2f      	ldr	r3, [pc, #188]	; (800ada0 <_strtod_l+0x5f4>)
 800ace2:	0032      	movs	r2, r6
 800ace4:	195d      	adds	r5, r3, r5
 800ace6:	6828      	ldr	r0, [r5, #0]
 800ace8:	6869      	ldr	r1, [r5, #4]
 800acea:	003b      	movs	r3, r7
 800acec:	f7f6 fcda 	bl	80016a4 <__aeabi_dmul>
 800acf0:	4b25      	ldr	r3, [pc, #148]	; (800ad88 <_strtod_l+0x5dc>)
 800acf2:	4a2c      	ldr	r2, [pc, #176]	; (800ada4 <_strtod_l+0x5f8>)
 800acf4:	0006      	movs	r6, r0
 800acf6:	400b      	ands	r3, r1
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d8c0      	bhi.n	800ac7e <_strtod_l+0x4d2>
 800acfc:	4a2a      	ldr	r2, [pc, #168]	; (800ada8 <_strtod_l+0x5fc>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d913      	bls.n	800ad2a <_strtod_l+0x57e>
 800ad02:	2601      	movs	r6, #1
 800ad04:	4f29      	ldr	r7, [pc, #164]	; (800adac <_strtod_l+0x600>)
 800ad06:	4276      	negs	r6, r6
 800ad08:	2300      	movs	r3, #0
 800ad0a:	9308      	str	r3, [sp, #32]
 800ad0c:	e087      	b.n	800ae1e <_strtod_l+0x672>
 800ad0e:	2201      	movs	r2, #1
 800ad10:	4214      	tst	r4, r2
 800ad12:	d007      	beq.n	800ad24 <_strtod_l+0x578>
 800ad14:	4a22      	ldr	r2, [pc, #136]	; (800ada0 <_strtod_l+0x5f4>)
 800ad16:	00eb      	lsls	r3, r5, #3
 800ad18:	189b      	adds	r3, r3, r2
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	f7f6 fcc1 	bl	80016a4 <__aeabi_dmul>
 800ad22:	2301      	movs	r3, #1
 800ad24:	3501      	adds	r5, #1
 800ad26:	1064      	asrs	r4, r4, #1
 800ad28:	e7d1      	b.n	800acce <_strtod_l+0x522>
 800ad2a:	23d4      	movs	r3, #212	; 0xd4
 800ad2c:	049b      	lsls	r3, r3, #18
 800ad2e:	18cf      	adds	r7, r1, r3
 800ad30:	e7ea      	b.n	800ad08 <_strtod_l+0x55c>
 800ad32:	2c00      	cmp	r4, #0
 800ad34:	d0e8      	beq.n	800ad08 <_strtod_l+0x55c>
 800ad36:	4264      	negs	r4, r4
 800ad38:	220f      	movs	r2, #15
 800ad3a:	0023      	movs	r3, r4
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	4214      	tst	r4, r2
 800ad40:	d00a      	beq.n	800ad58 <_strtod_l+0x5ac>
 800ad42:	00da      	lsls	r2, r3, #3
 800ad44:	4b14      	ldr	r3, [pc, #80]	; (800ad98 <_strtod_l+0x5ec>)
 800ad46:	0030      	movs	r0, r6
 800ad48:	189b      	adds	r3, r3, r2
 800ad4a:	0039      	movs	r1, r7
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	f7f6 f8a2 	bl	8000e98 <__aeabi_ddiv>
 800ad54:	0006      	movs	r6, r0
 800ad56:	000f      	movs	r7, r1
 800ad58:	1124      	asrs	r4, r4, #4
 800ad5a:	d0d5      	beq.n	800ad08 <_strtod_l+0x55c>
 800ad5c:	2c1f      	cmp	r4, #31
 800ad5e:	dd27      	ble.n	800adb0 <_strtod_l+0x604>
 800ad60:	2300      	movs	r3, #0
 800ad62:	9306      	str	r3, [sp, #24]
 800ad64:	9307      	str	r3, [sp, #28]
 800ad66:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad68:	9309      	str	r3, [sp, #36]	; 0x24
 800ad6a:	2322      	movs	r3, #34	; 0x22
 800ad6c:	9a05      	ldr	r2, [sp, #20]
 800ad6e:	2600      	movs	r6, #0
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad74:	2700      	movs	r7, #0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d18f      	bne.n	800ac9a <_strtod_l+0x4ee>
 800ad7a:	e55e      	b.n	800a83a <_strtod_l+0x8e>
 800ad7c:	00004e1f 	.word	0x00004e1f
 800ad80:	0800e6a9 	.word	0x0800e6a9
 800ad84:	0800e6e4 	.word	0x0800e6e4
 800ad88:	7ff00000 	.word	0x7ff00000
 800ad8c:	0800e6a1 	.word	0x0800e6a1
 800ad90:	0800e824 	.word	0x0800e824
 800ad94:	0800eae0 	.word	0x0800eae0
 800ad98:	0800e9c0 	.word	0x0800e9c0
 800ad9c:	fcb00000 	.word	0xfcb00000
 800ada0:	0800e998 	.word	0x0800e998
 800ada4:	7ca00000 	.word	0x7ca00000
 800ada8:	7c900000 	.word	0x7c900000
 800adac:	7fefffff 	.word	0x7fefffff
 800adb0:	2310      	movs	r3, #16
 800adb2:	0022      	movs	r2, r4
 800adb4:	401a      	ands	r2, r3
 800adb6:	9208      	str	r2, [sp, #32]
 800adb8:	421c      	tst	r4, r3
 800adba:	d001      	beq.n	800adc0 <_strtod_l+0x614>
 800adbc:	335a      	adds	r3, #90	; 0x5a
 800adbe:	9308      	str	r3, [sp, #32]
 800adc0:	0030      	movs	r0, r6
 800adc2:	0039      	movs	r1, r7
 800adc4:	2300      	movs	r3, #0
 800adc6:	4dca      	ldr	r5, [pc, #808]	; (800b0f0 <_strtod_l+0x944>)
 800adc8:	2201      	movs	r2, #1
 800adca:	4214      	tst	r4, r2
 800adcc:	d004      	beq.n	800add8 <_strtod_l+0x62c>
 800adce:	682a      	ldr	r2, [r5, #0]
 800add0:	686b      	ldr	r3, [r5, #4]
 800add2:	f7f6 fc67 	bl	80016a4 <__aeabi_dmul>
 800add6:	2301      	movs	r3, #1
 800add8:	1064      	asrs	r4, r4, #1
 800adda:	3508      	adds	r5, #8
 800addc:	2c00      	cmp	r4, #0
 800adde:	d1f3      	bne.n	800adc8 <_strtod_l+0x61c>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <_strtod_l+0x63c>
 800ade4:	0006      	movs	r6, r0
 800ade6:	000f      	movs	r7, r1
 800ade8:	9b08      	ldr	r3, [sp, #32]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00f      	beq.n	800ae0e <_strtod_l+0x662>
 800adee:	236b      	movs	r3, #107	; 0x6b
 800adf0:	0079      	lsls	r1, r7, #1
 800adf2:	0d49      	lsrs	r1, r1, #21
 800adf4:	003a      	movs	r2, r7
 800adf6:	1a5b      	subs	r3, r3, r1
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	dd08      	ble.n	800ae0e <_strtod_l+0x662>
 800adfc:	2b1f      	cmp	r3, #31
 800adfe:	dc00      	bgt.n	800ae02 <_strtod_l+0x656>
 800ae00:	e126      	b.n	800b050 <_strtod_l+0x8a4>
 800ae02:	2600      	movs	r6, #0
 800ae04:	2b34      	cmp	r3, #52	; 0x34
 800ae06:	dc00      	bgt.n	800ae0a <_strtod_l+0x65e>
 800ae08:	e11b      	b.n	800b042 <_strtod_l+0x896>
 800ae0a:	27dc      	movs	r7, #220	; 0xdc
 800ae0c:	04bf      	lsls	r7, r7, #18
 800ae0e:	2200      	movs	r2, #0
 800ae10:	2300      	movs	r3, #0
 800ae12:	0030      	movs	r0, r6
 800ae14:	0039      	movs	r1, r7
 800ae16:	f7f5 fb23 	bl	8000460 <__aeabi_dcmpeq>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d1a0      	bne.n	800ad60 <_strtod_l+0x5b4>
 800ae1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ae26:	9b06      	ldr	r3, [sp, #24]
 800ae28:	9805      	ldr	r0, [sp, #20]
 800ae2a:	f001 fe87 	bl	800cb3c <__s2b>
 800ae2e:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d100      	bne.n	800ae36 <_strtod_l+0x68a>
 800ae34:	e723      	b.n	800ac7e <_strtod_l+0x4d2>
 800ae36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae38:	9907      	ldr	r1, [sp, #28]
 800ae3a:	17da      	asrs	r2, r3, #31
 800ae3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae3e:	1a5b      	subs	r3, r3, r1
 800ae40:	401a      	ands	r2, r3
 800ae42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae44:	9215      	str	r2, [sp, #84]	; 0x54
 800ae46:	43db      	mvns	r3, r3
 800ae48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae4a:	17db      	asrs	r3, r3, #31
 800ae4c:	401a      	ands	r2, r3
 800ae4e:	2300      	movs	r3, #0
 800ae50:	921c      	str	r2, [sp, #112]	; 0x70
 800ae52:	9306      	str	r3, [sp, #24]
 800ae54:	9307      	str	r3, [sp, #28]
 800ae56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae58:	9805      	ldr	r0, [sp, #20]
 800ae5a:	6859      	ldr	r1, [r3, #4]
 800ae5c:	f001 fdc2 	bl	800c9e4 <_Balloc>
 800ae60:	9009      	str	r0, [sp, #36]	; 0x24
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d100      	bne.n	800ae68 <_strtod_l+0x6bc>
 800ae66:	e70f      	b.n	800ac88 <_strtod_l+0x4dc>
 800ae68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	310c      	adds	r1, #12
 800ae70:	1c9a      	adds	r2, r3, #2
 800ae72:	0092      	lsls	r2, r2, #2
 800ae74:	300c      	adds	r0, #12
 800ae76:	930c      	str	r3, [sp, #48]	; 0x30
 800ae78:	f001 fdab 	bl	800c9d2 <memcpy>
 800ae7c:	ab24      	add	r3, sp, #144	; 0x90
 800ae7e:	9301      	str	r3, [sp, #4]
 800ae80:	ab23      	add	r3, sp, #140	; 0x8c
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	0032      	movs	r2, r6
 800ae86:	003b      	movs	r3, r7
 800ae88:	9805      	ldr	r0, [sp, #20]
 800ae8a:	960e      	str	r6, [sp, #56]	; 0x38
 800ae8c:	970f      	str	r7, [sp, #60]	; 0x3c
 800ae8e:	f002 f9a3 	bl	800d1d8 <__d2b>
 800ae92:	9022      	str	r0, [sp, #136]	; 0x88
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d100      	bne.n	800ae9a <_strtod_l+0x6ee>
 800ae98:	e6f6      	b.n	800ac88 <_strtod_l+0x4dc>
 800ae9a:	2101      	movs	r1, #1
 800ae9c:	9805      	ldr	r0, [sp, #20]
 800ae9e:	f001 fee1 	bl	800cc64 <__i2b>
 800aea2:	9007      	str	r0, [sp, #28]
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d100      	bne.n	800aeaa <_strtod_l+0x6fe>
 800aea8:	e6ee      	b.n	800ac88 <_strtod_l+0x4dc>
 800aeaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	da00      	bge.n	800aeb2 <_strtod_l+0x706>
 800aeb0:	e0d3      	b.n	800b05a <_strtod_l+0x8ae>
 800aeb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aeb4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800aeb6:	189d      	adds	r5, r3, r2
 800aeb8:	9908      	ldr	r1, [sp, #32]
 800aeba:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aebc:	1a5b      	subs	r3, r3, r1
 800aebe:	2136      	movs	r1, #54	; 0x36
 800aec0:	189b      	adds	r3, r3, r2
 800aec2:	1a8a      	subs	r2, r1, r2
 800aec4:	498b      	ldr	r1, [pc, #556]	; (800b0f4 <_strtod_l+0x948>)
 800aec6:	3b01      	subs	r3, #1
 800aec8:	2001      	movs	r0, #1
 800aeca:	428b      	cmp	r3, r1
 800aecc:	db00      	blt.n	800aed0 <_strtod_l+0x724>
 800aece:	e0cf      	b.n	800b070 <_strtod_l+0x8c4>
 800aed0:	1ac9      	subs	r1, r1, r3
 800aed2:	1a52      	subs	r2, r2, r1
 800aed4:	291f      	cmp	r1, #31
 800aed6:	dd00      	ble.n	800aeda <_strtod_l+0x72e>
 800aed8:	e0c3      	b.n	800b062 <_strtod_l+0x8b6>
 800aeda:	4088      	lsls	r0, r1
 800aedc:	2300      	movs	r3, #0
 800aede:	9014      	str	r0, [sp, #80]	; 0x50
 800aee0:	9312      	str	r3, [sp, #72]	; 0x48
 800aee2:	18ab      	adds	r3, r5, r2
 800aee4:	930c      	str	r3, [sp, #48]	; 0x30
 800aee6:	18a4      	adds	r4, r4, r2
 800aee8:	9b08      	ldr	r3, [sp, #32]
 800aeea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeec:	191c      	adds	r4, r3, r4
 800aeee:	002b      	movs	r3, r5
 800aef0:	4295      	cmp	r5, r2
 800aef2:	dd00      	ble.n	800aef6 <_strtod_l+0x74a>
 800aef4:	0013      	movs	r3, r2
 800aef6:	42a3      	cmp	r3, r4
 800aef8:	dd00      	ble.n	800aefc <_strtod_l+0x750>
 800aefa:	0023      	movs	r3, r4
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	dd04      	ble.n	800af0a <_strtod_l+0x75e>
 800af00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af02:	1ae4      	subs	r4, r4, r3
 800af04:	1ad2      	subs	r2, r2, r3
 800af06:	920c      	str	r2, [sp, #48]	; 0x30
 800af08:	1aed      	subs	r5, r5, r3
 800af0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	dd17      	ble.n	800af40 <_strtod_l+0x794>
 800af10:	001a      	movs	r2, r3
 800af12:	9907      	ldr	r1, [sp, #28]
 800af14:	9805      	ldr	r0, [sp, #20]
 800af16:	f001 ff6b 	bl	800cdf0 <__pow5mult>
 800af1a:	9007      	str	r0, [sp, #28]
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d100      	bne.n	800af22 <_strtod_l+0x776>
 800af20:	e6b2      	b.n	800ac88 <_strtod_l+0x4dc>
 800af22:	0001      	movs	r1, r0
 800af24:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af26:	9805      	ldr	r0, [sp, #20]
 800af28:	f001 feb2 	bl	800cc90 <__multiply>
 800af2c:	9011      	str	r0, [sp, #68]	; 0x44
 800af2e:	2800      	cmp	r0, #0
 800af30:	d100      	bne.n	800af34 <_strtod_l+0x788>
 800af32:	e6a9      	b.n	800ac88 <_strtod_l+0x4dc>
 800af34:	9922      	ldr	r1, [sp, #136]	; 0x88
 800af36:	9805      	ldr	r0, [sp, #20]
 800af38:	f001 fd98 	bl	800ca6c <_Bfree>
 800af3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af3e:	9322      	str	r3, [sp, #136]	; 0x88
 800af40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af42:	2b00      	cmp	r3, #0
 800af44:	dd00      	ble.n	800af48 <_strtod_l+0x79c>
 800af46:	e096      	b.n	800b076 <_strtod_l+0x8ca>
 800af48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd08      	ble.n	800af60 <_strtod_l+0x7b4>
 800af4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800af50:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af52:	9805      	ldr	r0, [sp, #20]
 800af54:	f001 ff4c 	bl	800cdf0 <__pow5mult>
 800af58:	9009      	str	r0, [sp, #36]	; 0x24
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d100      	bne.n	800af60 <_strtod_l+0x7b4>
 800af5e:	e693      	b.n	800ac88 <_strtod_l+0x4dc>
 800af60:	2c00      	cmp	r4, #0
 800af62:	dd08      	ble.n	800af76 <_strtod_l+0x7ca>
 800af64:	0022      	movs	r2, r4
 800af66:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af68:	9805      	ldr	r0, [sp, #20]
 800af6a:	f001 ff9d 	bl	800cea8 <__lshift>
 800af6e:	9009      	str	r0, [sp, #36]	; 0x24
 800af70:	2800      	cmp	r0, #0
 800af72:	d100      	bne.n	800af76 <_strtod_l+0x7ca>
 800af74:	e688      	b.n	800ac88 <_strtod_l+0x4dc>
 800af76:	2d00      	cmp	r5, #0
 800af78:	dd08      	ble.n	800af8c <_strtod_l+0x7e0>
 800af7a:	002a      	movs	r2, r5
 800af7c:	9907      	ldr	r1, [sp, #28]
 800af7e:	9805      	ldr	r0, [sp, #20]
 800af80:	f001 ff92 	bl	800cea8 <__lshift>
 800af84:	9007      	str	r0, [sp, #28]
 800af86:	2800      	cmp	r0, #0
 800af88:	d100      	bne.n	800af8c <_strtod_l+0x7e0>
 800af8a:	e67d      	b.n	800ac88 <_strtod_l+0x4dc>
 800af8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af8e:	9922      	ldr	r1, [sp, #136]	; 0x88
 800af90:	9805      	ldr	r0, [sp, #20]
 800af92:	f002 f815 	bl	800cfc0 <__mdiff>
 800af96:	9006      	str	r0, [sp, #24]
 800af98:	2800      	cmp	r0, #0
 800af9a:	d100      	bne.n	800af9e <_strtod_l+0x7f2>
 800af9c:	e674      	b.n	800ac88 <_strtod_l+0x4dc>
 800af9e:	2200      	movs	r2, #0
 800afa0:	68c3      	ldr	r3, [r0, #12]
 800afa2:	9907      	ldr	r1, [sp, #28]
 800afa4:	60c2      	str	r2, [r0, #12]
 800afa6:	9311      	str	r3, [sp, #68]	; 0x44
 800afa8:	f001 ffee 	bl	800cf88 <__mcmp>
 800afac:	2800      	cmp	r0, #0
 800afae:	da6c      	bge.n	800b08a <_strtod_l+0x8de>
 800afb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800afb2:	4333      	orrs	r3, r6
 800afb4:	d000      	beq.n	800afb8 <_strtod_l+0x80c>
 800afb6:	e097      	b.n	800b0e8 <_strtod_l+0x93c>
 800afb8:	033b      	lsls	r3, r7, #12
 800afba:	d000      	beq.n	800afbe <_strtod_l+0x812>
 800afbc:	e094      	b.n	800b0e8 <_strtod_l+0x93c>
 800afbe:	22d6      	movs	r2, #214	; 0xd6
 800afc0:	4b4d      	ldr	r3, [pc, #308]	; (800b0f8 <_strtod_l+0x94c>)
 800afc2:	04d2      	lsls	r2, r2, #19
 800afc4:	403b      	ands	r3, r7
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d800      	bhi.n	800afcc <_strtod_l+0x820>
 800afca:	e08d      	b.n	800b0e8 <_strtod_l+0x93c>
 800afcc:	9b06      	ldr	r3, [sp, #24]
 800afce:	695b      	ldr	r3, [r3, #20]
 800afd0:	930a      	str	r3, [sp, #40]	; 0x28
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d105      	bne.n	800afe2 <_strtod_l+0x836>
 800afd6:	9b06      	ldr	r3, [sp, #24]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	930a      	str	r3, [sp, #40]	; 0x28
 800afdc:	2b01      	cmp	r3, #1
 800afde:	dc00      	bgt.n	800afe2 <_strtod_l+0x836>
 800afe0:	e082      	b.n	800b0e8 <_strtod_l+0x93c>
 800afe2:	9906      	ldr	r1, [sp, #24]
 800afe4:	2201      	movs	r2, #1
 800afe6:	9805      	ldr	r0, [sp, #20]
 800afe8:	f001 ff5e 	bl	800cea8 <__lshift>
 800afec:	9907      	ldr	r1, [sp, #28]
 800afee:	9006      	str	r0, [sp, #24]
 800aff0:	f001 ffca 	bl	800cf88 <__mcmp>
 800aff4:	2800      	cmp	r0, #0
 800aff6:	dd77      	ble.n	800b0e8 <_strtod_l+0x93c>
 800aff8:	9908      	ldr	r1, [sp, #32]
 800affa:	003b      	movs	r3, r7
 800affc:	4a3e      	ldr	r2, [pc, #248]	; (800b0f8 <_strtod_l+0x94c>)
 800affe:	2900      	cmp	r1, #0
 800b000:	d100      	bne.n	800b004 <_strtod_l+0x858>
 800b002:	e09e      	b.n	800b142 <_strtod_l+0x996>
 800b004:	0011      	movs	r1, r2
 800b006:	20d6      	movs	r0, #214	; 0xd6
 800b008:	4039      	ands	r1, r7
 800b00a:	04c0      	lsls	r0, r0, #19
 800b00c:	4281      	cmp	r1, r0
 800b00e:	dd00      	ble.n	800b012 <_strtod_l+0x866>
 800b010:	e097      	b.n	800b142 <_strtod_l+0x996>
 800b012:	23dc      	movs	r3, #220	; 0xdc
 800b014:	049b      	lsls	r3, r3, #18
 800b016:	4299      	cmp	r1, r3
 800b018:	dc00      	bgt.n	800b01c <_strtod_l+0x870>
 800b01a:	e6a6      	b.n	800ad6a <_strtod_l+0x5be>
 800b01c:	4b37      	ldr	r3, [pc, #220]	; (800b0fc <_strtod_l+0x950>)
 800b01e:	0030      	movs	r0, r6
 800b020:	931b      	str	r3, [sp, #108]	; 0x6c
 800b022:	2300      	movs	r3, #0
 800b024:	931a      	str	r3, [sp, #104]	; 0x68
 800b026:	0039      	movs	r1, r7
 800b028:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b02a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b02c:	f7f6 fb3a 	bl	80016a4 <__aeabi_dmul>
 800b030:	0006      	movs	r6, r0
 800b032:	000f      	movs	r7, r1
 800b034:	4308      	orrs	r0, r1
 800b036:	d000      	beq.n	800b03a <_strtod_l+0x88e>
 800b038:	e62f      	b.n	800ac9a <_strtod_l+0x4ee>
 800b03a:	2322      	movs	r3, #34	; 0x22
 800b03c:	9a05      	ldr	r2, [sp, #20]
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	e62b      	b.n	800ac9a <_strtod_l+0x4ee>
 800b042:	2101      	movs	r1, #1
 800b044:	3b20      	subs	r3, #32
 800b046:	4249      	negs	r1, r1
 800b048:	4099      	lsls	r1, r3
 800b04a:	400a      	ands	r2, r1
 800b04c:	0017      	movs	r7, r2
 800b04e:	e6de      	b.n	800ae0e <_strtod_l+0x662>
 800b050:	2201      	movs	r2, #1
 800b052:	4252      	negs	r2, r2
 800b054:	409a      	lsls	r2, r3
 800b056:	4016      	ands	r6, r2
 800b058:	e6d9      	b.n	800ae0e <_strtod_l+0x662>
 800b05a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b05c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b05e:	1ad4      	subs	r4, r2, r3
 800b060:	e72a      	b.n	800aeb8 <_strtod_l+0x70c>
 800b062:	4927      	ldr	r1, [pc, #156]	; (800b100 <_strtod_l+0x954>)
 800b064:	1acb      	subs	r3, r1, r3
 800b066:	0001      	movs	r1, r0
 800b068:	4099      	lsls	r1, r3
 800b06a:	9112      	str	r1, [sp, #72]	; 0x48
 800b06c:	9014      	str	r0, [sp, #80]	; 0x50
 800b06e:	e738      	b.n	800aee2 <_strtod_l+0x736>
 800b070:	2300      	movs	r3, #0
 800b072:	9312      	str	r3, [sp, #72]	; 0x48
 800b074:	e7fa      	b.n	800b06c <_strtod_l+0x8c0>
 800b076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b078:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b07a:	9805      	ldr	r0, [sp, #20]
 800b07c:	f001 ff14 	bl	800cea8 <__lshift>
 800b080:	9022      	str	r0, [sp, #136]	; 0x88
 800b082:	2800      	cmp	r0, #0
 800b084:	d000      	beq.n	800b088 <_strtod_l+0x8dc>
 800b086:	e75f      	b.n	800af48 <_strtod_l+0x79c>
 800b088:	e5fe      	b.n	800ac88 <_strtod_l+0x4dc>
 800b08a:	970c      	str	r7, [sp, #48]	; 0x30
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d176      	bne.n	800b17e <_strtod_l+0x9d2>
 800b090:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b092:	033b      	lsls	r3, r7, #12
 800b094:	0b1b      	lsrs	r3, r3, #12
 800b096:	2a00      	cmp	r2, #0
 800b098:	d038      	beq.n	800b10c <_strtod_l+0x960>
 800b09a:	4a1a      	ldr	r2, [pc, #104]	; (800b104 <_strtod_l+0x958>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d138      	bne.n	800b112 <_strtod_l+0x966>
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	9b08      	ldr	r3, [sp, #32]
 800b0a4:	4252      	negs	r2, r2
 800b0a6:	0031      	movs	r1, r6
 800b0a8:	0010      	movs	r0, r2
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00b      	beq.n	800b0c6 <_strtod_l+0x91a>
 800b0ae:	24d4      	movs	r4, #212	; 0xd4
 800b0b0:	4b11      	ldr	r3, [pc, #68]	; (800b0f8 <_strtod_l+0x94c>)
 800b0b2:	0010      	movs	r0, r2
 800b0b4:	403b      	ands	r3, r7
 800b0b6:	04e4      	lsls	r4, r4, #19
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	d804      	bhi.n	800b0c6 <_strtod_l+0x91a>
 800b0bc:	306c      	adds	r0, #108	; 0x6c
 800b0be:	0d1b      	lsrs	r3, r3, #20
 800b0c0:	1ac3      	subs	r3, r0, r3
 800b0c2:	409a      	lsls	r2, r3
 800b0c4:	0010      	movs	r0, r2
 800b0c6:	4281      	cmp	r1, r0
 800b0c8:	d123      	bne.n	800b112 <_strtod_l+0x966>
 800b0ca:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <_strtod_l+0x95c>)
 800b0cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d102      	bne.n	800b0d8 <_strtod_l+0x92c>
 800b0d2:	1c4b      	adds	r3, r1, #1
 800b0d4:	d100      	bne.n	800b0d8 <_strtod_l+0x92c>
 800b0d6:	e5d7      	b.n	800ac88 <_strtod_l+0x4dc>
 800b0d8:	4b07      	ldr	r3, [pc, #28]	; (800b0f8 <_strtod_l+0x94c>)
 800b0da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0dc:	2600      	movs	r6, #0
 800b0de:	401a      	ands	r2, r3
 800b0e0:	0013      	movs	r3, r2
 800b0e2:	2280      	movs	r2, #128	; 0x80
 800b0e4:	0352      	lsls	r2, r2, #13
 800b0e6:	189f      	adds	r7, r3, r2
 800b0e8:	9b08      	ldr	r3, [sp, #32]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d196      	bne.n	800b01c <_strtod_l+0x870>
 800b0ee:	e5d4      	b.n	800ac9a <_strtod_l+0x4ee>
 800b0f0:	0800e6f8 	.word	0x0800e6f8
 800b0f4:	fffffc02 	.word	0xfffffc02
 800b0f8:	7ff00000 	.word	0x7ff00000
 800b0fc:	39500000 	.word	0x39500000
 800b100:	fffffbe2 	.word	0xfffffbe2
 800b104:	000fffff 	.word	0x000fffff
 800b108:	7fefffff 	.word	0x7fefffff
 800b10c:	4333      	orrs	r3, r6
 800b10e:	d100      	bne.n	800b112 <_strtod_l+0x966>
 800b110:	e772      	b.n	800aff8 <_strtod_l+0x84c>
 800b112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b114:	2b00      	cmp	r3, #0
 800b116:	d01d      	beq.n	800b154 <_strtod_l+0x9a8>
 800b118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b11a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b11c:	4213      	tst	r3, r2
 800b11e:	d0e3      	beq.n	800b0e8 <_strtod_l+0x93c>
 800b120:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b122:	0030      	movs	r0, r6
 800b124:	0039      	movs	r1, r7
 800b126:	9a08      	ldr	r2, [sp, #32]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d017      	beq.n	800b15c <_strtod_l+0x9b0>
 800b12c:	f7ff fb26 	bl	800a77c <sulp>
 800b130:	0002      	movs	r2, r0
 800b132:	000b      	movs	r3, r1
 800b134:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b136:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b138:	f7f5 fb44 	bl	80007c4 <__aeabi_dadd>
 800b13c:	0006      	movs	r6, r0
 800b13e:	000f      	movs	r7, r1
 800b140:	e7d2      	b.n	800b0e8 <_strtod_l+0x93c>
 800b142:	2601      	movs	r6, #1
 800b144:	4013      	ands	r3, r2
 800b146:	4a9b      	ldr	r2, [pc, #620]	; (800b3b4 <_strtod_l+0xc08>)
 800b148:	4276      	negs	r6, r6
 800b14a:	189b      	adds	r3, r3, r2
 800b14c:	4a9a      	ldr	r2, [pc, #616]	; (800b3b8 <_strtod_l+0xc0c>)
 800b14e:	431a      	orrs	r2, r3
 800b150:	0017      	movs	r7, r2
 800b152:	e7c9      	b.n	800b0e8 <_strtod_l+0x93c>
 800b154:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b156:	4233      	tst	r3, r6
 800b158:	d0c6      	beq.n	800b0e8 <_strtod_l+0x93c>
 800b15a:	e7e1      	b.n	800b120 <_strtod_l+0x974>
 800b15c:	f7ff fb0e 	bl	800a77c <sulp>
 800b160:	0002      	movs	r2, r0
 800b162:	000b      	movs	r3, r1
 800b164:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b166:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b168:	f7f6 fd08 	bl	8001b7c <__aeabi_dsub>
 800b16c:	2200      	movs	r2, #0
 800b16e:	2300      	movs	r3, #0
 800b170:	0006      	movs	r6, r0
 800b172:	000f      	movs	r7, r1
 800b174:	f7f5 f974 	bl	8000460 <__aeabi_dcmpeq>
 800b178:	2800      	cmp	r0, #0
 800b17a:	d0b5      	beq.n	800b0e8 <_strtod_l+0x93c>
 800b17c:	e5f5      	b.n	800ad6a <_strtod_l+0x5be>
 800b17e:	9907      	ldr	r1, [sp, #28]
 800b180:	9806      	ldr	r0, [sp, #24]
 800b182:	f002 f88d 	bl	800d2a0 <__ratio>
 800b186:	2380      	movs	r3, #128	; 0x80
 800b188:	2200      	movs	r2, #0
 800b18a:	05db      	lsls	r3, r3, #23
 800b18c:	0004      	movs	r4, r0
 800b18e:	000d      	movs	r5, r1
 800b190:	f7f5 f976 	bl	8000480 <__aeabi_dcmple>
 800b194:	2800      	cmp	r0, #0
 800b196:	d079      	beq.n	800b28c <_strtod_l+0xae0>
 800b198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d04b      	beq.n	800b236 <_strtod_l+0xa8a>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	4c86      	ldr	r4, [pc, #536]	; (800b3bc <_strtod_l+0xc10>)
 800b1a2:	2500      	movs	r5, #0
 800b1a4:	9312      	str	r3, [sp, #72]	; 0x48
 800b1a6:	9413      	str	r4, [sp, #76]	; 0x4c
 800b1a8:	4c84      	ldr	r4, [pc, #528]	; (800b3bc <_strtod_l+0xc10>)
 800b1aa:	4a85      	ldr	r2, [pc, #532]	; (800b3c0 <_strtod_l+0xc14>)
 800b1ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	9314      	str	r3, [sp, #80]	; 0x50
 800b1b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1b4:	4b83      	ldr	r3, [pc, #524]	; (800b3c4 <_strtod_l+0xc18>)
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d000      	beq.n	800b1bc <_strtod_l+0xa10>
 800b1ba:	e0b0      	b.n	800b31e <_strtod_l+0xb72>
 800b1bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1c0:	921a      	str	r2, [sp, #104]	; 0x68
 800b1c2:	931b      	str	r3, [sp, #108]	; 0x6c
 800b1c4:	4a80      	ldr	r2, [pc, #512]	; (800b3c8 <_strtod_l+0xc1c>)
 800b1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1c8:	4694      	mov	ip, r2
 800b1ca:	4463      	add	r3, ip
 800b1cc:	001f      	movs	r7, r3
 800b1ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b1d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b1d2:	0030      	movs	r0, r6
 800b1d4:	0039      	movs	r1, r7
 800b1d6:	920c      	str	r2, [sp, #48]	; 0x30
 800b1d8:	930d      	str	r3, [sp, #52]	; 0x34
 800b1da:	f001 ff89 	bl	800d0f0 <__ulp>
 800b1de:	0002      	movs	r2, r0
 800b1e0:	000b      	movs	r3, r1
 800b1e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b1e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b1e6:	f7f6 fa5d 	bl	80016a4 <__aeabi_dmul>
 800b1ea:	0032      	movs	r2, r6
 800b1ec:	003b      	movs	r3, r7
 800b1ee:	f7f5 fae9 	bl	80007c4 <__aeabi_dadd>
 800b1f2:	4a73      	ldr	r2, [pc, #460]	; (800b3c0 <_strtod_l+0xc14>)
 800b1f4:	4b75      	ldr	r3, [pc, #468]	; (800b3cc <_strtod_l+0xc20>)
 800b1f6:	0006      	movs	r6, r0
 800b1f8:	400a      	ands	r2, r1
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d95e      	bls.n	800b2bc <_strtod_l+0xb10>
 800b1fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b200:	4a73      	ldr	r2, [pc, #460]	; (800b3d0 <_strtod_l+0xc24>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d103      	bne.n	800b20e <_strtod_l+0xa62>
 800b206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b208:	3301      	adds	r3, #1
 800b20a:	d100      	bne.n	800b20e <_strtod_l+0xa62>
 800b20c:	e53c      	b.n	800ac88 <_strtod_l+0x4dc>
 800b20e:	2601      	movs	r6, #1
 800b210:	4f6f      	ldr	r7, [pc, #444]	; (800b3d0 <_strtod_l+0xc24>)
 800b212:	4276      	negs	r6, r6
 800b214:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b216:	9805      	ldr	r0, [sp, #20]
 800b218:	f001 fc28 	bl	800ca6c <_Bfree>
 800b21c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b21e:	9805      	ldr	r0, [sp, #20]
 800b220:	f001 fc24 	bl	800ca6c <_Bfree>
 800b224:	9907      	ldr	r1, [sp, #28]
 800b226:	9805      	ldr	r0, [sp, #20]
 800b228:	f001 fc20 	bl	800ca6c <_Bfree>
 800b22c:	9906      	ldr	r1, [sp, #24]
 800b22e:	9805      	ldr	r0, [sp, #20]
 800b230:	f001 fc1c 	bl	800ca6c <_Bfree>
 800b234:	e60f      	b.n	800ae56 <_strtod_l+0x6aa>
 800b236:	2e00      	cmp	r6, #0
 800b238:	d11c      	bne.n	800b274 <_strtod_l+0xac8>
 800b23a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b23c:	031b      	lsls	r3, r3, #12
 800b23e:	d11f      	bne.n	800b280 <_strtod_l+0xad4>
 800b240:	2200      	movs	r2, #0
 800b242:	0020      	movs	r0, r4
 800b244:	0029      	movs	r1, r5
 800b246:	4b5d      	ldr	r3, [pc, #372]	; (800b3bc <_strtod_l+0xc10>)
 800b248:	f7f5 f910 	bl	800046c <__aeabi_dcmplt>
 800b24c:	2800      	cmp	r0, #0
 800b24e:	d11a      	bne.n	800b286 <_strtod_l+0xada>
 800b250:	0020      	movs	r0, r4
 800b252:	0029      	movs	r1, r5
 800b254:	2200      	movs	r2, #0
 800b256:	4b5f      	ldr	r3, [pc, #380]	; (800b3d4 <_strtod_l+0xc28>)
 800b258:	f7f6 fa24 	bl	80016a4 <__aeabi_dmul>
 800b25c:	0005      	movs	r5, r0
 800b25e:	000c      	movs	r4, r1
 800b260:	2380      	movs	r3, #128	; 0x80
 800b262:	061b      	lsls	r3, r3, #24
 800b264:	18e3      	adds	r3, r4, r3
 800b266:	951e      	str	r5, [sp, #120]	; 0x78
 800b268:	931f      	str	r3, [sp, #124]	; 0x7c
 800b26a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b26c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b26e:	9212      	str	r2, [sp, #72]	; 0x48
 800b270:	9313      	str	r3, [sp, #76]	; 0x4c
 800b272:	e79a      	b.n	800b1aa <_strtod_l+0x9fe>
 800b274:	2e01      	cmp	r6, #1
 800b276:	d103      	bne.n	800b280 <_strtod_l+0xad4>
 800b278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d100      	bne.n	800b280 <_strtod_l+0xad4>
 800b27e:	e574      	b.n	800ad6a <_strtod_l+0x5be>
 800b280:	2300      	movs	r3, #0
 800b282:	4c55      	ldr	r4, [pc, #340]	; (800b3d8 <_strtod_l+0xc2c>)
 800b284:	e78d      	b.n	800b1a2 <_strtod_l+0x9f6>
 800b286:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b288:	4c52      	ldr	r4, [pc, #328]	; (800b3d4 <_strtod_l+0xc28>)
 800b28a:	e7e9      	b.n	800b260 <_strtod_l+0xab4>
 800b28c:	2200      	movs	r2, #0
 800b28e:	0020      	movs	r0, r4
 800b290:	0029      	movs	r1, r5
 800b292:	4b50      	ldr	r3, [pc, #320]	; (800b3d4 <_strtod_l+0xc28>)
 800b294:	f7f6 fa06 	bl	80016a4 <__aeabi_dmul>
 800b298:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b29a:	0005      	movs	r5, r0
 800b29c:	000b      	movs	r3, r1
 800b29e:	000c      	movs	r4, r1
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	d107      	bne.n	800b2b4 <_strtod_l+0xb08>
 800b2a4:	2280      	movs	r2, #128	; 0x80
 800b2a6:	0612      	lsls	r2, r2, #24
 800b2a8:	188b      	adds	r3, r1, r2
 800b2aa:	9016      	str	r0, [sp, #88]	; 0x58
 800b2ac:	9317      	str	r3, [sp, #92]	; 0x5c
 800b2ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b2b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b2b2:	e7dc      	b.n	800b26e <_strtod_l+0xac2>
 800b2b4:	0002      	movs	r2, r0
 800b2b6:	9216      	str	r2, [sp, #88]	; 0x58
 800b2b8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b2ba:	e7f8      	b.n	800b2ae <_strtod_l+0xb02>
 800b2bc:	23d4      	movs	r3, #212	; 0xd4
 800b2be:	049b      	lsls	r3, r3, #18
 800b2c0:	18cf      	adds	r7, r1, r3
 800b2c2:	9b08      	ldr	r3, [sp, #32]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1a5      	bne.n	800b214 <_strtod_l+0xa68>
 800b2c8:	4b3d      	ldr	r3, [pc, #244]	; (800b3c0 <_strtod_l+0xc14>)
 800b2ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2cc:	403b      	ands	r3, r7
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d1a0      	bne.n	800b214 <_strtod_l+0xa68>
 800b2d2:	0028      	movs	r0, r5
 800b2d4:	0021      	movs	r1, r4
 800b2d6:	f7f5 f957 	bl	8000588 <__aeabi_d2lz>
 800b2da:	f7f5 f991 	bl	8000600 <__aeabi_l2d>
 800b2de:	0002      	movs	r2, r0
 800b2e0:	000b      	movs	r3, r1
 800b2e2:	0028      	movs	r0, r5
 800b2e4:	0021      	movs	r1, r4
 800b2e6:	f7f6 fc49 	bl	8001b7c <__aeabi_dsub>
 800b2ea:	033b      	lsls	r3, r7, #12
 800b2ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b2ee:	0b1b      	lsrs	r3, r3, #12
 800b2f0:	4333      	orrs	r3, r6
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	0004      	movs	r4, r0
 800b2f6:	000d      	movs	r5, r1
 800b2f8:	4a38      	ldr	r2, [pc, #224]	; (800b3dc <_strtod_l+0xc30>)
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d055      	beq.n	800b3aa <_strtod_l+0xbfe>
 800b2fe:	4b38      	ldr	r3, [pc, #224]	; (800b3e0 <_strtod_l+0xc34>)
 800b300:	f7f5 f8b4 	bl	800046c <__aeabi_dcmplt>
 800b304:	2800      	cmp	r0, #0
 800b306:	d000      	beq.n	800b30a <_strtod_l+0xb5e>
 800b308:	e4c7      	b.n	800ac9a <_strtod_l+0x4ee>
 800b30a:	0020      	movs	r0, r4
 800b30c:	0029      	movs	r1, r5
 800b30e:	4a35      	ldr	r2, [pc, #212]	; (800b3e4 <_strtod_l+0xc38>)
 800b310:	4b30      	ldr	r3, [pc, #192]	; (800b3d4 <_strtod_l+0xc28>)
 800b312:	f7f5 f8bf 	bl	8000494 <__aeabi_dcmpgt>
 800b316:	2800      	cmp	r0, #0
 800b318:	d100      	bne.n	800b31c <_strtod_l+0xb70>
 800b31a:	e77b      	b.n	800b214 <_strtod_l+0xa68>
 800b31c:	e4bd      	b.n	800ac9a <_strtod_l+0x4ee>
 800b31e:	9b08      	ldr	r3, [sp, #32]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d02b      	beq.n	800b37c <_strtod_l+0xbd0>
 800b324:	23d4      	movs	r3, #212	; 0xd4
 800b326:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b328:	04db      	lsls	r3, r3, #19
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d826      	bhi.n	800b37c <_strtod_l+0xbd0>
 800b32e:	0028      	movs	r0, r5
 800b330:	0021      	movs	r1, r4
 800b332:	4a2d      	ldr	r2, [pc, #180]	; (800b3e8 <_strtod_l+0xc3c>)
 800b334:	4b2d      	ldr	r3, [pc, #180]	; (800b3ec <_strtod_l+0xc40>)
 800b336:	f7f5 f8a3 	bl	8000480 <__aeabi_dcmple>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d017      	beq.n	800b36e <_strtod_l+0xbc2>
 800b33e:	0028      	movs	r0, r5
 800b340:	0021      	movs	r1, r4
 800b342:	f7f5 f903 	bl	800054c <__aeabi_d2uiz>
 800b346:	2800      	cmp	r0, #0
 800b348:	d100      	bne.n	800b34c <_strtod_l+0xba0>
 800b34a:	3001      	adds	r0, #1
 800b34c:	f7f7 f82c 	bl	80023a8 <__aeabi_ui2d>
 800b350:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b352:	0005      	movs	r5, r0
 800b354:	000b      	movs	r3, r1
 800b356:	000c      	movs	r4, r1
 800b358:	2a00      	cmp	r2, #0
 800b35a:	d122      	bne.n	800b3a2 <_strtod_l+0xbf6>
 800b35c:	2280      	movs	r2, #128	; 0x80
 800b35e:	0612      	lsls	r2, r2, #24
 800b360:	188b      	adds	r3, r1, r2
 800b362:	9018      	str	r0, [sp, #96]	; 0x60
 800b364:	9319      	str	r3, [sp, #100]	; 0x64
 800b366:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b368:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b36a:	9212      	str	r2, [sp, #72]	; 0x48
 800b36c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b36e:	22d6      	movs	r2, #214	; 0xd6
 800b370:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b372:	04d2      	lsls	r2, r2, #19
 800b374:	189b      	adds	r3, r3, r2
 800b376:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b378:	1a9b      	subs	r3, r3, r2
 800b37a:	9313      	str	r3, [sp, #76]	; 0x4c
 800b37c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b37e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b380:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b382:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b384:	f001 feb4 	bl	800d0f0 <__ulp>
 800b388:	0002      	movs	r2, r0
 800b38a:	000b      	movs	r3, r1
 800b38c:	0030      	movs	r0, r6
 800b38e:	0039      	movs	r1, r7
 800b390:	f7f6 f988 	bl	80016a4 <__aeabi_dmul>
 800b394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b398:	f7f5 fa14 	bl	80007c4 <__aeabi_dadd>
 800b39c:	0006      	movs	r6, r0
 800b39e:	000f      	movs	r7, r1
 800b3a0:	e78f      	b.n	800b2c2 <_strtod_l+0xb16>
 800b3a2:	0002      	movs	r2, r0
 800b3a4:	9218      	str	r2, [sp, #96]	; 0x60
 800b3a6:	9319      	str	r3, [sp, #100]	; 0x64
 800b3a8:	e7dd      	b.n	800b366 <_strtod_l+0xbba>
 800b3aa:	4b11      	ldr	r3, [pc, #68]	; (800b3f0 <_strtod_l+0xc44>)
 800b3ac:	f7f5 f85e 	bl	800046c <__aeabi_dcmplt>
 800b3b0:	e7b1      	b.n	800b316 <_strtod_l+0xb6a>
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	fff00000 	.word	0xfff00000
 800b3b8:	000fffff 	.word	0x000fffff
 800b3bc:	3ff00000 	.word	0x3ff00000
 800b3c0:	7ff00000 	.word	0x7ff00000
 800b3c4:	7fe00000 	.word	0x7fe00000
 800b3c8:	fcb00000 	.word	0xfcb00000
 800b3cc:	7c9fffff 	.word	0x7c9fffff
 800b3d0:	7fefffff 	.word	0x7fefffff
 800b3d4:	3fe00000 	.word	0x3fe00000
 800b3d8:	bff00000 	.word	0xbff00000
 800b3dc:	94a03595 	.word	0x94a03595
 800b3e0:	3fdfffff 	.word	0x3fdfffff
 800b3e4:	35afe535 	.word	0x35afe535
 800b3e8:	ffc00000 	.word	0xffc00000
 800b3ec:	41dfffff 	.word	0x41dfffff
 800b3f0:	3fcfffff 	.word	0x3fcfffff

0800b3f4 <strtod>:
 800b3f4:	b510      	push	{r4, lr}
 800b3f6:	000a      	movs	r2, r1
 800b3f8:	0001      	movs	r1, r0
 800b3fa:	4803      	ldr	r0, [pc, #12]	; (800b408 <strtod+0x14>)
 800b3fc:	4b03      	ldr	r3, [pc, #12]	; (800b40c <strtod+0x18>)
 800b3fe:	6800      	ldr	r0, [r0, #0]
 800b400:	f7ff f9d4 	bl	800a7ac <_strtod_l>
 800b404:	bd10      	pop	{r4, pc}
 800b406:	46c0      	nop			; (mov r8, r8)
 800b408:	2000000c 	.word	0x2000000c
 800b40c:	20000074 	.word	0x20000074

0800b410 <_strtol_l.isra.0>:
 800b410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b412:	b087      	sub	sp, #28
 800b414:	001e      	movs	r6, r3
 800b416:	9005      	str	r0, [sp, #20]
 800b418:	9101      	str	r1, [sp, #4]
 800b41a:	9202      	str	r2, [sp, #8]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d045      	beq.n	800b4ac <_strtol_l.isra.0+0x9c>
 800b420:	0008      	movs	r0, r1
 800b422:	2b24      	cmp	r3, #36	; 0x24
 800b424:	d842      	bhi.n	800b4ac <_strtol_l.isra.0+0x9c>
 800b426:	4b3f      	ldr	r3, [pc, #252]	; (800b524 <_strtol_l.isra.0+0x114>)
 800b428:	2208      	movs	r2, #8
 800b42a:	469c      	mov	ip, r3
 800b42c:	0003      	movs	r3, r0
 800b42e:	4661      	mov	r1, ip
 800b430:	781c      	ldrb	r4, [r3, #0]
 800b432:	1c45      	adds	r5, r0, #1
 800b434:	5d09      	ldrb	r1, [r1, r4]
 800b436:	0028      	movs	r0, r5
 800b438:	000f      	movs	r7, r1
 800b43a:	4017      	ands	r7, r2
 800b43c:	4211      	tst	r1, r2
 800b43e:	d1f5      	bne.n	800b42c <_strtol_l.isra.0+0x1c>
 800b440:	2c2d      	cmp	r4, #45	; 0x2d
 800b442:	d13a      	bne.n	800b4ba <_strtol_l.isra.0+0xaa>
 800b444:	2701      	movs	r7, #1
 800b446:	782c      	ldrb	r4, [r5, #0]
 800b448:	1c9d      	adds	r5, r3, #2
 800b44a:	2e00      	cmp	r6, #0
 800b44c:	d065      	beq.n	800b51a <_strtol_l.isra.0+0x10a>
 800b44e:	2e10      	cmp	r6, #16
 800b450:	d109      	bne.n	800b466 <_strtol_l.isra.0+0x56>
 800b452:	2c30      	cmp	r4, #48	; 0x30
 800b454:	d107      	bne.n	800b466 <_strtol_l.isra.0+0x56>
 800b456:	2220      	movs	r2, #32
 800b458:	782b      	ldrb	r3, [r5, #0]
 800b45a:	4393      	bics	r3, r2
 800b45c:	2b58      	cmp	r3, #88	; 0x58
 800b45e:	d157      	bne.n	800b510 <_strtol_l.isra.0+0x100>
 800b460:	2610      	movs	r6, #16
 800b462:	786c      	ldrb	r4, [r5, #1]
 800b464:	3502      	adds	r5, #2
 800b466:	4b30      	ldr	r3, [pc, #192]	; (800b528 <_strtol_l.isra.0+0x118>)
 800b468:	0031      	movs	r1, r6
 800b46a:	18fb      	adds	r3, r7, r3
 800b46c:	0018      	movs	r0, r3
 800b46e:	9303      	str	r3, [sp, #12]
 800b470:	f7f4 fef6 	bl	8000260 <__aeabi_uidivmod>
 800b474:	2300      	movs	r3, #0
 800b476:	2201      	movs	r2, #1
 800b478:	4684      	mov	ip, r0
 800b47a:	0018      	movs	r0, r3
 800b47c:	9104      	str	r1, [sp, #16]
 800b47e:	4252      	negs	r2, r2
 800b480:	0021      	movs	r1, r4
 800b482:	3930      	subs	r1, #48	; 0x30
 800b484:	2909      	cmp	r1, #9
 800b486:	d81d      	bhi.n	800b4c4 <_strtol_l.isra.0+0xb4>
 800b488:	000c      	movs	r4, r1
 800b48a:	42a6      	cmp	r6, r4
 800b48c:	dd28      	ble.n	800b4e0 <_strtol_l.isra.0+0xd0>
 800b48e:	2b00      	cmp	r3, #0
 800b490:	db24      	blt.n	800b4dc <_strtol_l.isra.0+0xcc>
 800b492:	0013      	movs	r3, r2
 800b494:	4584      	cmp	ip, r0
 800b496:	d306      	bcc.n	800b4a6 <_strtol_l.isra.0+0x96>
 800b498:	d102      	bne.n	800b4a0 <_strtol_l.isra.0+0x90>
 800b49a:	9904      	ldr	r1, [sp, #16]
 800b49c:	42a1      	cmp	r1, r4
 800b49e:	db02      	blt.n	800b4a6 <_strtol_l.isra.0+0x96>
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	4370      	muls	r0, r6
 800b4a4:	1820      	adds	r0, r4, r0
 800b4a6:	782c      	ldrb	r4, [r5, #0]
 800b4a8:	3501      	adds	r5, #1
 800b4aa:	e7e9      	b.n	800b480 <_strtol_l.isra.0+0x70>
 800b4ac:	f7fe fc78 	bl	8009da0 <__errno>
 800b4b0:	2316      	movs	r3, #22
 800b4b2:	6003      	str	r3, [r0, #0]
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	b007      	add	sp, #28
 800b4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4ba:	2c2b      	cmp	r4, #43	; 0x2b
 800b4bc:	d1c5      	bne.n	800b44a <_strtol_l.isra.0+0x3a>
 800b4be:	782c      	ldrb	r4, [r5, #0]
 800b4c0:	1c9d      	adds	r5, r3, #2
 800b4c2:	e7c2      	b.n	800b44a <_strtol_l.isra.0+0x3a>
 800b4c4:	0021      	movs	r1, r4
 800b4c6:	3941      	subs	r1, #65	; 0x41
 800b4c8:	2919      	cmp	r1, #25
 800b4ca:	d801      	bhi.n	800b4d0 <_strtol_l.isra.0+0xc0>
 800b4cc:	3c37      	subs	r4, #55	; 0x37
 800b4ce:	e7dc      	b.n	800b48a <_strtol_l.isra.0+0x7a>
 800b4d0:	0021      	movs	r1, r4
 800b4d2:	3961      	subs	r1, #97	; 0x61
 800b4d4:	2919      	cmp	r1, #25
 800b4d6:	d803      	bhi.n	800b4e0 <_strtol_l.isra.0+0xd0>
 800b4d8:	3c57      	subs	r4, #87	; 0x57
 800b4da:	e7d6      	b.n	800b48a <_strtol_l.isra.0+0x7a>
 800b4dc:	0013      	movs	r3, r2
 800b4de:	e7e2      	b.n	800b4a6 <_strtol_l.isra.0+0x96>
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	da09      	bge.n	800b4f8 <_strtol_l.isra.0+0xe8>
 800b4e4:	2322      	movs	r3, #34	; 0x22
 800b4e6:	9a05      	ldr	r2, [sp, #20]
 800b4e8:	9803      	ldr	r0, [sp, #12]
 800b4ea:	6013      	str	r3, [r2, #0]
 800b4ec:	9b02      	ldr	r3, [sp, #8]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d0e1      	beq.n	800b4b6 <_strtol_l.isra.0+0xa6>
 800b4f2:	1e6b      	subs	r3, r5, #1
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	e007      	b.n	800b508 <_strtol_l.isra.0+0xf8>
 800b4f8:	2f00      	cmp	r7, #0
 800b4fa:	d000      	beq.n	800b4fe <_strtol_l.isra.0+0xee>
 800b4fc:	4240      	negs	r0, r0
 800b4fe:	9a02      	ldr	r2, [sp, #8]
 800b500:	2a00      	cmp	r2, #0
 800b502:	d0d8      	beq.n	800b4b6 <_strtol_l.isra.0+0xa6>
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1f4      	bne.n	800b4f2 <_strtol_l.isra.0+0xe2>
 800b508:	9b02      	ldr	r3, [sp, #8]
 800b50a:	9a01      	ldr	r2, [sp, #4]
 800b50c:	601a      	str	r2, [r3, #0]
 800b50e:	e7d2      	b.n	800b4b6 <_strtol_l.isra.0+0xa6>
 800b510:	2430      	movs	r4, #48	; 0x30
 800b512:	2e00      	cmp	r6, #0
 800b514:	d1a7      	bne.n	800b466 <_strtol_l.isra.0+0x56>
 800b516:	3608      	adds	r6, #8
 800b518:	e7a5      	b.n	800b466 <_strtol_l.isra.0+0x56>
 800b51a:	2c30      	cmp	r4, #48	; 0x30
 800b51c:	d09b      	beq.n	800b456 <_strtol_l.isra.0+0x46>
 800b51e:	260a      	movs	r6, #10
 800b520:	e7a1      	b.n	800b466 <_strtol_l.isra.0+0x56>
 800b522:	46c0      	nop			; (mov r8, r8)
 800b524:	0800e721 	.word	0x0800e721
 800b528:	7fffffff 	.word	0x7fffffff

0800b52c <strtol>:
 800b52c:	b510      	push	{r4, lr}
 800b52e:	0013      	movs	r3, r2
 800b530:	000a      	movs	r2, r1
 800b532:	0001      	movs	r1, r0
 800b534:	4802      	ldr	r0, [pc, #8]	; (800b540 <strtol+0x14>)
 800b536:	6800      	ldr	r0, [r0, #0]
 800b538:	f7ff ff6a 	bl	800b410 <_strtol_l.isra.0>
 800b53c:	bd10      	pop	{r4, pc}
 800b53e:	46c0      	nop			; (mov r8, r8)
 800b540:	2000000c 	.word	0x2000000c

0800b544 <quorem>:
 800b544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b546:	0006      	movs	r6, r0
 800b548:	690d      	ldr	r5, [r1, #16]
 800b54a:	6933      	ldr	r3, [r6, #16]
 800b54c:	b087      	sub	sp, #28
 800b54e:	2000      	movs	r0, #0
 800b550:	9102      	str	r1, [sp, #8]
 800b552:	42ab      	cmp	r3, r5
 800b554:	db6b      	blt.n	800b62e <quorem+0xea>
 800b556:	000b      	movs	r3, r1
 800b558:	3d01      	subs	r5, #1
 800b55a:	00ac      	lsls	r4, r5, #2
 800b55c:	3314      	adds	r3, #20
 800b55e:	9305      	str	r3, [sp, #20]
 800b560:	191b      	adds	r3, r3, r4
 800b562:	9303      	str	r3, [sp, #12]
 800b564:	0033      	movs	r3, r6
 800b566:	3314      	adds	r3, #20
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	191c      	adds	r4, r3, r4
 800b56c:	9b03      	ldr	r3, [sp, #12]
 800b56e:	6827      	ldr	r7, [r4, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	0038      	movs	r0, r7
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	3301      	adds	r3, #1
 800b578:	0019      	movs	r1, r3
 800b57a:	9304      	str	r3, [sp, #16]
 800b57c:	f7f4 fdea 	bl	8000154 <__udivsi3>
 800b580:	9b04      	ldr	r3, [sp, #16]
 800b582:	9000      	str	r0, [sp, #0]
 800b584:	429f      	cmp	r7, r3
 800b586:	d329      	bcc.n	800b5dc <quorem+0x98>
 800b588:	2300      	movs	r3, #0
 800b58a:	469c      	mov	ip, r3
 800b58c:	9801      	ldr	r0, [sp, #4]
 800b58e:	9f05      	ldr	r7, [sp, #20]
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	cf08      	ldmia	r7!, {r3}
 800b594:	9a00      	ldr	r2, [sp, #0]
 800b596:	b299      	uxth	r1, r3
 800b598:	4351      	muls	r1, r2
 800b59a:	0c1b      	lsrs	r3, r3, #16
 800b59c:	4353      	muls	r3, r2
 800b59e:	4461      	add	r1, ip
 800b5a0:	0c0a      	lsrs	r2, r1, #16
 800b5a2:	189b      	adds	r3, r3, r2
 800b5a4:	0c1a      	lsrs	r2, r3, #16
 800b5a6:	9305      	str	r3, [sp, #20]
 800b5a8:	6803      	ldr	r3, [r0, #0]
 800b5aa:	4694      	mov	ip, r2
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	9b04      	ldr	r3, [sp, #16]
 800b5b0:	b289      	uxth	r1, r1
 800b5b2:	18d2      	adds	r2, r2, r3
 800b5b4:	6803      	ldr	r3, [r0, #0]
 800b5b6:	1a52      	subs	r2, r2, r1
 800b5b8:	0c19      	lsrs	r1, r3, #16
 800b5ba:	466b      	mov	r3, sp
 800b5bc:	8a9b      	ldrh	r3, [r3, #20]
 800b5be:	1acb      	subs	r3, r1, r3
 800b5c0:	1411      	asrs	r1, r2, #16
 800b5c2:	185b      	adds	r3, r3, r1
 800b5c4:	1419      	asrs	r1, r3, #16
 800b5c6:	b292      	uxth	r2, r2
 800b5c8:	041b      	lsls	r3, r3, #16
 800b5ca:	431a      	orrs	r2, r3
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	9104      	str	r1, [sp, #16]
 800b5d0:	c004      	stmia	r0!, {r2}
 800b5d2:	42bb      	cmp	r3, r7
 800b5d4:	d2dd      	bcs.n	800b592 <quorem+0x4e>
 800b5d6:	6823      	ldr	r3, [r4, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d02e      	beq.n	800b63a <quorem+0xf6>
 800b5dc:	0030      	movs	r0, r6
 800b5de:	9902      	ldr	r1, [sp, #8]
 800b5e0:	f001 fcd2 	bl	800cf88 <__mcmp>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	db21      	blt.n	800b62c <quorem+0xe8>
 800b5e8:	0030      	movs	r0, r6
 800b5ea:	2400      	movs	r4, #0
 800b5ec:	9b00      	ldr	r3, [sp, #0]
 800b5ee:	9902      	ldr	r1, [sp, #8]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	3014      	adds	r0, #20
 800b5f6:	3114      	adds	r1, #20
 800b5f8:	6802      	ldr	r2, [r0, #0]
 800b5fa:	c908      	ldmia	r1!, {r3}
 800b5fc:	b292      	uxth	r2, r2
 800b5fe:	1914      	adds	r4, r2, r4
 800b600:	b29a      	uxth	r2, r3
 800b602:	1aa2      	subs	r2, r4, r2
 800b604:	6804      	ldr	r4, [r0, #0]
 800b606:	0c1b      	lsrs	r3, r3, #16
 800b608:	0c24      	lsrs	r4, r4, #16
 800b60a:	1ae3      	subs	r3, r4, r3
 800b60c:	1414      	asrs	r4, r2, #16
 800b60e:	191b      	adds	r3, r3, r4
 800b610:	141c      	asrs	r4, r3, #16
 800b612:	b292      	uxth	r2, r2
 800b614:	041b      	lsls	r3, r3, #16
 800b616:	4313      	orrs	r3, r2
 800b618:	c008      	stmia	r0!, {r3}
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	428b      	cmp	r3, r1
 800b61e:	d2eb      	bcs.n	800b5f8 <quorem+0xb4>
 800b620:	9a01      	ldr	r2, [sp, #4]
 800b622:	00ab      	lsls	r3, r5, #2
 800b624:	18d3      	adds	r3, r2, r3
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	2a00      	cmp	r2, #0
 800b62a:	d010      	beq.n	800b64e <quorem+0x10a>
 800b62c:	9800      	ldr	r0, [sp, #0]
 800b62e:	b007      	add	sp, #28
 800b630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b632:	6823      	ldr	r3, [r4, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d104      	bne.n	800b642 <quorem+0xfe>
 800b638:	3d01      	subs	r5, #1
 800b63a:	9b01      	ldr	r3, [sp, #4]
 800b63c:	3c04      	subs	r4, #4
 800b63e:	42a3      	cmp	r3, r4
 800b640:	d3f7      	bcc.n	800b632 <quorem+0xee>
 800b642:	6135      	str	r5, [r6, #16]
 800b644:	e7ca      	b.n	800b5dc <quorem+0x98>
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	2a00      	cmp	r2, #0
 800b64a:	d104      	bne.n	800b656 <quorem+0x112>
 800b64c:	3d01      	subs	r5, #1
 800b64e:	9a01      	ldr	r2, [sp, #4]
 800b650:	3b04      	subs	r3, #4
 800b652:	429a      	cmp	r2, r3
 800b654:	d3f7      	bcc.n	800b646 <quorem+0x102>
 800b656:	6135      	str	r5, [r6, #16]
 800b658:	e7e8      	b.n	800b62c <quorem+0xe8>
	...

0800b65c <_dtoa_r>:
 800b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b65e:	b09d      	sub	sp, #116	; 0x74
 800b660:	9202      	str	r2, [sp, #8]
 800b662:	9303      	str	r3, [sp, #12]
 800b664:	9b02      	ldr	r3, [sp, #8]
 800b666:	9c03      	ldr	r4, [sp, #12]
 800b668:	930a      	str	r3, [sp, #40]	; 0x28
 800b66a:	940b      	str	r4, [sp, #44]	; 0x2c
 800b66c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b66e:	0007      	movs	r7, r0
 800b670:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800b672:	2c00      	cmp	r4, #0
 800b674:	d10e      	bne.n	800b694 <_dtoa_r+0x38>
 800b676:	2010      	movs	r0, #16
 800b678:	f001 f984 	bl	800c984 <malloc>
 800b67c:	1e02      	subs	r2, r0, #0
 800b67e:	6278      	str	r0, [r7, #36]	; 0x24
 800b680:	d104      	bne.n	800b68c <_dtoa_r+0x30>
 800b682:	21ea      	movs	r1, #234	; 0xea
 800b684:	4bc0      	ldr	r3, [pc, #768]	; (800b988 <_dtoa_r+0x32c>)
 800b686:	48c1      	ldr	r0, [pc, #772]	; (800b98c <_dtoa_r+0x330>)
 800b688:	f002 f8c4 	bl	800d814 <__assert_func>
 800b68c:	6044      	str	r4, [r0, #4]
 800b68e:	6084      	str	r4, [r0, #8]
 800b690:	6004      	str	r4, [r0, #0]
 800b692:	60c4      	str	r4, [r0, #12]
 800b694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b696:	6819      	ldr	r1, [r3, #0]
 800b698:	2900      	cmp	r1, #0
 800b69a:	d00a      	beq.n	800b6b2 <_dtoa_r+0x56>
 800b69c:	685a      	ldr	r2, [r3, #4]
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4093      	lsls	r3, r2
 800b6a2:	604a      	str	r2, [r1, #4]
 800b6a4:	608b      	str	r3, [r1, #8]
 800b6a6:	0038      	movs	r0, r7
 800b6a8:	f001 f9e0 	bl	800ca6c <_Bfree>
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	9b03      	ldr	r3, [sp, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	da21      	bge.n	800b6fc <_dtoa_r+0xa0>
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	602b      	str	r3, [r5, #0]
 800b6bc:	9b03      	ldr	r3, [sp, #12]
 800b6be:	005b      	lsls	r3, r3, #1
 800b6c0:	085b      	lsrs	r3, r3, #1
 800b6c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6c4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b6c6:	4bb2      	ldr	r3, [pc, #712]	; (800b990 <_dtoa_r+0x334>)
 800b6c8:	002a      	movs	r2, r5
 800b6ca:	9318      	str	r3, [sp, #96]	; 0x60
 800b6cc:	401a      	ands	r2, r3
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d117      	bne.n	800b702 <_dtoa_r+0xa6>
 800b6d2:	4bb0      	ldr	r3, [pc, #704]	; (800b994 <_dtoa_r+0x338>)
 800b6d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b6d6:	0328      	lsls	r0, r5, #12
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	9b02      	ldr	r3, [sp, #8]
 800b6dc:	0b00      	lsrs	r0, r0, #12
 800b6de:	4318      	orrs	r0, r3
 800b6e0:	d101      	bne.n	800b6e6 <_dtoa_r+0x8a>
 800b6e2:	f000 fdc3 	bl	800c26c <_dtoa_r+0xc10>
 800b6e6:	48ac      	ldr	r0, [pc, #688]	; (800b998 <_dtoa_r+0x33c>)
 800b6e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b6ea:	9005      	str	r0, [sp, #20]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d002      	beq.n	800b6f6 <_dtoa_r+0x9a>
 800b6f0:	4baa      	ldr	r3, [pc, #680]	; (800b99c <_dtoa_r+0x340>)
 800b6f2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b6f4:	6013      	str	r3, [r2, #0]
 800b6f6:	9805      	ldr	r0, [sp, #20]
 800b6f8:	b01d      	add	sp, #116	; 0x74
 800b6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	602b      	str	r3, [r5, #0]
 800b700:	e7e0      	b.n	800b6c4 <_dtoa_r+0x68>
 800b702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b704:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b706:	9312      	str	r3, [sp, #72]	; 0x48
 800b708:	9413      	str	r4, [sp, #76]	; 0x4c
 800b70a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b70c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b70e:	2200      	movs	r2, #0
 800b710:	2300      	movs	r3, #0
 800b712:	f7f4 fea5 	bl	8000460 <__aeabi_dcmpeq>
 800b716:	1e04      	subs	r4, r0, #0
 800b718:	d00b      	beq.n	800b732 <_dtoa_r+0xd6>
 800b71a:	2301      	movs	r3, #1
 800b71c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b71e:	6013      	str	r3, [r2, #0]
 800b720:	4b9f      	ldr	r3, [pc, #636]	; (800b9a0 <_dtoa_r+0x344>)
 800b722:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b724:	9305      	str	r3, [sp, #20]
 800b726:	2a00      	cmp	r2, #0
 800b728:	d0e5      	beq.n	800b6f6 <_dtoa_r+0x9a>
 800b72a:	4a9e      	ldr	r2, [pc, #632]	; (800b9a4 <_dtoa_r+0x348>)
 800b72c:	9926      	ldr	r1, [sp, #152]	; 0x98
 800b72e:	600a      	str	r2, [r1, #0]
 800b730:	e7e1      	b.n	800b6f6 <_dtoa_r+0x9a>
 800b732:	ab1a      	add	r3, sp, #104	; 0x68
 800b734:	9301      	str	r3, [sp, #4]
 800b736:	ab1b      	add	r3, sp, #108	; 0x6c
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	0038      	movs	r0, r7
 800b73c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b73e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b740:	f001 fd4a 	bl	800d1d8 <__d2b>
 800b744:	006e      	lsls	r6, r5, #1
 800b746:	9004      	str	r0, [sp, #16]
 800b748:	0d76      	lsrs	r6, r6, #21
 800b74a:	d100      	bne.n	800b74e <_dtoa_r+0xf2>
 800b74c:	e07c      	b.n	800b848 <_dtoa_r+0x1ec>
 800b74e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b750:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b752:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b754:	4a94      	ldr	r2, [pc, #592]	; (800b9a8 <_dtoa_r+0x34c>)
 800b756:	031b      	lsls	r3, r3, #12
 800b758:	0b1b      	lsrs	r3, r3, #12
 800b75a:	431a      	orrs	r2, r3
 800b75c:	0011      	movs	r1, r2
 800b75e:	4b93      	ldr	r3, [pc, #588]	; (800b9ac <_dtoa_r+0x350>)
 800b760:	9416      	str	r4, [sp, #88]	; 0x58
 800b762:	18f6      	adds	r6, r6, r3
 800b764:	2200      	movs	r2, #0
 800b766:	4b92      	ldr	r3, [pc, #584]	; (800b9b0 <_dtoa_r+0x354>)
 800b768:	f7f6 fa08 	bl	8001b7c <__aeabi_dsub>
 800b76c:	4a91      	ldr	r2, [pc, #580]	; (800b9b4 <_dtoa_r+0x358>)
 800b76e:	4b92      	ldr	r3, [pc, #584]	; (800b9b8 <_dtoa_r+0x35c>)
 800b770:	f7f5 ff98 	bl	80016a4 <__aeabi_dmul>
 800b774:	4a91      	ldr	r2, [pc, #580]	; (800b9bc <_dtoa_r+0x360>)
 800b776:	4b92      	ldr	r3, [pc, #584]	; (800b9c0 <_dtoa_r+0x364>)
 800b778:	f7f5 f824 	bl	80007c4 <__aeabi_dadd>
 800b77c:	0004      	movs	r4, r0
 800b77e:	0030      	movs	r0, r6
 800b780:	000d      	movs	r5, r1
 800b782:	f7f6 fde1 	bl	8002348 <__aeabi_i2d>
 800b786:	4a8f      	ldr	r2, [pc, #572]	; (800b9c4 <_dtoa_r+0x368>)
 800b788:	4b8f      	ldr	r3, [pc, #572]	; (800b9c8 <_dtoa_r+0x36c>)
 800b78a:	f7f5 ff8b 	bl	80016a4 <__aeabi_dmul>
 800b78e:	0002      	movs	r2, r0
 800b790:	000b      	movs	r3, r1
 800b792:	0020      	movs	r0, r4
 800b794:	0029      	movs	r1, r5
 800b796:	f7f5 f815 	bl	80007c4 <__aeabi_dadd>
 800b79a:	0004      	movs	r4, r0
 800b79c:	000d      	movs	r5, r1
 800b79e:	f7f6 fd9d 	bl	80022dc <__aeabi_d2iz>
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	9002      	str	r0, [sp, #8]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	0020      	movs	r0, r4
 800b7aa:	0029      	movs	r1, r5
 800b7ac:	f7f4 fe5e 	bl	800046c <__aeabi_dcmplt>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d00b      	beq.n	800b7cc <_dtoa_r+0x170>
 800b7b4:	9802      	ldr	r0, [sp, #8]
 800b7b6:	f7f6 fdc7 	bl	8002348 <__aeabi_i2d>
 800b7ba:	002b      	movs	r3, r5
 800b7bc:	0022      	movs	r2, r4
 800b7be:	f7f4 fe4f 	bl	8000460 <__aeabi_dcmpeq>
 800b7c2:	4243      	negs	r3, r0
 800b7c4:	4158      	adcs	r0, r3
 800b7c6:	9b02      	ldr	r3, [sp, #8]
 800b7c8:	1a1b      	subs	r3, r3, r0
 800b7ca:	9302      	str	r3, [sp, #8]
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	9315      	str	r3, [sp, #84]	; 0x54
 800b7d0:	9b02      	ldr	r3, [sp, #8]
 800b7d2:	2b16      	cmp	r3, #22
 800b7d4:	d80f      	bhi.n	800b7f6 <_dtoa_r+0x19a>
 800b7d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b7d8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b7da:	00da      	lsls	r2, r3, #3
 800b7dc:	4b7b      	ldr	r3, [pc, #492]	; (800b9cc <_dtoa_r+0x370>)
 800b7de:	189b      	adds	r3, r3, r2
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	f7f4 fe42 	bl	800046c <__aeabi_dcmplt>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d049      	beq.n	800b880 <_dtoa_r+0x224>
 800b7ec:	9b02      	ldr	r3, [sp, #8]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	9302      	str	r3, [sp, #8]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	9315      	str	r3, [sp, #84]	; 0x54
 800b7f6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b7f8:	1b9e      	subs	r6, r3, r6
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	9308      	str	r3, [sp, #32]
 800b7fe:	0033      	movs	r3, r6
 800b800:	3b01      	subs	r3, #1
 800b802:	930d      	str	r3, [sp, #52]	; 0x34
 800b804:	d504      	bpl.n	800b810 <_dtoa_r+0x1b4>
 800b806:	2301      	movs	r3, #1
 800b808:	1b9b      	subs	r3, r3, r6
 800b80a:	9308      	str	r3, [sp, #32]
 800b80c:	2300      	movs	r3, #0
 800b80e:	930d      	str	r3, [sp, #52]	; 0x34
 800b810:	9b02      	ldr	r3, [sp, #8]
 800b812:	2b00      	cmp	r3, #0
 800b814:	db36      	blt.n	800b884 <_dtoa_r+0x228>
 800b816:	9a02      	ldr	r2, [sp, #8]
 800b818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b81a:	4694      	mov	ip, r2
 800b81c:	4463      	add	r3, ip
 800b81e:	930d      	str	r3, [sp, #52]	; 0x34
 800b820:	2300      	movs	r3, #0
 800b822:	9214      	str	r2, [sp, #80]	; 0x50
 800b824:	930e      	str	r3, [sp, #56]	; 0x38
 800b826:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b828:	2401      	movs	r4, #1
 800b82a:	2b09      	cmp	r3, #9
 800b82c:	d862      	bhi.n	800b8f4 <_dtoa_r+0x298>
 800b82e:	2b05      	cmp	r3, #5
 800b830:	dd02      	ble.n	800b838 <_dtoa_r+0x1dc>
 800b832:	2400      	movs	r4, #0
 800b834:	3b04      	subs	r3, #4
 800b836:	9322      	str	r3, [sp, #136]	; 0x88
 800b838:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b83a:	1e98      	subs	r0, r3, #2
 800b83c:	2803      	cmp	r0, #3
 800b83e:	d862      	bhi.n	800b906 <_dtoa_r+0x2aa>
 800b840:	f7f4 fc74 	bl	800012c <__gnu_thumb1_case_uqi>
 800b844:	56343629 	.word	0x56343629
 800b848:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b84a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b84c:	189e      	adds	r6, r3, r2
 800b84e:	4b60      	ldr	r3, [pc, #384]	; (800b9d0 <_dtoa_r+0x374>)
 800b850:	18f2      	adds	r2, r6, r3
 800b852:	2a20      	cmp	r2, #32
 800b854:	dd0f      	ble.n	800b876 <_dtoa_r+0x21a>
 800b856:	2340      	movs	r3, #64	; 0x40
 800b858:	1a9b      	subs	r3, r3, r2
 800b85a:	409d      	lsls	r5, r3
 800b85c:	4b5d      	ldr	r3, [pc, #372]	; (800b9d4 <_dtoa_r+0x378>)
 800b85e:	9802      	ldr	r0, [sp, #8]
 800b860:	18f3      	adds	r3, r6, r3
 800b862:	40d8      	lsrs	r0, r3
 800b864:	4328      	orrs	r0, r5
 800b866:	f7f6 fd9f 	bl	80023a8 <__aeabi_ui2d>
 800b86a:	2301      	movs	r3, #1
 800b86c:	4c5a      	ldr	r4, [pc, #360]	; (800b9d8 <_dtoa_r+0x37c>)
 800b86e:	3e01      	subs	r6, #1
 800b870:	1909      	adds	r1, r1, r4
 800b872:	9316      	str	r3, [sp, #88]	; 0x58
 800b874:	e776      	b.n	800b764 <_dtoa_r+0x108>
 800b876:	2320      	movs	r3, #32
 800b878:	9802      	ldr	r0, [sp, #8]
 800b87a:	1a9b      	subs	r3, r3, r2
 800b87c:	4098      	lsls	r0, r3
 800b87e:	e7f2      	b.n	800b866 <_dtoa_r+0x20a>
 800b880:	9015      	str	r0, [sp, #84]	; 0x54
 800b882:	e7b8      	b.n	800b7f6 <_dtoa_r+0x19a>
 800b884:	9b08      	ldr	r3, [sp, #32]
 800b886:	9a02      	ldr	r2, [sp, #8]
 800b888:	1a9b      	subs	r3, r3, r2
 800b88a:	9308      	str	r3, [sp, #32]
 800b88c:	4253      	negs	r3, r2
 800b88e:	930e      	str	r3, [sp, #56]	; 0x38
 800b890:	2300      	movs	r3, #0
 800b892:	9314      	str	r3, [sp, #80]	; 0x50
 800b894:	e7c7      	b.n	800b826 <_dtoa_r+0x1ca>
 800b896:	2300      	movs	r3, #0
 800b898:	930f      	str	r3, [sp, #60]	; 0x3c
 800b89a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	dc36      	bgt.n	800b90e <_dtoa_r+0x2b2>
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	001a      	movs	r2, r3
 800b8a4:	930c      	str	r3, [sp, #48]	; 0x30
 800b8a6:	9306      	str	r3, [sp, #24]
 800b8a8:	9223      	str	r2, [sp, #140]	; 0x8c
 800b8aa:	e00d      	b.n	800b8c8 <_dtoa_r+0x26c>
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e7f3      	b.n	800b898 <_dtoa_r+0x23c>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b8b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8b6:	4694      	mov	ip, r2
 800b8b8:	9b02      	ldr	r3, [sp, #8]
 800b8ba:	4463      	add	r3, ip
 800b8bc:	930c      	str	r3, [sp, #48]	; 0x30
 800b8be:	3301      	adds	r3, #1
 800b8c0:	9306      	str	r3, [sp, #24]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	dc00      	bgt.n	800b8c8 <_dtoa_r+0x26c>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8cc:	6042      	str	r2, [r0, #4]
 800b8ce:	3204      	adds	r2, #4
 800b8d0:	0015      	movs	r5, r2
 800b8d2:	3514      	adds	r5, #20
 800b8d4:	6841      	ldr	r1, [r0, #4]
 800b8d6:	429d      	cmp	r5, r3
 800b8d8:	d91d      	bls.n	800b916 <_dtoa_r+0x2ba>
 800b8da:	0038      	movs	r0, r7
 800b8dc:	f001 f882 	bl	800c9e4 <_Balloc>
 800b8e0:	9005      	str	r0, [sp, #20]
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d11b      	bne.n	800b91e <_dtoa_r+0x2c2>
 800b8e6:	21d5      	movs	r1, #213	; 0xd5
 800b8e8:	0002      	movs	r2, r0
 800b8ea:	4b3c      	ldr	r3, [pc, #240]	; (800b9dc <_dtoa_r+0x380>)
 800b8ec:	0049      	lsls	r1, r1, #1
 800b8ee:	e6ca      	b.n	800b686 <_dtoa_r+0x2a>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e7de      	b.n	800b8b2 <_dtoa_r+0x256>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	940f      	str	r4, [sp, #60]	; 0x3c
 800b8f8:	9322      	str	r3, [sp, #136]	; 0x88
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	930c      	str	r3, [sp, #48]	; 0x30
 800b8fe:	9306      	str	r3, [sp, #24]
 800b900:	2200      	movs	r2, #0
 800b902:	3313      	adds	r3, #19
 800b904:	e7d0      	b.n	800b8a8 <_dtoa_r+0x24c>
 800b906:	2301      	movs	r3, #1
 800b908:	930f      	str	r3, [sp, #60]	; 0x3c
 800b90a:	3b02      	subs	r3, #2
 800b90c:	e7f6      	b.n	800b8fc <_dtoa_r+0x2a0>
 800b90e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b910:	930c      	str	r3, [sp, #48]	; 0x30
 800b912:	9306      	str	r3, [sp, #24]
 800b914:	e7d8      	b.n	800b8c8 <_dtoa_r+0x26c>
 800b916:	3101      	adds	r1, #1
 800b918:	6041      	str	r1, [r0, #4]
 800b91a:	0052      	lsls	r2, r2, #1
 800b91c:	e7d8      	b.n	800b8d0 <_dtoa_r+0x274>
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	9a05      	ldr	r2, [sp, #20]
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	9b06      	ldr	r3, [sp, #24]
 800b926:	2b0e      	cmp	r3, #14
 800b928:	d900      	bls.n	800b92c <_dtoa_r+0x2d0>
 800b92a:	e0eb      	b.n	800bb04 <_dtoa_r+0x4a8>
 800b92c:	2c00      	cmp	r4, #0
 800b92e:	d100      	bne.n	800b932 <_dtoa_r+0x2d6>
 800b930:	e0e8      	b.n	800bb04 <_dtoa_r+0x4a8>
 800b932:	9b02      	ldr	r3, [sp, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	dd68      	ble.n	800ba0a <_dtoa_r+0x3ae>
 800b938:	001a      	movs	r2, r3
 800b93a:	210f      	movs	r1, #15
 800b93c:	4b23      	ldr	r3, [pc, #140]	; (800b9cc <_dtoa_r+0x370>)
 800b93e:	400a      	ands	r2, r1
 800b940:	00d2      	lsls	r2, r2, #3
 800b942:	189b      	adds	r3, r3, r2
 800b944:	681d      	ldr	r5, [r3, #0]
 800b946:	685e      	ldr	r6, [r3, #4]
 800b948:	9b02      	ldr	r3, [sp, #8]
 800b94a:	111c      	asrs	r4, r3, #4
 800b94c:	2302      	movs	r3, #2
 800b94e:	9310      	str	r3, [sp, #64]	; 0x40
 800b950:	9b02      	ldr	r3, [sp, #8]
 800b952:	05db      	lsls	r3, r3, #23
 800b954:	d50b      	bpl.n	800b96e <_dtoa_r+0x312>
 800b956:	4b22      	ldr	r3, [pc, #136]	; (800b9e0 <_dtoa_r+0x384>)
 800b958:	400c      	ands	r4, r1
 800b95a:	6a1a      	ldr	r2, [r3, #32]
 800b95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b95e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b960:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b962:	f7f5 fa99 	bl	8000e98 <__aeabi_ddiv>
 800b966:	2303      	movs	r3, #3
 800b968:	900a      	str	r0, [sp, #40]	; 0x28
 800b96a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b96c:	9310      	str	r3, [sp, #64]	; 0x40
 800b96e:	4b1c      	ldr	r3, [pc, #112]	; (800b9e0 <_dtoa_r+0x384>)
 800b970:	9307      	str	r3, [sp, #28]
 800b972:	2c00      	cmp	r4, #0
 800b974:	d136      	bne.n	800b9e4 <_dtoa_r+0x388>
 800b976:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b978:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b97a:	002a      	movs	r2, r5
 800b97c:	0033      	movs	r3, r6
 800b97e:	f7f5 fa8b 	bl	8000e98 <__aeabi_ddiv>
 800b982:	900a      	str	r0, [sp, #40]	; 0x28
 800b984:	910b      	str	r1, [sp, #44]	; 0x2c
 800b986:	e05c      	b.n	800ba42 <_dtoa_r+0x3e6>
 800b988:	0800e82e 	.word	0x0800e82e
 800b98c:	0800e845 	.word	0x0800e845
 800b990:	7ff00000 	.word	0x7ff00000
 800b994:	0000270f 	.word	0x0000270f
 800b998:	0800e82a 	.word	0x0800e82a
 800b99c:	0800e82d 	.word	0x0800e82d
 800b9a0:	0800e6ac 	.word	0x0800e6ac
 800b9a4:	0800e6ad 	.word	0x0800e6ad
 800b9a8:	3ff00000 	.word	0x3ff00000
 800b9ac:	fffffc01 	.word	0xfffffc01
 800b9b0:	3ff80000 	.word	0x3ff80000
 800b9b4:	636f4361 	.word	0x636f4361
 800b9b8:	3fd287a7 	.word	0x3fd287a7
 800b9bc:	8b60c8b3 	.word	0x8b60c8b3
 800b9c0:	3fc68a28 	.word	0x3fc68a28
 800b9c4:	509f79fb 	.word	0x509f79fb
 800b9c8:	3fd34413 	.word	0x3fd34413
 800b9cc:	0800e9c0 	.word	0x0800e9c0
 800b9d0:	00000432 	.word	0x00000432
 800b9d4:	00000412 	.word	0x00000412
 800b9d8:	fe100000 	.word	0xfe100000
 800b9dc:	0800e8a4 	.word	0x0800e8a4
 800b9e0:	0800e998 	.word	0x0800e998
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	421c      	tst	r4, r3
 800b9e8:	d00b      	beq.n	800ba02 <_dtoa_r+0x3a6>
 800b9ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9ec:	0028      	movs	r0, r5
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	9310      	str	r3, [sp, #64]	; 0x40
 800b9f2:	9b07      	ldr	r3, [sp, #28]
 800b9f4:	0031      	movs	r1, r6
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	f7f5 fe53 	bl	80016a4 <__aeabi_dmul>
 800b9fe:	0005      	movs	r5, r0
 800ba00:	000e      	movs	r6, r1
 800ba02:	9b07      	ldr	r3, [sp, #28]
 800ba04:	1064      	asrs	r4, r4, #1
 800ba06:	3308      	adds	r3, #8
 800ba08:	e7b2      	b.n	800b970 <_dtoa_r+0x314>
 800ba0a:	2302      	movs	r3, #2
 800ba0c:	9310      	str	r3, [sp, #64]	; 0x40
 800ba0e:	9b02      	ldr	r3, [sp, #8]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d016      	beq.n	800ba42 <_dtoa_r+0x3e6>
 800ba14:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ba16:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ba18:	425c      	negs	r4, r3
 800ba1a:	230f      	movs	r3, #15
 800ba1c:	4ab5      	ldr	r2, [pc, #724]	; (800bcf4 <_dtoa_r+0x698>)
 800ba1e:	4023      	ands	r3, r4
 800ba20:	00db      	lsls	r3, r3, #3
 800ba22:	18d3      	adds	r3, r2, r3
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	f7f5 fe3c 	bl	80016a4 <__aeabi_dmul>
 800ba2c:	2601      	movs	r6, #1
 800ba2e:	2300      	movs	r3, #0
 800ba30:	900a      	str	r0, [sp, #40]	; 0x28
 800ba32:	910b      	str	r1, [sp, #44]	; 0x2c
 800ba34:	4db0      	ldr	r5, [pc, #704]	; (800bcf8 <_dtoa_r+0x69c>)
 800ba36:	1124      	asrs	r4, r4, #4
 800ba38:	2c00      	cmp	r4, #0
 800ba3a:	d000      	beq.n	800ba3e <_dtoa_r+0x3e2>
 800ba3c:	e094      	b.n	800bb68 <_dtoa_r+0x50c>
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d19f      	bne.n	800b982 <_dtoa_r+0x326>
 800ba42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d100      	bne.n	800ba4a <_dtoa_r+0x3ee>
 800ba48:	e09b      	b.n	800bb82 <_dtoa_r+0x526>
 800ba4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba4c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ba4e:	2200      	movs	r2, #0
 800ba50:	0020      	movs	r0, r4
 800ba52:	0029      	movs	r1, r5
 800ba54:	4ba9      	ldr	r3, [pc, #676]	; (800bcfc <_dtoa_r+0x6a0>)
 800ba56:	f7f4 fd09 	bl	800046c <__aeabi_dcmplt>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d100      	bne.n	800ba60 <_dtoa_r+0x404>
 800ba5e:	e090      	b.n	800bb82 <_dtoa_r+0x526>
 800ba60:	9b06      	ldr	r3, [sp, #24]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d100      	bne.n	800ba68 <_dtoa_r+0x40c>
 800ba66:	e08c      	b.n	800bb82 <_dtoa_r+0x526>
 800ba68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	dd46      	ble.n	800bafc <_dtoa_r+0x4a0>
 800ba6e:	9b02      	ldr	r3, [sp, #8]
 800ba70:	2200      	movs	r2, #0
 800ba72:	0020      	movs	r0, r4
 800ba74:	0029      	movs	r1, r5
 800ba76:	1e5e      	subs	r6, r3, #1
 800ba78:	4ba1      	ldr	r3, [pc, #644]	; (800bd00 <_dtoa_r+0x6a4>)
 800ba7a:	f7f5 fe13 	bl	80016a4 <__aeabi_dmul>
 800ba7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba80:	900a      	str	r0, [sp, #40]	; 0x28
 800ba82:	910b      	str	r1, [sp, #44]	; 0x2c
 800ba84:	3301      	adds	r3, #1
 800ba86:	9310      	str	r3, [sp, #64]	; 0x40
 800ba88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba8a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ba8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba8e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ba90:	9307      	str	r3, [sp, #28]
 800ba92:	f7f6 fc59 	bl	8002348 <__aeabi_i2d>
 800ba96:	0022      	movs	r2, r4
 800ba98:	002b      	movs	r3, r5
 800ba9a:	f7f5 fe03 	bl	80016a4 <__aeabi_dmul>
 800ba9e:	2200      	movs	r2, #0
 800baa0:	4b98      	ldr	r3, [pc, #608]	; (800bd04 <_dtoa_r+0x6a8>)
 800baa2:	f7f4 fe8f 	bl	80007c4 <__aeabi_dadd>
 800baa6:	9010      	str	r0, [sp, #64]	; 0x40
 800baa8:	9111      	str	r1, [sp, #68]	; 0x44
 800baaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800baac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baae:	920a      	str	r2, [sp, #40]	; 0x28
 800bab0:	930b      	str	r3, [sp, #44]	; 0x2c
 800bab2:	4a95      	ldr	r2, [pc, #596]	; (800bd08 <_dtoa_r+0x6ac>)
 800bab4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bab6:	4694      	mov	ip, r2
 800bab8:	4463      	add	r3, ip
 800baba:	9317      	str	r3, [sp, #92]	; 0x5c
 800babc:	930b      	str	r3, [sp, #44]	; 0x2c
 800babe:	9b07      	ldr	r3, [sp, #28]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d161      	bne.n	800bb88 <_dtoa_r+0x52c>
 800bac4:	2200      	movs	r2, #0
 800bac6:	0020      	movs	r0, r4
 800bac8:	0029      	movs	r1, r5
 800baca:	4b90      	ldr	r3, [pc, #576]	; (800bd0c <_dtoa_r+0x6b0>)
 800bacc:	f7f6 f856 	bl	8001b7c <__aeabi_dsub>
 800bad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bad2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bad4:	0004      	movs	r4, r0
 800bad6:	000d      	movs	r5, r1
 800bad8:	f7f4 fcdc 	bl	8000494 <__aeabi_dcmpgt>
 800badc:	2800      	cmp	r0, #0
 800bade:	d000      	beq.n	800bae2 <_dtoa_r+0x486>
 800bae0:	e2b5      	b.n	800c04e <_dtoa_r+0x9f2>
 800bae2:	488b      	ldr	r0, [pc, #556]	; (800bd10 <_dtoa_r+0x6b4>)
 800bae4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bae6:	4684      	mov	ip, r0
 800bae8:	4461      	add	r1, ip
 800baea:	000b      	movs	r3, r1
 800baec:	0020      	movs	r0, r4
 800baee:	0029      	movs	r1, r5
 800baf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800baf2:	f7f4 fcbb 	bl	800046c <__aeabi_dcmplt>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d000      	beq.n	800bafc <_dtoa_r+0x4a0>
 800bafa:	e2a5      	b.n	800c048 <_dtoa_r+0x9ec>
 800bafc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bafe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800bb00:	930a      	str	r3, [sp, #40]	; 0x28
 800bb02:	940b      	str	r4, [sp, #44]	; 0x2c
 800bb04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	da00      	bge.n	800bb0c <_dtoa_r+0x4b0>
 800bb0a:	e171      	b.n	800bdf0 <_dtoa_r+0x794>
 800bb0c:	9a02      	ldr	r2, [sp, #8]
 800bb0e:	2a0e      	cmp	r2, #14
 800bb10:	dd00      	ble.n	800bb14 <_dtoa_r+0x4b8>
 800bb12:	e16d      	b.n	800bdf0 <_dtoa_r+0x794>
 800bb14:	4b77      	ldr	r3, [pc, #476]	; (800bcf4 <_dtoa_r+0x698>)
 800bb16:	00d2      	lsls	r2, r2, #3
 800bb18:	189b      	adds	r3, r3, r2
 800bb1a:	685c      	ldr	r4, [r3, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	9308      	str	r3, [sp, #32]
 800bb20:	9409      	str	r4, [sp, #36]	; 0x24
 800bb22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	db00      	blt.n	800bb2a <_dtoa_r+0x4ce>
 800bb28:	e0f6      	b.n	800bd18 <_dtoa_r+0x6bc>
 800bb2a:	9b06      	ldr	r3, [sp, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	dd00      	ble.n	800bb32 <_dtoa_r+0x4d6>
 800bb30:	e0f2      	b.n	800bd18 <_dtoa_r+0x6bc>
 800bb32:	d000      	beq.n	800bb36 <_dtoa_r+0x4da>
 800bb34:	e288      	b.n	800c048 <_dtoa_r+0x9ec>
 800bb36:	9808      	ldr	r0, [sp, #32]
 800bb38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	4b73      	ldr	r3, [pc, #460]	; (800bd0c <_dtoa_r+0x6b0>)
 800bb3e:	f7f5 fdb1 	bl	80016a4 <__aeabi_dmul>
 800bb42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb46:	f7f4 fcaf 	bl	80004a8 <__aeabi_dcmpge>
 800bb4a:	9e06      	ldr	r6, [sp, #24]
 800bb4c:	0035      	movs	r5, r6
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d000      	beq.n	800bb54 <_dtoa_r+0x4f8>
 800bb52:	e25f      	b.n	800c014 <_dtoa_r+0x9b8>
 800bb54:	9b05      	ldr	r3, [sp, #20]
 800bb56:	9a05      	ldr	r2, [sp, #20]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	9307      	str	r3, [sp, #28]
 800bb5c:	2331      	movs	r3, #49	; 0x31
 800bb5e:	7013      	strb	r3, [r2, #0]
 800bb60:	9b02      	ldr	r3, [sp, #8]
 800bb62:	3301      	adds	r3, #1
 800bb64:	9302      	str	r3, [sp, #8]
 800bb66:	e25a      	b.n	800c01e <_dtoa_r+0x9c2>
 800bb68:	4234      	tst	r4, r6
 800bb6a:	d007      	beq.n	800bb7c <_dtoa_r+0x520>
 800bb6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb6e:	3301      	adds	r3, #1
 800bb70:	9310      	str	r3, [sp, #64]	; 0x40
 800bb72:	682a      	ldr	r2, [r5, #0]
 800bb74:	686b      	ldr	r3, [r5, #4]
 800bb76:	f7f5 fd95 	bl	80016a4 <__aeabi_dmul>
 800bb7a:	0033      	movs	r3, r6
 800bb7c:	1064      	asrs	r4, r4, #1
 800bb7e:	3508      	adds	r5, #8
 800bb80:	e75a      	b.n	800ba38 <_dtoa_r+0x3dc>
 800bb82:	9e02      	ldr	r6, [sp, #8]
 800bb84:	9b06      	ldr	r3, [sp, #24]
 800bb86:	e780      	b.n	800ba8a <_dtoa_r+0x42e>
 800bb88:	9b07      	ldr	r3, [sp, #28]
 800bb8a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bb8c:	1e5a      	subs	r2, r3, #1
 800bb8e:	4b59      	ldr	r3, [pc, #356]	; (800bcf4 <_dtoa_r+0x698>)
 800bb90:	00d2      	lsls	r2, r2, #3
 800bb92:	189b      	adds	r3, r3, r2
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	2900      	cmp	r1, #0
 800bb9a:	d051      	beq.n	800bc40 <_dtoa_r+0x5e4>
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	495d      	ldr	r1, [pc, #372]	; (800bd14 <_dtoa_r+0x6b8>)
 800bba0:	f7f5 f97a 	bl	8000e98 <__aeabi_ddiv>
 800bba4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bba8:	f7f5 ffe8 	bl	8001b7c <__aeabi_dsub>
 800bbac:	9a05      	ldr	r2, [sp, #20]
 800bbae:	9b05      	ldr	r3, [sp, #20]
 800bbb0:	4694      	mov	ip, r2
 800bbb2:	9310      	str	r3, [sp, #64]	; 0x40
 800bbb4:	9b07      	ldr	r3, [sp, #28]
 800bbb6:	900a      	str	r0, [sp, #40]	; 0x28
 800bbb8:	910b      	str	r1, [sp, #44]	; 0x2c
 800bbba:	4463      	add	r3, ip
 800bbbc:	9319      	str	r3, [sp, #100]	; 0x64
 800bbbe:	0029      	movs	r1, r5
 800bbc0:	0020      	movs	r0, r4
 800bbc2:	f7f6 fb8b 	bl	80022dc <__aeabi_d2iz>
 800bbc6:	9017      	str	r0, [sp, #92]	; 0x5c
 800bbc8:	f7f6 fbbe 	bl	8002348 <__aeabi_i2d>
 800bbcc:	0002      	movs	r2, r0
 800bbce:	000b      	movs	r3, r1
 800bbd0:	0020      	movs	r0, r4
 800bbd2:	0029      	movs	r1, r5
 800bbd4:	f7f5 ffd2 	bl	8001b7c <__aeabi_dsub>
 800bbd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bbda:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbdc:	3301      	adds	r3, #1
 800bbde:	9307      	str	r3, [sp, #28]
 800bbe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbe2:	0004      	movs	r4, r0
 800bbe4:	3330      	adds	r3, #48	; 0x30
 800bbe6:	7013      	strb	r3, [r2, #0]
 800bbe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbec:	000d      	movs	r5, r1
 800bbee:	f7f4 fc3d 	bl	800046c <__aeabi_dcmplt>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d175      	bne.n	800bce2 <_dtoa_r+0x686>
 800bbf6:	0022      	movs	r2, r4
 800bbf8:	002b      	movs	r3, r5
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	493f      	ldr	r1, [pc, #252]	; (800bcfc <_dtoa_r+0x6a0>)
 800bbfe:	f7f5 ffbd 	bl	8001b7c <__aeabi_dsub>
 800bc02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc06:	f7f4 fc31 	bl	800046c <__aeabi_dcmplt>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	d000      	beq.n	800bc10 <_dtoa_r+0x5b4>
 800bc0e:	e0d1      	b.n	800bdb4 <_dtoa_r+0x758>
 800bc10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc12:	9a07      	ldr	r2, [sp, #28]
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d100      	bne.n	800bc1a <_dtoa_r+0x5be>
 800bc18:	e770      	b.n	800bafc <_dtoa_r+0x4a0>
 800bc1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc1e:	2200      	movs	r2, #0
 800bc20:	4b37      	ldr	r3, [pc, #220]	; (800bd00 <_dtoa_r+0x6a4>)
 800bc22:	f7f5 fd3f 	bl	80016a4 <__aeabi_dmul>
 800bc26:	4b36      	ldr	r3, [pc, #216]	; (800bd00 <_dtoa_r+0x6a4>)
 800bc28:	900a      	str	r0, [sp, #40]	; 0x28
 800bc2a:	910b      	str	r1, [sp, #44]	; 0x2c
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	0020      	movs	r0, r4
 800bc30:	0029      	movs	r1, r5
 800bc32:	f7f5 fd37 	bl	80016a4 <__aeabi_dmul>
 800bc36:	9b07      	ldr	r3, [sp, #28]
 800bc38:	0004      	movs	r4, r0
 800bc3a:	000d      	movs	r5, r1
 800bc3c:	9310      	str	r3, [sp, #64]	; 0x40
 800bc3e:	e7be      	b.n	800bbbe <_dtoa_r+0x562>
 800bc40:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc44:	f7f5 fd2e 	bl	80016a4 <__aeabi_dmul>
 800bc48:	9a05      	ldr	r2, [sp, #20]
 800bc4a:	9b05      	ldr	r3, [sp, #20]
 800bc4c:	4694      	mov	ip, r2
 800bc4e:	930a      	str	r3, [sp, #40]	; 0x28
 800bc50:	9b07      	ldr	r3, [sp, #28]
 800bc52:	9010      	str	r0, [sp, #64]	; 0x40
 800bc54:	9111      	str	r1, [sp, #68]	; 0x44
 800bc56:	4463      	add	r3, ip
 800bc58:	9319      	str	r3, [sp, #100]	; 0x64
 800bc5a:	0029      	movs	r1, r5
 800bc5c:	0020      	movs	r0, r4
 800bc5e:	f7f6 fb3d 	bl	80022dc <__aeabi_d2iz>
 800bc62:	9017      	str	r0, [sp, #92]	; 0x5c
 800bc64:	f7f6 fb70 	bl	8002348 <__aeabi_i2d>
 800bc68:	0002      	movs	r2, r0
 800bc6a:	000b      	movs	r3, r1
 800bc6c:	0020      	movs	r0, r4
 800bc6e:	0029      	movs	r1, r5
 800bc70:	f7f5 ff84 	bl	8001b7c <__aeabi_dsub>
 800bc74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc78:	3330      	adds	r3, #48	; 0x30
 800bc7a:	7013      	strb	r3, [r2, #0]
 800bc7c:	0013      	movs	r3, r2
 800bc7e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bc80:	3301      	adds	r3, #1
 800bc82:	0004      	movs	r4, r0
 800bc84:	000d      	movs	r5, r1
 800bc86:	930a      	str	r3, [sp, #40]	; 0x28
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d12c      	bne.n	800bce6 <_dtoa_r+0x68a>
 800bc8c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bc8e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bc90:	9a05      	ldr	r2, [sp, #20]
 800bc92:	9b07      	ldr	r3, [sp, #28]
 800bc94:	4694      	mov	ip, r2
 800bc96:	4463      	add	r3, ip
 800bc98:	2200      	movs	r2, #0
 800bc9a:	9307      	str	r3, [sp, #28]
 800bc9c:	4b1d      	ldr	r3, [pc, #116]	; (800bd14 <_dtoa_r+0x6b8>)
 800bc9e:	f7f4 fd91 	bl	80007c4 <__aeabi_dadd>
 800bca2:	0002      	movs	r2, r0
 800bca4:	000b      	movs	r3, r1
 800bca6:	0020      	movs	r0, r4
 800bca8:	0029      	movs	r1, r5
 800bcaa:	f7f4 fbf3 	bl	8000494 <__aeabi_dcmpgt>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d000      	beq.n	800bcb4 <_dtoa_r+0x658>
 800bcb2:	e07f      	b.n	800bdb4 <_dtoa_r+0x758>
 800bcb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bcb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcb8:	2000      	movs	r0, #0
 800bcba:	4916      	ldr	r1, [pc, #88]	; (800bd14 <_dtoa_r+0x6b8>)
 800bcbc:	f7f5 ff5e 	bl	8001b7c <__aeabi_dsub>
 800bcc0:	0002      	movs	r2, r0
 800bcc2:	000b      	movs	r3, r1
 800bcc4:	0020      	movs	r0, r4
 800bcc6:	0029      	movs	r1, r5
 800bcc8:	f7f4 fbd0 	bl	800046c <__aeabi_dcmplt>
 800bccc:	2800      	cmp	r0, #0
 800bcce:	d100      	bne.n	800bcd2 <_dtoa_r+0x676>
 800bcd0:	e714      	b.n	800bafc <_dtoa_r+0x4a0>
 800bcd2:	9b07      	ldr	r3, [sp, #28]
 800bcd4:	001a      	movs	r2, r3
 800bcd6:	3a01      	subs	r2, #1
 800bcd8:	9207      	str	r2, [sp, #28]
 800bcda:	7812      	ldrb	r2, [r2, #0]
 800bcdc:	2a30      	cmp	r2, #48	; 0x30
 800bcde:	d0f8      	beq.n	800bcd2 <_dtoa_r+0x676>
 800bce0:	9307      	str	r3, [sp, #28]
 800bce2:	9602      	str	r6, [sp, #8]
 800bce4:	e054      	b.n	800bd90 <_dtoa_r+0x734>
 800bce6:	2200      	movs	r2, #0
 800bce8:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <_dtoa_r+0x6a4>)
 800bcea:	f7f5 fcdb 	bl	80016a4 <__aeabi_dmul>
 800bcee:	0004      	movs	r4, r0
 800bcf0:	000d      	movs	r5, r1
 800bcf2:	e7b2      	b.n	800bc5a <_dtoa_r+0x5fe>
 800bcf4:	0800e9c0 	.word	0x0800e9c0
 800bcf8:	0800e998 	.word	0x0800e998
 800bcfc:	3ff00000 	.word	0x3ff00000
 800bd00:	40240000 	.word	0x40240000
 800bd04:	401c0000 	.word	0x401c0000
 800bd08:	fcc00000 	.word	0xfcc00000
 800bd0c:	40140000 	.word	0x40140000
 800bd10:	7cc00000 	.word	0x7cc00000
 800bd14:	3fe00000 	.word	0x3fe00000
 800bd18:	9b06      	ldr	r3, [sp, #24]
 800bd1a:	9e05      	ldr	r6, [sp, #20]
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	199b      	adds	r3, r3, r6
 800bd20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bd22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bd24:	930a      	str	r3, [sp, #40]	; 0x28
 800bd26:	9a08      	ldr	r2, [sp, #32]
 800bd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd2a:	0020      	movs	r0, r4
 800bd2c:	0029      	movs	r1, r5
 800bd2e:	f7f5 f8b3 	bl	8000e98 <__aeabi_ddiv>
 800bd32:	f7f6 fad3 	bl	80022dc <__aeabi_d2iz>
 800bd36:	9006      	str	r0, [sp, #24]
 800bd38:	f7f6 fb06 	bl	8002348 <__aeabi_i2d>
 800bd3c:	9a08      	ldr	r2, [sp, #32]
 800bd3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd40:	f7f5 fcb0 	bl	80016a4 <__aeabi_dmul>
 800bd44:	0002      	movs	r2, r0
 800bd46:	000b      	movs	r3, r1
 800bd48:	0020      	movs	r0, r4
 800bd4a:	0029      	movs	r1, r5
 800bd4c:	f7f5 ff16 	bl	8001b7c <__aeabi_dsub>
 800bd50:	0033      	movs	r3, r6
 800bd52:	9a06      	ldr	r2, [sp, #24]
 800bd54:	3601      	adds	r6, #1
 800bd56:	3230      	adds	r2, #48	; 0x30
 800bd58:	701a      	strb	r2, [r3, #0]
 800bd5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd5c:	9607      	str	r6, [sp, #28]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d139      	bne.n	800bdd6 <_dtoa_r+0x77a>
 800bd62:	0002      	movs	r2, r0
 800bd64:	000b      	movs	r3, r1
 800bd66:	f7f4 fd2d 	bl	80007c4 <__aeabi_dadd>
 800bd6a:	9a08      	ldr	r2, [sp, #32]
 800bd6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd6e:	0004      	movs	r4, r0
 800bd70:	000d      	movs	r5, r1
 800bd72:	f7f4 fb8f 	bl	8000494 <__aeabi_dcmpgt>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d11b      	bne.n	800bdb2 <_dtoa_r+0x756>
 800bd7a:	9a08      	ldr	r2, [sp, #32]
 800bd7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd7e:	0020      	movs	r0, r4
 800bd80:	0029      	movs	r1, r5
 800bd82:	f7f4 fb6d 	bl	8000460 <__aeabi_dcmpeq>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d002      	beq.n	800bd90 <_dtoa_r+0x734>
 800bd8a:	9b06      	ldr	r3, [sp, #24]
 800bd8c:	07db      	lsls	r3, r3, #31
 800bd8e:	d410      	bmi.n	800bdb2 <_dtoa_r+0x756>
 800bd90:	0038      	movs	r0, r7
 800bd92:	9904      	ldr	r1, [sp, #16]
 800bd94:	f000 fe6a 	bl	800ca6c <_Bfree>
 800bd98:	2300      	movs	r3, #0
 800bd9a:	9a07      	ldr	r2, [sp, #28]
 800bd9c:	9802      	ldr	r0, [sp, #8]
 800bd9e:	7013      	strb	r3, [r2, #0]
 800bda0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bda2:	3001      	adds	r0, #1
 800bda4:	6018      	str	r0, [r3, #0]
 800bda6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d100      	bne.n	800bdae <_dtoa_r+0x752>
 800bdac:	e4a3      	b.n	800b6f6 <_dtoa_r+0x9a>
 800bdae:	601a      	str	r2, [r3, #0]
 800bdb0:	e4a1      	b.n	800b6f6 <_dtoa_r+0x9a>
 800bdb2:	9e02      	ldr	r6, [sp, #8]
 800bdb4:	9b07      	ldr	r3, [sp, #28]
 800bdb6:	9307      	str	r3, [sp, #28]
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	781a      	ldrb	r2, [r3, #0]
 800bdbc:	2a39      	cmp	r2, #57	; 0x39
 800bdbe:	d106      	bne.n	800bdce <_dtoa_r+0x772>
 800bdc0:	9a05      	ldr	r2, [sp, #20]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d1f7      	bne.n	800bdb6 <_dtoa_r+0x75a>
 800bdc6:	2230      	movs	r2, #48	; 0x30
 800bdc8:	9905      	ldr	r1, [sp, #20]
 800bdca:	3601      	adds	r6, #1
 800bdcc:	700a      	strb	r2, [r1, #0]
 800bdce:	781a      	ldrb	r2, [r3, #0]
 800bdd0:	3201      	adds	r2, #1
 800bdd2:	701a      	strb	r2, [r3, #0]
 800bdd4:	e785      	b.n	800bce2 <_dtoa_r+0x686>
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	4bad      	ldr	r3, [pc, #692]	; (800c090 <_dtoa_r+0xa34>)
 800bdda:	f7f5 fc63 	bl	80016a4 <__aeabi_dmul>
 800bdde:	2200      	movs	r2, #0
 800bde0:	2300      	movs	r3, #0
 800bde2:	0004      	movs	r4, r0
 800bde4:	000d      	movs	r5, r1
 800bde6:	f7f4 fb3b 	bl	8000460 <__aeabi_dcmpeq>
 800bdea:	2800      	cmp	r0, #0
 800bdec:	d09b      	beq.n	800bd26 <_dtoa_r+0x6ca>
 800bdee:	e7cf      	b.n	800bd90 <_dtoa_r+0x734>
 800bdf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bdf2:	2a00      	cmp	r2, #0
 800bdf4:	d100      	bne.n	800bdf8 <_dtoa_r+0x79c>
 800bdf6:	e082      	b.n	800befe <_dtoa_r+0x8a2>
 800bdf8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bdfa:	2a01      	cmp	r2, #1
 800bdfc:	dc66      	bgt.n	800becc <_dtoa_r+0x870>
 800bdfe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be00:	2a00      	cmp	r2, #0
 800be02:	d05f      	beq.n	800bec4 <_dtoa_r+0x868>
 800be04:	4aa3      	ldr	r2, [pc, #652]	; (800c094 <_dtoa_r+0xa38>)
 800be06:	189b      	adds	r3, r3, r2
 800be08:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800be0a:	9c08      	ldr	r4, [sp, #32]
 800be0c:	9a08      	ldr	r2, [sp, #32]
 800be0e:	2101      	movs	r1, #1
 800be10:	18d2      	adds	r2, r2, r3
 800be12:	9208      	str	r2, [sp, #32]
 800be14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be16:	0038      	movs	r0, r7
 800be18:	18d3      	adds	r3, r2, r3
 800be1a:	930d      	str	r3, [sp, #52]	; 0x34
 800be1c:	f000 ff22 	bl	800cc64 <__i2b>
 800be20:	0005      	movs	r5, r0
 800be22:	2c00      	cmp	r4, #0
 800be24:	dd0e      	ble.n	800be44 <_dtoa_r+0x7e8>
 800be26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be28:	2b00      	cmp	r3, #0
 800be2a:	dd0b      	ble.n	800be44 <_dtoa_r+0x7e8>
 800be2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be2e:	0023      	movs	r3, r4
 800be30:	4294      	cmp	r4, r2
 800be32:	dd00      	ble.n	800be36 <_dtoa_r+0x7da>
 800be34:	0013      	movs	r3, r2
 800be36:	9a08      	ldr	r2, [sp, #32]
 800be38:	1ae4      	subs	r4, r4, r3
 800be3a:	1ad2      	subs	r2, r2, r3
 800be3c:	9208      	str	r2, [sp, #32]
 800be3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	930d      	str	r3, [sp, #52]	; 0x34
 800be44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be46:	2b00      	cmp	r3, #0
 800be48:	d01f      	beq.n	800be8a <_dtoa_r+0x82e>
 800be4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d05a      	beq.n	800bf06 <_dtoa_r+0x8aa>
 800be50:	2e00      	cmp	r6, #0
 800be52:	dd11      	ble.n	800be78 <_dtoa_r+0x81c>
 800be54:	0029      	movs	r1, r5
 800be56:	0032      	movs	r2, r6
 800be58:	0038      	movs	r0, r7
 800be5a:	f000 ffc9 	bl	800cdf0 <__pow5mult>
 800be5e:	9a04      	ldr	r2, [sp, #16]
 800be60:	0001      	movs	r1, r0
 800be62:	0005      	movs	r5, r0
 800be64:	0038      	movs	r0, r7
 800be66:	f000 ff13 	bl	800cc90 <__multiply>
 800be6a:	9904      	ldr	r1, [sp, #16]
 800be6c:	9007      	str	r0, [sp, #28]
 800be6e:	0038      	movs	r0, r7
 800be70:	f000 fdfc 	bl	800ca6c <_Bfree>
 800be74:	9b07      	ldr	r3, [sp, #28]
 800be76:	9304      	str	r3, [sp, #16]
 800be78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be7a:	1b9a      	subs	r2, r3, r6
 800be7c:	42b3      	cmp	r3, r6
 800be7e:	d004      	beq.n	800be8a <_dtoa_r+0x82e>
 800be80:	0038      	movs	r0, r7
 800be82:	9904      	ldr	r1, [sp, #16]
 800be84:	f000 ffb4 	bl	800cdf0 <__pow5mult>
 800be88:	9004      	str	r0, [sp, #16]
 800be8a:	2101      	movs	r1, #1
 800be8c:	0038      	movs	r0, r7
 800be8e:	f000 fee9 	bl	800cc64 <__i2b>
 800be92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be94:	0006      	movs	r6, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	dd37      	ble.n	800bf0a <_dtoa_r+0x8ae>
 800be9a:	001a      	movs	r2, r3
 800be9c:	0001      	movs	r1, r0
 800be9e:	0038      	movs	r0, r7
 800bea0:	f000 ffa6 	bl	800cdf0 <__pow5mult>
 800bea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bea6:	0006      	movs	r6, r0
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	dd33      	ble.n	800bf14 <_dtoa_r+0x8b8>
 800beac:	2300      	movs	r3, #0
 800beae:	9307      	str	r3, [sp, #28]
 800beb0:	6933      	ldr	r3, [r6, #16]
 800beb2:	3303      	adds	r3, #3
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	18f3      	adds	r3, r6, r3
 800beb8:	6858      	ldr	r0, [r3, #4]
 800beba:	f000 fe8b 	bl	800cbd4 <__hi0bits>
 800bebe:	2320      	movs	r3, #32
 800bec0:	1a18      	subs	r0, r3, r0
 800bec2:	e03f      	b.n	800bf44 <_dtoa_r+0x8e8>
 800bec4:	2336      	movs	r3, #54	; 0x36
 800bec6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bec8:	1a9b      	subs	r3, r3, r2
 800beca:	e79d      	b.n	800be08 <_dtoa_r+0x7ac>
 800becc:	9b06      	ldr	r3, [sp, #24]
 800bece:	1e5e      	subs	r6, r3, #1
 800bed0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bed2:	42b3      	cmp	r3, r6
 800bed4:	db08      	blt.n	800bee8 <_dtoa_r+0x88c>
 800bed6:	1b9e      	subs	r6, r3, r6
 800bed8:	9b06      	ldr	r3, [sp, #24]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	da0c      	bge.n	800bef8 <_dtoa_r+0x89c>
 800bede:	9b08      	ldr	r3, [sp, #32]
 800bee0:	9a06      	ldr	r2, [sp, #24]
 800bee2:	1a9c      	subs	r4, r3, r2
 800bee4:	2300      	movs	r3, #0
 800bee6:	e791      	b.n	800be0c <_dtoa_r+0x7b0>
 800bee8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800beea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800beec:	1af3      	subs	r3, r6, r3
 800beee:	18d3      	adds	r3, r2, r3
 800bef0:	960e      	str	r6, [sp, #56]	; 0x38
 800bef2:	9314      	str	r3, [sp, #80]	; 0x50
 800bef4:	2600      	movs	r6, #0
 800bef6:	e7ef      	b.n	800bed8 <_dtoa_r+0x87c>
 800bef8:	9c08      	ldr	r4, [sp, #32]
 800befa:	9b06      	ldr	r3, [sp, #24]
 800befc:	e786      	b.n	800be0c <_dtoa_r+0x7b0>
 800befe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800bf00:	9c08      	ldr	r4, [sp, #32]
 800bf02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf04:	e78d      	b.n	800be22 <_dtoa_r+0x7c6>
 800bf06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf08:	e7ba      	b.n	800be80 <_dtoa_r+0x824>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	9307      	str	r3, [sp, #28]
 800bf0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	dc13      	bgt.n	800bf3c <_dtoa_r+0x8e0>
 800bf14:	2300      	movs	r3, #0
 800bf16:	9307      	str	r3, [sp, #28]
 800bf18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d10e      	bne.n	800bf3c <_dtoa_r+0x8e0>
 800bf1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf20:	031b      	lsls	r3, r3, #12
 800bf22:	d10b      	bne.n	800bf3c <_dtoa_r+0x8e0>
 800bf24:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bf26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bf28:	4213      	tst	r3, r2
 800bf2a:	d007      	beq.n	800bf3c <_dtoa_r+0x8e0>
 800bf2c:	9b08      	ldr	r3, [sp, #32]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	9308      	str	r3, [sp, #32]
 800bf32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf34:	3301      	adds	r3, #1
 800bf36:	930d      	str	r3, [sp, #52]	; 0x34
 800bf38:	2301      	movs	r3, #1
 800bf3a:	9307      	str	r3, [sp, #28]
 800bf3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf3e:	2001      	movs	r0, #1
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1b5      	bne.n	800beb0 <_dtoa_r+0x854>
 800bf44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf46:	221f      	movs	r2, #31
 800bf48:	1818      	adds	r0, r3, r0
 800bf4a:	0003      	movs	r3, r0
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	4210      	tst	r0, r2
 800bf50:	d046      	beq.n	800bfe0 <_dtoa_r+0x984>
 800bf52:	3201      	adds	r2, #1
 800bf54:	1ad2      	subs	r2, r2, r3
 800bf56:	2a04      	cmp	r2, #4
 800bf58:	dd3f      	ble.n	800bfda <_dtoa_r+0x97e>
 800bf5a:	221c      	movs	r2, #28
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	9a08      	ldr	r2, [sp, #32]
 800bf60:	18e4      	adds	r4, r4, r3
 800bf62:	18d2      	adds	r2, r2, r3
 800bf64:	9208      	str	r2, [sp, #32]
 800bf66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf68:	18d3      	adds	r3, r2, r3
 800bf6a:	930d      	str	r3, [sp, #52]	; 0x34
 800bf6c:	9b08      	ldr	r3, [sp, #32]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	dd05      	ble.n	800bf7e <_dtoa_r+0x922>
 800bf72:	001a      	movs	r2, r3
 800bf74:	0038      	movs	r0, r7
 800bf76:	9904      	ldr	r1, [sp, #16]
 800bf78:	f000 ff96 	bl	800cea8 <__lshift>
 800bf7c:	9004      	str	r0, [sp, #16]
 800bf7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	dd05      	ble.n	800bf90 <_dtoa_r+0x934>
 800bf84:	0031      	movs	r1, r6
 800bf86:	001a      	movs	r2, r3
 800bf88:	0038      	movs	r0, r7
 800bf8a:	f000 ff8d 	bl	800cea8 <__lshift>
 800bf8e:	0006      	movs	r6, r0
 800bf90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d026      	beq.n	800bfe4 <_dtoa_r+0x988>
 800bf96:	0031      	movs	r1, r6
 800bf98:	9804      	ldr	r0, [sp, #16]
 800bf9a:	f000 fff5 	bl	800cf88 <__mcmp>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	da20      	bge.n	800bfe4 <_dtoa_r+0x988>
 800bfa2:	9b02      	ldr	r3, [sp, #8]
 800bfa4:	220a      	movs	r2, #10
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	9302      	str	r3, [sp, #8]
 800bfaa:	0038      	movs	r0, r7
 800bfac:	2300      	movs	r3, #0
 800bfae:	9904      	ldr	r1, [sp, #16]
 800bfb0:	f000 fd80 	bl	800cab4 <__multadd>
 800bfb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bfb6:	9004      	str	r0, [sp, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d100      	bne.n	800bfbe <_dtoa_r+0x962>
 800bfbc:	e160      	b.n	800c280 <_dtoa_r+0xc24>
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	0029      	movs	r1, r5
 800bfc2:	220a      	movs	r2, #10
 800bfc4:	0038      	movs	r0, r7
 800bfc6:	f000 fd75 	bl	800cab4 <__multadd>
 800bfca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfcc:	0005      	movs	r5, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	dc47      	bgt.n	800c062 <_dtoa_r+0xa06>
 800bfd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	dc0d      	bgt.n	800bff4 <_dtoa_r+0x998>
 800bfd8:	e043      	b.n	800c062 <_dtoa_r+0xa06>
 800bfda:	2a04      	cmp	r2, #4
 800bfdc:	d0c6      	beq.n	800bf6c <_dtoa_r+0x910>
 800bfde:	0013      	movs	r3, r2
 800bfe0:	331c      	adds	r3, #28
 800bfe2:	e7bc      	b.n	800bf5e <_dtoa_r+0x902>
 800bfe4:	9b06      	ldr	r3, [sp, #24]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	dc35      	bgt.n	800c056 <_dtoa_r+0x9fa>
 800bfea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bfec:	2b02      	cmp	r3, #2
 800bfee:	dd32      	ble.n	800c056 <_dtoa_r+0x9fa>
 800bff0:	9b06      	ldr	r3, [sp, #24]
 800bff2:	930c      	str	r3, [sp, #48]	; 0x30
 800bff4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10c      	bne.n	800c014 <_dtoa_r+0x9b8>
 800bffa:	0031      	movs	r1, r6
 800bffc:	2205      	movs	r2, #5
 800bffe:	0038      	movs	r0, r7
 800c000:	f000 fd58 	bl	800cab4 <__multadd>
 800c004:	0006      	movs	r6, r0
 800c006:	0001      	movs	r1, r0
 800c008:	9804      	ldr	r0, [sp, #16]
 800c00a:	f000 ffbd 	bl	800cf88 <__mcmp>
 800c00e:	2800      	cmp	r0, #0
 800c010:	dd00      	ble.n	800c014 <_dtoa_r+0x9b8>
 800c012:	e59f      	b.n	800bb54 <_dtoa_r+0x4f8>
 800c014:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c016:	43db      	mvns	r3, r3
 800c018:	9302      	str	r3, [sp, #8]
 800c01a:	9b05      	ldr	r3, [sp, #20]
 800c01c:	9307      	str	r3, [sp, #28]
 800c01e:	2400      	movs	r4, #0
 800c020:	0031      	movs	r1, r6
 800c022:	0038      	movs	r0, r7
 800c024:	f000 fd22 	bl	800ca6c <_Bfree>
 800c028:	2d00      	cmp	r5, #0
 800c02a:	d100      	bne.n	800c02e <_dtoa_r+0x9d2>
 800c02c:	e6b0      	b.n	800bd90 <_dtoa_r+0x734>
 800c02e:	2c00      	cmp	r4, #0
 800c030:	d005      	beq.n	800c03e <_dtoa_r+0x9e2>
 800c032:	42ac      	cmp	r4, r5
 800c034:	d003      	beq.n	800c03e <_dtoa_r+0x9e2>
 800c036:	0021      	movs	r1, r4
 800c038:	0038      	movs	r0, r7
 800c03a:	f000 fd17 	bl	800ca6c <_Bfree>
 800c03e:	0029      	movs	r1, r5
 800c040:	0038      	movs	r0, r7
 800c042:	f000 fd13 	bl	800ca6c <_Bfree>
 800c046:	e6a3      	b.n	800bd90 <_dtoa_r+0x734>
 800c048:	2600      	movs	r6, #0
 800c04a:	0035      	movs	r5, r6
 800c04c:	e7e2      	b.n	800c014 <_dtoa_r+0x9b8>
 800c04e:	9602      	str	r6, [sp, #8]
 800c050:	9e07      	ldr	r6, [sp, #28]
 800c052:	0035      	movs	r5, r6
 800c054:	e57e      	b.n	800bb54 <_dtoa_r+0x4f8>
 800c056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d100      	bne.n	800c05e <_dtoa_r+0xa02>
 800c05c:	e0c8      	b.n	800c1f0 <_dtoa_r+0xb94>
 800c05e:	9b06      	ldr	r3, [sp, #24]
 800c060:	930c      	str	r3, [sp, #48]	; 0x30
 800c062:	2c00      	cmp	r4, #0
 800c064:	dd05      	ble.n	800c072 <_dtoa_r+0xa16>
 800c066:	0029      	movs	r1, r5
 800c068:	0022      	movs	r2, r4
 800c06a:	0038      	movs	r0, r7
 800c06c:	f000 ff1c 	bl	800cea8 <__lshift>
 800c070:	0005      	movs	r5, r0
 800c072:	9b07      	ldr	r3, [sp, #28]
 800c074:	0028      	movs	r0, r5
 800c076:	2b00      	cmp	r3, #0
 800c078:	d01f      	beq.n	800c0ba <_dtoa_r+0xa5e>
 800c07a:	0038      	movs	r0, r7
 800c07c:	6869      	ldr	r1, [r5, #4]
 800c07e:	f000 fcb1 	bl	800c9e4 <_Balloc>
 800c082:	1e04      	subs	r4, r0, #0
 800c084:	d10c      	bne.n	800c0a0 <_dtoa_r+0xa44>
 800c086:	0002      	movs	r2, r0
 800c088:	4b03      	ldr	r3, [pc, #12]	; (800c098 <_dtoa_r+0xa3c>)
 800c08a:	4904      	ldr	r1, [pc, #16]	; (800c09c <_dtoa_r+0xa40>)
 800c08c:	f7ff fafb 	bl	800b686 <_dtoa_r+0x2a>
 800c090:	40240000 	.word	0x40240000
 800c094:	00000433 	.word	0x00000433
 800c098:	0800e8a4 	.word	0x0800e8a4
 800c09c:	000002ea 	.word	0x000002ea
 800c0a0:	0029      	movs	r1, r5
 800c0a2:	692b      	ldr	r3, [r5, #16]
 800c0a4:	310c      	adds	r1, #12
 800c0a6:	1c9a      	adds	r2, r3, #2
 800c0a8:	0092      	lsls	r2, r2, #2
 800c0aa:	300c      	adds	r0, #12
 800c0ac:	f000 fc91 	bl	800c9d2 <memcpy>
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	0021      	movs	r1, r4
 800c0b4:	0038      	movs	r0, r7
 800c0b6:	f000 fef7 	bl	800cea8 <__lshift>
 800c0ba:	002c      	movs	r4, r5
 800c0bc:	0005      	movs	r5, r0
 800c0be:	9b05      	ldr	r3, [sp, #20]
 800c0c0:	9308      	str	r3, [sp, #32]
 800c0c2:	0031      	movs	r1, r6
 800c0c4:	9804      	ldr	r0, [sp, #16]
 800c0c6:	f7ff fa3d 	bl	800b544 <quorem>
 800c0ca:	0003      	movs	r3, r0
 800c0cc:	0021      	movs	r1, r4
 800c0ce:	3330      	adds	r3, #48	; 0x30
 800c0d0:	900e      	str	r0, [sp, #56]	; 0x38
 800c0d2:	9804      	ldr	r0, [sp, #16]
 800c0d4:	9306      	str	r3, [sp, #24]
 800c0d6:	f000 ff57 	bl	800cf88 <__mcmp>
 800c0da:	002a      	movs	r2, r5
 800c0dc:	900f      	str	r0, [sp, #60]	; 0x3c
 800c0de:	0031      	movs	r1, r6
 800c0e0:	0038      	movs	r0, r7
 800c0e2:	f000 ff6d 	bl	800cfc0 <__mdiff>
 800c0e6:	68c3      	ldr	r3, [r0, #12]
 800c0e8:	9007      	str	r0, [sp, #28]
 800c0ea:	9310      	str	r3, [sp, #64]	; 0x40
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c0f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d104      	bne.n	800c100 <_dtoa_r+0xaa4>
 800c0f6:	0001      	movs	r1, r0
 800c0f8:	9804      	ldr	r0, [sp, #16]
 800c0fa:	f000 ff45 	bl	800cf88 <__mcmp>
 800c0fe:	900d      	str	r0, [sp, #52]	; 0x34
 800c100:	0038      	movs	r0, r7
 800c102:	9907      	ldr	r1, [sp, #28]
 800c104:	f000 fcb2 	bl	800ca6c <_Bfree>
 800c108:	2301      	movs	r3, #1
 800c10a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c10c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c10e:	4018      	ands	r0, r3
 800c110:	9b08      	ldr	r3, [sp, #32]
 800c112:	3301      	adds	r3, #1
 800c114:	9307      	str	r3, [sp, #28]
 800c116:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c118:	4313      	orrs	r3, r2
 800c11a:	4303      	orrs	r3, r0
 800c11c:	d10c      	bne.n	800c138 <_dtoa_r+0xadc>
 800c11e:	9b06      	ldr	r3, [sp, #24]
 800c120:	2b39      	cmp	r3, #57	; 0x39
 800c122:	d025      	beq.n	800c170 <_dtoa_r+0xb14>
 800c124:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c126:	2b00      	cmp	r3, #0
 800c128:	dd02      	ble.n	800c130 <_dtoa_r+0xad4>
 800c12a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c12c:	3331      	adds	r3, #49	; 0x31
 800c12e:	9306      	str	r3, [sp, #24]
 800c130:	9b08      	ldr	r3, [sp, #32]
 800c132:	9a06      	ldr	r2, [sp, #24]
 800c134:	701a      	strb	r2, [r3, #0]
 800c136:	e773      	b.n	800c020 <_dtoa_r+0x9c4>
 800c138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	db03      	blt.n	800c146 <_dtoa_r+0xaea>
 800c13e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c140:	4313      	orrs	r3, r2
 800c142:	4303      	orrs	r3, r0
 800c144:	d11f      	bne.n	800c186 <_dtoa_r+0xb2a>
 800c146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c148:	2b00      	cmp	r3, #0
 800c14a:	ddf1      	ble.n	800c130 <_dtoa_r+0xad4>
 800c14c:	9904      	ldr	r1, [sp, #16]
 800c14e:	2201      	movs	r2, #1
 800c150:	0038      	movs	r0, r7
 800c152:	f000 fea9 	bl	800cea8 <__lshift>
 800c156:	0031      	movs	r1, r6
 800c158:	9004      	str	r0, [sp, #16]
 800c15a:	f000 ff15 	bl	800cf88 <__mcmp>
 800c15e:	2800      	cmp	r0, #0
 800c160:	dc03      	bgt.n	800c16a <_dtoa_r+0xb0e>
 800c162:	d1e5      	bne.n	800c130 <_dtoa_r+0xad4>
 800c164:	9b06      	ldr	r3, [sp, #24]
 800c166:	07db      	lsls	r3, r3, #31
 800c168:	d5e2      	bpl.n	800c130 <_dtoa_r+0xad4>
 800c16a:	9b06      	ldr	r3, [sp, #24]
 800c16c:	2b39      	cmp	r3, #57	; 0x39
 800c16e:	d1dc      	bne.n	800c12a <_dtoa_r+0xace>
 800c170:	2339      	movs	r3, #57	; 0x39
 800c172:	9a08      	ldr	r2, [sp, #32]
 800c174:	7013      	strb	r3, [r2, #0]
 800c176:	9b07      	ldr	r3, [sp, #28]
 800c178:	9307      	str	r3, [sp, #28]
 800c17a:	3b01      	subs	r3, #1
 800c17c:	781a      	ldrb	r2, [r3, #0]
 800c17e:	2a39      	cmp	r2, #57	; 0x39
 800c180:	d06c      	beq.n	800c25c <_dtoa_r+0xc00>
 800c182:	3201      	adds	r2, #1
 800c184:	e7d6      	b.n	800c134 <_dtoa_r+0xad8>
 800c186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c188:	2b00      	cmp	r3, #0
 800c18a:	dd07      	ble.n	800c19c <_dtoa_r+0xb40>
 800c18c:	9b06      	ldr	r3, [sp, #24]
 800c18e:	2b39      	cmp	r3, #57	; 0x39
 800c190:	d0ee      	beq.n	800c170 <_dtoa_r+0xb14>
 800c192:	9b06      	ldr	r3, [sp, #24]
 800c194:	9a08      	ldr	r2, [sp, #32]
 800c196:	3301      	adds	r3, #1
 800c198:	7013      	strb	r3, [r2, #0]
 800c19a:	e741      	b.n	800c020 <_dtoa_r+0x9c4>
 800c19c:	9b08      	ldr	r3, [sp, #32]
 800c19e:	9a06      	ldr	r2, [sp, #24]
 800c1a0:	701a      	strb	r2, [r3, #0]
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	9a05      	ldr	r2, [sp, #20]
 800c1a6:	1a9b      	subs	r3, r3, r2
 800c1a8:	9a08      	ldr	r2, [sp, #32]
 800c1aa:	189b      	adds	r3, r3, r2
 800c1ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d03e      	beq.n	800c230 <_dtoa_r+0xbd4>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	220a      	movs	r2, #10
 800c1b6:	9904      	ldr	r1, [sp, #16]
 800c1b8:	0038      	movs	r0, r7
 800c1ba:	f000 fc7b 	bl	800cab4 <__multadd>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	9004      	str	r0, [sp, #16]
 800c1c2:	220a      	movs	r2, #10
 800c1c4:	0021      	movs	r1, r4
 800c1c6:	0038      	movs	r0, r7
 800c1c8:	42ac      	cmp	r4, r5
 800c1ca:	d106      	bne.n	800c1da <_dtoa_r+0xb7e>
 800c1cc:	f000 fc72 	bl	800cab4 <__multadd>
 800c1d0:	0004      	movs	r4, r0
 800c1d2:	0005      	movs	r5, r0
 800c1d4:	9b07      	ldr	r3, [sp, #28]
 800c1d6:	9308      	str	r3, [sp, #32]
 800c1d8:	e773      	b.n	800c0c2 <_dtoa_r+0xa66>
 800c1da:	f000 fc6b 	bl	800cab4 <__multadd>
 800c1de:	0029      	movs	r1, r5
 800c1e0:	0004      	movs	r4, r0
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	220a      	movs	r2, #10
 800c1e6:	0038      	movs	r0, r7
 800c1e8:	f000 fc64 	bl	800cab4 <__multadd>
 800c1ec:	0005      	movs	r5, r0
 800c1ee:	e7f1      	b.n	800c1d4 <_dtoa_r+0xb78>
 800c1f0:	9b06      	ldr	r3, [sp, #24]
 800c1f2:	930c      	str	r3, [sp, #48]	; 0x30
 800c1f4:	2400      	movs	r4, #0
 800c1f6:	0031      	movs	r1, r6
 800c1f8:	9804      	ldr	r0, [sp, #16]
 800c1fa:	f7ff f9a3 	bl	800b544 <quorem>
 800c1fe:	9b05      	ldr	r3, [sp, #20]
 800c200:	3030      	adds	r0, #48	; 0x30
 800c202:	5518      	strb	r0, [r3, r4]
 800c204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c206:	3401      	adds	r4, #1
 800c208:	9006      	str	r0, [sp, #24]
 800c20a:	42a3      	cmp	r3, r4
 800c20c:	dd07      	ble.n	800c21e <_dtoa_r+0xbc2>
 800c20e:	2300      	movs	r3, #0
 800c210:	220a      	movs	r2, #10
 800c212:	0038      	movs	r0, r7
 800c214:	9904      	ldr	r1, [sp, #16]
 800c216:	f000 fc4d 	bl	800cab4 <__multadd>
 800c21a:	9004      	str	r0, [sp, #16]
 800c21c:	e7eb      	b.n	800c1f6 <_dtoa_r+0xb9a>
 800c21e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c220:	2001      	movs	r0, #1
 800c222:	2b00      	cmp	r3, #0
 800c224:	dd00      	ble.n	800c228 <_dtoa_r+0xbcc>
 800c226:	0018      	movs	r0, r3
 800c228:	2400      	movs	r4, #0
 800c22a:	9b05      	ldr	r3, [sp, #20]
 800c22c:	181b      	adds	r3, r3, r0
 800c22e:	9307      	str	r3, [sp, #28]
 800c230:	9904      	ldr	r1, [sp, #16]
 800c232:	2201      	movs	r2, #1
 800c234:	0038      	movs	r0, r7
 800c236:	f000 fe37 	bl	800cea8 <__lshift>
 800c23a:	0031      	movs	r1, r6
 800c23c:	9004      	str	r0, [sp, #16]
 800c23e:	f000 fea3 	bl	800cf88 <__mcmp>
 800c242:	2800      	cmp	r0, #0
 800c244:	dc97      	bgt.n	800c176 <_dtoa_r+0xb1a>
 800c246:	d102      	bne.n	800c24e <_dtoa_r+0xbf2>
 800c248:	9b06      	ldr	r3, [sp, #24]
 800c24a:	07db      	lsls	r3, r3, #31
 800c24c:	d493      	bmi.n	800c176 <_dtoa_r+0xb1a>
 800c24e:	9b07      	ldr	r3, [sp, #28]
 800c250:	9307      	str	r3, [sp, #28]
 800c252:	3b01      	subs	r3, #1
 800c254:	781a      	ldrb	r2, [r3, #0]
 800c256:	2a30      	cmp	r2, #48	; 0x30
 800c258:	d0fa      	beq.n	800c250 <_dtoa_r+0xbf4>
 800c25a:	e6e1      	b.n	800c020 <_dtoa_r+0x9c4>
 800c25c:	9a05      	ldr	r2, [sp, #20]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d18a      	bne.n	800c178 <_dtoa_r+0xb1c>
 800c262:	9b02      	ldr	r3, [sp, #8]
 800c264:	3301      	adds	r3, #1
 800c266:	9302      	str	r3, [sp, #8]
 800c268:	2331      	movs	r3, #49	; 0x31
 800c26a:	e795      	b.n	800c198 <_dtoa_r+0xb3c>
 800c26c:	4b08      	ldr	r3, [pc, #32]	; (800c290 <_dtoa_r+0xc34>)
 800c26e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c270:	9305      	str	r3, [sp, #20]
 800c272:	4b08      	ldr	r3, [pc, #32]	; (800c294 <_dtoa_r+0xc38>)
 800c274:	2a00      	cmp	r2, #0
 800c276:	d001      	beq.n	800c27c <_dtoa_r+0xc20>
 800c278:	f7ff fa3b 	bl	800b6f2 <_dtoa_r+0x96>
 800c27c:	f7ff fa3b 	bl	800b6f6 <_dtoa_r+0x9a>
 800c280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c282:	2b00      	cmp	r3, #0
 800c284:	dcb6      	bgt.n	800c1f4 <_dtoa_r+0xb98>
 800c286:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c288:	2b02      	cmp	r3, #2
 800c28a:	dd00      	ble.n	800c28e <_dtoa_r+0xc32>
 800c28c:	e6b2      	b.n	800bff4 <_dtoa_r+0x998>
 800c28e:	e7b1      	b.n	800c1f4 <_dtoa_r+0xb98>
 800c290:	0800e821 	.word	0x0800e821
 800c294:	0800e829 	.word	0x0800e829

0800c298 <rshift>:
 800c298:	0002      	movs	r2, r0
 800c29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c29c:	6907      	ldr	r7, [r0, #16]
 800c29e:	3214      	adds	r2, #20
 800c2a0:	0013      	movs	r3, r2
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	114e      	asrs	r6, r1, #5
 800c2a6:	42b7      	cmp	r7, r6
 800c2a8:	dd31      	ble.n	800c30e <rshift+0x76>
 800c2aa:	00b3      	lsls	r3, r6, #2
 800c2ac:	18d3      	adds	r3, r2, r3
 800c2ae:	251f      	movs	r5, #31
 800c2b0:	9301      	str	r3, [sp, #4]
 800c2b2:	000b      	movs	r3, r1
 800c2b4:	00bc      	lsls	r4, r7, #2
 800c2b6:	402b      	ands	r3, r5
 800c2b8:	1914      	adds	r4, r2, r4
 800c2ba:	9302      	str	r3, [sp, #8]
 800c2bc:	4229      	tst	r1, r5
 800c2be:	d10c      	bne.n	800c2da <rshift+0x42>
 800c2c0:	0015      	movs	r5, r2
 800c2c2:	9901      	ldr	r1, [sp, #4]
 800c2c4:	428c      	cmp	r4, r1
 800c2c6:	d838      	bhi.n	800c33a <rshift+0xa2>
 800c2c8:	9901      	ldr	r1, [sp, #4]
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	3903      	subs	r1, #3
 800c2ce:	428c      	cmp	r4, r1
 800c2d0:	d301      	bcc.n	800c2d6 <rshift+0x3e>
 800c2d2:	1bbb      	subs	r3, r7, r6
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	18d3      	adds	r3, r2, r3
 800c2d8:	e019      	b.n	800c30e <rshift+0x76>
 800c2da:	2120      	movs	r1, #32
 800c2dc:	9b02      	ldr	r3, [sp, #8]
 800c2de:	9d01      	ldr	r5, [sp, #4]
 800c2e0:	1acb      	subs	r3, r1, r3
 800c2e2:	9303      	str	r3, [sp, #12]
 800c2e4:	cd02      	ldmia	r5!, {r1}
 800c2e6:	9b02      	ldr	r3, [sp, #8]
 800c2e8:	4694      	mov	ip, r2
 800c2ea:	40d9      	lsrs	r1, r3
 800c2ec:	9100      	str	r1, [sp, #0]
 800c2ee:	42ac      	cmp	r4, r5
 800c2f0:	d816      	bhi.n	800c320 <rshift+0x88>
 800c2f2:	9d01      	ldr	r5, [sp, #4]
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	3501      	adds	r5, #1
 800c2f8:	42ac      	cmp	r4, r5
 800c2fa:	d302      	bcc.n	800c302 <rshift+0x6a>
 800c2fc:	1bbb      	subs	r3, r7, r6
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	3b04      	subs	r3, #4
 800c302:	9900      	ldr	r1, [sp, #0]
 800c304:	18d3      	adds	r3, r2, r3
 800c306:	6019      	str	r1, [r3, #0]
 800c308:	2900      	cmp	r1, #0
 800c30a:	d000      	beq.n	800c30e <rshift+0x76>
 800c30c:	3304      	adds	r3, #4
 800c30e:	1a99      	subs	r1, r3, r2
 800c310:	1089      	asrs	r1, r1, #2
 800c312:	6101      	str	r1, [r0, #16]
 800c314:	4293      	cmp	r3, r2
 800c316:	d101      	bne.n	800c31c <rshift+0x84>
 800c318:	2300      	movs	r3, #0
 800c31a:	6143      	str	r3, [r0, #20]
 800c31c:	b005      	add	sp, #20
 800c31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c320:	682b      	ldr	r3, [r5, #0]
 800c322:	9903      	ldr	r1, [sp, #12]
 800c324:	408b      	lsls	r3, r1
 800c326:	9900      	ldr	r1, [sp, #0]
 800c328:	4319      	orrs	r1, r3
 800c32a:	4663      	mov	r3, ip
 800c32c:	c302      	stmia	r3!, {r1}
 800c32e:	469c      	mov	ip, r3
 800c330:	cd02      	ldmia	r5!, {r1}
 800c332:	9b02      	ldr	r3, [sp, #8]
 800c334:	40d9      	lsrs	r1, r3
 800c336:	9100      	str	r1, [sp, #0]
 800c338:	e7d9      	b.n	800c2ee <rshift+0x56>
 800c33a:	c908      	ldmia	r1!, {r3}
 800c33c:	c508      	stmia	r5!, {r3}
 800c33e:	e7c1      	b.n	800c2c4 <rshift+0x2c>

0800c340 <__hexdig_fun>:
 800c340:	0002      	movs	r2, r0
 800c342:	3a30      	subs	r2, #48	; 0x30
 800c344:	0003      	movs	r3, r0
 800c346:	2a09      	cmp	r2, #9
 800c348:	d802      	bhi.n	800c350 <__hexdig_fun+0x10>
 800c34a:	3b20      	subs	r3, #32
 800c34c:	b2d8      	uxtb	r0, r3
 800c34e:	4770      	bx	lr
 800c350:	0002      	movs	r2, r0
 800c352:	3a61      	subs	r2, #97	; 0x61
 800c354:	2a05      	cmp	r2, #5
 800c356:	d801      	bhi.n	800c35c <__hexdig_fun+0x1c>
 800c358:	3b47      	subs	r3, #71	; 0x47
 800c35a:	e7f7      	b.n	800c34c <__hexdig_fun+0xc>
 800c35c:	001a      	movs	r2, r3
 800c35e:	3a41      	subs	r2, #65	; 0x41
 800c360:	2000      	movs	r0, #0
 800c362:	2a05      	cmp	r2, #5
 800c364:	d8f3      	bhi.n	800c34e <__hexdig_fun+0xe>
 800c366:	3b27      	subs	r3, #39	; 0x27
 800c368:	e7f0      	b.n	800c34c <__hexdig_fun+0xc>
	...

0800c36c <__gethex>:
 800c36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c36e:	b08d      	sub	sp, #52	; 0x34
 800c370:	930a      	str	r3, [sp, #40]	; 0x28
 800c372:	4bbd      	ldr	r3, [pc, #756]	; (800c668 <__gethex+0x2fc>)
 800c374:	9005      	str	r0, [sp, #20]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	9109      	str	r1, [sp, #36]	; 0x24
 800c37a:	0018      	movs	r0, r3
 800c37c:	9202      	str	r2, [sp, #8]
 800c37e:	9307      	str	r3, [sp, #28]
 800c380:	f7f3 fecc 	bl	800011c <strlen>
 800c384:	2202      	movs	r2, #2
 800c386:	9b07      	ldr	r3, [sp, #28]
 800c388:	4252      	negs	r2, r2
 800c38a:	181b      	adds	r3, r3, r0
 800c38c:	3b01      	subs	r3, #1
 800c38e:	781b      	ldrb	r3, [r3, #0]
 800c390:	9003      	str	r0, [sp, #12]
 800c392:	930b      	str	r3, [sp, #44]	; 0x2c
 800c394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c396:	6819      	ldr	r1, [r3, #0]
 800c398:	1c8b      	adds	r3, r1, #2
 800c39a:	1a52      	subs	r2, r2, r1
 800c39c:	18d1      	adds	r1, r2, r3
 800c39e:	9301      	str	r3, [sp, #4]
 800c3a0:	9108      	str	r1, [sp, #32]
 800c3a2:	9901      	ldr	r1, [sp, #4]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	7808      	ldrb	r0, [r1, #0]
 800c3a8:	2830      	cmp	r0, #48	; 0x30
 800c3aa:	d0f7      	beq.n	800c39c <__gethex+0x30>
 800c3ac:	f7ff ffc8 	bl	800c340 <__hexdig_fun>
 800c3b0:	1e04      	subs	r4, r0, #0
 800c3b2:	d13e      	bne.n	800c432 <__gethex+0xc6>
 800c3b4:	9a03      	ldr	r2, [sp, #12]
 800c3b6:	9907      	ldr	r1, [sp, #28]
 800c3b8:	9801      	ldr	r0, [sp, #4]
 800c3ba:	f001 fa0d 	bl	800d7d8 <strncmp>
 800c3be:	1e07      	subs	r7, r0, #0
 800c3c0:	d000      	beq.n	800c3c4 <__gethex+0x58>
 800c3c2:	e06f      	b.n	800c4a4 <__gethex+0x138>
 800c3c4:	9b01      	ldr	r3, [sp, #4]
 800c3c6:	9a03      	ldr	r2, [sp, #12]
 800c3c8:	5c98      	ldrb	r0, [r3, r2]
 800c3ca:	189d      	adds	r5, r3, r2
 800c3cc:	f7ff ffb8 	bl	800c340 <__hexdig_fun>
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	9304      	str	r3, [sp, #16]
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d034      	beq.n	800c442 <__gethex+0xd6>
 800c3d8:	9501      	str	r5, [sp, #4]
 800c3da:	9b01      	ldr	r3, [sp, #4]
 800c3dc:	7818      	ldrb	r0, [r3, #0]
 800c3de:	2830      	cmp	r0, #48	; 0x30
 800c3e0:	d009      	beq.n	800c3f6 <__gethex+0x8a>
 800c3e2:	f7ff ffad 	bl	800c340 <__hexdig_fun>
 800c3e6:	4243      	negs	r3, r0
 800c3e8:	4143      	adcs	r3, r0
 800c3ea:	9304      	str	r3, [sp, #16]
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	002c      	movs	r4, r5
 800c3f0:	9308      	str	r3, [sp, #32]
 800c3f2:	9d01      	ldr	r5, [sp, #4]
 800c3f4:	e004      	b.n	800c400 <__gethex+0x94>
 800c3f6:	9b01      	ldr	r3, [sp, #4]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	9301      	str	r3, [sp, #4]
 800c3fc:	e7ed      	b.n	800c3da <__gethex+0x6e>
 800c3fe:	3501      	adds	r5, #1
 800c400:	7828      	ldrb	r0, [r5, #0]
 800c402:	f7ff ff9d 	bl	800c340 <__hexdig_fun>
 800c406:	1e07      	subs	r7, r0, #0
 800c408:	d1f9      	bne.n	800c3fe <__gethex+0x92>
 800c40a:	0028      	movs	r0, r5
 800c40c:	9a03      	ldr	r2, [sp, #12]
 800c40e:	9907      	ldr	r1, [sp, #28]
 800c410:	f001 f9e2 	bl	800d7d8 <strncmp>
 800c414:	2800      	cmp	r0, #0
 800c416:	d112      	bne.n	800c43e <__gethex+0xd2>
 800c418:	2c00      	cmp	r4, #0
 800c41a:	d107      	bne.n	800c42c <__gethex+0xc0>
 800c41c:	9b03      	ldr	r3, [sp, #12]
 800c41e:	18ed      	adds	r5, r5, r3
 800c420:	002c      	movs	r4, r5
 800c422:	7828      	ldrb	r0, [r5, #0]
 800c424:	f7ff ff8c 	bl	800c340 <__hexdig_fun>
 800c428:	2800      	cmp	r0, #0
 800c42a:	d106      	bne.n	800c43a <__gethex+0xce>
 800c42c:	1b67      	subs	r7, r4, r5
 800c42e:	00bf      	lsls	r7, r7, #2
 800c430:	e007      	b.n	800c442 <__gethex+0xd6>
 800c432:	2300      	movs	r3, #0
 800c434:	001c      	movs	r4, r3
 800c436:	9304      	str	r3, [sp, #16]
 800c438:	e7db      	b.n	800c3f2 <__gethex+0x86>
 800c43a:	3501      	adds	r5, #1
 800c43c:	e7f1      	b.n	800c422 <__gethex+0xb6>
 800c43e:	2c00      	cmp	r4, #0
 800c440:	d1f4      	bne.n	800c42c <__gethex+0xc0>
 800c442:	2220      	movs	r2, #32
 800c444:	782b      	ldrb	r3, [r5, #0]
 800c446:	002e      	movs	r6, r5
 800c448:	4393      	bics	r3, r2
 800c44a:	2b50      	cmp	r3, #80	; 0x50
 800c44c:	d11d      	bne.n	800c48a <__gethex+0x11e>
 800c44e:	786b      	ldrb	r3, [r5, #1]
 800c450:	2b2b      	cmp	r3, #43	; 0x2b
 800c452:	d02c      	beq.n	800c4ae <__gethex+0x142>
 800c454:	2b2d      	cmp	r3, #45	; 0x2d
 800c456:	d02e      	beq.n	800c4b6 <__gethex+0x14a>
 800c458:	2300      	movs	r3, #0
 800c45a:	1c6e      	adds	r6, r5, #1
 800c45c:	9306      	str	r3, [sp, #24]
 800c45e:	7830      	ldrb	r0, [r6, #0]
 800c460:	f7ff ff6e 	bl	800c340 <__hexdig_fun>
 800c464:	1e43      	subs	r3, r0, #1
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b18      	cmp	r3, #24
 800c46a:	d82b      	bhi.n	800c4c4 <__gethex+0x158>
 800c46c:	3810      	subs	r0, #16
 800c46e:	0004      	movs	r4, r0
 800c470:	7870      	ldrb	r0, [r6, #1]
 800c472:	f7ff ff65 	bl	800c340 <__hexdig_fun>
 800c476:	1e43      	subs	r3, r0, #1
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	3601      	adds	r6, #1
 800c47c:	2b18      	cmp	r3, #24
 800c47e:	d91c      	bls.n	800c4ba <__gethex+0x14e>
 800c480:	9b06      	ldr	r3, [sp, #24]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d000      	beq.n	800c488 <__gethex+0x11c>
 800c486:	4264      	negs	r4, r4
 800c488:	193f      	adds	r7, r7, r4
 800c48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c48c:	601e      	str	r6, [r3, #0]
 800c48e:	9b04      	ldr	r3, [sp, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d019      	beq.n	800c4c8 <__gethex+0x15c>
 800c494:	2600      	movs	r6, #0
 800c496:	9b08      	ldr	r3, [sp, #32]
 800c498:	42b3      	cmp	r3, r6
 800c49a:	d100      	bne.n	800c49e <__gethex+0x132>
 800c49c:	3606      	adds	r6, #6
 800c49e:	0030      	movs	r0, r6
 800c4a0:	b00d      	add	sp, #52	; 0x34
 800c4a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	0027      	movs	r7, r4
 800c4a8:	9d01      	ldr	r5, [sp, #4]
 800c4aa:	9304      	str	r3, [sp, #16]
 800c4ac:	e7c9      	b.n	800c442 <__gethex+0xd6>
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	9306      	str	r3, [sp, #24]
 800c4b2:	1cae      	adds	r6, r5, #2
 800c4b4:	e7d3      	b.n	800c45e <__gethex+0xf2>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e7fa      	b.n	800c4b0 <__gethex+0x144>
 800c4ba:	230a      	movs	r3, #10
 800c4bc:	435c      	muls	r4, r3
 800c4be:	1824      	adds	r4, r4, r0
 800c4c0:	3c10      	subs	r4, #16
 800c4c2:	e7d5      	b.n	800c470 <__gethex+0x104>
 800c4c4:	002e      	movs	r6, r5
 800c4c6:	e7e0      	b.n	800c48a <__gethex+0x11e>
 800c4c8:	9b01      	ldr	r3, [sp, #4]
 800c4ca:	9904      	ldr	r1, [sp, #16]
 800c4cc:	1aeb      	subs	r3, r5, r3
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	2b07      	cmp	r3, #7
 800c4d2:	dc0a      	bgt.n	800c4ea <__gethex+0x17e>
 800c4d4:	9805      	ldr	r0, [sp, #20]
 800c4d6:	f000 fa85 	bl	800c9e4 <_Balloc>
 800c4da:	1e04      	subs	r4, r0, #0
 800c4dc:	d108      	bne.n	800c4f0 <__gethex+0x184>
 800c4de:	0002      	movs	r2, r0
 800c4e0:	21de      	movs	r1, #222	; 0xde
 800c4e2:	4b62      	ldr	r3, [pc, #392]	; (800c66c <__gethex+0x300>)
 800c4e4:	4862      	ldr	r0, [pc, #392]	; (800c670 <__gethex+0x304>)
 800c4e6:	f001 f995 	bl	800d814 <__assert_func>
 800c4ea:	3101      	adds	r1, #1
 800c4ec:	105b      	asrs	r3, r3, #1
 800c4ee:	e7ef      	b.n	800c4d0 <__gethex+0x164>
 800c4f0:	0003      	movs	r3, r0
 800c4f2:	3314      	adds	r3, #20
 800c4f4:	9304      	str	r3, [sp, #16]
 800c4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	001e      	movs	r6, r3
 800c4fc:	9306      	str	r3, [sp, #24]
 800c4fe:	9b01      	ldr	r3, [sp, #4]
 800c500:	42ab      	cmp	r3, r5
 800c502:	d340      	bcc.n	800c586 <__gethex+0x21a>
 800c504:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800c506:	9b04      	ldr	r3, [sp, #16]
 800c508:	c540      	stmia	r5!, {r6}
 800c50a:	1aed      	subs	r5, r5, r3
 800c50c:	10ad      	asrs	r5, r5, #2
 800c50e:	0030      	movs	r0, r6
 800c510:	6125      	str	r5, [r4, #16]
 800c512:	f000 fb5f 	bl	800cbd4 <__hi0bits>
 800c516:	9b02      	ldr	r3, [sp, #8]
 800c518:	016d      	lsls	r5, r5, #5
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	1a2e      	subs	r6, r5, r0
 800c51e:	9301      	str	r3, [sp, #4]
 800c520:	429e      	cmp	r6, r3
 800c522:	dd5a      	ble.n	800c5da <__gethex+0x26e>
 800c524:	1af6      	subs	r6, r6, r3
 800c526:	0031      	movs	r1, r6
 800c528:	0020      	movs	r0, r4
 800c52a:	f000 ff02 	bl	800d332 <__any_on>
 800c52e:	1e05      	subs	r5, r0, #0
 800c530:	d016      	beq.n	800c560 <__gethex+0x1f4>
 800c532:	2501      	movs	r5, #1
 800c534:	211f      	movs	r1, #31
 800c536:	0028      	movs	r0, r5
 800c538:	1e73      	subs	r3, r6, #1
 800c53a:	4019      	ands	r1, r3
 800c53c:	4088      	lsls	r0, r1
 800c53e:	0001      	movs	r1, r0
 800c540:	115a      	asrs	r2, r3, #5
 800c542:	9804      	ldr	r0, [sp, #16]
 800c544:	0092      	lsls	r2, r2, #2
 800c546:	5812      	ldr	r2, [r2, r0]
 800c548:	420a      	tst	r2, r1
 800c54a:	d009      	beq.n	800c560 <__gethex+0x1f4>
 800c54c:	42ab      	cmp	r3, r5
 800c54e:	dd06      	ble.n	800c55e <__gethex+0x1f2>
 800c550:	0020      	movs	r0, r4
 800c552:	1eb1      	subs	r1, r6, #2
 800c554:	f000 feed 	bl	800d332 <__any_on>
 800c558:	3502      	adds	r5, #2
 800c55a:	2800      	cmp	r0, #0
 800c55c:	d100      	bne.n	800c560 <__gethex+0x1f4>
 800c55e:	2502      	movs	r5, #2
 800c560:	0031      	movs	r1, r6
 800c562:	0020      	movs	r0, r4
 800c564:	f7ff fe98 	bl	800c298 <rshift>
 800c568:	19bf      	adds	r7, r7, r6
 800c56a:	9b02      	ldr	r3, [sp, #8]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	9303      	str	r3, [sp, #12]
 800c570:	42bb      	cmp	r3, r7
 800c572:	da42      	bge.n	800c5fa <__gethex+0x28e>
 800c574:	0021      	movs	r1, r4
 800c576:	9805      	ldr	r0, [sp, #20]
 800c578:	f000 fa78 	bl	800ca6c <_Bfree>
 800c57c:	2300      	movs	r3, #0
 800c57e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c580:	26a3      	movs	r6, #163	; 0xa3
 800c582:	6013      	str	r3, [r2, #0]
 800c584:	e78b      	b.n	800c49e <__gethex+0x132>
 800c586:	1e6b      	subs	r3, r5, #1
 800c588:	9308      	str	r3, [sp, #32]
 800c58a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	4293      	cmp	r3, r2
 800c590:	d014      	beq.n	800c5bc <__gethex+0x250>
 800c592:	9b06      	ldr	r3, [sp, #24]
 800c594:	2b20      	cmp	r3, #32
 800c596:	d104      	bne.n	800c5a2 <__gethex+0x236>
 800c598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c59a:	c340      	stmia	r3!, {r6}
 800c59c:	2600      	movs	r6, #0
 800c59e:	9309      	str	r3, [sp, #36]	; 0x24
 800c5a0:	9606      	str	r6, [sp, #24]
 800c5a2:	9b08      	ldr	r3, [sp, #32]
 800c5a4:	7818      	ldrb	r0, [r3, #0]
 800c5a6:	f7ff fecb 	bl	800c340 <__hexdig_fun>
 800c5aa:	230f      	movs	r3, #15
 800c5ac:	4018      	ands	r0, r3
 800c5ae:	9b06      	ldr	r3, [sp, #24]
 800c5b0:	9d08      	ldr	r5, [sp, #32]
 800c5b2:	4098      	lsls	r0, r3
 800c5b4:	3304      	adds	r3, #4
 800c5b6:	4306      	orrs	r6, r0
 800c5b8:	9306      	str	r3, [sp, #24]
 800c5ba:	e7a0      	b.n	800c4fe <__gethex+0x192>
 800c5bc:	2301      	movs	r3, #1
 800c5be:	9a03      	ldr	r2, [sp, #12]
 800c5c0:	1a9d      	subs	r5, r3, r2
 800c5c2:	9b08      	ldr	r3, [sp, #32]
 800c5c4:	195d      	adds	r5, r3, r5
 800c5c6:	9b01      	ldr	r3, [sp, #4]
 800c5c8:	429d      	cmp	r5, r3
 800c5ca:	d3e2      	bcc.n	800c592 <__gethex+0x226>
 800c5cc:	0028      	movs	r0, r5
 800c5ce:	9907      	ldr	r1, [sp, #28]
 800c5d0:	f001 f902 	bl	800d7d8 <strncmp>
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d1dc      	bne.n	800c592 <__gethex+0x226>
 800c5d8:	e791      	b.n	800c4fe <__gethex+0x192>
 800c5da:	9b01      	ldr	r3, [sp, #4]
 800c5dc:	2500      	movs	r5, #0
 800c5de:	429e      	cmp	r6, r3
 800c5e0:	dac3      	bge.n	800c56a <__gethex+0x1fe>
 800c5e2:	1b9e      	subs	r6, r3, r6
 800c5e4:	0021      	movs	r1, r4
 800c5e6:	0032      	movs	r2, r6
 800c5e8:	9805      	ldr	r0, [sp, #20]
 800c5ea:	f000 fc5d 	bl	800cea8 <__lshift>
 800c5ee:	0003      	movs	r3, r0
 800c5f0:	3314      	adds	r3, #20
 800c5f2:	0004      	movs	r4, r0
 800c5f4:	1bbf      	subs	r7, r7, r6
 800c5f6:	9304      	str	r3, [sp, #16]
 800c5f8:	e7b7      	b.n	800c56a <__gethex+0x1fe>
 800c5fa:	9b02      	ldr	r3, [sp, #8]
 800c5fc:	685e      	ldr	r6, [r3, #4]
 800c5fe:	42be      	cmp	r6, r7
 800c600:	dd71      	ble.n	800c6e6 <__gethex+0x37a>
 800c602:	9b01      	ldr	r3, [sp, #4]
 800c604:	1bf6      	subs	r6, r6, r7
 800c606:	42b3      	cmp	r3, r6
 800c608:	dc38      	bgt.n	800c67c <__gethex+0x310>
 800c60a:	9b02      	ldr	r3, [sp, #8]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	2b02      	cmp	r3, #2
 800c610:	d026      	beq.n	800c660 <__gethex+0x2f4>
 800c612:	2b03      	cmp	r3, #3
 800c614:	d02e      	beq.n	800c674 <__gethex+0x308>
 800c616:	2b01      	cmp	r3, #1
 800c618:	d119      	bne.n	800c64e <__gethex+0x2e2>
 800c61a:	9b01      	ldr	r3, [sp, #4]
 800c61c:	42b3      	cmp	r3, r6
 800c61e:	d116      	bne.n	800c64e <__gethex+0x2e2>
 800c620:	2b01      	cmp	r3, #1
 800c622:	d10d      	bne.n	800c640 <__gethex+0x2d4>
 800c624:	9b02      	ldr	r3, [sp, #8]
 800c626:	2662      	movs	r6, #98	; 0x62
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	9301      	str	r3, [sp, #4]
 800c62c:	9a01      	ldr	r2, [sp, #4]
 800c62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c630:	601a      	str	r2, [r3, #0]
 800c632:	2301      	movs	r3, #1
 800c634:	9a04      	ldr	r2, [sp, #16]
 800c636:	6123      	str	r3, [r4, #16]
 800c638:	6013      	str	r3, [r2, #0]
 800c63a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c63c:	601c      	str	r4, [r3, #0]
 800c63e:	e72e      	b.n	800c49e <__gethex+0x132>
 800c640:	9901      	ldr	r1, [sp, #4]
 800c642:	0020      	movs	r0, r4
 800c644:	3901      	subs	r1, #1
 800c646:	f000 fe74 	bl	800d332 <__any_on>
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d1ea      	bne.n	800c624 <__gethex+0x2b8>
 800c64e:	0021      	movs	r1, r4
 800c650:	9805      	ldr	r0, [sp, #20]
 800c652:	f000 fa0b 	bl	800ca6c <_Bfree>
 800c656:	2300      	movs	r3, #0
 800c658:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c65a:	2650      	movs	r6, #80	; 0x50
 800c65c:	6013      	str	r3, [r2, #0]
 800c65e:	e71e      	b.n	800c49e <__gethex+0x132>
 800c660:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c662:	2b00      	cmp	r3, #0
 800c664:	d1f3      	bne.n	800c64e <__gethex+0x2e2>
 800c666:	e7dd      	b.n	800c624 <__gethex+0x2b8>
 800c668:	0800e920 	.word	0x0800e920
 800c66c:	0800e8a4 	.word	0x0800e8a4
 800c670:	0800e8b5 	.word	0x0800e8b5
 800c674:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1d4      	bne.n	800c624 <__gethex+0x2b8>
 800c67a:	e7e8      	b.n	800c64e <__gethex+0x2e2>
 800c67c:	1e77      	subs	r7, r6, #1
 800c67e:	2d00      	cmp	r5, #0
 800c680:	d12f      	bne.n	800c6e2 <__gethex+0x376>
 800c682:	2f00      	cmp	r7, #0
 800c684:	d004      	beq.n	800c690 <__gethex+0x324>
 800c686:	0039      	movs	r1, r7
 800c688:	0020      	movs	r0, r4
 800c68a:	f000 fe52 	bl	800d332 <__any_on>
 800c68e:	0005      	movs	r5, r0
 800c690:	231f      	movs	r3, #31
 800c692:	117a      	asrs	r2, r7, #5
 800c694:	401f      	ands	r7, r3
 800c696:	3b1e      	subs	r3, #30
 800c698:	40bb      	lsls	r3, r7
 800c69a:	9904      	ldr	r1, [sp, #16]
 800c69c:	0092      	lsls	r2, r2, #2
 800c69e:	5852      	ldr	r2, [r2, r1]
 800c6a0:	421a      	tst	r2, r3
 800c6a2:	d001      	beq.n	800c6a8 <__gethex+0x33c>
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	431d      	orrs	r5, r3
 800c6a8:	9b01      	ldr	r3, [sp, #4]
 800c6aa:	0031      	movs	r1, r6
 800c6ac:	1b9b      	subs	r3, r3, r6
 800c6ae:	2602      	movs	r6, #2
 800c6b0:	0020      	movs	r0, r4
 800c6b2:	9301      	str	r3, [sp, #4]
 800c6b4:	f7ff fdf0 	bl	800c298 <rshift>
 800c6b8:	9b02      	ldr	r3, [sp, #8]
 800c6ba:	685f      	ldr	r7, [r3, #4]
 800c6bc:	2d00      	cmp	r5, #0
 800c6be:	d041      	beq.n	800c744 <__gethex+0x3d8>
 800c6c0:	9b02      	ldr	r3, [sp, #8]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d010      	beq.n	800c6ea <__gethex+0x37e>
 800c6c8:	2b03      	cmp	r3, #3
 800c6ca:	d012      	beq.n	800c6f2 <__gethex+0x386>
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d106      	bne.n	800c6de <__gethex+0x372>
 800c6d0:	07aa      	lsls	r2, r5, #30
 800c6d2:	d504      	bpl.n	800c6de <__gethex+0x372>
 800c6d4:	9a04      	ldr	r2, [sp, #16]
 800c6d6:	6810      	ldr	r0, [r2, #0]
 800c6d8:	4305      	orrs	r5, r0
 800c6da:	421d      	tst	r5, r3
 800c6dc:	d10c      	bne.n	800c6f8 <__gethex+0x38c>
 800c6de:	2310      	movs	r3, #16
 800c6e0:	e02f      	b.n	800c742 <__gethex+0x3d6>
 800c6e2:	2501      	movs	r5, #1
 800c6e4:	e7d4      	b.n	800c690 <__gethex+0x324>
 800c6e6:	2601      	movs	r6, #1
 800c6e8:	e7e8      	b.n	800c6bc <__gethex+0x350>
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c6ee:	1a9b      	subs	r3, r3, r2
 800c6f0:	9313      	str	r3, [sp, #76]	; 0x4c
 800c6f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d0f2      	beq.n	800c6de <__gethex+0x372>
 800c6f8:	6923      	ldr	r3, [r4, #16]
 800c6fa:	2000      	movs	r0, #0
 800c6fc:	9303      	str	r3, [sp, #12]
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	9304      	str	r3, [sp, #16]
 800c702:	0023      	movs	r3, r4
 800c704:	9a04      	ldr	r2, [sp, #16]
 800c706:	3314      	adds	r3, #20
 800c708:	1899      	adds	r1, r3, r2
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	1c55      	adds	r5, r2, #1
 800c70e:	d01e      	beq.n	800c74e <__gethex+0x3e2>
 800c710:	3201      	adds	r2, #1
 800c712:	601a      	str	r2, [r3, #0]
 800c714:	0023      	movs	r3, r4
 800c716:	3314      	adds	r3, #20
 800c718:	2e02      	cmp	r6, #2
 800c71a:	d140      	bne.n	800c79e <__gethex+0x432>
 800c71c:	9a02      	ldr	r2, [sp, #8]
 800c71e:	9901      	ldr	r1, [sp, #4]
 800c720:	6812      	ldr	r2, [r2, #0]
 800c722:	3a01      	subs	r2, #1
 800c724:	428a      	cmp	r2, r1
 800c726:	d10b      	bne.n	800c740 <__gethex+0x3d4>
 800c728:	114a      	asrs	r2, r1, #5
 800c72a:	211f      	movs	r1, #31
 800c72c:	9801      	ldr	r0, [sp, #4]
 800c72e:	0092      	lsls	r2, r2, #2
 800c730:	4001      	ands	r1, r0
 800c732:	2001      	movs	r0, #1
 800c734:	0005      	movs	r5, r0
 800c736:	408d      	lsls	r5, r1
 800c738:	58d3      	ldr	r3, [r2, r3]
 800c73a:	422b      	tst	r3, r5
 800c73c:	d000      	beq.n	800c740 <__gethex+0x3d4>
 800c73e:	2601      	movs	r6, #1
 800c740:	2320      	movs	r3, #32
 800c742:	431e      	orrs	r6, r3
 800c744:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c746:	601c      	str	r4, [r3, #0]
 800c748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c74a:	601f      	str	r7, [r3, #0]
 800c74c:	e6a7      	b.n	800c49e <__gethex+0x132>
 800c74e:	c301      	stmia	r3!, {r0}
 800c750:	4299      	cmp	r1, r3
 800c752:	d8da      	bhi.n	800c70a <__gethex+0x39e>
 800c754:	9b03      	ldr	r3, [sp, #12]
 800c756:	68a2      	ldr	r2, [r4, #8]
 800c758:	4293      	cmp	r3, r2
 800c75a:	db17      	blt.n	800c78c <__gethex+0x420>
 800c75c:	6863      	ldr	r3, [r4, #4]
 800c75e:	9805      	ldr	r0, [sp, #20]
 800c760:	1c59      	adds	r1, r3, #1
 800c762:	f000 f93f 	bl	800c9e4 <_Balloc>
 800c766:	1e05      	subs	r5, r0, #0
 800c768:	d103      	bne.n	800c772 <__gethex+0x406>
 800c76a:	0002      	movs	r2, r0
 800c76c:	2184      	movs	r1, #132	; 0x84
 800c76e:	4b1c      	ldr	r3, [pc, #112]	; (800c7e0 <__gethex+0x474>)
 800c770:	e6b8      	b.n	800c4e4 <__gethex+0x178>
 800c772:	0021      	movs	r1, r4
 800c774:	6923      	ldr	r3, [r4, #16]
 800c776:	310c      	adds	r1, #12
 800c778:	1c9a      	adds	r2, r3, #2
 800c77a:	0092      	lsls	r2, r2, #2
 800c77c:	300c      	adds	r0, #12
 800c77e:	f000 f928 	bl	800c9d2 <memcpy>
 800c782:	0021      	movs	r1, r4
 800c784:	9805      	ldr	r0, [sp, #20]
 800c786:	f000 f971 	bl	800ca6c <_Bfree>
 800c78a:	002c      	movs	r4, r5
 800c78c:	6923      	ldr	r3, [r4, #16]
 800c78e:	1c5a      	adds	r2, r3, #1
 800c790:	6122      	str	r2, [r4, #16]
 800c792:	2201      	movs	r2, #1
 800c794:	3304      	adds	r3, #4
 800c796:	009b      	lsls	r3, r3, #2
 800c798:	18e3      	adds	r3, r4, r3
 800c79a:	605a      	str	r2, [r3, #4]
 800c79c:	e7ba      	b.n	800c714 <__gethex+0x3a8>
 800c79e:	6922      	ldr	r2, [r4, #16]
 800c7a0:	9903      	ldr	r1, [sp, #12]
 800c7a2:	428a      	cmp	r2, r1
 800c7a4:	dd09      	ble.n	800c7ba <__gethex+0x44e>
 800c7a6:	2101      	movs	r1, #1
 800c7a8:	0020      	movs	r0, r4
 800c7aa:	f7ff fd75 	bl	800c298 <rshift>
 800c7ae:	9b02      	ldr	r3, [sp, #8]
 800c7b0:	3701      	adds	r7, #1
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	42bb      	cmp	r3, r7
 800c7b6:	dac2      	bge.n	800c73e <__gethex+0x3d2>
 800c7b8:	e6dc      	b.n	800c574 <__gethex+0x208>
 800c7ba:	221f      	movs	r2, #31
 800c7bc:	9d01      	ldr	r5, [sp, #4]
 800c7be:	9901      	ldr	r1, [sp, #4]
 800c7c0:	2601      	movs	r6, #1
 800c7c2:	4015      	ands	r5, r2
 800c7c4:	4211      	tst	r1, r2
 800c7c6:	d0bb      	beq.n	800c740 <__gethex+0x3d4>
 800c7c8:	9a04      	ldr	r2, [sp, #16]
 800c7ca:	189b      	adds	r3, r3, r2
 800c7cc:	3b04      	subs	r3, #4
 800c7ce:	6818      	ldr	r0, [r3, #0]
 800c7d0:	f000 fa00 	bl	800cbd4 <__hi0bits>
 800c7d4:	2320      	movs	r3, #32
 800c7d6:	1b5d      	subs	r5, r3, r5
 800c7d8:	42a8      	cmp	r0, r5
 800c7da:	dbe4      	blt.n	800c7a6 <__gethex+0x43a>
 800c7dc:	e7b0      	b.n	800c740 <__gethex+0x3d4>
 800c7de:	46c0      	nop			; (mov r8, r8)
 800c7e0:	0800e8a4 	.word	0x0800e8a4

0800c7e4 <L_shift>:
 800c7e4:	2308      	movs	r3, #8
 800c7e6:	b570      	push	{r4, r5, r6, lr}
 800c7e8:	2520      	movs	r5, #32
 800c7ea:	1a9a      	subs	r2, r3, r2
 800c7ec:	0092      	lsls	r2, r2, #2
 800c7ee:	1aad      	subs	r5, r5, r2
 800c7f0:	6843      	ldr	r3, [r0, #4]
 800c7f2:	6806      	ldr	r6, [r0, #0]
 800c7f4:	001c      	movs	r4, r3
 800c7f6:	40ac      	lsls	r4, r5
 800c7f8:	40d3      	lsrs	r3, r2
 800c7fa:	4334      	orrs	r4, r6
 800c7fc:	6004      	str	r4, [r0, #0]
 800c7fe:	6043      	str	r3, [r0, #4]
 800c800:	3004      	adds	r0, #4
 800c802:	4288      	cmp	r0, r1
 800c804:	d3f4      	bcc.n	800c7f0 <L_shift+0xc>
 800c806:	bd70      	pop	{r4, r5, r6, pc}

0800c808 <__match>:
 800c808:	b530      	push	{r4, r5, lr}
 800c80a:	6803      	ldr	r3, [r0, #0]
 800c80c:	780c      	ldrb	r4, [r1, #0]
 800c80e:	3301      	adds	r3, #1
 800c810:	2c00      	cmp	r4, #0
 800c812:	d102      	bne.n	800c81a <__match+0x12>
 800c814:	6003      	str	r3, [r0, #0]
 800c816:	2001      	movs	r0, #1
 800c818:	bd30      	pop	{r4, r5, pc}
 800c81a:	781a      	ldrb	r2, [r3, #0]
 800c81c:	0015      	movs	r5, r2
 800c81e:	3d41      	subs	r5, #65	; 0x41
 800c820:	2d19      	cmp	r5, #25
 800c822:	d800      	bhi.n	800c826 <__match+0x1e>
 800c824:	3220      	adds	r2, #32
 800c826:	3101      	adds	r1, #1
 800c828:	42a2      	cmp	r2, r4
 800c82a:	d0ef      	beq.n	800c80c <__match+0x4>
 800c82c:	2000      	movs	r0, #0
 800c82e:	e7f3      	b.n	800c818 <__match+0x10>

0800c830 <__hexnan>:
 800c830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c832:	680b      	ldr	r3, [r1, #0]
 800c834:	b08b      	sub	sp, #44	; 0x2c
 800c836:	115c      	asrs	r4, r3, #5
 800c838:	00a4      	lsls	r4, r4, #2
 800c83a:	9201      	str	r2, [sp, #4]
 800c83c:	1912      	adds	r2, r2, r4
 800c83e:	0019      	movs	r1, r3
 800c840:	9202      	str	r2, [sp, #8]
 800c842:	221f      	movs	r2, #31
 800c844:	4011      	ands	r1, r2
 800c846:	9008      	str	r0, [sp, #32]
 800c848:	9106      	str	r1, [sp, #24]
 800c84a:	4213      	tst	r3, r2
 800c84c:	d002      	beq.n	800c854 <__hexnan+0x24>
 800c84e:	9b02      	ldr	r3, [sp, #8]
 800c850:	3304      	adds	r3, #4
 800c852:	9302      	str	r3, [sp, #8]
 800c854:	9b02      	ldr	r3, [sp, #8]
 800c856:	2500      	movs	r5, #0
 800c858:	1f1e      	subs	r6, r3, #4
 800c85a:	0037      	movs	r7, r6
 800c85c:	0034      	movs	r4, r6
 800c85e:	9b08      	ldr	r3, [sp, #32]
 800c860:	6035      	str	r5, [r6, #0]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	9507      	str	r5, [sp, #28]
 800c866:	9305      	str	r3, [sp, #20]
 800c868:	9503      	str	r5, [sp, #12]
 800c86a:	9b05      	ldr	r3, [sp, #20]
 800c86c:	3301      	adds	r3, #1
 800c86e:	9309      	str	r3, [sp, #36]	; 0x24
 800c870:	9b05      	ldr	r3, [sp, #20]
 800c872:	785b      	ldrb	r3, [r3, #1]
 800c874:	9304      	str	r3, [sp, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d028      	beq.n	800c8cc <__hexnan+0x9c>
 800c87a:	9804      	ldr	r0, [sp, #16]
 800c87c:	f7ff fd60 	bl	800c340 <__hexdig_fun>
 800c880:	2800      	cmp	r0, #0
 800c882:	d154      	bne.n	800c92e <__hexnan+0xfe>
 800c884:	9b04      	ldr	r3, [sp, #16]
 800c886:	2b20      	cmp	r3, #32
 800c888:	d819      	bhi.n	800c8be <__hexnan+0x8e>
 800c88a:	9b03      	ldr	r3, [sp, #12]
 800c88c:	9a07      	ldr	r2, [sp, #28]
 800c88e:	4293      	cmp	r3, r2
 800c890:	dd12      	ble.n	800c8b8 <__hexnan+0x88>
 800c892:	42bc      	cmp	r4, r7
 800c894:	d206      	bcs.n	800c8a4 <__hexnan+0x74>
 800c896:	2d07      	cmp	r5, #7
 800c898:	dc04      	bgt.n	800c8a4 <__hexnan+0x74>
 800c89a:	002a      	movs	r2, r5
 800c89c:	0039      	movs	r1, r7
 800c89e:	0020      	movs	r0, r4
 800c8a0:	f7ff ffa0 	bl	800c7e4 <L_shift>
 800c8a4:	9b01      	ldr	r3, [sp, #4]
 800c8a6:	2508      	movs	r5, #8
 800c8a8:	429c      	cmp	r4, r3
 800c8aa:	d905      	bls.n	800c8b8 <__hexnan+0x88>
 800c8ac:	1f27      	subs	r7, r4, #4
 800c8ae:	2500      	movs	r5, #0
 800c8b0:	003c      	movs	r4, r7
 800c8b2:	9b03      	ldr	r3, [sp, #12]
 800c8b4:	603d      	str	r5, [r7, #0]
 800c8b6:	9307      	str	r3, [sp, #28]
 800c8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ba:	9305      	str	r3, [sp, #20]
 800c8bc:	e7d5      	b.n	800c86a <__hexnan+0x3a>
 800c8be:	9b04      	ldr	r3, [sp, #16]
 800c8c0:	2b29      	cmp	r3, #41	; 0x29
 800c8c2:	d158      	bne.n	800c976 <__hexnan+0x146>
 800c8c4:	9b05      	ldr	r3, [sp, #20]
 800c8c6:	9a08      	ldr	r2, [sp, #32]
 800c8c8:	3302      	adds	r3, #2
 800c8ca:	6013      	str	r3, [r2, #0]
 800c8cc:	9b03      	ldr	r3, [sp, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d051      	beq.n	800c976 <__hexnan+0x146>
 800c8d2:	42bc      	cmp	r4, r7
 800c8d4:	d206      	bcs.n	800c8e4 <__hexnan+0xb4>
 800c8d6:	2d07      	cmp	r5, #7
 800c8d8:	dc04      	bgt.n	800c8e4 <__hexnan+0xb4>
 800c8da:	002a      	movs	r2, r5
 800c8dc:	0039      	movs	r1, r7
 800c8de:	0020      	movs	r0, r4
 800c8e0:	f7ff ff80 	bl	800c7e4 <L_shift>
 800c8e4:	9b01      	ldr	r3, [sp, #4]
 800c8e6:	429c      	cmp	r4, r3
 800c8e8:	d935      	bls.n	800c956 <__hexnan+0x126>
 800c8ea:	001a      	movs	r2, r3
 800c8ec:	0023      	movs	r3, r4
 800c8ee:	cb02      	ldmia	r3!, {r1}
 800c8f0:	c202      	stmia	r2!, {r1}
 800c8f2:	429e      	cmp	r6, r3
 800c8f4:	d2fb      	bcs.n	800c8ee <__hexnan+0xbe>
 800c8f6:	9b02      	ldr	r3, [sp, #8]
 800c8f8:	1c61      	adds	r1, r4, #1
 800c8fa:	1eda      	subs	r2, r3, #3
 800c8fc:	2304      	movs	r3, #4
 800c8fe:	4291      	cmp	r1, r2
 800c900:	d805      	bhi.n	800c90e <__hexnan+0xde>
 800c902:	9b02      	ldr	r3, [sp, #8]
 800c904:	3b04      	subs	r3, #4
 800c906:	1b1c      	subs	r4, r3, r4
 800c908:	08a4      	lsrs	r4, r4, #2
 800c90a:	3401      	adds	r4, #1
 800c90c:	00a3      	lsls	r3, r4, #2
 800c90e:	9a01      	ldr	r2, [sp, #4]
 800c910:	18d4      	adds	r4, r2, r3
 800c912:	2300      	movs	r3, #0
 800c914:	c408      	stmia	r4!, {r3}
 800c916:	42a6      	cmp	r6, r4
 800c918:	d2fc      	bcs.n	800c914 <__hexnan+0xe4>
 800c91a:	6833      	ldr	r3, [r6, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d104      	bne.n	800c92a <__hexnan+0xfa>
 800c920:	9b01      	ldr	r3, [sp, #4]
 800c922:	429e      	cmp	r6, r3
 800c924:	d125      	bne.n	800c972 <__hexnan+0x142>
 800c926:	2301      	movs	r3, #1
 800c928:	6033      	str	r3, [r6, #0]
 800c92a:	2005      	movs	r0, #5
 800c92c:	e024      	b.n	800c978 <__hexnan+0x148>
 800c92e:	9b03      	ldr	r3, [sp, #12]
 800c930:	3501      	adds	r5, #1
 800c932:	3301      	adds	r3, #1
 800c934:	9303      	str	r3, [sp, #12]
 800c936:	2d08      	cmp	r5, #8
 800c938:	dd06      	ble.n	800c948 <__hexnan+0x118>
 800c93a:	9b01      	ldr	r3, [sp, #4]
 800c93c:	429c      	cmp	r4, r3
 800c93e:	d9bb      	bls.n	800c8b8 <__hexnan+0x88>
 800c940:	2300      	movs	r3, #0
 800c942:	2501      	movs	r5, #1
 800c944:	3c04      	subs	r4, #4
 800c946:	6023      	str	r3, [r4, #0]
 800c948:	220f      	movs	r2, #15
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	4010      	ands	r0, r2
 800c94e:	011b      	lsls	r3, r3, #4
 800c950:	4318      	orrs	r0, r3
 800c952:	6020      	str	r0, [r4, #0]
 800c954:	e7b0      	b.n	800c8b8 <__hexnan+0x88>
 800c956:	9b06      	ldr	r3, [sp, #24]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d0de      	beq.n	800c91a <__hexnan+0xea>
 800c95c:	2220      	movs	r2, #32
 800c95e:	1ad2      	subs	r2, r2, r3
 800c960:	2301      	movs	r3, #1
 800c962:	425b      	negs	r3, r3
 800c964:	40d3      	lsrs	r3, r2
 800c966:	9c02      	ldr	r4, [sp, #8]
 800c968:	3c04      	subs	r4, #4
 800c96a:	6822      	ldr	r2, [r4, #0]
 800c96c:	4013      	ands	r3, r2
 800c96e:	6023      	str	r3, [r4, #0]
 800c970:	e7d3      	b.n	800c91a <__hexnan+0xea>
 800c972:	3e04      	subs	r6, #4
 800c974:	e7d1      	b.n	800c91a <__hexnan+0xea>
 800c976:	2004      	movs	r0, #4
 800c978:	b00b      	add	sp, #44	; 0x2c
 800c97a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c97c <_localeconv_r>:
 800c97c:	4800      	ldr	r0, [pc, #0]	; (800c980 <_localeconv_r+0x4>)
 800c97e:	4770      	bx	lr
 800c980:	20000164 	.word	0x20000164

0800c984 <malloc>:
 800c984:	b510      	push	{r4, lr}
 800c986:	4b03      	ldr	r3, [pc, #12]	; (800c994 <malloc+0x10>)
 800c988:	0001      	movs	r1, r0
 800c98a:	6818      	ldr	r0, [r3, #0]
 800c98c:	f000 fd4c 	bl	800d428 <_malloc_r>
 800c990:	bd10      	pop	{r4, pc}
 800c992:	46c0      	nop			; (mov r8, r8)
 800c994:	2000000c 	.word	0x2000000c

0800c998 <__ascii_mbtowc>:
 800c998:	b082      	sub	sp, #8
 800c99a:	2900      	cmp	r1, #0
 800c99c:	d100      	bne.n	800c9a0 <__ascii_mbtowc+0x8>
 800c99e:	a901      	add	r1, sp, #4
 800c9a0:	1e10      	subs	r0, r2, #0
 800c9a2:	d006      	beq.n	800c9b2 <__ascii_mbtowc+0x1a>
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d006      	beq.n	800c9b6 <__ascii_mbtowc+0x1e>
 800c9a8:	7813      	ldrb	r3, [r2, #0]
 800c9aa:	600b      	str	r3, [r1, #0]
 800c9ac:	7810      	ldrb	r0, [r2, #0]
 800c9ae:	1e43      	subs	r3, r0, #1
 800c9b0:	4198      	sbcs	r0, r3
 800c9b2:	b002      	add	sp, #8
 800c9b4:	4770      	bx	lr
 800c9b6:	2002      	movs	r0, #2
 800c9b8:	4240      	negs	r0, r0
 800c9ba:	e7fa      	b.n	800c9b2 <__ascii_mbtowc+0x1a>

0800c9bc <memchr>:
 800c9bc:	b2c9      	uxtb	r1, r1
 800c9be:	1882      	adds	r2, r0, r2
 800c9c0:	4290      	cmp	r0, r2
 800c9c2:	d101      	bne.n	800c9c8 <memchr+0xc>
 800c9c4:	2000      	movs	r0, #0
 800c9c6:	4770      	bx	lr
 800c9c8:	7803      	ldrb	r3, [r0, #0]
 800c9ca:	428b      	cmp	r3, r1
 800c9cc:	d0fb      	beq.n	800c9c6 <memchr+0xa>
 800c9ce:	3001      	adds	r0, #1
 800c9d0:	e7f6      	b.n	800c9c0 <memchr+0x4>

0800c9d2 <memcpy>:
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	b510      	push	{r4, lr}
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d100      	bne.n	800c9dc <memcpy+0xa>
 800c9da:	bd10      	pop	{r4, pc}
 800c9dc:	5ccc      	ldrb	r4, [r1, r3]
 800c9de:	54c4      	strb	r4, [r0, r3]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	e7f8      	b.n	800c9d6 <memcpy+0x4>

0800c9e4 <_Balloc>:
 800c9e4:	b570      	push	{r4, r5, r6, lr}
 800c9e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c9e8:	0006      	movs	r6, r0
 800c9ea:	000c      	movs	r4, r1
 800c9ec:	2d00      	cmp	r5, #0
 800c9ee:	d10e      	bne.n	800ca0e <_Balloc+0x2a>
 800c9f0:	2010      	movs	r0, #16
 800c9f2:	f7ff ffc7 	bl	800c984 <malloc>
 800c9f6:	1e02      	subs	r2, r0, #0
 800c9f8:	6270      	str	r0, [r6, #36]	; 0x24
 800c9fa:	d104      	bne.n	800ca06 <_Balloc+0x22>
 800c9fc:	2166      	movs	r1, #102	; 0x66
 800c9fe:	4b19      	ldr	r3, [pc, #100]	; (800ca64 <_Balloc+0x80>)
 800ca00:	4819      	ldr	r0, [pc, #100]	; (800ca68 <_Balloc+0x84>)
 800ca02:	f000 ff07 	bl	800d814 <__assert_func>
 800ca06:	6045      	str	r5, [r0, #4]
 800ca08:	6085      	str	r5, [r0, #8]
 800ca0a:	6005      	str	r5, [r0, #0]
 800ca0c:	60c5      	str	r5, [r0, #12]
 800ca0e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800ca10:	68eb      	ldr	r3, [r5, #12]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d013      	beq.n	800ca3e <_Balloc+0x5a>
 800ca16:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca18:	00a2      	lsls	r2, r4, #2
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	189b      	adds	r3, r3, r2
 800ca1e:	6818      	ldr	r0, [r3, #0]
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d118      	bne.n	800ca56 <_Balloc+0x72>
 800ca24:	2101      	movs	r1, #1
 800ca26:	000d      	movs	r5, r1
 800ca28:	40a5      	lsls	r5, r4
 800ca2a:	1d6a      	adds	r2, r5, #5
 800ca2c:	0030      	movs	r0, r6
 800ca2e:	0092      	lsls	r2, r2, #2
 800ca30:	f000 fca2 	bl	800d378 <_calloc_r>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d00c      	beq.n	800ca52 <_Balloc+0x6e>
 800ca38:	6044      	str	r4, [r0, #4]
 800ca3a:	6085      	str	r5, [r0, #8]
 800ca3c:	e00d      	b.n	800ca5a <_Balloc+0x76>
 800ca3e:	2221      	movs	r2, #33	; 0x21
 800ca40:	2104      	movs	r1, #4
 800ca42:	0030      	movs	r0, r6
 800ca44:	f000 fc98 	bl	800d378 <_calloc_r>
 800ca48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ca4a:	60e8      	str	r0, [r5, #12]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1e1      	bne.n	800ca16 <_Balloc+0x32>
 800ca52:	2000      	movs	r0, #0
 800ca54:	bd70      	pop	{r4, r5, r6, pc}
 800ca56:	6802      	ldr	r2, [r0, #0]
 800ca58:	601a      	str	r2, [r3, #0]
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	6103      	str	r3, [r0, #16]
 800ca5e:	60c3      	str	r3, [r0, #12]
 800ca60:	e7f8      	b.n	800ca54 <_Balloc+0x70>
 800ca62:	46c0      	nop			; (mov r8, r8)
 800ca64:	0800e82e 	.word	0x0800e82e
 800ca68:	0800e934 	.word	0x0800e934

0800ca6c <_Bfree>:
 800ca6c:	b570      	push	{r4, r5, r6, lr}
 800ca6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca70:	0005      	movs	r5, r0
 800ca72:	000c      	movs	r4, r1
 800ca74:	2e00      	cmp	r6, #0
 800ca76:	d10e      	bne.n	800ca96 <_Bfree+0x2a>
 800ca78:	2010      	movs	r0, #16
 800ca7a:	f7ff ff83 	bl	800c984 <malloc>
 800ca7e:	1e02      	subs	r2, r0, #0
 800ca80:	6268      	str	r0, [r5, #36]	; 0x24
 800ca82:	d104      	bne.n	800ca8e <_Bfree+0x22>
 800ca84:	218a      	movs	r1, #138	; 0x8a
 800ca86:	4b09      	ldr	r3, [pc, #36]	; (800caac <_Bfree+0x40>)
 800ca88:	4809      	ldr	r0, [pc, #36]	; (800cab0 <_Bfree+0x44>)
 800ca8a:	f000 fec3 	bl	800d814 <__assert_func>
 800ca8e:	6046      	str	r6, [r0, #4]
 800ca90:	6086      	str	r6, [r0, #8]
 800ca92:	6006      	str	r6, [r0, #0]
 800ca94:	60c6      	str	r6, [r0, #12]
 800ca96:	2c00      	cmp	r4, #0
 800ca98:	d007      	beq.n	800caaa <_Bfree+0x3e>
 800ca9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ca9c:	6862      	ldr	r2, [r4, #4]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	0092      	lsls	r2, r2, #2
 800caa2:	189b      	adds	r3, r3, r2
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	6022      	str	r2, [r4, #0]
 800caa8:	601c      	str	r4, [r3, #0]
 800caaa:	bd70      	pop	{r4, r5, r6, pc}
 800caac:	0800e82e 	.word	0x0800e82e
 800cab0:	0800e934 	.word	0x0800e934

0800cab4 <__multadd>:
 800cab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cab6:	000e      	movs	r6, r1
 800cab8:	9001      	str	r0, [sp, #4]
 800caba:	000c      	movs	r4, r1
 800cabc:	001d      	movs	r5, r3
 800cabe:	2000      	movs	r0, #0
 800cac0:	690f      	ldr	r7, [r1, #16]
 800cac2:	3614      	adds	r6, #20
 800cac4:	6833      	ldr	r3, [r6, #0]
 800cac6:	3001      	adds	r0, #1
 800cac8:	b299      	uxth	r1, r3
 800caca:	4351      	muls	r1, r2
 800cacc:	0c1b      	lsrs	r3, r3, #16
 800cace:	4353      	muls	r3, r2
 800cad0:	1949      	adds	r1, r1, r5
 800cad2:	0c0d      	lsrs	r5, r1, #16
 800cad4:	195b      	adds	r3, r3, r5
 800cad6:	0c1d      	lsrs	r5, r3, #16
 800cad8:	b289      	uxth	r1, r1
 800cada:	041b      	lsls	r3, r3, #16
 800cadc:	185b      	adds	r3, r3, r1
 800cade:	c608      	stmia	r6!, {r3}
 800cae0:	4287      	cmp	r7, r0
 800cae2:	dcef      	bgt.n	800cac4 <__multadd+0x10>
 800cae4:	2d00      	cmp	r5, #0
 800cae6:	d022      	beq.n	800cb2e <__multadd+0x7a>
 800cae8:	68a3      	ldr	r3, [r4, #8]
 800caea:	42bb      	cmp	r3, r7
 800caec:	dc19      	bgt.n	800cb22 <__multadd+0x6e>
 800caee:	6863      	ldr	r3, [r4, #4]
 800caf0:	9801      	ldr	r0, [sp, #4]
 800caf2:	1c59      	adds	r1, r3, #1
 800caf4:	f7ff ff76 	bl	800c9e4 <_Balloc>
 800caf8:	1e06      	subs	r6, r0, #0
 800cafa:	d105      	bne.n	800cb08 <__multadd+0x54>
 800cafc:	0002      	movs	r2, r0
 800cafe:	21b5      	movs	r1, #181	; 0xb5
 800cb00:	4b0c      	ldr	r3, [pc, #48]	; (800cb34 <__multadd+0x80>)
 800cb02:	480d      	ldr	r0, [pc, #52]	; (800cb38 <__multadd+0x84>)
 800cb04:	f000 fe86 	bl	800d814 <__assert_func>
 800cb08:	0021      	movs	r1, r4
 800cb0a:	6923      	ldr	r3, [r4, #16]
 800cb0c:	310c      	adds	r1, #12
 800cb0e:	1c9a      	adds	r2, r3, #2
 800cb10:	0092      	lsls	r2, r2, #2
 800cb12:	300c      	adds	r0, #12
 800cb14:	f7ff ff5d 	bl	800c9d2 <memcpy>
 800cb18:	0021      	movs	r1, r4
 800cb1a:	9801      	ldr	r0, [sp, #4]
 800cb1c:	f7ff ffa6 	bl	800ca6c <_Bfree>
 800cb20:	0034      	movs	r4, r6
 800cb22:	1d3b      	adds	r3, r7, #4
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	18e3      	adds	r3, r4, r3
 800cb28:	605d      	str	r5, [r3, #4]
 800cb2a:	1c7b      	adds	r3, r7, #1
 800cb2c:	6123      	str	r3, [r4, #16]
 800cb2e:	0020      	movs	r0, r4
 800cb30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cb32:	46c0      	nop			; (mov r8, r8)
 800cb34:	0800e8a4 	.word	0x0800e8a4
 800cb38:	0800e934 	.word	0x0800e934

0800cb3c <__s2b>:
 800cb3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb3e:	0006      	movs	r6, r0
 800cb40:	0018      	movs	r0, r3
 800cb42:	000c      	movs	r4, r1
 800cb44:	3008      	adds	r0, #8
 800cb46:	2109      	movs	r1, #9
 800cb48:	9301      	str	r3, [sp, #4]
 800cb4a:	0015      	movs	r5, r2
 800cb4c:	f7f3 fb8c 	bl	8000268 <__divsi3>
 800cb50:	2301      	movs	r3, #1
 800cb52:	2100      	movs	r1, #0
 800cb54:	4283      	cmp	r3, r0
 800cb56:	db0a      	blt.n	800cb6e <__s2b+0x32>
 800cb58:	0030      	movs	r0, r6
 800cb5a:	f7ff ff43 	bl	800c9e4 <_Balloc>
 800cb5e:	1e01      	subs	r1, r0, #0
 800cb60:	d108      	bne.n	800cb74 <__s2b+0x38>
 800cb62:	0002      	movs	r2, r0
 800cb64:	4b19      	ldr	r3, [pc, #100]	; (800cbcc <__s2b+0x90>)
 800cb66:	481a      	ldr	r0, [pc, #104]	; (800cbd0 <__s2b+0x94>)
 800cb68:	31ce      	adds	r1, #206	; 0xce
 800cb6a:	f000 fe53 	bl	800d814 <__assert_func>
 800cb6e:	005b      	lsls	r3, r3, #1
 800cb70:	3101      	adds	r1, #1
 800cb72:	e7ef      	b.n	800cb54 <__s2b+0x18>
 800cb74:	9b08      	ldr	r3, [sp, #32]
 800cb76:	6143      	str	r3, [r0, #20]
 800cb78:	2301      	movs	r3, #1
 800cb7a:	6103      	str	r3, [r0, #16]
 800cb7c:	2d09      	cmp	r5, #9
 800cb7e:	dd18      	ble.n	800cbb2 <__s2b+0x76>
 800cb80:	0023      	movs	r3, r4
 800cb82:	3309      	adds	r3, #9
 800cb84:	001f      	movs	r7, r3
 800cb86:	9300      	str	r3, [sp, #0]
 800cb88:	1964      	adds	r4, r4, r5
 800cb8a:	783b      	ldrb	r3, [r7, #0]
 800cb8c:	220a      	movs	r2, #10
 800cb8e:	0030      	movs	r0, r6
 800cb90:	3b30      	subs	r3, #48	; 0x30
 800cb92:	f7ff ff8f 	bl	800cab4 <__multadd>
 800cb96:	3701      	adds	r7, #1
 800cb98:	0001      	movs	r1, r0
 800cb9a:	42a7      	cmp	r7, r4
 800cb9c:	d1f5      	bne.n	800cb8a <__s2b+0x4e>
 800cb9e:	002c      	movs	r4, r5
 800cba0:	9b00      	ldr	r3, [sp, #0]
 800cba2:	3c08      	subs	r4, #8
 800cba4:	191c      	adds	r4, r3, r4
 800cba6:	002f      	movs	r7, r5
 800cba8:	9b01      	ldr	r3, [sp, #4]
 800cbaa:	429f      	cmp	r7, r3
 800cbac:	db04      	blt.n	800cbb8 <__s2b+0x7c>
 800cbae:	0008      	movs	r0, r1
 800cbb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cbb2:	2509      	movs	r5, #9
 800cbb4:	340a      	adds	r4, #10
 800cbb6:	e7f6      	b.n	800cba6 <__s2b+0x6a>
 800cbb8:	1b63      	subs	r3, r4, r5
 800cbba:	5ddb      	ldrb	r3, [r3, r7]
 800cbbc:	220a      	movs	r2, #10
 800cbbe:	0030      	movs	r0, r6
 800cbc0:	3b30      	subs	r3, #48	; 0x30
 800cbc2:	f7ff ff77 	bl	800cab4 <__multadd>
 800cbc6:	3701      	adds	r7, #1
 800cbc8:	0001      	movs	r1, r0
 800cbca:	e7ed      	b.n	800cba8 <__s2b+0x6c>
 800cbcc:	0800e8a4 	.word	0x0800e8a4
 800cbd0:	0800e934 	.word	0x0800e934

0800cbd4 <__hi0bits>:
 800cbd4:	0003      	movs	r3, r0
 800cbd6:	0c02      	lsrs	r2, r0, #16
 800cbd8:	2000      	movs	r0, #0
 800cbda:	4282      	cmp	r2, r0
 800cbdc:	d101      	bne.n	800cbe2 <__hi0bits+0xe>
 800cbde:	041b      	lsls	r3, r3, #16
 800cbe0:	3010      	adds	r0, #16
 800cbe2:	0e1a      	lsrs	r2, r3, #24
 800cbe4:	d101      	bne.n	800cbea <__hi0bits+0x16>
 800cbe6:	3008      	adds	r0, #8
 800cbe8:	021b      	lsls	r3, r3, #8
 800cbea:	0f1a      	lsrs	r2, r3, #28
 800cbec:	d101      	bne.n	800cbf2 <__hi0bits+0x1e>
 800cbee:	3004      	adds	r0, #4
 800cbf0:	011b      	lsls	r3, r3, #4
 800cbf2:	0f9a      	lsrs	r2, r3, #30
 800cbf4:	d101      	bne.n	800cbfa <__hi0bits+0x26>
 800cbf6:	3002      	adds	r0, #2
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	db03      	blt.n	800cc06 <__hi0bits+0x32>
 800cbfe:	3001      	adds	r0, #1
 800cc00:	005b      	lsls	r3, r3, #1
 800cc02:	d400      	bmi.n	800cc06 <__hi0bits+0x32>
 800cc04:	2020      	movs	r0, #32
 800cc06:	4770      	bx	lr

0800cc08 <__lo0bits>:
 800cc08:	6803      	ldr	r3, [r0, #0]
 800cc0a:	0002      	movs	r2, r0
 800cc0c:	2107      	movs	r1, #7
 800cc0e:	0018      	movs	r0, r3
 800cc10:	4008      	ands	r0, r1
 800cc12:	420b      	tst	r3, r1
 800cc14:	d00d      	beq.n	800cc32 <__lo0bits+0x2a>
 800cc16:	3906      	subs	r1, #6
 800cc18:	2000      	movs	r0, #0
 800cc1a:	420b      	tst	r3, r1
 800cc1c:	d105      	bne.n	800cc2a <__lo0bits+0x22>
 800cc1e:	3002      	adds	r0, #2
 800cc20:	4203      	tst	r3, r0
 800cc22:	d003      	beq.n	800cc2c <__lo0bits+0x24>
 800cc24:	40cb      	lsrs	r3, r1
 800cc26:	0008      	movs	r0, r1
 800cc28:	6013      	str	r3, [r2, #0]
 800cc2a:	4770      	bx	lr
 800cc2c:	089b      	lsrs	r3, r3, #2
 800cc2e:	6013      	str	r3, [r2, #0]
 800cc30:	e7fb      	b.n	800cc2a <__lo0bits+0x22>
 800cc32:	b299      	uxth	r1, r3
 800cc34:	2900      	cmp	r1, #0
 800cc36:	d101      	bne.n	800cc3c <__lo0bits+0x34>
 800cc38:	2010      	movs	r0, #16
 800cc3a:	0c1b      	lsrs	r3, r3, #16
 800cc3c:	b2d9      	uxtb	r1, r3
 800cc3e:	2900      	cmp	r1, #0
 800cc40:	d101      	bne.n	800cc46 <__lo0bits+0x3e>
 800cc42:	3008      	adds	r0, #8
 800cc44:	0a1b      	lsrs	r3, r3, #8
 800cc46:	0719      	lsls	r1, r3, #28
 800cc48:	d101      	bne.n	800cc4e <__lo0bits+0x46>
 800cc4a:	3004      	adds	r0, #4
 800cc4c:	091b      	lsrs	r3, r3, #4
 800cc4e:	0799      	lsls	r1, r3, #30
 800cc50:	d101      	bne.n	800cc56 <__lo0bits+0x4e>
 800cc52:	3002      	adds	r0, #2
 800cc54:	089b      	lsrs	r3, r3, #2
 800cc56:	07d9      	lsls	r1, r3, #31
 800cc58:	d4e9      	bmi.n	800cc2e <__lo0bits+0x26>
 800cc5a:	3001      	adds	r0, #1
 800cc5c:	085b      	lsrs	r3, r3, #1
 800cc5e:	d1e6      	bne.n	800cc2e <__lo0bits+0x26>
 800cc60:	2020      	movs	r0, #32
 800cc62:	e7e2      	b.n	800cc2a <__lo0bits+0x22>

0800cc64 <__i2b>:
 800cc64:	b510      	push	{r4, lr}
 800cc66:	000c      	movs	r4, r1
 800cc68:	2101      	movs	r1, #1
 800cc6a:	f7ff febb 	bl	800c9e4 <_Balloc>
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	d106      	bne.n	800cc80 <__i2b+0x1c>
 800cc72:	21a0      	movs	r1, #160	; 0xa0
 800cc74:	0002      	movs	r2, r0
 800cc76:	4b04      	ldr	r3, [pc, #16]	; (800cc88 <__i2b+0x24>)
 800cc78:	4804      	ldr	r0, [pc, #16]	; (800cc8c <__i2b+0x28>)
 800cc7a:	0049      	lsls	r1, r1, #1
 800cc7c:	f000 fdca 	bl	800d814 <__assert_func>
 800cc80:	2301      	movs	r3, #1
 800cc82:	6144      	str	r4, [r0, #20]
 800cc84:	6103      	str	r3, [r0, #16]
 800cc86:	bd10      	pop	{r4, pc}
 800cc88:	0800e8a4 	.word	0x0800e8a4
 800cc8c:	0800e934 	.word	0x0800e934

0800cc90 <__multiply>:
 800cc90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc92:	690b      	ldr	r3, [r1, #16]
 800cc94:	0014      	movs	r4, r2
 800cc96:	6912      	ldr	r2, [r2, #16]
 800cc98:	000d      	movs	r5, r1
 800cc9a:	b089      	sub	sp, #36	; 0x24
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	da01      	bge.n	800cca4 <__multiply+0x14>
 800cca0:	0025      	movs	r5, r4
 800cca2:	000c      	movs	r4, r1
 800cca4:	692f      	ldr	r7, [r5, #16]
 800cca6:	6926      	ldr	r6, [r4, #16]
 800cca8:	6869      	ldr	r1, [r5, #4]
 800ccaa:	19bb      	adds	r3, r7, r6
 800ccac:	9302      	str	r3, [sp, #8]
 800ccae:	68ab      	ldr	r3, [r5, #8]
 800ccb0:	19ba      	adds	r2, r7, r6
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	da00      	bge.n	800ccb8 <__multiply+0x28>
 800ccb6:	3101      	adds	r1, #1
 800ccb8:	f7ff fe94 	bl	800c9e4 <_Balloc>
 800ccbc:	9001      	str	r0, [sp, #4]
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	d106      	bne.n	800ccd0 <__multiply+0x40>
 800ccc2:	215e      	movs	r1, #94	; 0x5e
 800ccc4:	0002      	movs	r2, r0
 800ccc6:	4b48      	ldr	r3, [pc, #288]	; (800cde8 <__multiply+0x158>)
 800ccc8:	4848      	ldr	r0, [pc, #288]	; (800cdec <__multiply+0x15c>)
 800ccca:	31ff      	adds	r1, #255	; 0xff
 800cccc:	f000 fda2 	bl	800d814 <__assert_func>
 800ccd0:	9b01      	ldr	r3, [sp, #4]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	3314      	adds	r3, #20
 800ccd6:	469c      	mov	ip, r3
 800ccd8:	19bb      	adds	r3, r7, r6
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4463      	add	r3, ip
 800ccde:	9303      	str	r3, [sp, #12]
 800cce0:	4663      	mov	r3, ip
 800cce2:	9903      	ldr	r1, [sp, #12]
 800cce4:	428b      	cmp	r3, r1
 800cce6:	d32c      	bcc.n	800cd42 <__multiply+0xb2>
 800cce8:	002b      	movs	r3, r5
 800ccea:	0022      	movs	r2, r4
 800ccec:	3314      	adds	r3, #20
 800ccee:	00bf      	lsls	r7, r7, #2
 800ccf0:	3214      	adds	r2, #20
 800ccf2:	9306      	str	r3, [sp, #24]
 800ccf4:	00b6      	lsls	r6, r6, #2
 800ccf6:	19db      	adds	r3, r3, r7
 800ccf8:	9304      	str	r3, [sp, #16]
 800ccfa:	1993      	adds	r3, r2, r6
 800ccfc:	9307      	str	r3, [sp, #28]
 800ccfe:	2304      	movs	r3, #4
 800cd00:	9305      	str	r3, [sp, #20]
 800cd02:	002b      	movs	r3, r5
 800cd04:	9904      	ldr	r1, [sp, #16]
 800cd06:	3315      	adds	r3, #21
 800cd08:	9200      	str	r2, [sp, #0]
 800cd0a:	4299      	cmp	r1, r3
 800cd0c:	d305      	bcc.n	800cd1a <__multiply+0x8a>
 800cd0e:	1b4b      	subs	r3, r1, r5
 800cd10:	3b15      	subs	r3, #21
 800cd12:	089b      	lsrs	r3, r3, #2
 800cd14:	3301      	adds	r3, #1
 800cd16:	009b      	lsls	r3, r3, #2
 800cd18:	9305      	str	r3, [sp, #20]
 800cd1a:	9b07      	ldr	r3, [sp, #28]
 800cd1c:	9a00      	ldr	r2, [sp, #0]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d311      	bcc.n	800cd46 <__multiply+0xb6>
 800cd22:	9b02      	ldr	r3, [sp, #8]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	dd06      	ble.n	800cd36 <__multiply+0xa6>
 800cd28:	9b03      	ldr	r3, [sp, #12]
 800cd2a:	3b04      	subs	r3, #4
 800cd2c:	9303      	str	r3, [sp, #12]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d054      	beq.n	800cde0 <__multiply+0x150>
 800cd36:	9b01      	ldr	r3, [sp, #4]
 800cd38:	9a02      	ldr	r2, [sp, #8]
 800cd3a:	0018      	movs	r0, r3
 800cd3c:	611a      	str	r2, [r3, #16]
 800cd3e:	b009      	add	sp, #36	; 0x24
 800cd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd42:	c304      	stmia	r3!, {r2}
 800cd44:	e7cd      	b.n	800cce2 <__multiply+0x52>
 800cd46:	9b00      	ldr	r3, [sp, #0]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	b298      	uxth	r0, r3
 800cd4c:	2800      	cmp	r0, #0
 800cd4e:	d01c      	beq.n	800cd8a <__multiply+0xfa>
 800cd50:	4667      	mov	r7, ip
 800cd52:	2400      	movs	r4, #0
 800cd54:	9e06      	ldr	r6, [sp, #24]
 800cd56:	ce02      	ldmia	r6!, {r1}
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	b28b      	uxth	r3, r1
 800cd5c:	4343      	muls	r3, r0
 800cd5e:	0c09      	lsrs	r1, r1, #16
 800cd60:	4341      	muls	r1, r0
 800cd62:	b292      	uxth	r2, r2
 800cd64:	189b      	adds	r3, r3, r2
 800cd66:	191b      	adds	r3, r3, r4
 800cd68:	000c      	movs	r4, r1
 800cd6a:	683a      	ldr	r2, [r7, #0]
 800cd6c:	0c11      	lsrs	r1, r2, #16
 800cd6e:	1861      	adds	r1, r4, r1
 800cd70:	0c1c      	lsrs	r4, r3, #16
 800cd72:	1909      	adds	r1, r1, r4
 800cd74:	0c0c      	lsrs	r4, r1, #16
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	0409      	lsls	r1, r1, #16
 800cd7a:	430b      	orrs	r3, r1
 800cd7c:	c708      	stmia	r7!, {r3}
 800cd7e:	9b04      	ldr	r3, [sp, #16]
 800cd80:	42b3      	cmp	r3, r6
 800cd82:	d8e8      	bhi.n	800cd56 <__multiply+0xc6>
 800cd84:	4663      	mov	r3, ip
 800cd86:	9a05      	ldr	r2, [sp, #20]
 800cd88:	509c      	str	r4, [r3, r2]
 800cd8a:	9b00      	ldr	r3, [sp, #0]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	0c1e      	lsrs	r6, r3, #16
 800cd90:	d020      	beq.n	800cdd4 <__multiply+0x144>
 800cd92:	4663      	mov	r3, ip
 800cd94:	002c      	movs	r4, r5
 800cd96:	4660      	mov	r0, ip
 800cd98:	2700      	movs	r7, #0
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	3414      	adds	r4, #20
 800cd9e:	6822      	ldr	r2, [r4, #0]
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	b291      	uxth	r1, r2
 800cda4:	4371      	muls	r1, r6
 800cda6:	6802      	ldr	r2, [r0, #0]
 800cda8:	0c12      	lsrs	r2, r2, #16
 800cdaa:	1889      	adds	r1, r1, r2
 800cdac:	19cf      	adds	r7, r1, r7
 800cdae:	0439      	lsls	r1, r7, #16
 800cdb0:	430b      	orrs	r3, r1
 800cdb2:	6003      	str	r3, [r0, #0]
 800cdb4:	cc02      	ldmia	r4!, {r1}
 800cdb6:	6843      	ldr	r3, [r0, #4]
 800cdb8:	0c09      	lsrs	r1, r1, #16
 800cdba:	4371      	muls	r1, r6
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	0c3f      	lsrs	r7, r7, #16
 800cdc0:	18cb      	adds	r3, r1, r3
 800cdc2:	9a04      	ldr	r2, [sp, #16]
 800cdc4:	19db      	adds	r3, r3, r7
 800cdc6:	0c1f      	lsrs	r7, r3, #16
 800cdc8:	3004      	adds	r0, #4
 800cdca:	42a2      	cmp	r2, r4
 800cdcc:	d8e7      	bhi.n	800cd9e <__multiply+0x10e>
 800cdce:	4662      	mov	r2, ip
 800cdd0:	9905      	ldr	r1, [sp, #20]
 800cdd2:	5053      	str	r3, [r2, r1]
 800cdd4:	9b00      	ldr	r3, [sp, #0]
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	2304      	movs	r3, #4
 800cddc:	449c      	add	ip, r3
 800cdde:	e79c      	b.n	800cd1a <__multiply+0x8a>
 800cde0:	9b02      	ldr	r3, [sp, #8]
 800cde2:	3b01      	subs	r3, #1
 800cde4:	9302      	str	r3, [sp, #8]
 800cde6:	e79c      	b.n	800cd22 <__multiply+0x92>
 800cde8:	0800e8a4 	.word	0x0800e8a4
 800cdec:	0800e934 	.word	0x0800e934

0800cdf0 <__pow5mult>:
 800cdf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdf2:	2303      	movs	r3, #3
 800cdf4:	0015      	movs	r5, r2
 800cdf6:	0007      	movs	r7, r0
 800cdf8:	000e      	movs	r6, r1
 800cdfa:	401a      	ands	r2, r3
 800cdfc:	421d      	tst	r5, r3
 800cdfe:	d008      	beq.n	800ce12 <__pow5mult+0x22>
 800ce00:	4925      	ldr	r1, [pc, #148]	; (800ce98 <__pow5mult+0xa8>)
 800ce02:	3a01      	subs	r2, #1
 800ce04:	0092      	lsls	r2, r2, #2
 800ce06:	5852      	ldr	r2, [r2, r1]
 800ce08:	2300      	movs	r3, #0
 800ce0a:	0031      	movs	r1, r6
 800ce0c:	f7ff fe52 	bl	800cab4 <__multadd>
 800ce10:	0006      	movs	r6, r0
 800ce12:	10ad      	asrs	r5, r5, #2
 800ce14:	d03d      	beq.n	800ce92 <__pow5mult+0xa2>
 800ce16:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ce18:	2c00      	cmp	r4, #0
 800ce1a:	d10f      	bne.n	800ce3c <__pow5mult+0x4c>
 800ce1c:	2010      	movs	r0, #16
 800ce1e:	f7ff fdb1 	bl	800c984 <malloc>
 800ce22:	1e02      	subs	r2, r0, #0
 800ce24:	6278      	str	r0, [r7, #36]	; 0x24
 800ce26:	d105      	bne.n	800ce34 <__pow5mult+0x44>
 800ce28:	21d7      	movs	r1, #215	; 0xd7
 800ce2a:	4b1c      	ldr	r3, [pc, #112]	; (800ce9c <__pow5mult+0xac>)
 800ce2c:	481c      	ldr	r0, [pc, #112]	; (800cea0 <__pow5mult+0xb0>)
 800ce2e:	0049      	lsls	r1, r1, #1
 800ce30:	f000 fcf0 	bl	800d814 <__assert_func>
 800ce34:	6044      	str	r4, [r0, #4]
 800ce36:	6084      	str	r4, [r0, #8]
 800ce38:	6004      	str	r4, [r0, #0]
 800ce3a:	60c4      	str	r4, [r0, #12]
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3e:	689c      	ldr	r4, [r3, #8]
 800ce40:	9301      	str	r3, [sp, #4]
 800ce42:	2c00      	cmp	r4, #0
 800ce44:	d108      	bne.n	800ce58 <__pow5mult+0x68>
 800ce46:	0038      	movs	r0, r7
 800ce48:	4916      	ldr	r1, [pc, #88]	; (800cea4 <__pow5mult+0xb4>)
 800ce4a:	f7ff ff0b 	bl	800cc64 <__i2b>
 800ce4e:	9b01      	ldr	r3, [sp, #4]
 800ce50:	0004      	movs	r4, r0
 800ce52:	6098      	str	r0, [r3, #8]
 800ce54:	2300      	movs	r3, #0
 800ce56:	6003      	str	r3, [r0, #0]
 800ce58:	2301      	movs	r3, #1
 800ce5a:	421d      	tst	r5, r3
 800ce5c:	d00a      	beq.n	800ce74 <__pow5mult+0x84>
 800ce5e:	0031      	movs	r1, r6
 800ce60:	0022      	movs	r2, r4
 800ce62:	0038      	movs	r0, r7
 800ce64:	f7ff ff14 	bl	800cc90 <__multiply>
 800ce68:	0031      	movs	r1, r6
 800ce6a:	9001      	str	r0, [sp, #4]
 800ce6c:	0038      	movs	r0, r7
 800ce6e:	f7ff fdfd 	bl	800ca6c <_Bfree>
 800ce72:	9e01      	ldr	r6, [sp, #4]
 800ce74:	106d      	asrs	r5, r5, #1
 800ce76:	d00c      	beq.n	800ce92 <__pow5mult+0xa2>
 800ce78:	6820      	ldr	r0, [r4, #0]
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d107      	bne.n	800ce8e <__pow5mult+0x9e>
 800ce7e:	0022      	movs	r2, r4
 800ce80:	0021      	movs	r1, r4
 800ce82:	0038      	movs	r0, r7
 800ce84:	f7ff ff04 	bl	800cc90 <__multiply>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	6020      	str	r0, [r4, #0]
 800ce8c:	6003      	str	r3, [r0, #0]
 800ce8e:	0004      	movs	r4, r0
 800ce90:	e7e2      	b.n	800ce58 <__pow5mult+0x68>
 800ce92:	0030      	movs	r0, r6
 800ce94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ce96:	46c0      	nop			; (mov r8, r8)
 800ce98:	0800ea88 	.word	0x0800ea88
 800ce9c:	0800e82e 	.word	0x0800e82e
 800cea0:	0800e934 	.word	0x0800e934
 800cea4:	00000271 	.word	0x00000271

0800cea8 <__lshift>:
 800cea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ceaa:	000c      	movs	r4, r1
 800ceac:	0017      	movs	r7, r2
 800ceae:	6923      	ldr	r3, [r4, #16]
 800ceb0:	1155      	asrs	r5, r2, #5
 800ceb2:	b087      	sub	sp, #28
 800ceb4:	18eb      	adds	r3, r5, r3
 800ceb6:	9302      	str	r3, [sp, #8]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	9301      	str	r3, [sp, #4]
 800cebc:	6849      	ldr	r1, [r1, #4]
 800cebe:	68a3      	ldr	r3, [r4, #8]
 800cec0:	9004      	str	r0, [sp, #16]
 800cec2:	9a01      	ldr	r2, [sp, #4]
 800cec4:	4293      	cmp	r3, r2
 800cec6:	db11      	blt.n	800ceec <__lshift+0x44>
 800cec8:	9804      	ldr	r0, [sp, #16]
 800ceca:	f7ff fd8b 	bl	800c9e4 <_Balloc>
 800cece:	0002      	movs	r2, r0
 800ced0:	2300      	movs	r3, #0
 800ced2:	3214      	adds	r2, #20
 800ced4:	0006      	movs	r6, r0
 800ced6:	0011      	movs	r1, r2
 800ced8:	9203      	str	r2, [sp, #12]
 800ceda:	4298      	cmp	r0, r3
 800cedc:	d10d      	bne.n	800cefa <__lshift+0x52>
 800cede:	21da      	movs	r1, #218	; 0xda
 800cee0:	0002      	movs	r2, r0
 800cee2:	4b27      	ldr	r3, [pc, #156]	; (800cf80 <__lshift+0xd8>)
 800cee4:	4827      	ldr	r0, [pc, #156]	; (800cf84 <__lshift+0xdc>)
 800cee6:	31ff      	adds	r1, #255	; 0xff
 800cee8:	f000 fc94 	bl	800d814 <__assert_func>
 800ceec:	3101      	adds	r1, #1
 800ceee:	005b      	lsls	r3, r3, #1
 800cef0:	e7e7      	b.n	800cec2 <__lshift+0x1a>
 800cef2:	2200      	movs	r2, #0
 800cef4:	0098      	lsls	r0, r3, #2
 800cef6:	500a      	str	r2, [r1, r0]
 800cef8:	3301      	adds	r3, #1
 800cefa:	42ab      	cmp	r3, r5
 800cefc:	dbf9      	blt.n	800cef2 <__lshift+0x4a>
 800cefe:	43eb      	mvns	r3, r5
 800cf00:	17db      	asrs	r3, r3, #31
 800cf02:	401d      	ands	r5, r3
 800cf04:	9b03      	ldr	r3, [sp, #12]
 800cf06:	00ad      	lsls	r5, r5, #2
 800cf08:	211f      	movs	r1, #31
 800cf0a:	0038      	movs	r0, r7
 800cf0c:	195d      	adds	r5, r3, r5
 800cf0e:	0023      	movs	r3, r4
 800cf10:	6922      	ldr	r2, [r4, #16]
 800cf12:	3314      	adds	r3, #20
 800cf14:	0092      	lsls	r2, r2, #2
 800cf16:	4008      	ands	r0, r1
 800cf18:	4684      	mov	ip, r0
 800cf1a:	189a      	adds	r2, r3, r2
 800cf1c:	420f      	tst	r7, r1
 800cf1e:	d02a      	beq.n	800cf76 <__lshift+0xce>
 800cf20:	3101      	adds	r1, #1
 800cf22:	1a09      	subs	r1, r1, r0
 800cf24:	9105      	str	r1, [sp, #20]
 800cf26:	2100      	movs	r1, #0
 800cf28:	9503      	str	r5, [sp, #12]
 800cf2a:	4667      	mov	r7, ip
 800cf2c:	6818      	ldr	r0, [r3, #0]
 800cf2e:	40b8      	lsls	r0, r7
 800cf30:	4301      	orrs	r1, r0
 800cf32:	9803      	ldr	r0, [sp, #12]
 800cf34:	c002      	stmia	r0!, {r1}
 800cf36:	cb02      	ldmia	r3!, {r1}
 800cf38:	9003      	str	r0, [sp, #12]
 800cf3a:	9805      	ldr	r0, [sp, #20]
 800cf3c:	40c1      	lsrs	r1, r0
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d8f3      	bhi.n	800cf2a <__lshift+0x82>
 800cf42:	0020      	movs	r0, r4
 800cf44:	3015      	adds	r0, #21
 800cf46:	2304      	movs	r3, #4
 800cf48:	4282      	cmp	r2, r0
 800cf4a:	d304      	bcc.n	800cf56 <__lshift+0xae>
 800cf4c:	1b13      	subs	r3, r2, r4
 800cf4e:	3b15      	subs	r3, #21
 800cf50:	089b      	lsrs	r3, r3, #2
 800cf52:	3301      	adds	r3, #1
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	50e9      	str	r1, [r5, r3]
 800cf58:	2900      	cmp	r1, #0
 800cf5a:	d002      	beq.n	800cf62 <__lshift+0xba>
 800cf5c:	9b02      	ldr	r3, [sp, #8]
 800cf5e:	3302      	adds	r3, #2
 800cf60:	9301      	str	r3, [sp, #4]
 800cf62:	9b01      	ldr	r3, [sp, #4]
 800cf64:	9804      	ldr	r0, [sp, #16]
 800cf66:	3b01      	subs	r3, #1
 800cf68:	0021      	movs	r1, r4
 800cf6a:	6133      	str	r3, [r6, #16]
 800cf6c:	f7ff fd7e 	bl	800ca6c <_Bfree>
 800cf70:	0030      	movs	r0, r6
 800cf72:	b007      	add	sp, #28
 800cf74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf76:	cb02      	ldmia	r3!, {r1}
 800cf78:	c502      	stmia	r5!, {r1}
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d8fb      	bhi.n	800cf76 <__lshift+0xce>
 800cf7e:	e7f0      	b.n	800cf62 <__lshift+0xba>
 800cf80:	0800e8a4 	.word	0x0800e8a4
 800cf84:	0800e934 	.word	0x0800e934

0800cf88 <__mcmp>:
 800cf88:	6902      	ldr	r2, [r0, #16]
 800cf8a:	690b      	ldr	r3, [r1, #16]
 800cf8c:	b530      	push	{r4, r5, lr}
 800cf8e:	0004      	movs	r4, r0
 800cf90:	1ad0      	subs	r0, r2, r3
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d10d      	bne.n	800cfb2 <__mcmp+0x2a>
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	3414      	adds	r4, #20
 800cf9a:	3114      	adds	r1, #20
 800cf9c:	18e2      	adds	r2, r4, r3
 800cf9e:	18c9      	adds	r1, r1, r3
 800cfa0:	3a04      	subs	r2, #4
 800cfa2:	3904      	subs	r1, #4
 800cfa4:	6815      	ldr	r5, [r2, #0]
 800cfa6:	680b      	ldr	r3, [r1, #0]
 800cfa8:	429d      	cmp	r5, r3
 800cfaa:	d003      	beq.n	800cfb4 <__mcmp+0x2c>
 800cfac:	2001      	movs	r0, #1
 800cfae:	429d      	cmp	r5, r3
 800cfb0:	d303      	bcc.n	800cfba <__mcmp+0x32>
 800cfb2:	bd30      	pop	{r4, r5, pc}
 800cfb4:	4294      	cmp	r4, r2
 800cfb6:	d3f3      	bcc.n	800cfa0 <__mcmp+0x18>
 800cfb8:	e7fb      	b.n	800cfb2 <__mcmp+0x2a>
 800cfba:	4240      	negs	r0, r0
 800cfbc:	e7f9      	b.n	800cfb2 <__mcmp+0x2a>
	...

0800cfc0 <__mdiff>:
 800cfc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cfc2:	000e      	movs	r6, r1
 800cfc4:	0007      	movs	r7, r0
 800cfc6:	0011      	movs	r1, r2
 800cfc8:	0030      	movs	r0, r6
 800cfca:	b087      	sub	sp, #28
 800cfcc:	0014      	movs	r4, r2
 800cfce:	f7ff ffdb 	bl	800cf88 <__mcmp>
 800cfd2:	1e05      	subs	r5, r0, #0
 800cfd4:	d110      	bne.n	800cff8 <__mdiff+0x38>
 800cfd6:	0001      	movs	r1, r0
 800cfd8:	0038      	movs	r0, r7
 800cfda:	f7ff fd03 	bl	800c9e4 <_Balloc>
 800cfde:	1e02      	subs	r2, r0, #0
 800cfe0:	d104      	bne.n	800cfec <__mdiff+0x2c>
 800cfe2:	4b40      	ldr	r3, [pc, #256]	; (800d0e4 <__mdiff+0x124>)
 800cfe4:	4940      	ldr	r1, [pc, #256]	; (800d0e8 <__mdiff+0x128>)
 800cfe6:	4841      	ldr	r0, [pc, #260]	; (800d0ec <__mdiff+0x12c>)
 800cfe8:	f000 fc14 	bl	800d814 <__assert_func>
 800cfec:	2301      	movs	r3, #1
 800cfee:	6145      	str	r5, [r0, #20]
 800cff0:	6103      	str	r3, [r0, #16]
 800cff2:	0010      	movs	r0, r2
 800cff4:	b007      	add	sp, #28
 800cff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cff8:	2301      	movs	r3, #1
 800cffa:	9301      	str	r3, [sp, #4]
 800cffc:	2800      	cmp	r0, #0
 800cffe:	db04      	blt.n	800d00a <__mdiff+0x4a>
 800d000:	0023      	movs	r3, r4
 800d002:	0034      	movs	r4, r6
 800d004:	001e      	movs	r6, r3
 800d006:	2300      	movs	r3, #0
 800d008:	9301      	str	r3, [sp, #4]
 800d00a:	0038      	movs	r0, r7
 800d00c:	6861      	ldr	r1, [r4, #4]
 800d00e:	f7ff fce9 	bl	800c9e4 <_Balloc>
 800d012:	1e02      	subs	r2, r0, #0
 800d014:	d103      	bne.n	800d01e <__mdiff+0x5e>
 800d016:	2190      	movs	r1, #144	; 0x90
 800d018:	4b32      	ldr	r3, [pc, #200]	; (800d0e4 <__mdiff+0x124>)
 800d01a:	0089      	lsls	r1, r1, #2
 800d01c:	e7e3      	b.n	800cfe6 <__mdiff+0x26>
 800d01e:	9b01      	ldr	r3, [sp, #4]
 800d020:	2700      	movs	r7, #0
 800d022:	60c3      	str	r3, [r0, #12]
 800d024:	6920      	ldr	r0, [r4, #16]
 800d026:	3414      	adds	r4, #20
 800d028:	9401      	str	r4, [sp, #4]
 800d02a:	9b01      	ldr	r3, [sp, #4]
 800d02c:	0084      	lsls	r4, r0, #2
 800d02e:	191b      	adds	r3, r3, r4
 800d030:	0034      	movs	r4, r6
 800d032:	9302      	str	r3, [sp, #8]
 800d034:	6933      	ldr	r3, [r6, #16]
 800d036:	3414      	adds	r4, #20
 800d038:	0099      	lsls	r1, r3, #2
 800d03a:	1863      	adds	r3, r4, r1
 800d03c:	9303      	str	r3, [sp, #12]
 800d03e:	0013      	movs	r3, r2
 800d040:	3314      	adds	r3, #20
 800d042:	469c      	mov	ip, r3
 800d044:	9305      	str	r3, [sp, #20]
 800d046:	9b01      	ldr	r3, [sp, #4]
 800d048:	9304      	str	r3, [sp, #16]
 800d04a:	9b04      	ldr	r3, [sp, #16]
 800d04c:	cc02      	ldmia	r4!, {r1}
 800d04e:	cb20      	ldmia	r3!, {r5}
 800d050:	9304      	str	r3, [sp, #16]
 800d052:	b2ab      	uxth	r3, r5
 800d054:	19df      	adds	r7, r3, r7
 800d056:	b28b      	uxth	r3, r1
 800d058:	1afb      	subs	r3, r7, r3
 800d05a:	0c2d      	lsrs	r5, r5, #16
 800d05c:	0c09      	lsrs	r1, r1, #16
 800d05e:	1a69      	subs	r1, r5, r1
 800d060:	141d      	asrs	r5, r3, #16
 800d062:	1949      	adds	r1, r1, r5
 800d064:	140f      	asrs	r7, r1, #16
 800d066:	b29b      	uxth	r3, r3
 800d068:	0409      	lsls	r1, r1, #16
 800d06a:	430b      	orrs	r3, r1
 800d06c:	4661      	mov	r1, ip
 800d06e:	c108      	stmia	r1!, {r3}
 800d070:	9b03      	ldr	r3, [sp, #12]
 800d072:	468c      	mov	ip, r1
 800d074:	42a3      	cmp	r3, r4
 800d076:	d8e8      	bhi.n	800d04a <__mdiff+0x8a>
 800d078:	0031      	movs	r1, r6
 800d07a:	9c03      	ldr	r4, [sp, #12]
 800d07c:	3115      	adds	r1, #21
 800d07e:	2304      	movs	r3, #4
 800d080:	428c      	cmp	r4, r1
 800d082:	d304      	bcc.n	800d08e <__mdiff+0xce>
 800d084:	1ba3      	subs	r3, r4, r6
 800d086:	3b15      	subs	r3, #21
 800d088:	089b      	lsrs	r3, r3, #2
 800d08a:	3301      	adds	r3, #1
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	9901      	ldr	r1, [sp, #4]
 800d090:	18cc      	adds	r4, r1, r3
 800d092:	9905      	ldr	r1, [sp, #20]
 800d094:	0026      	movs	r6, r4
 800d096:	18cb      	adds	r3, r1, r3
 800d098:	469c      	mov	ip, r3
 800d09a:	9902      	ldr	r1, [sp, #8]
 800d09c:	428e      	cmp	r6, r1
 800d09e:	d310      	bcc.n	800d0c2 <__mdiff+0x102>
 800d0a0:	9e02      	ldr	r6, [sp, #8]
 800d0a2:	1ee5      	subs	r5, r4, #3
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	42ae      	cmp	r6, r5
 800d0a8:	d304      	bcc.n	800d0b4 <__mdiff+0xf4>
 800d0aa:	0031      	movs	r1, r6
 800d0ac:	3103      	adds	r1, #3
 800d0ae:	1b09      	subs	r1, r1, r4
 800d0b0:	0889      	lsrs	r1, r1, #2
 800d0b2:	0089      	lsls	r1, r1, #2
 800d0b4:	185b      	adds	r3, r3, r1
 800d0b6:	3b04      	subs	r3, #4
 800d0b8:	6819      	ldr	r1, [r3, #0]
 800d0ba:	2900      	cmp	r1, #0
 800d0bc:	d00f      	beq.n	800d0de <__mdiff+0x11e>
 800d0be:	6110      	str	r0, [r2, #16]
 800d0c0:	e797      	b.n	800cff2 <__mdiff+0x32>
 800d0c2:	ce02      	ldmia	r6!, {r1}
 800d0c4:	b28d      	uxth	r5, r1
 800d0c6:	19ed      	adds	r5, r5, r7
 800d0c8:	0c0f      	lsrs	r7, r1, #16
 800d0ca:	1429      	asrs	r1, r5, #16
 800d0cc:	1879      	adds	r1, r7, r1
 800d0ce:	140f      	asrs	r7, r1, #16
 800d0d0:	b2ad      	uxth	r5, r5
 800d0d2:	0409      	lsls	r1, r1, #16
 800d0d4:	430d      	orrs	r5, r1
 800d0d6:	4661      	mov	r1, ip
 800d0d8:	c120      	stmia	r1!, {r5}
 800d0da:	468c      	mov	ip, r1
 800d0dc:	e7dd      	b.n	800d09a <__mdiff+0xda>
 800d0de:	3801      	subs	r0, #1
 800d0e0:	e7e9      	b.n	800d0b6 <__mdiff+0xf6>
 800d0e2:	46c0      	nop			; (mov r8, r8)
 800d0e4:	0800e8a4 	.word	0x0800e8a4
 800d0e8:	00000232 	.word	0x00000232
 800d0ec:	0800e934 	.word	0x0800e934

0800d0f0 <__ulp>:
 800d0f0:	4b0f      	ldr	r3, [pc, #60]	; (800d130 <__ulp+0x40>)
 800d0f2:	4019      	ands	r1, r3
 800d0f4:	4b0f      	ldr	r3, [pc, #60]	; (800d134 <__ulp+0x44>)
 800d0f6:	18c9      	adds	r1, r1, r3
 800d0f8:	2900      	cmp	r1, #0
 800d0fa:	dd04      	ble.n	800d106 <__ulp+0x16>
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	000b      	movs	r3, r1
 800d100:	0010      	movs	r0, r2
 800d102:	0019      	movs	r1, r3
 800d104:	4770      	bx	lr
 800d106:	4249      	negs	r1, r1
 800d108:	2200      	movs	r2, #0
 800d10a:	2300      	movs	r3, #0
 800d10c:	1509      	asrs	r1, r1, #20
 800d10e:	2913      	cmp	r1, #19
 800d110:	dc04      	bgt.n	800d11c <__ulp+0x2c>
 800d112:	2080      	movs	r0, #128	; 0x80
 800d114:	0300      	lsls	r0, r0, #12
 800d116:	4108      	asrs	r0, r1
 800d118:	0003      	movs	r3, r0
 800d11a:	e7f1      	b.n	800d100 <__ulp+0x10>
 800d11c:	3914      	subs	r1, #20
 800d11e:	2001      	movs	r0, #1
 800d120:	291e      	cmp	r1, #30
 800d122:	dc02      	bgt.n	800d12a <__ulp+0x3a>
 800d124:	2080      	movs	r0, #128	; 0x80
 800d126:	0600      	lsls	r0, r0, #24
 800d128:	40c8      	lsrs	r0, r1
 800d12a:	0002      	movs	r2, r0
 800d12c:	e7e8      	b.n	800d100 <__ulp+0x10>
 800d12e:	46c0      	nop			; (mov r8, r8)
 800d130:	7ff00000 	.word	0x7ff00000
 800d134:	fcc00000 	.word	0xfcc00000

0800d138 <__b2d>:
 800d138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d13a:	0006      	movs	r6, r0
 800d13c:	6903      	ldr	r3, [r0, #16]
 800d13e:	3614      	adds	r6, #20
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	18f3      	adds	r3, r6, r3
 800d144:	1f1d      	subs	r5, r3, #4
 800d146:	682c      	ldr	r4, [r5, #0]
 800d148:	000f      	movs	r7, r1
 800d14a:	0020      	movs	r0, r4
 800d14c:	9301      	str	r3, [sp, #4]
 800d14e:	f7ff fd41 	bl	800cbd4 <__hi0bits>
 800d152:	2320      	movs	r3, #32
 800d154:	1a1b      	subs	r3, r3, r0
 800d156:	491f      	ldr	r1, [pc, #124]	; (800d1d4 <__b2d+0x9c>)
 800d158:	603b      	str	r3, [r7, #0]
 800d15a:	280a      	cmp	r0, #10
 800d15c:	dc16      	bgt.n	800d18c <__b2d+0x54>
 800d15e:	230b      	movs	r3, #11
 800d160:	0027      	movs	r7, r4
 800d162:	1a1b      	subs	r3, r3, r0
 800d164:	40df      	lsrs	r7, r3
 800d166:	4339      	orrs	r1, r7
 800d168:	469c      	mov	ip, r3
 800d16a:	000b      	movs	r3, r1
 800d16c:	2100      	movs	r1, #0
 800d16e:	42ae      	cmp	r6, r5
 800d170:	d202      	bcs.n	800d178 <__b2d+0x40>
 800d172:	9901      	ldr	r1, [sp, #4]
 800d174:	3908      	subs	r1, #8
 800d176:	6809      	ldr	r1, [r1, #0]
 800d178:	3015      	adds	r0, #21
 800d17a:	4084      	lsls	r4, r0
 800d17c:	4660      	mov	r0, ip
 800d17e:	40c1      	lsrs	r1, r0
 800d180:	430c      	orrs	r4, r1
 800d182:	0022      	movs	r2, r4
 800d184:	0010      	movs	r0, r2
 800d186:	0019      	movs	r1, r3
 800d188:	b003      	add	sp, #12
 800d18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d18c:	2700      	movs	r7, #0
 800d18e:	42ae      	cmp	r6, r5
 800d190:	d202      	bcs.n	800d198 <__b2d+0x60>
 800d192:	9d01      	ldr	r5, [sp, #4]
 800d194:	3d08      	subs	r5, #8
 800d196:	682f      	ldr	r7, [r5, #0]
 800d198:	230b      	movs	r3, #11
 800d19a:	425b      	negs	r3, r3
 800d19c:	469c      	mov	ip, r3
 800d19e:	4484      	add	ip, r0
 800d1a0:	280b      	cmp	r0, #11
 800d1a2:	d013      	beq.n	800d1cc <__b2d+0x94>
 800d1a4:	4663      	mov	r3, ip
 800d1a6:	2020      	movs	r0, #32
 800d1a8:	409c      	lsls	r4, r3
 800d1aa:	1ac0      	subs	r0, r0, r3
 800d1ac:	003b      	movs	r3, r7
 800d1ae:	40c3      	lsrs	r3, r0
 800d1b0:	431c      	orrs	r4, r3
 800d1b2:	4321      	orrs	r1, r4
 800d1b4:	000b      	movs	r3, r1
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	42b5      	cmp	r5, r6
 800d1ba:	d901      	bls.n	800d1c0 <__b2d+0x88>
 800d1bc:	3d04      	subs	r5, #4
 800d1be:	6829      	ldr	r1, [r5, #0]
 800d1c0:	4664      	mov	r4, ip
 800d1c2:	40c1      	lsrs	r1, r0
 800d1c4:	40a7      	lsls	r7, r4
 800d1c6:	430f      	orrs	r7, r1
 800d1c8:	003a      	movs	r2, r7
 800d1ca:	e7db      	b.n	800d184 <__b2d+0x4c>
 800d1cc:	4321      	orrs	r1, r4
 800d1ce:	000b      	movs	r3, r1
 800d1d0:	e7fa      	b.n	800d1c8 <__b2d+0x90>
 800d1d2:	46c0      	nop			; (mov r8, r8)
 800d1d4:	3ff00000 	.word	0x3ff00000

0800d1d8 <__d2b>:
 800d1d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1da:	2101      	movs	r1, #1
 800d1dc:	0014      	movs	r4, r2
 800d1de:	001e      	movs	r6, r3
 800d1e0:	9f08      	ldr	r7, [sp, #32]
 800d1e2:	f7ff fbff 	bl	800c9e4 <_Balloc>
 800d1e6:	1e05      	subs	r5, r0, #0
 800d1e8:	d105      	bne.n	800d1f6 <__d2b+0x1e>
 800d1ea:	0002      	movs	r2, r0
 800d1ec:	4b26      	ldr	r3, [pc, #152]	; (800d288 <__d2b+0xb0>)
 800d1ee:	4927      	ldr	r1, [pc, #156]	; (800d28c <__d2b+0xb4>)
 800d1f0:	4827      	ldr	r0, [pc, #156]	; (800d290 <__d2b+0xb8>)
 800d1f2:	f000 fb0f 	bl	800d814 <__assert_func>
 800d1f6:	0333      	lsls	r3, r6, #12
 800d1f8:	0076      	lsls	r6, r6, #1
 800d1fa:	0b1b      	lsrs	r3, r3, #12
 800d1fc:	0d76      	lsrs	r6, r6, #21
 800d1fe:	d124      	bne.n	800d24a <__d2b+0x72>
 800d200:	9301      	str	r3, [sp, #4]
 800d202:	2c00      	cmp	r4, #0
 800d204:	d027      	beq.n	800d256 <__d2b+0x7e>
 800d206:	4668      	mov	r0, sp
 800d208:	9400      	str	r4, [sp, #0]
 800d20a:	f7ff fcfd 	bl	800cc08 <__lo0bits>
 800d20e:	9c00      	ldr	r4, [sp, #0]
 800d210:	2800      	cmp	r0, #0
 800d212:	d01e      	beq.n	800d252 <__d2b+0x7a>
 800d214:	9b01      	ldr	r3, [sp, #4]
 800d216:	2120      	movs	r1, #32
 800d218:	001a      	movs	r2, r3
 800d21a:	1a09      	subs	r1, r1, r0
 800d21c:	408a      	lsls	r2, r1
 800d21e:	40c3      	lsrs	r3, r0
 800d220:	4322      	orrs	r2, r4
 800d222:	616a      	str	r2, [r5, #20]
 800d224:	9301      	str	r3, [sp, #4]
 800d226:	9c01      	ldr	r4, [sp, #4]
 800d228:	61ac      	str	r4, [r5, #24]
 800d22a:	1e63      	subs	r3, r4, #1
 800d22c:	419c      	sbcs	r4, r3
 800d22e:	3401      	adds	r4, #1
 800d230:	612c      	str	r4, [r5, #16]
 800d232:	2e00      	cmp	r6, #0
 800d234:	d018      	beq.n	800d268 <__d2b+0x90>
 800d236:	4b17      	ldr	r3, [pc, #92]	; (800d294 <__d2b+0xbc>)
 800d238:	18f6      	adds	r6, r6, r3
 800d23a:	2335      	movs	r3, #53	; 0x35
 800d23c:	1836      	adds	r6, r6, r0
 800d23e:	1a18      	subs	r0, r3, r0
 800d240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d242:	603e      	str	r6, [r7, #0]
 800d244:	6018      	str	r0, [r3, #0]
 800d246:	0028      	movs	r0, r5
 800d248:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d24a:	2280      	movs	r2, #128	; 0x80
 800d24c:	0352      	lsls	r2, r2, #13
 800d24e:	4313      	orrs	r3, r2
 800d250:	e7d6      	b.n	800d200 <__d2b+0x28>
 800d252:	616c      	str	r4, [r5, #20]
 800d254:	e7e7      	b.n	800d226 <__d2b+0x4e>
 800d256:	a801      	add	r0, sp, #4
 800d258:	f7ff fcd6 	bl	800cc08 <__lo0bits>
 800d25c:	2401      	movs	r4, #1
 800d25e:	9b01      	ldr	r3, [sp, #4]
 800d260:	612c      	str	r4, [r5, #16]
 800d262:	616b      	str	r3, [r5, #20]
 800d264:	3020      	adds	r0, #32
 800d266:	e7e4      	b.n	800d232 <__d2b+0x5a>
 800d268:	4b0b      	ldr	r3, [pc, #44]	; (800d298 <__d2b+0xc0>)
 800d26a:	18c0      	adds	r0, r0, r3
 800d26c:	4b0b      	ldr	r3, [pc, #44]	; (800d29c <__d2b+0xc4>)
 800d26e:	6038      	str	r0, [r7, #0]
 800d270:	18e3      	adds	r3, r4, r3
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	18eb      	adds	r3, r5, r3
 800d276:	6958      	ldr	r0, [r3, #20]
 800d278:	f7ff fcac 	bl	800cbd4 <__hi0bits>
 800d27c:	0164      	lsls	r4, r4, #5
 800d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d280:	1a24      	subs	r4, r4, r0
 800d282:	601c      	str	r4, [r3, #0]
 800d284:	e7df      	b.n	800d246 <__d2b+0x6e>
 800d286:	46c0      	nop			; (mov r8, r8)
 800d288:	0800e8a4 	.word	0x0800e8a4
 800d28c:	0000030a 	.word	0x0000030a
 800d290:	0800e934 	.word	0x0800e934
 800d294:	fffffbcd 	.word	0xfffffbcd
 800d298:	fffffbce 	.word	0xfffffbce
 800d29c:	3fffffff 	.word	0x3fffffff

0800d2a0 <__ratio>:
 800d2a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	000d      	movs	r5, r1
 800d2a6:	a902      	add	r1, sp, #8
 800d2a8:	0004      	movs	r4, r0
 800d2aa:	f7ff ff45 	bl	800d138 <__b2d>
 800d2ae:	9000      	str	r0, [sp, #0]
 800d2b0:	9101      	str	r1, [sp, #4]
 800d2b2:	9e00      	ldr	r6, [sp, #0]
 800d2b4:	9f01      	ldr	r7, [sp, #4]
 800d2b6:	0028      	movs	r0, r5
 800d2b8:	a903      	add	r1, sp, #12
 800d2ba:	f7ff ff3d 	bl	800d138 <__b2d>
 800d2be:	6924      	ldr	r4, [r4, #16]
 800d2c0:	692d      	ldr	r5, [r5, #16]
 800d2c2:	0002      	movs	r2, r0
 800d2c4:	1b65      	subs	r5, r4, r5
 800d2c6:	016c      	lsls	r4, r5, #5
 800d2c8:	46a4      	mov	ip, r4
 800d2ca:	9d03      	ldr	r5, [sp, #12]
 800d2cc:	9c02      	ldr	r4, [sp, #8]
 800d2ce:	000b      	movs	r3, r1
 800d2d0:	1b64      	subs	r4, r4, r5
 800d2d2:	4464      	add	r4, ip
 800d2d4:	0525      	lsls	r5, r4, #20
 800d2d6:	2c00      	cmp	r4, #0
 800d2d8:	dd07      	ble.n	800d2ea <__ratio+0x4a>
 800d2da:	9901      	ldr	r1, [sp, #4]
 800d2dc:	186f      	adds	r7, r5, r1
 800d2de:	0030      	movs	r0, r6
 800d2e0:	0039      	movs	r1, r7
 800d2e2:	f7f3 fdd9 	bl	8000e98 <__aeabi_ddiv>
 800d2e6:	b005      	add	sp, #20
 800d2e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ea:	1b4b      	subs	r3, r1, r5
 800d2ec:	e7f7      	b.n	800d2de <__ratio+0x3e>

0800d2ee <__copybits>:
 800d2ee:	b570      	push	{r4, r5, r6, lr}
 800d2f0:	0015      	movs	r5, r2
 800d2f2:	6913      	ldr	r3, [r2, #16]
 800d2f4:	3514      	adds	r5, #20
 800d2f6:	009c      	lsls	r4, r3, #2
 800d2f8:	0006      	movs	r6, r0
 800d2fa:	002b      	movs	r3, r5
 800d2fc:	3901      	subs	r1, #1
 800d2fe:	1149      	asrs	r1, r1, #5
 800d300:	3101      	adds	r1, #1
 800d302:	0089      	lsls	r1, r1, #2
 800d304:	1841      	adds	r1, r0, r1
 800d306:	192c      	adds	r4, r5, r4
 800d308:	429c      	cmp	r4, r3
 800d30a:	d80d      	bhi.n	800d328 <__copybits+0x3a>
 800d30c:	0015      	movs	r5, r2
 800d30e:	3511      	adds	r5, #17
 800d310:	2300      	movs	r3, #0
 800d312:	42a5      	cmp	r5, r4
 800d314:	d803      	bhi.n	800d31e <__copybits+0x30>
 800d316:	1aa3      	subs	r3, r4, r2
 800d318:	3b11      	subs	r3, #17
 800d31a:	089b      	lsrs	r3, r3, #2
 800d31c:	009b      	lsls	r3, r3, #2
 800d31e:	18c0      	adds	r0, r0, r3
 800d320:	2300      	movs	r3, #0
 800d322:	4281      	cmp	r1, r0
 800d324:	d803      	bhi.n	800d32e <__copybits+0x40>
 800d326:	bd70      	pop	{r4, r5, r6, pc}
 800d328:	cb20      	ldmia	r3!, {r5}
 800d32a:	c620      	stmia	r6!, {r5}
 800d32c:	e7ec      	b.n	800d308 <__copybits+0x1a>
 800d32e:	c008      	stmia	r0!, {r3}
 800d330:	e7f7      	b.n	800d322 <__copybits+0x34>

0800d332 <__any_on>:
 800d332:	0002      	movs	r2, r0
 800d334:	6900      	ldr	r0, [r0, #16]
 800d336:	b510      	push	{r4, lr}
 800d338:	3214      	adds	r2, #20
 800d33a:	114b      	asrs	r3, r1, #5
 800d33c:	4298      	cmp	r0, r3
 800d33e:	db13      	blt.n	800d368 <__any_on+0x36>
 800d340:	dd0c      	ble.n	800d35c <__any_on+0x2a>
 800d342:	241f      	movs	r4, #31
 800d344:	0008      	movs	r0, r1
 800d346:	4020      	ands	r0, r4
 800d348:	4221      	tst	r1, r4
 800d34a:	d007      	beq.n	800d35c <__any_on+0x2a>
 800d34c:	0099      	lsls	r1, r3, #2
 800d34e:	588c      	ldr	r4, [r1, r2]
 800d350:	0021      	movs	r1, r4
 800d352:	40c1      	lsrs	r1, r0
 800d354:	4081      	lsls	r1, r0
 800d356:	2001      	movs	r0, #1
 800d358:	428c      	cmp	r4, r1
 800d35a:	d104      	bne.n	800d366 <__any_on+0x34>
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	18d3      	adds	r3, r2, r3
 800d360:	4293      	cmp	r3, r2
 800d362:	d803      	bhi.n	800d36c <__any_on+0x3a>
 800d364:	2000      	movs	r0, #0
 800d366:	bd10      	pop	{r4, pc}
 800d368:	0003      	movs	r3, r0
 800d36a:	e7f7      	b.n	800d35c <__any_on+0x2a>
 800d36c:	3b04      	subs	r3, #4
 800d36e:	6819      	ldr	r1, [r3, #0]
 800d370:	2900      	cmp	r1, #0
 800d372:	d0f5      	beq.n	800d360 <__any_on+0x2e>
 800d374:	2001      	movs	r0, #1
 800d376:	e7f6      	b.n	800d366 <__any_on+0x34>

0800d378 <_calloc_r>:
 800d378:	434a      	muls	r2, r1
 800d37a:	b570      	push	{r4, r5, r6, lr}
 800d37c:	0011      	movs	r1, r2
 800d37e:	0015      	movs	r5, r2
 800d380:	f000 f852 	bl	800d428 <_malloc_r>
 800d384:	1e04      	subs	r4, r0, #0
 800d386:	d003      	beq.n	800d390 <_calloc_r+0x18>
 800d388:	002a      	movs	r2, r5
 800d38a:	2100      	movs	r1, #0
 800d38c:	f7fc fd32 	bl	8009df4 <memset>
 800d390:	0020      	movs	r0, r4
 800d392:	bd70      	pop	{r4, r5, r6, pc}

0800d394 <_free_r>:
 800d394:	b570      	push	{r4, r5, r6, lr}
 800d396:	0005      	movs	r5, r0
 800d398:	2900      	cmp	r1, #0
 800d39a:	d010      	beq.n	800d3be <_free_r+0x2a>
 800d39c:	1f0c      	subs	r4, r1, #4
 800d39e:	6823      	ldr	r3, [r4, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	da00      	bge.n	800d3a6 <_free_r+0x12>
 800d3a4:	18e4      	adds	r4, r4, r3
 800d3a6:	0028      	movs	r0, r5
 800d3a8:	f000 fa76 	bl	800d898 <__malloc_lock>
 800d3ac:	4a1d      	ldr	r2, [pc, #116]	; (800d424 <_free_r+0x90>)
 800d3ae:	6813      	ldr	r3, [r2, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d105      	bne.n	800d3c0 <_free_r+0x2c>
 800d3b4:	6063      	str	r3, [r4, #4]
 800d3b6:	6014      	str	r4, [r2, #0]
 800d3b8:	0028      	movs	r0, r5
 800d3ba:	f000 fa75 	bl	800d8a8 <__malloc_unlock>
 800d3be:	bd70      	pop	{r4, r5, r6, pc}
 800d3c0:	42a3      	cmp	r3, r4
 800d3c2:	d908      	bls.n	800d3d6 <_free_r+0x42>
 800d3c4:	6821      	ldr	r1, [r4, #0]
 800d3c6:	1860      	adds	r0, r4, r1
 800d3c8:	4283      	cmp	r3, r0
 800d3ca:	d1f3      	bne.n	800d3b4 <_free_r+0x20>
 800d3cc:	6818      	ldr	r0, [r3, #0]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	1841      	adds	r1, r0, r1
 800d3d2:	6021      	str	r1, [r4, #0]
 800d3d4:	e7ee      	b.n	800d3b4 <_free_r+0x20>
 800d3d6:	001a      	movs	r2, r3
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <_free_r+0x4e>
 800d3de:	42a3      	cmp	r3, r4
 800d3e0:	d9f9      	bls.n	800d3d6 <_free_r+0x42>
 800d3e2:	6811      	ldr	r1, [r2, #0]
 800d3e4:	1850      	adds	r0, r2, r1
 800d3e6:	42a0      	cmp	r0, r4
 800d3e8:	d10b      	bne.n	800d402 <_free_r+0x6e>
 800d3ea:	6820      	ldr	r0, [r4, #0]
 800d3ec:	1809      	adds	r1, r1, r0
 800d3ee:	1850      	adds	r0, r2, r1
 800d3f0:	6011      	str	r1, [r2, #0]
 800d3f2:	4283      	cmp	r3, r0
 800d3f4:	d1e0      	bne.n	800d3b8 <_free_r+0x24>
 800d3f6:	6818      	ldr	r0, [r3, #0]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	1841      	adds	r1, r0, r1
 800d3fc:	6011      	str	r1, [r2, #0]
 800d3fe:	6053      	str	r3, [r2, #4]
 800d400:	e7da      	b.n	800d3b8 <_free_r+0x24>
 800d402:	42a0      	cmp	r0, r4
 800d404:	d902      	bls.n	800d40c <_free_r+0x78>
 800d406:	230c      	movs	r3, #12
 800d408:	602b      	str	r3, [r5, #0]
 800d40a:	e7d5      	b.n	800d3b8 <_free_r+0x24>
 800d40c:	6821      	ldr	r1, [r4, #0]
 800d40e:	1860      	adds	r0, r4, r1
 800d410:	4283      	cmp	r3, r0
 800d412:	d103      	bne.n	800d41c <_free_r+0x88>
 800d414:	6818      	ldr	r0, [r3, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	1841      	adds	r1, r0, r1
 800d41a:	6021      	str	r1, [r4, #0]
 800d41c:	6063      	str	r3, [r4, #4]
 800d41e:	6054      	str	r4, [r2, #4]
 800d420:	e7ca      	b.n	800d3b8 <_free_r+0x24>
 800d422:	46c0      	nop			; (mov r8, r8)
 800d424:	20000204 	.word	0x20000204

0800d428 <_malloc_r>:
 800d428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d42a:	2303      	movs	r3, #3
 800d42c:	1ccd      	adds	r5, r1, #3
 800d42e:	439d      	bics	r5, r3
 800d430:	3508      	adds	r5, #8
 800d432:	0006      	movs	r6, r0
 800d434:	2d0c      	cmp	r5, #12
 800d436:	d21f      	bcs.n	800d478 <_malloc_r+0x50>
 800d438:	250c      	movs	r5, #12
 800d43a:	42a9      	cmp	r1, r5
 800d43c:	d81e      	bhi.n	800d47c <_malloc_r+0x54>
 800d43e:	0030      	movs	r0, r6
 800d440:	f000 fa2a 	bl	800d898 <__malloc_lock>
 800d444:	4925      	ldr	r1, [pc, #148]	; (800d4dc <_malloc_r+0xb4>)
 800d446:	680a      	ldr	r2, [r1, #0]
 800d448:	0014      	movs	r4, r2
 800d44a:	2c00      	cmp	r4, #0
 800d44c:	d11a      	bne.n	800d484 <_malloc_r+0x5c>
 800d44e:	4f24      	ldr	r7, [pc, #144]	; (800d4e0 <_malloc_r+0xb8>)
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d104      	bne.n	800d460 <_malloc_r+0x38>
 800d456:	0021      	movs	r1, r4
 800d458:	0030      	movs	r0, r6
 800d45a:	f000 f9ab 	bl	800d7b4 <_sbrk_r>
 800d45e:	6038      	str	r0, [r7, #0]
 800d460:	0029      	movs	r1, r5
 800d462:	0030      	movs	r0, r6
 800d464:	f000 f9a6 	bl	800d7b4 <_sbrk_r>
 800d468:	1c43      	adds	r3, r0, #1
 800d46a:	d12b      	bne.n	800d4c4 <_malloc_r+0x9c>
 800d46c:	230c      	movs	r3, #12
 800d46e:	0030      	movs	r0, r6
 800d470:	6033      	str	r3, [r6, #0]
 800d472:	f000 fa19 	bl	800d8a8 <__malloc_unlock>
 800d476:	e003      	b.n	800d480 <_malloc_r+0x58>
 800d478:	2d00      	cmp	r5, #0
 800d47a:	dade      	bge.n	800d43a <_malloc_r+0x12>
 800d47c:	230c      	movs	r3, #12
 800d47e:	6033      	str	r3, [r6, #0]
 800d480:	2000      	movs	r0, #0
 800d482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d484:	6823      	ldr	r3, [r4, #0]
 800d486:	1b5b      	subs	r3, r3, r5
 800d488:	d419      	bmi.n	800d4be <_malloc_r+0x96>
 800d48a:	2b0b      	cmp	r3, #11
 800d48c:	d903      	bls.n	800d496 <_malloc_r+0x6e>
 800d48e:	6023      	str	r3, [r4, #0]
 800d490:	18e4      	adds	r4, r4, r3
 800d492:	6025      	str	r5, [r4, #0]
 800d494:	e003      	b.n	800d49e <_malloc_r+0x76>
 800d496:	6863      	ldr	r3, [r4, #4]
 800d498:	42a2      	cmp	r2, r4
 800d49a:	d10e      	bne.n	800d4ba <_malloc_r+0x92>
 800d49c:	600b      	str	r3, [r1, #0]
 800d49e:	0030      	movs	r0, r6
 800d4a0:	f000 fa02 	bl	800d8a8 <__malloc_unlock>
 800d4a4:	0020      	movs	r0, r4
 800d4a6:	2207      	movs	r2, #7
 800d4a8:	300b      	adds	r0, #11
 800d4aa:	1d23      	adds	r3, r4, #4
 800d4ac:	4390      	bics	r0, r2
 800d4ae:	1ac2      	subs	r2, r0, r3
 800d4b0:	4298      	cmp	r0, r3
 800d4b2:	d0e6      	beq.n	800d482 <_malloc_r+0x5a>
 800d4b4:	1a1b      	subs	r3, r3, r0
 800d4b6:	50a3      	str	r3, [r4, r2]
 800d4b8:	e7e3      	b.n	800d482 <_malloc_r+0x5a>
 800d4ba:	6053      	str	r3, [r2, #4]
 800d4bc:	e7ef      	b.n	800d49e <_malloc_r+0x76>
 800d4be:	0022      	movs	r2, r4
 800d4c0:	6864      	ldr	r4, [r4, #4]
 800d4c2:	e7c2      	b.n	800d44a <_malloc_r+0x22>
 800d4c4:	2303      	movs	r3, #3
 800d4c6:	1cc4      	adds	r4, r0, #3
 800d4c8:	439c      	bics	r4, r3
 800d4ca:	42a0      	cmp	r0, r4
 800d4cc:	d0e1      	beq.n	800d492 <_malloc_r+0x6a>
 800d4ce:	1a21      	subs	r1, r4, r0
 800d4d0:	0030      	movs	r0, r6
 800d4d2:	f000 f96f 	bl	800d7b4 <_sbrk_r>
 800d4d6:	1c43      	adds	r3, r0, #1
 800d4d8:	d1db      	bne.n	800d492 <_malloc_r+0x6a>
 800d4da:	e7c7      	b.n	800d46c <_malloc_r+0x44>
 800d4dc:	20000204 	.word	0x20000204
 800d4e0:	20000208 	.word	0x20000208

0800d4e4 <__ssputs_r>:
 800d4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4e6:	688e      	ldr	r6, [r1, #8]
 800d4e8:	b085      	sub	sp, #20
 800d4ea:	0007      	movs	r7, r0
 800d4ec:	000c      	movs	r4, r1
 800d4ee:	9203      	str	r2, [sp, #12]
 800d4f0:	9301      	str	r3, [sp, #4]
 800d4f2:	429e      	cmp	r6, r3
 800d4f4:	d83c      	bhi.n	800d570 <__ssputs_r+0x8c>
 800d4f6:	2390      	movs	r3, #144	; 0x90
 800d4f8:	898a      	ldrh	r2, [r1, #12]
 800d4fa:	00db      	lsls	r3, r3, #3
 800d4fc:	421a      	tst	r2, r3
 800d4fe:	d034      	beq.n	800d56a <__ssputs_r+0x86>
 800d500:	2503      	movs	r5, #3
 800d502:	6909      	ldr	r1, [r1, #16]
 800d504:	6823      	ldr	r3, [r4, #0]
 800d506:	1a5b      	subs	r3, r3, r1
 800d508:	9302      	str	r3, [sp, #8]
 800d50a:	6963      	ldr	r3, [r4, #20]
 800d50c:	9802      	ldr	r0, [sp, #8]
 800d50e:	435d      	muls	r5, r3
 800d510:	0feb      	lsrs	r3, r5, #31
 800d512:	195d      	adds	r5, r3, r5
 800d514:	9b01      	ldr	r3, [sp, #4]
 800d516:	106d      	asrs	r5, r5, #1
 800d518:	3301      	adds	r3, #1
 800d51a:	181b      	adds	r3, r3, r0
 800d51c:	42ab      	cmp	r3, r5
 800d51e:	d900      	bls.n	800d522 <__ssputs_r+0x3e>
 800d520:	001d      	movs	r5, r3
 800d522:	0553      	lsls	r3, r2, #21
 800d524:	d532      	bpl.n	800d58c <__ssputs_r+0xa8>
 800d526:	0029      	movs	r1, r5
 800d528:	0038      	movs	r0, r7
 800d52a:	f7ff ff7d 	bl	800d428 <_malloc_r>
 800d52e:	1e06      	subs	r6, r0, #0
 800d530:	d109      	bne.n	800d546 <__ssputs_r+0x62>
 800d532:	230c      	movs	r3, #12
 800d534:	603b      	str	r3, [r7, #0]
 800d536:	2340      	movs	r3, #64	; 0x40
 800d538:	2001      	movs	r0, #1
 800d53a:	89a2      	ldrh	r2, [r4, #12]
 800d53c:	4240      	negs	r0, r0
 800d53e:	4313      	orrs	r3, r2
 800d540:	81a3      	strh	r3, [r4, #12]
 800d542:	b005      	add	sp, #20
 800d544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d546:	9a02      	ldr	r2, [sp, #8]
 800d548:	6921      	ldr	r1, [r4, #16]
 800d54a:	f7ff fa42 	bl	800c9d2 <memcpy>
 800d54e:	89a3      	ldrh	r3, [r4, #12]
 800d550:	4a14      	ldr	r2, [pc, #80]	; (800d5a4 <__ssputs_r+0xc0>)
 800d552:	401a      	ands	r2, r3
 800d554:	2380      	movs	r3, #128	; 0x80
 800d556:	4313      	orrs	r3, r2
 800d558:	81a3      	strh	r3, [r4, #12]
 800d55a:	9b02      	ldr	r3, [sp, #8]
 800d55c:	6126      	str	r6, [r4, #16]
 800d55e:	18f6      	adds	r6, r6, r3
 800d560:	6026      	str	r6, [r4, #0]
 800d562:	6165      	str	r5, [r4, #20]
 800d564:	9e01      	ldr	r6, [sp, #4]
 800d566:	1aed      	subs	r5, r5, r3
 800d568:	60a5      	str	r5, [r4, #8]
 800d56a:	9b01      	ldr	r3, [sp, #4]
 800d56c:	429e      	cmp	r6, r3
 800d56e:	d900      	bls.n	800d572 <__ssputs_r+0x8e>
 800d570:	9e01      	ldr	r6, [sp, #4]
 800d572:	0032      	movs	r2, r6
 800d574:	9903      	ldr	r1, [sp, #12]
 800d576:	6820      	ldr	r0, [r4, #0]
 800d578:	f000 f97a 	bl	800d870 <memmove>
 800d57c:	68a3      	ldr	r3, [r4, #8]
 800d57e:	2000      	movs	r0, #0
 800d580:	1b9b      	subs	r3, r3, r6
 800d582:	60a3      	str	r3, [r4, #8]
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	199e      	adds	r6, r3, r6
 800d588:	6026      	str	r6, [r4, #0]
 800d58a:	e7da      	b.n	800d542 <__ssputs_r+0x5e>
 800d58c:	002a      	movs	r2, r5
 800d58e:	0038      	movs	r0, r7
 800d590:	f000 f992 	bl	800d8b8 <_realloc_r>
 800d594:	1e06      	subs	r6, r0, #0
 800d596:	d1e0      	bne.n	800d55a <__ssputs_r+0x76>
 800d598:	0038      	movs	r0, r7
 800d59a:	6921      	ldr	r1, [r4, #16]
 800d59c:	f7ff fefa 	bl	800d394 <_free_r>
 800d5a0:	e7c7      	b.n	800d532 <__ssputs_r+0x4e>
 800d5a2:	46c0      	nop			; (mov r8, r8)
 800d5a4:	fffffb7f 	.word	0xfffffb7f

0800d5a8 <_svfiprintf_r>:
 800d5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5aa:	b0a1      	sub	sp, #132	; 0x84
 800d5ac:	9003      	str	r0, [sp, #12]
 800d5ae:	001d      	movs	r5, r3
 800d5b0:	898b      	ldrh	r3, [r1, #12]
 800d5b2:	000f      	movs	r7, r1
 800d5b4:	0016      	movs	r6, r2
 800d5b6:	061b      	lsls	r3, r3, #24
 800d5b8:	d511      	bpl.n	800d5de <_svfiprintf_r+0x36>
 800d5ba:	690b      	ldr	r3, [r1, #16]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10e      	bne.n	800d5de <_svfiprintf_r+0x36>
 800d5c0:	2140      	movs	r1, #64	; 0x40
 800d5c2:	f7ff ff31 	bl	800d428 <_malloc_r>
 800d5c6:	6038      	str	r0, [r7, #0]
 800d5c8:	6138      	str	r0, [r7, #16]
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	d105      	bne.n	800d5da <_svfiprintf_r+0x32>
 800d5ce:	230c      	movs	r3, #12
 800d5d0:	9a03      	ldr	r2, [sp, #12]
 800d5d2:	3801      	subs	r0, #1
 800d5d4:	6013      	str	r3, [r2, #0]
 800d5d6:	b021      	add	sp, #132	; 0x84
 800d5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5da:	2340      	movs	r3, #64	; 0x40
 800d5dc:	617b      	str	r3, [r7, #20]
 800d5de:	2300      	movs	r3, #0
 800d5e0:	ac08      	add	r4, sp, #32
 800d5e2:	6163      	str	r3, [r4, #20]
 800d5e4:	3320      	adds	r3, #32
 800d5e6:	7663      	strb	r3, [r4, #25]
 800d5e8:	3310      	adds	r3, #16
 800d5ea:	76a3      	strb	r3, [r4, #26]
 800d5ec:	9507      	str	r5, [sp, #28]
 800d5ee:	0035      	movs	r5, r6
 800d5f0:	782b      	ldrb	r3, [r5, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d001      	beq.n	800d5fa <_svfiprintf_r+0x52>
 800d5f6:	2b25      	cmp	r3, #37	; 0x25
 800d5f8:	d147      	bne.n	800d68a <_svfiprintf_r+0xe2>
 800d5fa:	1bab      	subs	r3, r5, r6
 800d5fc:	9305      	str	r3, [sp, #20]
 800d5fe:	42b5      	cmp	r5, r6
 800d600:	d00c      	beq.n	800d61c <_svfiprintf_r+0x74>
 800d602:	0032      	movs	r2, r6
 800d604:	0039      	movs	r1, r7
 800d606:	9803      	ldr	r0, [sp, #12]
 800d608:	f7ff ff6c 	bl	800d4e4 <__ssputs_r>
 800d60c:	1c43      	adds	r3, r0, #1
 800d60e:	d100      	bne.n	800d612 <_svfiprintf_r+0x6a>
 800d610:	e0ae      	b.n	800d770 <_svfiprintf_r+0x1c8>
 800d612:	6962      	ldr	r2, [r4, #20]
 800d614:	9b05      	ldr	r3, [sp, #20]
 800d616:	4694      	mov	ip, r2
 800d618:	4463      	add	r3, ip
 800d61a:	6163      	str	r3, [r4, #20]
 800d61c:	782b      	ldrb	r3, [r5, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d100      	bne.n	800d624 <_svfiprintf_r+0x7c>
 800d622:	e0a5      	b.n	800d770 <_svfiprintf_r+0x1c8>
 800d624:	2201      	movs	r2, #1
 800d626:	2300      	movs	r3, #0
 800d628:	4252      	negs	r2, r2
 800d62a:	6062      	str	r2, [r4, #4]
 800d62c:	a904      	add	r1, sp, #16
 800d62e:	3254      	adds	r2, #84	; 0x54
 800d630:	1852      	adds	r2, r2, r1
 800d632:	1c6e      	adds	r6, r5, #1
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	60e3      	str	r3, [r4, #12]
 800d638:	60a3      	str	r3, [r4, #8]
 800d63a:	7013      	strb	r3, [r2, #0]
 800d63c:	65a3      	str	r3, [r4, #88]	; 0x58
 800d63e:	2205      	movs	r2, #5
 800d640:	7831      	ldrb	r1, [r6, #0]
 800d642:	4854      	ldr	r0, [pc, #336]	; (800d794 <_svfiprintf_r+0x1ec>)
 800d644:	f7ff f9ba 	bl	800c9bc <memchr>
 800d648:	1c75      	adds	r5, r6, #1
 800d64a:	2800      	cmp	r0, #0
 800d64c:	d11f      	bne.n	800d68e <_svfiprintf_r+0xe6>
 800d64e:	6822      	ldr	r2, [r4, #0]
 800d650:	06d3      	lsls	r3, r2, #27
 800d652:	d504      	bpl.n	800d65e <_svfiprintf_r+0xb6>
 800d654:	2353      	movs	r3, #83	; 0x53
 800d656:	a904      	add	r1, sp, #16
 800d658:	185b      	adds	r3, r3, r1
 800d65a:	2120      	movs	r1, #32
 800d65c:	7019      	strb	r1, [r3, #0]
 800d65e:	0713      	lsls	r3, r2, #28
 800d660:	d504      	bpl.n	800d66c <_svfiprintf_r+0xc4>
 800d662:	2353      	movs	r3, #83	; 0x53
 800d664:	a904      	add	r1, sp, #16
 800d666:	185b      	adds	r3, r3, r1
 800d668:	212b      	movs	r1, #43	; 0x2b
 800d66a:	7019      	strb	r1, [r3, #0]
 800d66c:	7833      	ldrb	r3, [r6, #0]
 800d66e:	2b2a      	cmp	r3, #42	; 0x2a
 800d670:	d016      	beq.n	800d6a0 <_svfiprintf_r+0xf8>
 800d672:	0035      	movs	r5, r6
 800d674:	2100      	movs	r1, #0
 800d676:	200a      	movs	r0, #10
 800d678:	68e3      	ldr	r3, [r4, #12]
 800d67a:	782a      	ldrb	r2, [r5, #0]
 800d67c:	1c6e      	adds	r6, r5, #1
 800d67e:	3a30      	subs	r2, #48	; 0x30
 800d680:	2a09      	cmp	r2, #9
 800d682:	d94e      	bls.n	800d722 <_svfiprintf_r+0x17a>
 800d684:	2900      	cmp	r1, #0
 800d686:	d111      	bne.n	800d6ac <_svfiprintf_r+0x104>
 800d688:	e017      	b.n	800d6ba <_svfiprintf_r+0x112>
 800d68a:	3501      	adds	r5, #1
 800d68c:	e7b0      	b.n	800d5f0 <_svfiprintf_r+0x48>
 800d68e:	4b41      	ldr	r3, [pc, #260]	; (800d794 <_svfiprintf_r+0x1ec>)
 800d690:	6822      	ldr	r2, [r4, #0]
 800d692:	1ac0      	subs	r0, r0, r3
 800d694:	2301      	movs	r3, #1
 800d696:	4083      	lsls	r3, r0
 800d698:	4313      	orrs	r3, r2
 800d69a:	002e      	movs	r6, r5
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	e7ce      	b.n	800d63e <_svfiprintf_r+0x96>
 800d6a0:	9b07      	ldr	r3, [sp, #28]
 800d6a2:	1d19      	adds	r1, r3, #4
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	9107      	str	r1, [sp, #28]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	db01      	blt.n	800d6b0 <_svfiprintf_r+0x108>
 800d6ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6ae:	e004      	b.n	800d6ba <_svfiprintf_r+0x112>
 800d6b0:	425b      	negs	r3, r3
 800d6b2:	60e3      	str	r3, [r4, #12]
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	4313      	orrs	r3, r2
 800d6b8:	6023      	str	r3, [r4, #0]
 800d6ba:	782b      	ldrb	r3, [r5, #0]
 800d6bc:	2b2e      	cmp	r3, #46	; 0x2e
 800d6be:	d10a      	bne.n	800d6d6 <_svfiprintf_r+0x12e>
 800d6c0:	786b      	ldrb	r3, [r5, #1]
 800d6c2:	2b2a      	cmp	r3, #42	; 0x2a
 800d6c4:	d135      	bne.n	800d732 <_svfiprintf_r+0x18a>
 800d6c6:	9b07      	ldr	r3, [sp, #28]
 800d6c8:	3502      	adds	r5, #2
 800d6ca:	1d1a      	adds	r2, r3, #4
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	9207      	str	r2, [sp, #28]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	db2b      	blt.n	800d72c <_svfiprintf_r+0x184>
 800d6d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d6:	4e30      	ldr	r6, [pc, #192]	; (800d798 <_svfiprintf_r+0x1f0>)
 800d6d8:	2203      	movs	r2, #3
 800d6da:	0030      	movs	r0, r6
 800d6dc:	7829      	ldrb	r1, [r5, #0]
 800d6de:	f7ff f96d 	bl	800c9bc <memchr>
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d006      	beq.n	800d6f4 <_svfiprintf_r+0x14c>
 800d6e6:	2340      	movs	r3, #64	; 0x40
 800d6e8:	1b80      	subs	r0, r0, r6
 800d6ea:	4083      	lsls	r3, r0
 800d6ec:	6822      	ldr	r2, [r4, #0]
 800d6ee:	3501      	adds	r5, #1
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	6023      	str	r3, [r4, #0]
 800d6f4:	7829      	ldrb	r1, [r5, #0]
 800d6f6:	2206      	movs	r2, #6
 800d6f8:	4828      	ldr	r0, [pc, #160]	; (800d79c <_svfiprintf_r+0x1f4>)
 800d6fa:	1c6e      	adds	r6, r5, #1
 800d6fc:	7621      	strb	r1, [r4, #24]
 800d6fe:	f7ff f95d 	bl	800c9bc <memchr>
 800d702:	2800      	cmp	r0, #0
 800d704:	d03c      	beq.n	800d780 <_svfiprintf_r+0x1d8>
 800d706:	4b26      	ldr	r3, [pc, #152]	; (800d7a0 <_svfiprintf_r+0x1f8>)
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d125      	bne.n	800d758 <_svfiprintf_r+0x1b0>
 800d70c:	2207      	movs	r2, #7
 800d70e:	9b07      	ldr	r3, [sp, #28]
 800d710:	3307      	adds	r3, #7
 800d712:	4393      	bics	r3, r2
 800d714:	3308      	adds	r3, #8
 800d716:	9307      	str	r3, [sp, #28]
 800d718:	6963      	ldr	r3, [r4, #20]
 800d71a:	9a04      	ldr	r2, [sp, #16]
 800d71c:	189b      	adds	r3, r3, r2
 800d71e:	6163      	str	r3, [r4, #20]
 800d720:	e765      	b.n	800d5ee <_svfiprintf_r+0x46>
 800d722:	4343      	muls	r3, r0
 800d724:	0035      	movs	r5, r6
 800d726:	2101      	movs	r1, #1
 800d728:	189b      	adds	r3, r3, r2
 800d72a:	e7a6      	b.n	800d67a <_svfiprintf_r+0xd2>
 800d72c:	2301      	movs	r3, #1
 800d72e:	425b      	negs	r3, r3
 800d730:	e7d0      	b.n	800d6d4 <_svfiprintf_r+0x12c>
 800d732:	2300      	movs	r3, #0
 800d734:	200a      	movs	r0, #10
 800d736:	001a      	movs	r2, r3
 800d738:	3501      	adds	r5, #1
 800d73a:	6063      	str	r3, [r4, #4]
 800d73c:	7829      	ldrb	r1, [r5, #0]
 800d73e:	1c6e      	adds	r6, r5, #1
 800d740:	3930      	subs	r1, #48	; 0x30
 800d742:	2909      	cmp	r1, #9
 800d744:	d903      	bls.n	800d74e <_svfiprintf_r+0x1a6>
 800d746:	2b00      	cmp	r3, #0
 800d748:	d0c5      	beq.n	800d6d6 <_svfiprintf_r+0x12e>
 800d74a:	9209      	str	r2, [sp, #36]	; 0x24
 800d74c:	e7c3      	b.n	800d6d6 <_svfiprintf_r+0x12e>
 800d74e:	4342      	muls	r2, r0
 800d750:	0035      	movs	r5, r6
 800d752:	2301      	movs	r3, #1
 800d754:	1852      	adds	r2, r2, r1
 800d756:	e7f1      	b.n	800d73c <_svfiprintf_r+0x194>
 800d758:	ab07      	add	r3, sp, #28
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	003a      	movs	r2, r7
 800d75e:	0021      	movs	r1, r4
 800d760:	4b10      	ldr	r3, [pc, #64]	; (800d7a4 <_svfiprintf_r+0x1fc>)
 800d762:	9803      	ldr	r0, [sp, #12]
 800d764:	f7fc fbf8 	bl	8009f58 <_printf_float>
 800d768:	9004      	str	r0, [sp, #16]
 800d76a:	9b04      	ldr	r3, [sp, #16]
 800d76c:	3301      	adds	r3, #1
 800d76e:	d1d3      	bne.n	800d718 <_svfiprintf_r+0x170>
 800d770:	89bb      	ldrh	r3, [r7, #12]
 800d772:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d774:	065b      	lsls	r3, r3, #25
 800d776:	d400      	bmi.n	800d77a <_svfiprintf_r+0x1d2>
 800d778:	e72d      	b.n	800d5d6 <_svfiprintf_r+0x2e>
 800d77a:	2001      	movs	r0, #1
 800d77c:	4240      	negs	r0, r0
 800d77e:	e72a      	b.n	800d5d6 <_svfiprintf_r+0x2e>
 800d780:	ab07      	add	r3, sp, #28
 800d782:	9300      	str	r3, [sp, #0]
 800d784:	003a      	movs	r2, r7
 800d786:	0021      	movs	r1, r4
 800d788:	4b06      	ldr	r3, [pc, #24]	; (800d7a4 <_svfiprintf_r+0x1fc>)
 800d78a:	9803      	ldr	r0, [sp, #12]
 800d78c:	f7fc fea2 	bl	800a4d4 <_printf_i>
 800d790:	e7ea      	b.n	800d768 <_svfiprintf_r+0x1c0>
 800d792:	46c0      	nop			; (mov r8, r8)
 800d794:	0800ea94 	.word	0x0800ea94
 800d798:	0800ea9a 	.word	0x0800ea9a
 800d79c:	0800ea9e 	.word	0x0800ea9e
 800d7a0:	08009f59 	.word	0x08009f59
 800d7a4:	0800d4e5 	.word	0x0800d4e5

0800d7a8 <nan>:
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	4901      	ldr	r1, [pc, #4]	; (800d7b0 <nan+0x8>)
 800d7ac:	4770      	bx	lr
 800d7ae:	46c0      	nop			; (mov r8, r8)
 800d7b0:	7ff80000 	.word	0x7ff80000

0800d7b4 <_sbrk_r>:
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	b570      	push	{r4, r5, r6, lr}
 800d7b8:	4d06      	ldr	r5, [pc, #24]	; (800d7d4 <_sbrk_r+0x20>)
 800d7ba:	0004      	movs	r4, r0
 800d7bc:	0008      	movs	r0, r1
 800d7be:	602b      	str	r3, [r5, #0]
 800d7c0:	f7f6 fd66 	bl	8004290 <_sbrk>
 800d7c4:	1c43      	adds	r3, r0, #1
 800d7c6:	d103      	bne.n	800d7d0 <_sbrk_r+0x1c>
 800d7c8:	682b      	ldr	r3, [r5, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d000      	beq.n	800d7d0 <_sbrk_r+0x1c>
 800d7ce:	6023      	str	r3, [r4, #0]
 800d7d0:	bd70      	pop	{r4, r5, r6, pc}
 800d7d2:	46c0      	nop			; (mov r8, r8)
 800d7d4:	200006d4 	.word	0x200006d4

0800d7d8 <strncmp>:
 800d7d8:	b530      	push	{r4, r5, lr}
 800d7da:	0005      	movs	r5, r0
 800d7dc:	1e10      	subs	r0, r2, #0
 800d7de:	d00b      	beq.n	800d7f8 <strncmp+0x20>
 800d7e0:	2400      	movs	r4, #0
 800d7e2:	3a01      	subs	r2, #1
 800d7e4:	5d2b      	ldrb	r3, [r5, r4]
 800d7e6:	5d08      	ldrb	r0, [r1, r4]
 800d7e8:	4283      	cmp	r3, r0
 800d7ea:	d104      	bne.n	800d7f6 <strncmp+0x1e>
 800d7ec:	4294      	cmp	r4, r2
 800d7ee:	d002      	beq.n	800d7f6 <strncmp+0x1e>
 800d7f0:	3401      	adds	r4, #1
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1f6      	bne.n	800d7e4 <strncmp+0xc>
 800d7f6:	1a18      	subs	r0, r3, r0
 800d7f8:	bd30      	pop	{r4, r5, pc}

0800d7fa <__ascii_wctomb>:
 800d7fa:	0003      	movs	r3, r0
 800d7fc:	1e08      	subs	r0, r1, #0
 800d7fe:	d005      	beq.n	800d80c <__ascii_wctomb+0x12>
 800d800:	2aff      	cmp	r2, #255	; 0xff
 800d802:	d904      	bls.n	800d80e <__ascii_wctomb+0x14>
 800d804:	228a      	movs	r2, #138	; 0x8a
 800d806:	2001      	movs	r0, #1
 800d808:	601a      	str	r2, [r3, #0]
 800d80a:	4240      	negs	r0, r0
 800d80c:	4770      	bx	lr
 800d80e:	2001      	movs	r0, #1
 800d810:	700a      	strb	r2, [r1, #0]
 800d812:	e7fb      	b.n	800d80c <__ascii_wctomb+0x12>

0800d814 <__assert_func>:
 800d814:	b530      	push	{r4, r5, lr}
 800d816:	0014      	movs	r4, r2
 800d818:	001a      	movs	r2, r3
 800d81a:	4b09      	ldr	r3, [pc, #36]	; (800d840 <__assert_func+0x2c>)
 800d81c:	0005      	movs	r5, r0
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	b085      	sub	sp, #20
 800d822:	68d8      	ldr	r0, [r3, #12]
 800d824:	4b07      	ldr	r3, [pc, #28]	; (800d844 <__assert_func+0x30>)
 800d826:	2c00      	cmp	r4, #0
 800d828:	d101      	bne.n	800d82e <__assert_func+0x1a>
 800d82a:	4b07      	ldr	r3, [pc, #28]	; (800d848 <__assert_func+0x34>)
 800d82c:	001c      	movs	r4, r3
 800d82e:	9301      	str	r3, [sp, #4]
 800d830:	9100      	str	r1, [sp, #0]
 800d832:	002b      	movs	r3, r5
 800d834:	4905      	ldr	r1, [pc, #20]	; (800d84c <__assert_func+0x38>)
 800d836:	9402      	str	r4, [sp, #8]
 800d838:	f000 f80a 	bl	800d850 <fiprintf>
 800d83c:	f000 fa92 	bl	800dd64 <abort>
 800d840:	2000000c 	.word	0x2000000c
 800d844:	0800eaa5 	.word	0x0800eaa5
 800d848:	0800eae0 	.word	0x0800eae0
 800d84c:	0800eab2 	.word	0x0800eab2

0800d850 <fiprintf>:
 800d850:	b40e      	push	{r1, r2, r3}
 800d852:	b503      	push	{r0, r1, lr}
 800d854:	0001      	movs	r1, r0
 800d856:	ab03      	add	r3, sp, #12
 800d858:	4804      	ldr	r0, [pc, #16]	; (800d86c <fiprintf+0x1c>)
 800d85a:	cb04      	ldmia	r3!, {r2}
 800d85c:	6800      	ldr	r0, [r0, #0]
 800d85e:	9301      	str	r3, [sp, #4]
 800d860:	f000 f878 	bl	800d954 <_vfiprintf_r>
 800d864:	b002      	add	sp, #8
 800d866:	bc08      	pop	{r3}
 800d868:	b003      	add	sp, #12
 800d86a:	4718      	bx	r3
 800d86c:	2000000c 	.word	0x2000000c

0800d870 <memmove>:
 800d870:	b510      	push	{r4, lr}
 800d872:	4288      	cmp	r0, r1
 800d874:	d902      	bls.n	800d87c <memmove+0xc>
 800d876:	188b      	adds	r3, r1, r2
 800d878:	4298      	cmp	r0, r3
 800d87a:	d303      	bcc.n	800d884 <memmove+0x14>
 800d87c:	2300      	movs	r3, #0
 800d87e:	e007      	b.n	800d890 <memmove+0x20>
 800d880:	5c8b      	ldrb	r3, [r1, r2]
 800d882:	5483      	strb	r3, [r0, r2]
 800d884:	3a01      	subs	r2, #1
 800d886:	d2fb      	bcs.n	800d880 <memmove+0x10>
 800d888:	bd10      	pop	{r4, pc}
 800d88a:	5ccc      	ldrb	r4, [r1, r3]
 800d88c:	54c4      	strb	r4, [r0, r3]
 800d88e:	3301      	adds	r3, #1
 800d890:	429a      	cmp	r2, r3
 800d892:	d1fa      	bne.n	800d88a <memmove+0x1a>
 800d894:	e7f8      	b.n	800d888 <memmove+0x18>
	...

0800d898 <__malloc_lock>:
 800d898:	b510      	push	{r4, lr}
 800d89a:	4802      	ldr	r0, [pc, #8]	; (800d8a4 <__malloc_lock+0xc>)
 800d89c:	f000 fc39 	bl	800e112 <__retarget_lock_acquire_recursive>
 800d8a0:	bd10      	pop	{r4, pc}
 800d8a2:	46c0      	nop			; (mov r8, r8)
 800d8a4:	200006dc 	.word	0x200006dc

0800d8a8 <__malloc_unlock>:
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	4802      	ldr	r0, [pc, #8]	; (800d8b4 <__malloc_unlock+0xc>)
 800d8ac:	f000 fc32 	bl	800e114 <__retarget_lock_release_recursive>
 800d8b0:	bd10      	pop	{r4, pc}
 800d8b2:	46c0      	nop			; (mov r8, r8)
 800d8b4:	200006dc 	.word	0x200006dc

0800d8b8 <_realloc_r>:
 800d8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ba:	0007      	movs	r7, r0
 800d8bc:	000d      	movs	r5, r1
 800d8be:	0016      	movs	r6, r2
 800d8c0:	2900      	cmp	r1, #0
 800d8c2:	d105      	bne.n	800d8d0 <_realloc_r+0x18>
 800d8c4:	0011      	movs	r1, r2
 800d8c6:	f7ff fdaf 	bl	800d428 <_malloc_r>
 800d8ca:	0004      	movs	r4, r0
 800d8cc:	0020      	movs	r0, r4
 800d8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8d0:	2a00      	cmp	r2, #0
 800d8d2:	d103      	bne.n	800d8dc <_realloc_r+0x24>
 800d8d4:	f7ff fd5e 	bl	800d394 <_free_r>
 800d8d8:	0034      	movs	r4, r6
 800d8da:	e7f7      	b.n	800d8cc <_realloc_r+0x14>
 800d8dc:	f000 fc88 	bl	800e1f0 <_malloc_usable_size_r>
 800d8e0:	002c      	movs	r4, r5
 800d8e2:	42b0      	cmp	r0, r6
 800d8e4:	d2f2      	bcs.n	800d8cc <_realloc_r+0x14>
 800d8e6:	0031      	movs	r1, r6
 800d8e8:	0038      	movs	r0, r7
 800d8ea:	f7ff fd9d 	bl	800d428 <_malloc_r>
 800d8ee:	1e04      	subs	r4, r0, #0
 800d8f0:	d0ec      	beq.n	800d8cc <_realloc_r+0x14>
 800d8f2:	0029      	movs	r1, r5
 800d8f4:	0032      	movs	r2, r6
 800d8f6:	f7ff f86c 	bl	800c9d2 <memcpy>
 800d8fa:	0029      	movs	r1, r5
 800d8fc:	0038      	movs	r0, r7
 800d8fe:	f7ff fd49 	bl	800d394 <_free_r>
 800d902:	e7e3      	b.n	800d8cc <_realloc_r+0x14>

0800d904 <__sfputc_r>:
 800d904:	6893      	ldr	r3, [r2, #8]
 800d906:	b510      	push	{r4, lr}
 800d908:	3b01      	subs	r3, #1
 800d90a:	6093      	str	r3, [r2, #8]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	da04      	bge.n	800d91a <__sfputc_r+0x16>
 800d910:	6994      	ldr	r4, [r2, #24]
 800d912:	42a3      	cmp	r3, r4
 800d914:	db07      	blt.n	800d926 <__sfputc_r+0x22>
 800d916:	290a      	cmp	r1, #10
 800d918:	d005      	beq.n	800d926 <__sfputc_r+0x22>
 800d91a:	6813      	ldr	r3, [r2, #0]
 800d91c:	1c58      	adds	r0, r3, #1
 800d91e:	6010      	str	r0, [r2, #0]
 800d920:	7019      	strb	r1, [r3, #0]
 800d922:	0008      	movs	r0, r1
 800d924:	bd10      	pop	{r4, pc}
 800d926:	f000 f94f 	bl	800dbc8 <__swbuf_r>
 800d92a:	0001      	movs	r1, r0
 800d92c:	e7f9      	b.n	800d922 <__sfputc_r+0x1e>

0800d92e <__sfputs_r>:
 800d92e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d930:	0006      	movs	r6, r0
 800d932:	000f      	movs	r7, r1
 800d934:	0014      	movs	r4, r2
 800d936:	18d5      	adds	r5, r2, r3
 800d938:	42ac      	cmp	r4, r5
 800d93a:	d101      	bne.n	800d940 <__sfputs_r+0x12>
 800d93c:	2000      	movs	r0, #0
 800d93e:	e007      	b.n	800d950 <__sfputs_r+0x22>
 800d940:	7821      	ldrb	r1, [r4, #0]
 800d942:	003a      	movs	r2, r7
 800d944:	0030      	movs	r0, r6
 800d946:	f7ff ffdd 	bl	800d904 <__sfputc_r>
 800d94a:	3401      	adds	r4, #1
 800d94c:	1c43      	adds	r3, r0, #1
 800d94e:	d1f3      	bne.n	800d938 <__sfputs_r+0xa>
 800d950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d954 <_vfiprintf_r>:
 800d954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d956:	b0a1      	sub	sp, #132	; 0x84
 800d958:	0006      	movs	r6, r0
 800d95a:	000c      	movs	r4, r1
 800d95c:	001f      	movs	r7, r3
 800d95e:	9203      	str	r2, [sp, #12]
 800d960:	2800      	cmp	r0, #0
 800d962:	d004      	beq.n	800d96e <_vfiprintf_r+0x1a>
 800d964:	6983      	ldr	r3, [r0, #24]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d101      	bne.n	800d96e <_vfiprintf_r+0x1a>
 800d96a:	f000 fb31 	bl	800dfd0 <__sinit>
 800d96e:	4b8e      	ldr	r3, [pc, #568]	; (800dba8 <_vfiprintf_r+0x254>)
 800d970:	429c      	cmp	r4, r3
 800d972:	d11c      	bne.n	800d9ae <_vfiprintf_r+0x5a>
 800d974:	6874      	ldr	r4, [r6, #4]
 800d976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d978:	07db      	lsls	r3, r3, #31
 800d97a:	d405      	bmi.n	800d988 <_vfiprintf_r+0x34>
 800d97c:	89a3      	ldrh	r3, [r4, #12]
 800d97e:	059b      	lsls	r3, r3, #22
 800d980:	d402      	bmi.n	800d988 <_vfiprintf_r+0x34>
 800d982:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d984:	f000 fbc5 	bl	800e112 <__retarget_lock_acquire_recursive>
 800d988:	89a3      	ldrh	r3, [r4, #12]
 800d98a:	071b      	lsls	r3, r3, #28
 800d98c:	d502      	bpl.n	800d994 <_vfiprintf_r+0x40>
 800d98e:	6923      	ldr	r3, [r4, #16]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d11d      	bne.n	800d9d0 <_vfiprintf_r+0x7c>
 800d994:	0021      	movs	r1, r4
 800d996:	0030      	movs	r0, r6
 800d998:	f000 f96c 	bl	800dc74 <__swsetup_r>
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d017      	beq.n	800d9d0 <_vfiprintf_r+0x7c>
 800d9a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9a2:	07db      	lsls	r3, r3, #31
 800d9a4:	d50d      	bpl.n	800d9c2 <_vfiprintf_r+0x6e>
 800d9a6:	2001      	movs	r0, #1
 800d9a8:	4240      	negs	r0, r0
 800d9aa:	b021      	add	sp, #132	; 0x84
 800d9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9ae:	4b7f      	ldr	r3, [pc, #508]	; (800dbac <_vfiprintf_r+0x258>)
 800d9b0:	429c      	cmp	r4, r3
 800d9b2:	d101      	bne.n	800d9b8 <_vfiprintf_r+0x64>
 800d9b4:	68b4      	ldr	r4, [r6, #8]
 800d9b6:	e7de      	b.n	800d976 <_vfiprintf_r+0x22>
 800d9b8:	4b7d      	ldr	r3, [pc, #500]	; (800dbb0 <_vfiprintf_r+0x25c>)
 800d9ba:	429c      	cmp	r4, r3
 800d9bc:	d1db      	bne.n	800d976 <_vfiprintf_r+0x22>
 800d9be:	68f4      	ldr	r4, [r6, #12]
 800d9c0:	e7d9      	b.n	800d976 <_vfiprintf_r+0x22>
 800d9c2:	89a3      	ldrh	r3, [r4, #12]
 800d9c4:	059b      	lsls	r3, r3, #22
 800d9c6:	d4ee      	bmi.n	800d9a6 <_vfiprintf_r+0x52>
 800d9c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9ca:	f000 fba3 	bl	800e114 <__retarget_lock_release_recursive>
 800d9ce:	e7ea      	b.n	800d9a6 <_vfiprintf_r+0x52>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	ad08      	add	r5, sp, #32
 800d9d4:	616b      	str	r3, [r5, #20]
 800d9d6:	3320      	adds	r3, #32
 800d9d8:	766b      	strb	r3, [r5, #25]
 800d9da:	3310      	adds	r3, #16
 800d9dc:	76ab      	strb	r3, [r5, #26]
 800d9de:	9707      	str	r7, [sp, #28]
 800d9e0:	9f03      	ldr	r7, [sp, #12]
 800d9e2:	783b      	ldrb	r3, [r7, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d001      	beq.n	800d9ec <_vfiprintf_r+0x98>
 800d9e8:	2b25      	cmp	r3, #37	; 0x25
 800d9ea:	d14e      	bne.n	800da8a <_vfiprintf_r+0x136>
 800d9ec:	9b03      	ldr	r3, [sp, #12]
 800d9ee:	1afb      	subs	r3, r7, r3
 800d9f0:	9305      	str	r3, [sp, #20]
 800d9f2:	9b03      	ldr	r3, [sp, #12]
 800d9f4:	429f      	cmp	r7, r3
 800d9f6:	d00d      	beq.n	800da14 <_vfiprintf_r+0xc0>
 800d9f8:	9b05      	ldr	r3, [sp, #20]
 800d9fa:	0021      	movs	r1, r4
 800d9fc:	0030      	movs	r0, r6
 800d9fe:	9a03      	ldr	r2, [sp, #12]
 800da00:	f7ff ff95 	bl	800d92e <__sfputs_r>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	d100      	bne.n	800da0a <_vfiprintf_r+0xb6>
 800da08:	e0b5      	b.n	800db76 <_vfiprintf_r+0x222>
 800da0a:	696a      	ldr	r2, [r5, #20]
 800da0c:	9b05      	ldr	r3, [sp, #20]
 800da0e:	4694      	mov	ip, r2
 800da10:	4463      	add	r3, ip
 800da12:	616b      	str	r3, [r5, #20]
 800da14:	783b      	ldrb	r3, [r7, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d100      	bne.n	800da1c <_vfiprintf_r+0xc8>
 800da1a:	e0ac      	b.n	800db76 <_vfiprintf_r+0x222>
 800da1c:	2201      	movs	r2, #1
 800da1e:	1c7b      	adds	r3, r7, #1
 800da20:	9303      	str	r3, [sp, #12]
 800da22:	2300      	movs	r3, #0
 800da24:	4252      	negs	r2, r2
 800da26:	606a      	str	r2, [r5, #4]
 800da28:	a904      	add	r1, sp, #16
 800da2a:	3254      	adds	r2, #84	; 0x54
 800da2c:	1852      	adds	r2, r2, r1
 800da2e:	602b      	str	r3, [r5, #0]
 800da30:	60eb      	str	r3, [r5, #12]
 800da32:	60ab      	str	r3, [r5, #8]
 800da34:	7013      	strb	r3, [r2, #0]
 800da36:	65ab      	str	r3, [r5, #88]	; 0x58
 800da38:	9b03      	ldr	r3, [sp, #12]
 800da3a:	2205      	movs	r2, #5
 800da3c:	7819      	ldrb	r1, [r3, #0]
 800da3e:	485d      	ldr	r0, [pc, #372]	; (800dbb4 <_vfiprintf_r+0x260>)
 800da40:	f7fe ffbc 	bl	800c9bc <memchr>
 800da44:	9b03      	ldr	r3, [sp, #12]
 800da46:	1c5f      	adds	r7, r3, #1
 800da48:	2800      	cmp	r0, #0
 800da4a:	d120      	bne.n	800da8e <_vfiprintf_r+0x13a>
 800da4c:	682a      	ldr	r2, [r5, #0]
 800da4e:	06d3      	lsls	r3, r2, #27
 800da50:	d504      	bpl.n	800da5c <_vfiprintf_r+0x108>
 800da52:	2353      	movs	r3, #83	; 0x53
 800da54:	a904      	add	r1, sp, #16
 800da56:	185b      	adds	r3, r3, r1
 800da58:	2120      	movs	r1, #32
 800da5a:	7019      	strb	r1, [r3, #0]
 800da5c:	0713      	lsls	r3, r2, #28
 800da5e:	d504      	bpl.n	800da6a <_vfiprintf_r+0x116>
 800da60:	2353      	movs	r3, #83	; 0x53
 800da62:	a904      	add	r1, sp, #16
 800da64:	185b      	adds	r3, r3, r1
 800da66:	212b      	movs	r1, #43	; 0x2b
 800da68:	7019      	strb	r1, [r3, #0]
 800da6a:	9b03      	ldr	r3, [sp, #12]
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	2b2a      	cmp	r3, #42	; 0x2a
 800da70:	d016      	beq.n	800daa0 <_vfiprintf_r+0x14c>
 800da72:	2100      	movs	r1, #0
 800da74:	68eb      	ldr	r3, [r5, #12]
 800da76:	9f03      	ldr	r7, [sp, #12]
 800da78:	783a      	ldrb	r2, [r7, #0]
 800da7a:	1c78      	adds	r0, r7, #1
 800da7c:	3a30      	subs	r2, #48	; 0x30
 800da7e:	4684      	mov	ip, r0
 800da80:	2a09      	cmp	r2, #9
 800da82:	d94f      	bls.n	800db24 <_vfiprintf_r+0x1d0>
 800da84:	2900      	cmp	r1, #0
 800da86:	d111      	bne.n	800daac <_vfiprintf_r+0x158>
 800da88:	e017      	b.n	800daba <_vfiprintf_r+0x166>
 800da8a:	3701      	adds	r7, #1
 800da8c:	e7a9      	b.n	800d9e2 <_vfiprintf_r+0x8e>
 800da8e:	4b49      	ldr	r3, [pc, #292]	; (800dbb4 <_vfiprintf_r+0x260>)
 800da90:	682a      	ldr	r2, [r5, #0]
 800da92:	1ac0      	subs	r0, r0, r3
 800da94:	2301      	movs	r3, #1
 800da96:	4083      	lsls	r3, r0
 800da98:	4313      	orrs	r3, r2
 800da9a:	602b      	str	r3, [r5, #0]
 800da9c:	9703      	str	r7, [sp, #12]
 800da9e:	e7cb      	b.n	800da38 <_vfiprintf_r+0xe4>
 800daa0:	9b07      	ldr	r3, [sp, #28]
 800daa2:	1d19      	adds	r1, r3, #4
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	9107      	str	r1, [sp, #28]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	db01      	blt.n	800dab0 <_vfiprintf_r+0x15c>
 800daac:	930b      	str	r3, [sp, #44]	; 0x2c
 800daae:	e004      	b.n	800daba <_vfiprintf_r+0x166>
 800dab0:	425b      	negs	r3, r3
 800dab2:	60eb      	str	r3, [r5, #12]
 800dab4:	2302      	movs	r3, #2
 800dab6:	4313      	orrs	r3, r2
 800dab8:	602b      	str	r3, [r5, #0]
 800daba:	783b      	ldrb	r3, [r7, #0]
 800dabc:	2b2e      	cmp	r3, #46	; 0x2e
 800dabe:	d10a      	bne.n	800dad6 <_vfiprintf_r+0x182>
 800dac0:	787b      	ldrb	r3, [r7, #1]
 800dac2:	2b2a      	cmp	r3, #42	; 0x2a
 800dac4:	d137      	bne.n	800db36 <_vfiprintf_r+0x1e2>
 800dac6:	9b07      	ldr	r3, [sp, #28]
 800dac8:	3702      	adds	r7, #2
 800daca:	1d1a      	adds	r2, r3, #4
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	9207      	str	r2, [sp, #28]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	db2d      	blt.n	800db30 <_vfiprintf_r+0x1dc>
 800dad4:	9309      	str	r3, [sp, #36]	; 0x24
 800dad6:	2203      	movs	r2, #3
 800dad8:	7839      	ldrb	r1, [r7, #0]
 800dada:	4837      	ldr	r0, [pc, #220]	; (800dbb8 <_vfiprintf_r+0x264>)
 800dadc:	f7fe ff6e 	bl	800c9bc <memchr>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d007      	beq.n	800daf4 <_vfiprintf_r+0x1a0>
 800dae4:	4b34      	ldr	r3, [pc, #208]	; (800dbb8 <_vfiprintf_r+0x264>)
 800dae6:	682a      	ldr	r2, [r5, #0]
 800dae8:	1ac0      	subs	r0, r0, r3
 800daea:	2340      	movs	r3, #64	; 0x40
 800daec:	4083      	lsls	r3, r0
 800daee:	4313      	orrs	r3, r2
 800daf0:	3701      	adds	r7, #1
 800daf2:	602b      	str	r3, [r5, #0]
 800daf4:	7839      	ldrb	r1, [r7, #0]
 800daf6:	1c7b      	adds	r3, r7, #1
 800daf8:	2206      	movs	r2, #6
 800dafa:	4830      	ldr	r0, [pc, #192]	; (800dbbc <_vfiprintf_r+0x268>)
 800dafc:	9303      	str	r3, [sp, #12]
 800dafe:	7629      	strb	r1, [r5, #24]
 800db00:	f7fe ff5c 	bl	800c9bc <memchr>
 800db04:	2800      	cmp	r0, #0
 800db06:	d045      	beq.n	800db94 <_vfiprintf_r+0x240>
 800db08:	4b2d      	ldr	r3, [pc, #180]	; (800dbc0 <_vfiprintf_r+0x26c>)
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d127      	bne.n	800db5e <_vfiprintf_r+0x20a>
 800db0e:	2207      	movs	r2, #7
 800db10:	9b07      	ldr	r3, [sp, #28]
 800db12:	3307      	adds	r3, #7
 800db14:	4393      	bics	r3, r2
 800db16:	3308      	adds	r3, #8
 800db18:	9307      	str	r3, [sp, #28]
 800db1a:	696b      	ldr	r3, [r5, #20]
 800db1c:	9a04      	ldr	r2, [sp, #16]
 800db1e:	189b      	adds	r3, r3, r2
 800db20:	616b      	str	r3, [r5, #20]
 800db22:	e75d      	b.n	800d9e0 <_vfiprintf_r+0x8c>
 800db24:	210a      	movs	r1, #10
 800db26:	434b      	muls	r3, r1
 800db28:	4667      	mov	r7, ip
 800db2a:	189b      	adds	r3, r3, r2
 800db2c:	3909      	subs	r1, #9
 800db2e:	e7a3      	b.n	800da78 <_vfiprintf_r+0x124>
 800db30:	2301      	movs	r3, #1
 800db32:	425b      	negs	r3, r3
 800db34:	e7ce      	b.n	800dad4 <_vfiprintf_r+0x180>
 800db36:	2300      	movs	r3, #0
 800db38:	001a      	movs	r2, r3
 800db3a:	3701      	adds	r7, #1
 800db3c:	606b      	str	r3, [r5, #4]
 800db3e:	7839      	ldrb	r1, [r7, #0]
 800db40:	1c78      	adds	r0, r7, #1
 800db42:	3930      	subs	r1, #48	; 0x30
 800db44:	4684      	mov	ip, r0
 800db46:	2909      	cmp	r1, #9
 800db48:	d903      	bls.n	800db52 <_vfiprintf_r+0x1fe>
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d0c3      	beq.n	800dad6 <_vfiprintf_r+0x182>
 800db4e:	9209      	str	r2, [sp, #36]	; 0x24
 800db50:	e7c1      	b.n	800dad6 <_vfiprintf_r+0x182>
 800db52:	230a      	movs	r3, #10
 800db54:	435a      	muls	r2, r3
 800db56:	4667      	mov	r7, ip
 800db58:	1852      	adds	r2, r2, r1
 800db5a:	3b09      	subs	r3, #9
 800db5c:	e7ef      	b.n	800db3e <_vfiprintf_r+0x1ea>
 800db5e:	ab07      	add	r3, sp, #28
 800db60:	9300      	str	r3, [sp, #0]
 800db62:	0022      	movs	r2, r4
 800db64:	0029      	movs	r1, r5
 800db66:	0030      	movs	r0, r6
 800db68:	4b16      	ldr	r3, [pc, #88]	; (800dbc4 <_vfiprintf_r+0x270>)
 800db6a:	f7fc f9f5 	bl	8009f58 <_printf_float>
 800db6e:	9004      	str	r0, [sp, #16]
 800db70:	9b04      	ldr	r3, [sp, #16]
 800db72:	3301      	adds	r3, #1
 800db74:	d1d1      	bne.n	800db1a <_vfiprintf_r+0x1c6>
 800db76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db78:	07db      	lsls	r3, r3, #31
 800db7a:	d405      	bmi.n	800db88 <_vfiprintf_r+0x234>
 800db7c:	89a3      	ldrh	r3, [r4, #12]
 800db7e:	059b      	lsls	r3, r3, #22
 800db80:	d402      	bmi.n	800db88 <_vfiprintf_r+0x234>
 800db82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db84:	f000 fac6 	bl	800e114 <__retarget_lock_release_recursive>
 800db88:	89a3      	ldrh	r3, [r4, #12]
 800db8a:	065b      	lsls	r3, r3, #25
 800db8c:	d500      	bpl.n	800db90 <_vfiprintf_r+0x23c>
 800db8e:	e70a      	b.n	800d9a6 <_vfiprintf_r+0x52>
 800db90:	980d      	ldr	r0, [sp, #52]	; 0x34
 800db92:	e70a      	b.n	800d9aa <_vfiprintf_r+0x56>
 800db94:	ab07      	add	r3, sp, #28
 800db96:	9300      	str	r3, [sp, #0]
 800db98:	0022      	movs	r2, r4
 800db9a:	0029      	movs	r1, r5
 800db9c:	0030      	movs	r0, r6
 800db9e:	4b09      	ldr	r3, [pc, #36]	; (800dbc4 <_vfiprintf_r+0x270>)
 800dba0:	f7fc fc98 	bl	800a4d4 <_printf_i>
 800dba4:	e7e3      	b.n	800db6e <_vfiprintf_r+0x21a>
 800dba6:	46c0      	nop			; (mov r8, r8)
 800dba8:	0800eb04 	.word	0x0800eb04
 800dbac:	0800eb24 	.word	0x0800eb24
 800dbb0:	0800eae4 	.word	0x0800eae4
 800dbb4:	0800ea94 	.word	0x0800ea94
 800dbb8:	0800ea9a 	.word	0x0800ea9a
 800dbbc:	0800ea9e 	.word	0x0800ea9e
 800dbc0:	08009f59 	.word	0x08009f59
 800dbc4:	0800d92f 	.word	0x0800d92f

0800dbc8 <__swbuf_r>:
 800dbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbca:	0005      	movs	r5, r0
 800dbcc:	000e      	movs	r6, r1
 800dbce:	0014      	movs	r4, r2
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d004      	beq.n	800dbde <__swbuf_r+0x16>
 800dbd4:	6983      	ldr	r3, [r0, #24]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d101      	bne.n	800dbde <__swbuf_r+0x16>
 800dbda:	f000 f9f9 	bl	800dfd0 <__sinit>
 800dbde:	4b22      	ldr	r3, [pc, #136]	; (800dc68 <__swbuf_r+0xa0>)
 800dbe0:	429c      	cmp	r4, r3
 800dbe2:	d12e      	bne.n	800dc42 <__swbuf_r+0x7a>
 800dbe4:	686c      	ldr	r4, [r5, #4]
 800dbe6:	69a3      	ldr	r3, [r4, #24]
 800dbe8:	60a3      	str	r3, [r4, #8]
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	071b      	lsls	r3, r3, #28
 800dbee:	d532      	bpl.n	800dc56 <__swbuf_r+0x8e>
 800dbf0:	6923      	ldr	r3, [r4, #16]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d02f      	beq.n	800dc56 <__swbuf_r+0x8e>
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	6922      	ldr	r2, [r4, #16]
 800dbfa:	b2f7      	uxtb	r7, r6
 800dbfc:	1a98      	subs	r0, r3, r2
 800dbfe:	6963      	ldr	r3, [r4, #20]
 800dc00:	b2f6      	uxtb	r6, r6
 800dc02:	4283      	cmp	r3, r0
 800dc04:	dc05      	bgt.n	800dc12 <__swbuf_r+0x4a>
 800dc06:	0021      	movs	r1, r4
 800dc08:	0028      	movs	r0, r5
 800dc0a:	f000 f93f 	bl	800de8c <_fflush_r>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d127      	bne.n	800dc62 <__swbuf_r+0x9a>
 800dc12:	68a3      	ldr	r3, [r4, #8]
 800dc14:	3001      	adds	r0, #1
 800dc16:	3b01      	subs	r3, #1
 800dc18:	60a3      	str	r3, [r4, #8]
 800dc1a:	6823      	ldr	r3, [r4, #0]
 800dc1c:	1c5a      	adds	r2, r3, #1
 800dc1e:	6022      	str	r2, [r4, #0]
 800dc20:	701f      	strb	r7, [r3, #0]
 800dc22:	6963      	ldr	r3, [r4, #20]
 800dc24:	4283      	cmp	r3, r0
 800dc26:	d004      	beq.n	800dc32 <__swbuf_r+0x6a>
 800dc28:	89a3      	ldrh	r3, [r4, #12]
 800dc2a:	07db      	lsls	r3, r3, #31
 800dc2c:	d507      	bpl.n	800dc3e <__swbuf_r+0x76>
 800dc2e:	2e0a      	cmp	r6, #10
 800dc30:	d105      	bne.n	800dc3e <__swbuf_r+0x76>
 800dc32:	0021      	movs	r1, r4
 800dc34:	0028      	movs	r0, r5
 800dc36:	f000 f929 	bl	800de8c <_fflush_r>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d111      	bne.n	800dc62 <__swbuf_r+0x9a>
 800dc3e:	0030      	movs	r0, r6
 800dc40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc42:	4b0a      	ldr	r3, [pc, #40]	; (800dc6c <__swbuf_r+0xa4>)
 800dc44:	429c      	cmp	r4, r3
 800dc46:	d101      	bne.n	800dc4c <__swbuf_r+0x84>
 800dc48:	68ac      	ldr	r4, [r5, #8]
 800dc4a:	e7cc      	b.n	800dbe6 <__swbuf_r+0x1e>
 800dc4c:	4b08      	ldr	r3, [pc, #32]	; (800dc70 <__swbuf_r+0xa8>)
 800dc4e:	429c      	cmp	r4, r3
 800dc50:	d1c9      	bne.n	800dbe6 <__swbuf_r+0x1e>
 800dc52:	68ec      	ldr	r4, [r5, #12]
 800dc54:	e7c7      	b.n	800dbe6 <__swbuf_r+0x1e>
 800dc56:	0021      	movs	r1, r4
 800dc58:	0028      	movs	r0, r5
 800dc5a:	f000 f80b 	bl	800dc74 <__swsetup_r>
 800dc5e:	2800      	cmp	r0, #0
 800dc60:	d0c9      	beq.n	800dbf6 <__swbuf_r+0x2e>
 800dc62:	2601      	movs	r6, #1
 800dc64:	4276      	negs	r6, r6
 800dc66:	e7ea      	b.n	800dc3e <__swbuf_r+0x76>
 800dc68:	0800eb04 	.word	0x0800eb04
 800dc6c:	0800eb24 	.word	0x0800eb24
 800dc70:	0800eae4 	.word	0x0800eae4

0800dc74 <__swsetup_r>:
 800dc74:	4b37      	ldr	r3, [pc, #220]	; (800dd54 <__swsetup_r+0xe0>)
 800dc76:	b570      	push	{r4, r5, r6, lr}
 800dc78:	681d      	ldr	r5, [r3, #0]
 800dc7a:	0006      	movs	r6, r0
 800dc7c:	000c      	movs	r4, r1
 800dc7e:	2d00      	cmp	r5, #0
 800dc80:	d005      	beq.n	800dc8e <__swsetup_r+0x1a>
 800dc82:	69ab      	ldr	r3, [r5, #24]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d102      	bne.n	800dc8e <__swsetup_r+0x1a>
 800dc88:	0028      	movs	r0, r5
 800dc8a:	f000 f9a1 	bl	800dfd0 <__sinit>
 800dc8e:	4b32      	ldr	r3, [pc, #200]	; (800dd58 <__swsetup_r+0xe4>)
 800dc90:	429c      	cmp	r4, r3
 800dc92:	d10f      	bne.n	800dcb4 <__swsetup_r+0x40>
 800dc94:	686c      	ldr	r4, [r5, #4]
 800dc96:	230c      	movs	r3, #12
 800dc98:	5ee2      	ldrsh	r2, [r4, r3]
 800dc9a:	b293      	uxth	r3, r2
 800dc9c:	0711      	lsls	r1, r2, #28
 800dc9e:	d42d      	bmi.n	800dcfc <__swsetup_r+0x88>
 800dca0:	06d9      	lsls	r1, r3, #27
 800dca2:	d411      	bmi.n	800dcc8 <__swsetup_r+0x54>
 800dca4:	2309      	movs	r3, #9
 800dca6:	2001      	movs	r0, #1
 800dca8:	6033      	str	r3, [r6, #0]
 800dcaa:	3337      	adds	r3, #55	; 0x37
 800dcac:	4313      	orrs	r3, r2
 800dcae:	81a3      	strh	r3, [r4, #12]
 800dcb0:	4240      	negs	r0, r0
 800dcb2:	bd70      	pop	{r4, r5, r6, pc}
 800dcb4:	4b29      	ldr	r3, [pc, #164]	; (800dd5c <__swsetup_r+0xe8>)
 800dcb6:	429c      	cmp	r4, r3
 800dcb8:	d101      	bne.n	800dcbe <__swsetup_r+0x4a>
 800dcba:	68ac      	ldr	r4, [r5, #8]
 800dcbc:	e7eb      	b.n	800dc96 <__swsetup_r+0x22>
 800dcbe:	4b28      	ldr	r3, [pc, #160]	; (800dd60 <__swsetup_r+0xec>)
 800dcc0:	429c      	cmp	r4, r3
 800dcc2:	d1e8      	bne.n	800dc96 <__swsetup_r+0x22>
 800dcc4:	68ec      	ldr	r4, [r5, #12]
 800dcc6:	e7e6      	b.n	800dc96 <__swsetup_r+0x22>
 800dcc8:	075b      	lsls	r3, r3, #29
 800dcca:	d513      	bpl.n	800dcf4 <__swsetup_r+0x80>
 800dccc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcce:	2900      	cmp	r1, #0
 800dcd0:	d008      	beq.n	800dce4 <__swsetup_r+0x70>
 800dcd2:	0023      	movs	r3, r4
 800dcd4:	3344      	adds	r3, #68	; 0x44
 800dcd6:	4299      	cmp	r1, r3
 800dcd8:	d002      	beq.n	800dce0 <__swsetup_r+0x6c>
 800dcda:	0030      	movs	r0, r6
 800dcdc:	f7ff fb5a 	bl	800d394 <_free_r>
 800dce0:	2300      	movs	r3, #0
 800dce2:	6363      	str	r3, [r4, #52]	; 0x34
 800dce4:	2224      	movs	r2, #36	; 0x24
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	4393      	bics	r3, r2
 800dcea:	81a3      	strh	r3, [r4, #12]
 800dcec:	2300      	movs	r3, #0
 800dcee:	6063      	str	r3, [r4, #4]
 800dcf0:	6923      	ldr	r3, [r4, #16]
 800dcf2:	6023      	str	r3, [r4, #0]
 800dcf4:	2308      	movs	r3, #8
 800dcf6:	89a2      	ldrh	r2, [r4, #12]
 800dcf8:	4313      	orrs	r3, r2
 800dcfa:	81a3      	strh	r3, [r4, #12]
 800dcfc:	6923      	ldr	r3, [r4, #16]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10b      	bne.n	800dd1a <__swsetup_r+0xa6>
 800dd02:	21a0      	movs	r1, #160	; 0xa0
 800dd04:	2280      	movs	r2, #128	; 0x80
 800dd06:	89a3      	ldrh	r3, [r4, #12]
 800dd08:	0089      	lsls	r1, r1, #2
 800dd0a:	0092      	lsls	r2, r2, #2
 800dd0c:	400b      	ands	r3, r1
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d003      	beq.n	800dd1a <__swsetup_r+0xa6>
 800dd12:	0021      	movs	r1, r4
 800dd14:	0030      	movs	r0, r6
 800dd16:	f000 fa27 	bl	800e168 <__smakebuf_r>
 800dd1a:	220c      	movs	r2, #12
 800dd1c:	5ea3      	ldrsh	r3, [r4, r2]
 800dd1e:	2001      	movs	r0, #1
 800dd20:	001a      	movs	r2, r3
 800dd22:	b299      	uxth	r1, r3
 800dd24:	4002      	ands	r2, r0
 800dd26:	4203      	tst	r3, r0
 800dd28:	d00f      	beq.n	800dd4a <__swsetup_r+0xd6>
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	60a2      	str	r2, [r4, #8]
 800dd2e:	6962      	ldr	r2, [r4, #20]
 800dd30:	4252      	negs	r2, r2
 800dd32:	61a2      	str	r2, [r4, #24]
 800dd34:	2000      	movs	r0, #0
 800dd36:	6922      	ldr	r2, [r4, #16]
 800dd38:	4282      	cmp	r2, r0
 800dd3a:	d1ba      	bne.n	800dcb2 <__swsetup_r+0x3e>
 800dd3c:	060a      	lsls	r2, r1, #24
 800dd3e:	d5b8      	bpl.n	800dcb2 <__swsetup_r+0x3e>
 800dd40:	2240      	movs	r2, #64	; 0x40
 800dd42:	4313      	orrs	r3, r2
 800dd44:	81a3      	strh	r3, [r4, #12]
 800dd46:	3801      	subs	r0, #1
 800dd48:	e7b3      	b.n	800dcb2 <__swsetup_r+0x3e>
 800dd4a:	0788      	lsls	r0, r1, #30
 800dd4c:	d400      	bmi.n	800dd50 <__swsetup_r+0xdc>
 800dd4e:	6962      	ldr	r2, [r4, #20]
 800dd50:	60a2      	str	r2, [r4, #8]
 800dd52:	e7ef      	b.n	800dd34 <__swsetup_r+0xc0>
 800dd54:	2000000c 	.word	0x2000000c
 800dd58:	0800eb04 	.word	0x0800eb04
 800dd5c:	0800eb24 	.word	0x0800eb24
 800dd60:	0800eae4 	.word	0x0800eae4

0800dd64 <abort>:
 800dd64:	2006      	movs	r0, #6
 800dd66:	b510      	push	{r4, lr}
 800dd68:	f000 fa74 	bl	800e254 <raise>
 800dd6c:	2001      	movs	r0, #1
 800dd6e:	f7f6 fa1d 	bl	80041ac <_exit>
	...

0800dd74 <__sflush_r>:
 800dd74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd76:	898b      	ldrh	r3, [r1, #12]
 800dd78:	0005      	movs	r5, r0
 800dd7a:	000c      	movs	r4, r1
 800dd7c:	071a      	lsls	r2, r3, #28
 800dd7e:	d45f      	bmi.n	800de40 <__sflush_r+0xcc>
 800dd80:	684a      	ldr	r2, [r1, #4]
 800dd82:	2a00      	cmp	r2, #0
 800dd84:	dc04      	bgt.n	800dd90 <__sflush_r+0x1c>
 800dd86:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800dd88:	2a00      	cmp	r2, #0
 800dd8a:	dc01      	bgt.n	800dd90 <__sflush_r+0x1c>
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dd90:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800dd92:	2f00      	cmp	r7, #0
 800dd94:	d0fa      	beq.n	800dd8c <__sflush_r+0x18>
 800dd96:	2200      	movs	r2, #0
 800dd98:	2180      	movs	r1, #128	; 0x80
 800dd9a:	682e      	ldr	r6, [r5, #0]
 800dd9c:	602a      	str	r2, [r5, #0]
 800dd9e:	001a      	movs	r2, r3
 800dda0:	0149      	lsls	r1, r1, #5
 800dda2:	400a      	ands	r2, r1
 800dda4:	420b      	tst	r3, r1
 800dda6:	d034      	beq.n	800de12 <__sflush_r+0x9e>
 800dda8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ddaa:	89a3      	ldrh	r3, [r4, #12]
 800ddac:	075b      	lsls	r3, r3, #29
 800ddae:	d506      	bpl.n	800ddbe <__sflush_r+0x4a>
 800ddb0:	6863      	ldr	r3, [r4, #4]
 800ddb2:	1ac0      	subs	r0, r0, r3
 800ddb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d001      	beq.n	800ddbe <__sflush_r+0x4a>
 800ddba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddbc:	1ac0      	subs	r0, r0, r3
 800ddbe:	0002      	movs	r2, r0
 800ddc0:	6a21      	ldr	r1, [r4, #32]
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	0028      	movs	r0, r5
 800ddc6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ddc8:	47b8      	blx	r7
 800ddca:	89a1      	ldrh	r1, [r4, #12]
 800ddcc:	1c43      	adds	r3, r0, #1
 800ddce:	d106      	bne.n	800ddde <__sflush_r+0x6a>
 800ddd0:	682b      	ldr	r3, [r5, #0]
 800ddd2:	2b1d      	cmp	r3, #29
 800ddd4:	d831      	bhi.n	800de3a <__sflush_r+0xc6>
 800ddd6:	4a2c      	ldr	r2, [pc, #176]	; (800de88 <__sflush_r+0x114>)
 800ddd8:	40da      	lsrs	r2, r3
 800ddda:	07d3      	lsls	r3, r2, #31
 800dddc:	d52d      	bpl.n	800de3a <__sflush_r+0xc6>
 800ddde:	2300      	movs	r3, #0
 800dde0:	6063      	str	r3, [r4, #4]
 800dde2:	6923      	ldr	r3, [r4, #16]
 800dde4:	6023      	str	r3, [r4, #0]
 800dde6:	04cb      	lsls	r3, r1, #19
 800dde8:	d505      	bpl.n	800ddf6 <__sflush_r+0x82>
 800ddea:	1c43      	adds	r3, r0, #1
 800ddec:	d102      	bne.n	800ddf4 <__sflush_r+0x80>
 800ddee:	682b      	ldr	r3, [r5, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d100      	bne.n	800ddf6 <__sflush_r+0x82>
 800ddf4:	6560      	str	r0, [r4, #84]	; 0x54
 800ddf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddf8:	602e      	str	r6, [r5, #0]
 800ddfa:	2900      	cmp	r1, #0
 800ddfc:	d0c6      	beq.n	800dd8c <__sflush_r+0x18>
 800ddfe:	0023      	movs	r3, r4
 800de00:	3344      	adds	r3, #68	; 0x44
 800de02:	4299      	cmp	r1, r3
 800de04:	d002      	beq.n	800de0c <__sflush_r+0x98>
 800de06:	0028      	movs	r0, r5
 800de08:	f7ff fac4 	bl	800d394 <_free_r>
 800de0c:	2000      	movs	r0, #0
 800de0e:	6360      	str	r0, [r4, #52]	; 0x34
 800de10:	e7bd      	b.n	800dd8e <__sflush_r+0x1a>
 800de12:	2301      	movs	r3, #1
 800de14:	0028      	movs	r0, r5
 800de16:	6a21      	ldr	r1, [r4, #32]
 800de18:	47b8      	blx	r7
 800de1a:	1c43      	adds	r3, r0, #1
 800de1c:	d1c5      	bne.n	800ddaa <__sflush_r+0x36>
 800de1e:	682b      	ldr	r3, [r5, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d0c2      	beq.n	800ddaa <__sflush_r+0x36>
 800de24:	2b1d      	cmp	r3, #29
 800de26:	d001      	beq.n	800de2c <__sflush_r+0xb8>
 800de28:	2b16      	cmp	r3, #22
 800de2a:	d101      	bne.n	800de30 <__sflush_r+0xbc>
 800de2c:	602e      	str	r6, [r5, #0]
 800de2e:	e7ad      	b.n	800dd8c <__sflush_r+0x18>
 800de30:	2340      	movs	r3, #64	; 0x40
 800de32:	89a2      	ldrh	r2, [r4, #12]
 800de34:	4313      	orrs	r3, r2
 800de36:	81a3      	strh	r3, [r4, #12]
 800de38:	e7a9      	b.n	800dd8e <__sflush_r+0x1a>
 800de3a:	2340      	movs	r3, #64	; 0x40
 800de3c:	430b      	orrs	r3, r1
 800de3e:	e7fa      	b.n	800de36 <__sflush_r+0xc2>
 800de40:	690f      	ldr	r7, [r1, #16]
 800de42:	2f00      	cmp	r7, #0
 800de44:	d0a2      	beq.n	800dd8c <__sflush_r+0x18>
 800de46:	680a      	ldr	r2, [r1, #0]
 800de48:	600f      	str	r7, [r1, #0]
 800de4a:	1bd2      	subs	r2, r2, r7
 800de4c:	9201      	str	r2, [sp, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	079b      	lsls	r3, r3, #30
 800de52:	d100      	bne.n	800de56 <__sflush_r+0xe2>
 800de54:	694a      	ldr	r2, [r1, #20]
 800de56:	60a2      	str	r2, [r4, #8]
 800de58:	9b01      	ldr	r3, [sp, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	dc00      	bgt.n	800de60 <__sflush_r+0xec>
 800de5e:	e795      	b.n	800dd8c <__sflush_r+0x18>
 800de60:	003a      	movs	r2, r7
 800de62:	0028      	movs	r0, r5
 800de64:	9b01      	ldr	r3, [sp, #4]
 800de66:	6a21      	ldr	r1, [r4, #32]
 800de68:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de6a:	47b0      	blx	r6
 800de6c:	2800      	cmp	r0, #0
 800de6e:	dc06      	bgt.n	800de7e <__sflush_r+0x10a>
 800de70:	2340      	movs	r3, #64	; 0x40
 800de72:	2001      	movs	r0, #1
 800de74:	89a2      	ldrh	r2, [r4, #12]
 800de76:	4240      	negs	r0, r0
 800de78:	4313      	orrs	r3, r2
 800de7a:	81a3      	strh	r3, [r4, #12]
 800de7c:	e787      	b.n	800dd8e <__sflush_r+0x1a>
 800de7e:	9b01      	ldr	r3, [sp, #4]
 800de80:	183f      	adds	r7, r7, r0
 800de82:	1a1b      	subs	r3, r3, r0
 800de84:	9301      	str	r3, [sp, #4]
 800de86:	e7e7      	b.n	800de58 <__sflush_r+0xe4>
 800de88:	20400001 	.word	0x20400001

0800de8c <_fflush_r>:
 800de8c:	690b      	ldr	r3, [r1, #16]
 800de8e:	b570      	push	{r4, r5, r6, lr}
 800de90:	0005      	movs	r5, r0
 800de92:	000c      	movs	r4, r1
 800de94:	2b00      	cmp	r3, #0
 800de96:	d102      	bne.n	800de9e <_fflush_r+0x12>
 800de98:	2500      	movs	r5, #0
 800de9a:	0028      	movs	r0, r5
 800de9c:	bd70      	pop	{r4, r5, r6, pc}
 800de9e:	2800      	cmp	r0, #0
 800dea0:	d004      	beq.n	800deac <_fflush_r+0x20>
 800dea2:	6983      	ldr	r3, [r0, #24]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d101      	bne.n	800deac <_fflush_r+0x20>
 800dea8:	f000 f892 	bl	800dfd0 <__sinit>
 800deac:	4b14      	ldr	r3, [pc, #80]	; (800df00 <_fflush_r+0x74>)
 800deae:	429c      	cmp	r4, r3
 800deb0:	d11b      	bne.n	800deea <_fflush_r+0x5e>
 800deb2:	686c      	ldr	r4, [r5, #4]
 800deb4:	220c      	movs	r2, #12
 800deb6:	5ea3      	ldrsh	r3, [r4, r2]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d0ed      	beq.n	800de98 <_fflush_r+0xc>
 800debc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800debe:	07d2      	lsls	r2, r2, #31
 800dec0:	d404      	bmi.n	800decc <_fflush_r+0x40>
 800dec2:	059b      	lsls	r3, r3, #22
 800dec4:	d402      	bmi.n	800decc <_fflush_r+0x40>
 800dec6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dec8:	f000 f923 	bl	800e112 <__retarget_lock_acquire_recursive>
 800decc:	0028      	movs	r0, r5
 800dece:	0021      	movs	r1, r4
 800ded0:	f7ff ff50 	bl	800dd74 <__sflush_r>
 800ded4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ded6:	0005      	movs	r5, r0
 800ded8:	07db      	lsls	r3, r3, #31
 800deda:	d4de      	bmi.n	800de9a <_fflush_r+0xe>
 800dedc:	89a3      	ldrh	r3, [r4, #12]
 800dede:	059b      	lsls	r3, r3, #22
 800dee0:	d4db      	bmi.n	800de9a <_fflush_r+0xe>
 800dee2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dee4:	f000 f916 	bl	800e114 <__retarget_lock_release_recursive>
 800dee8:	e7d7      	b.n	800de9a <_fflush_r+0xe>
 800deea:	4b06      	ldr	r3, [pc, #24]	; (800df04 <_fflush_r+0x78>)
 800deec:	429c      	cmp	r4, r3
 800deee:	d101      	bne.n	800def4 <_fflush_r+0x68>
 800def0:	68ac      	ldr	r4, [r5, #8]
 800def2:	e7df      	b.n	800deb4 <_fflush_r+0x28>
 800def4:	4b04      	ldr	r3, [pc, #16]	; (800df08 <_fflush_r+0x7c>)
 800def6:	429c      	cmp	r4, r3
 800def8:	d1dc      	bne.n	800deb4 <_fflush_r+0x28>
 800defa:	68ec      	ldr	r4, [r5, #12]
 800defc:	e7da      	b.n	800deb4 <_fflush_r+0x28>
 800defe:	46c0      	nop			; (mov r8, r8)
 800df00:	0800eb04 	.word	0x0800eb04
 800df04:	0800eb24 	.word	0x0800eb24
 800df08:	0800eae4 	.word	0x0800eae4

0800df0c <std>:
 800df0c:	2300      	movs	r3, #0
 800df0e:	b510      	push	{r4, lr}
 800df10:	0004      	movs	r4, r0
 800df12:	6003      	str	r3, [r0, #0]
 800df14:	6043      	str	r3, [r0, #4]
 800df16:	6083      	str	r3, [r0, #8]
 800df18:	8181      	strh	r1, [r0, #12]
 800df1a:	6643      	str	r3, [r0, #100]	; 0x64
 800df1c:	0019      	movs	r1, r3
 800df1e:	81c2      	strh	r2, [r0, #14]
 800df20:	6103      	str	r3, [r0, #16]
 800df22:	6143      	str	r3, [r0, #20]
 800df24:	6183      	str	r3, [r0, #24]
 800df26:	2208      	movs	r2, #8
 800df28:	305c      	adds	r0, #92	; 0x5c
 800df2a:	f7fb ff63 	bl	8009df4 <memset>
 800df2e:	4b05      	ldr	r3, [pc, #20]	; (800df44 <std+0x38>)
 800df30:	6263      	str	r3, [r4, #36]	; 0x24
 800df32:	4b05      	ldr	r3, [pc, #20]	; (800df48 <std+0x3c>)
 800df34:	6224      	str	r4, [r4, #32]
 800df36:	62a3      	str	r3, [r4, #40]	; 0x28
 800df38:	4b04      	ldr	r3, [pc, #16]	; (800df4c <std+0x40>)
 800df3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df3c:	4b04      	ldr	r3, [pc, #16]	; (800df50 <std+0x44>)
 800df3e:	6323      	str	r3, [r4, #48]	; 0x30
 800df40:	bd10      	pop	{r4, pc}
 800df42:	46c0      	nop			; (mov r8, r8)
 800df44:	0800e295 	.word	0x0800e295
 800df48:	0800e2bd 	.word	0x0800e2bd
 800df4c:	0800e2f5 	.word	0x0800e2f5
 800df50:	0800e321 	.word	0x0800e321

0800df54 <_cleanup_r>:
 800df54:	b510      	push	{r4, lr}
 800df56:	4902      	ldr	r1, [pc, #8]	; (800df60 <_cleanup_r+0xc>)
 800df58:	f000 f8ba 	bl	800e0d0 <_fwalk_reent>
 800df5c:	bd10      	pop	{r4, pc}
 800df5e:	46c0      	nop			; (mov r8, r8)
 800df60:	0800de8d 	.word	0x0800de8d

0800df64 <__sfmoreglue>:
 800df64:	b570      	push	{r4, r5, r6, lr}
 800df66:	2568      	movs	r5, #104	; 0x68
 800df68:	1e4a      	subs	r2, r1, #1
 800df6a:	4355      	muls	r5, r2
 800df6c:	000e      	movs	r6, r1
 800df6e:	0029      	movs	r1, r5
 800df70:	3174      	adds	r1, #116	; 0x74
 800df72:	f7ff fa59 	bl	800d428 <_malloc_r>
 800df76:	1e04      	subs	r4, r0, #0
 800df78:	d008      	beq.n	800df8c <__sfmoreglue+0x28>
 800df7a:	2100      	movs	r1, #0
 800df7c:	002a      	movs	r2, r5
 800df7e:	6001      	str	r1, [r0, #0]
 800df80:	6046      	str	r6, [r0, #4]
 800df82:	300c      	adds	r0, #12
 800df84:	60a0      	str	r0, [r4, #8]
 800df86:	3268      	adds	r2, #104	; 0x68
 800df88:	f7fb ff34 	bl	8009df4 <memset>
 800df8c:	0020      	movs	r0, r4
 800df8e:	bd70      	pop	{r4, r5, r6, pc}

0800df90 <__sfp_lock_acquire>:
 800df90:	b510      	push	{r4, lr}
 800df92:	4802      	ldr	r0, [pc, #8]	; (800df9c <__sfp_lock_acquire+0xc>)
 800df94:	f000 f8bd 	bl	800e112 <__retarget_lock_acquire_recursive>
 800df98:	bd10      	pop	{r4, pc}
 800df9a:	46c0      	nop			; (mov r8, r8)
 800df9c:	200006e0 	.word	0x200006e0

0800dfa0 <__sfp_lock_release>:
 800dfa0:	b510      	push	{r4, lr}
 800dfa2:	4802      	ldr	r0, [pc, #8]	; (800dfac <__sfp_lock_release+0xc>)
 800dfa4:	f000 f8b6 	bl	800e114 <__retarget_lock_release_recursive>
 800dfa8:	bd10      	pop	{r4, pc}
 800dfaa:	46c0      	nop			; (mov r8, r8)
 800dfac:	200006e0 	.word	0x200006e0

0800dfb0 <__sinit_lock_acquire>:
 800dfb0:	b510      	push	{r4, lr}
 800dfb2:	4802      	ldr	r0, [pc, #8]	; (800dfbc <__sinit_lock_acquire+0xc>)
 800dfb4:	f000 f8ad 	bl	800e112 <__retarget_lock_acquire_recursive>
 800dfb8:	bd10      	pop	{r4, pc}
 800dfba:	46c0      	nop			; (mov r8, r8)
 800dfbc:	200006db 	.word	0x200006db

0800dfc0 <__sinit_lock_release>:
 800dfc0:	b510      	push	{r4, lr}
 800dfc2:	4802      	ldr	r0, [pc, #8]	; (800dfcc <__sinit_lock_release+0xc>)
 800dfc4:	f000 f8a6 	bl	800e114 <__retarget_lock_release_recursive>
 800dfc8:	bd10      	pop	{r4, pc}
 800dfca:	46c0      	nop			; (mov r8, r8)
 800dfcc:	200006db 	.word	0x200006db

0800dfd0 <__sinit>:
 800dfd0:	b513      	push	{r0, r1, r4, lr}
 800dfd2:	0004      	movs	r4, r0
 800dfd4:	f7ff ffec 	bl	800dfb0 <__sinit_lock_acquire>
 800dfd8:	69a3      	ldr	r3, [r4, #24]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d002      	beq.n	800dfe4 <__sinit+0x14>
 800dfde:	f7ff ffef 	bl	800dfc0 <__sinit_lock_release>
 800dfe2:	bd13      	pop	{r0, r1, r4, pc}
 800dfe4:	64a3      	str	r3, [r4, #72]	; 0x48
 800dfe6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800dfe8:	6523      	str	r3, [r4, #80]	; 0x50
 800dfea:	4b13      	ldr	r3, [pc, #76]	; (800e038 <__sinit+0x68>)
 800dfec:	4a13      	ldr	r2, [pc, #76]	; (800e03c <__sinit+0x6c>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	62a2      	str	r2, [r4, #40]	; 0x28
 800dff2:	9301      	str	r3, [sp, #4]
 800dff4:	42a3      	cmp	r3, r4
 800dff6:	d101      	bne.n	800dffc <__sinit+0x2c>
 800dff8:	2301      	movs	r3, #1
 800dffa:	61a3      	str	r3, [r4, #24]
 800dffc:	0020      	movs	r0, r4
 800dffe:	f000 f81f 	bl	800e040 <__sfp>
 800e002:	6060      	str	r0, [r4, #4]
 800e004:	0020      	movs	r0, r4
 800e006:	f000 f81b 	bl	800e040 <__sfp>
 800e00a:	60a0      	str	r0, [r4, #8]
 800e00c:	0020      	movs	r0, r4
 800e00e:	f000 f817 	bl	800e040 <__sfp>
 800e012:	2200      	movs	r2, #0
 800e014:	2104      	movs	r1, #4
 800e016:	60e0      	str	r0, [r4, #12]
 800e018:	6860      	ldr	r0, [r4, #4]
 800e01a:	f7ff ff77 	bl	800df0c <std>
 800e01e:	2201      	movs	r2, #1
 800e020:	2109      	movs	r1, #9
 800e022:	68a0      	ldr	r0, [r4, #8]
 800e024:	f7ff ff72 	bl	800df0c <std>
 800e028:	2202      	movs	r2, #2
 800e02a:	2112      	movs	r1, #18
 800e02c:	68e0      	ldr	r0, [r4, #12]
 800e02e:	f7ff ff6d 	bl	800df0c <std>
 800e032:	2301      	movs	r3, #1
 800e034:	61a3      	str	r3, [r4, #24]
 800e036:	e7d2      	b.n	800dfde <__sinit+0xe>
 800e038:	0800e698 	.word	0x0800e698
 800e03c:	0800df55 	.word	0x0800df55

0800e040 <__sfp>:
 800e040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e042:	0007      	movs	r7, r0
 800e044:	f7ff ffa4 	bl	800df90 <__sfp_lock_acquire>
 800e048:	4b1f      	ldr	r3, [pc, #124]	; (800e0c8 <__sfp+0x88>)
 800e04a:	681e      	ldr	r6, [r3, #0]
 800e04c:	69b3      	ldr	r3, [r6, #24]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d102      	bne.n	800e058 <__sfp+0x18>
 800e052:	0030      	movs	r0, r6
 800e054:	f7ff ffbc 	bl	800dfd0 <__sinit>
 800e058:	3648      	adds	r6, #72	; 0x48
 800e05a:	68b4      	ldr	r4, [r6, #8]
 800e05c:	6873      	ldr	r3, [r6, #4]
 800e05e:	3b01      	subs	r3, #1
 800e060:	d504      	bpl.n	800e06c <__sfp+0x2c>
 800e062:	6833      	ldr	r3, [r6, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d022      	beq.n	800e0ae <__sfp+0x6e>
 800e068:	6836      	ldr	r6, [r6, #0]
 800e06a:	e7f6      	b.n	800e05a <__sfp+0x1a>
 800e06c:	220c      	movs	r2, #12
 800e06e:	5ea5      	ldrsh	r5, [r4, r2]
 800e070:	2d00      	cmp	r5, #0
 800e072:	d11a      	bne.n	800e0aa <__sfp+0x6a>
 800e074:	0020      	movs	r0, r4
 800e076:	4b15      	ldr	r3, [pc, #84]	; (800e0cc <__sfp+0x8c>)
 800e078:	3058      	adds	r0, #88	; 0x58
 800e07a:	60e3      	str	r3, [r4, #12]
 800e07c:	6665      	str	r5, [r4, #100]	; 0x64
 800e07e:	f000 f847 	bl	800e110 <__retarget_lock_init_recursive>
 800e082:	f7ff ff8d 	bl	800dfa0 <__sfp_lock_release>
 800e086:	0020      	movs	r0, r4
 800e088:	2208      	movs	r2, #8
 800e08a:	0029      	movs	r1, r5
 800e08c:	6025      	str	r5, [r4, #0]
 800e08e:	60a5      	str	r5, [r4, #8]
 800e090:	6065      	str	r5, [r4, #4]
 800e092:	6125      	str	r5, [r4, #16]
 800e094:	6165      	str	r5, [r4, #20]
 800e096:	61a5      	str	r5, [r4, #24]
 800e098:	305c      	adds	r0, #92	; 0x5c
 800e09a:	f7fb feab 	bl	8009df4 <memset>
 800e09e:	6365      	str	r5, [r4, #52]	; 0x34
 800e0a0:	63a5      	str	r5, [r4, #56]	; 0x38
 800e0a2:	64a5      	str	r5, [r4, #72]	; 0x48
 800e0a4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800e0a6:	0020      	movs	r0, r4
 800e0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0aa:	3468      	adds	r4, #104	; 0x68
 800e0ac:	e7d7      	b.n	800e05e <__sfp+0x1e>
 800e0ae:	2104      	movs	r1, #4
 800e0b0:	0038      	movs	r0, r7
 800e0b2:	f7ff ff57 	bl	800df64 <__sfmoreglue>
 800e0b6:	1e04      	subs	r4, r0, #0
 800e0b8:	6030      	str	r0, [r6, #0]
 800e0ba:	d1d5      	bne.n	800e068 <__sfp+0x28>
 800e0bc:	f7ff ff70 	bl	800dfa0 <__sfp_lock_release>
 800e0c0:	230c      	movs	r3, #12
 800e0c2:	603b      	str	r3, [r7, #0]
 800e0c4:	e7ef      	b.n	800e0a6 <__sfp+0x66>
 800e0c6:	46c0      	nop			; (mov r8, r8)
 800e0c8:	0800e698 	.word	0x0800e698
 800e0cc:	ffff0001 	.word	0xffff0001

0800e0d0 <_fwalk_reent>:
 800e0d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0d2:	0004      	movs	r4, r0
 800e0d4:	0006      	movs	r6, r0
 800e0d6:	2700      	movs	r7, #0
 800e0d8:	9101      	str	r1, [sp, #4]
 800e0da:	3448      	adds	r4, #72	; 0x48
 800e0dc:	6863      	ldr	r3, [r4, #4]
 800e0de:	68a5      	ldr	r5, [r4, #8]
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	9b00      	ldr	r3, [sp, #0]
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	9300      	str	r3, [sp, #0]
 800e0e8:	d504      	bpl.n	800e0f4 <_fwalk_reent+0x24>
 800e0ea:	6824      	ldr	r4, [r4, #0]
 800e0ec:	2c00      	cmp	r4, #0
 800e0ee:	d1f5      	bne.n	800e0dc <_fwalk_reent+0xc>
 800e0f0:	0038      	movs	r0, r7
 800e0f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e0f4:	89ab      	ldrh	r3, [r5, #12]
 800e0f6:	2b01      	cmp	r3, #1
 800e0f8:	d908      	bls.n	800e10c <_fwalk_reent+0x3c>
 800e0fa:	220e      	movs	r2, #14
 800e0fc:	5eab      	ldrsh	r3, [r5, r2]
 800e0fe:	3301      	adds	r3, #1
 800e100:	d004      	beq.n	800e10c <_fwalk_reent+0x3c>
 800e102:	0029      	movs	r1, r5
 800e104:	0030      	movs	r0, r6
 800e106:	9b01      	ldr	r3, [sp, #4]
 800e108:	4798      	blx	r3
 800e10a:	4307      	orrs	r7, r0
 800e10c:	3568      	adds	r5, #104	; 0x68
 800e10e:	e7e8      	b.n	800e0e2 <_fwalk_reent+0x12>

0800e110 <__retarget_lock_init_recursive>:
 800e110:	4770      	bx	lr

0800e112 <__retarget_lock_acquire_recursive>:
 800e112:	4770      	bx	lr

0800e114 <__retarget_lock_release_recursive>:
 800e114:	4770      	bx	lr
	...

0800e118 <__swhatbuf_r>:
 800e118:	b570      	push	{r4, r5, r6, lr}
 800e11a:	000e      	movs	r6, r1
 800e11c:	001d      	movs	r5, r3
 800e11e:	230e      	movs	r3, #14
 800e120:	5ec9      	ldrsh	r1, [r1, r3]
 800e122:	0014      	movs	r4, r2
 800e124:	b096      	sub	sp, #88	; 0x58
 800e126:	2900      	cmp	r1, #0
 800e128:	da07      	bge.n	800e13a <__swhatbuf_r+0x22>
 800e12a:	2300      	movs	r3, #0
 800e12c:	602b      	str	r3, [r5, #0]
 800e12e:	89b3      	ldrh	r3, [r6, #12]
 800e130:	061b      	lsls	r3, r3, #24
 800e132:	d411      	bmi.n	800e158 <__swhatbuf_r+0x40>
 800e134:	2380      	movs	r3, #128	; 0x80
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	e00f      	b.n	800e15a <__swhatbuf_r+0x42>
 800e13a:	466a      	mov	r2, sp
 800e13c:	f000 f91c 	bl	800e378 <_fstat_r>
 800e140:	2800      	cmp	r0, #0
 800e142:	dbf2      	blt.n	800e12a <__swhatbuf_r+0x12>
 800e144:	23f0      	movs	r3, #240	; 0xf0
 800e146:	9901      	ldr	r1, [sp, #4]
 800e148:	021b      	lsls	r3, r3, #8
 800e14a:	4019      	ands	r1, r3
 800e14c:	4b05      	ldr	r3, [pc, #20]	; (800e164 <__swhatbuf_r+0x4c>)
 800e14e:	18c9      	adds	r1, r1, r3
 800e150:	424b      	negs	r3, r1
 800e152:	4159      	adcs	r1, r3
 800e154:	6029      	str	r1, [r5, #0]
 800e156:	e7ed      	b.n	800e134 <__swhatbuf_r+0x1c>
 800e158:	2340      	movs	r3, #64	; 0x40
 800e15a:	2000      	movs	r0, #0
 800e15c:	6023      	str	r3, [r4, #0]
 800e15e:	b016      	add	sp, #88	; 0x58
 800e160:	bd70      	pop	{r4, r5, r6, pc}
 800e162:	46c0      	nop			; (mov r8, r8)
 800e164:	ffffe000 	.word	0xffffe000

0800e168 <__smakebuf_r>:
 800e168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e16a:	2602      	movs	r6, #2
 800e16c:	898b      	ldrh	r3, [r1, #12]
 800e16e:	0005      	movs	r5, r0
 800e170:	000c      	movs	r4, r1
 800e172:	4233      	tst	r3, r6
 800e174:	d006      	beq.n	800e184 <__smakebuf_r+0x1c>
 800e176:	0023      	movs	r3, r4
 800e178:	3347      	adds	r3, #71	; 0x47
 800e17a:	6023      	str	r3, [r4, #0]
 800e17c:	6123      	str	r3, [r4, #16]
 800e17e:	2301      	movs	r3, #1
 800e180:	6163      	str	r3, [r4, #20]
 800e182:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e184:	466a      	mov	r2, sp
 800e186:	ab01      	add	r3, sp, #4
 800e188:	f7ff ffc6 	bl	800e118 <__swhatbuf_r>
 800e18c:	9900      	ldr	r1, [sp, #0]
 800e18e:	0007      	movs	r7, r0
 800e190:	0028      	movs	r0, r5
 800e192:	f7ff f949 	bl	800d428 <_malloc_r>
 800e196:	2800      	cmp	r0, #0
 800e198:	d108      	bne.n	800e1ac <__smakebuf_r+0x44>
 800e19a:	220c      	movs	r2, #12
 800e19c:	5ea3      	ldrsh	r3, [r4, r2]
 800e19e:	059a      	lsls	r2, r3, #22
 800e1a0:	d4ef      	bmi.n	800e182 <__smakebuf_r+0x1a>
 800e1a2:	2203      	movs	r2, #3
 800e1a4:	4393      	bics	r3, r2
 800e1a6:	431e      	orrs	r6, r3
 800e1a8:	81a6      	strh	r6, [r4, #12]
 800e1aa:	e7e4      	b.n	800e176 <__smakebuf_r+0xe>
 800e1ac:	4b0f      	ldr	r3, [pc, #60]	; (800e1ec <__smakebuf_r+0x84>)
 800e1ae:	62ab      	str	r3, [r5, #40]	; 0x28
 800e1b0:	2380      	movs	r3, #128	; 0x80
 800e1b2:	89a2      	ldrh	r2, [r4, #12]
 800e1b4:	6020      	str	r0, [r4, #0]
 800e1b6:	4313      	orrs	r3, r2
 800e1b8:	81a3      	strh	r3, [r4, #12]
 800e1ba:	9b00      	ldr	r3, [sp, #0]
 800e1bc:	6120      	str	r0, [r4, #16]
 800e1be:	6163      	str	r3, [r4, #20]
 800e1c0:	9b01      	ldr	r3, [sp, #4]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d00d      	beq.n	800e1e2 <__smakebuf_r+0x7a>
 800e1c6:	0028      	movs	r0, r5
 800e1c8:	230e      	movs	r3, #14
 800e1ca:	5ee1      	ldrsh	r1, [r4, r3]
 800e1cc:	f000 f8e6 	bl	800e39c <_isatty_r>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d006      	beq.n	800e1e2 <__smakebuf_r+0x7a>
 800e1d4:	2203      	movs	r2, #3
 800e1d6:	89a3      	ldrh	r3, [r4, #12]
 800e1d8:	4393      	bics	r3, r2
 800e1da:	001a      	movs	r2, r3
 800e1dc:	2301      	movs	r3, #1
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	81a3      	strh	r3, [r4, #12]
 800e1e2:	89a0      	ldrh	r0, [r4, #12]
 800e1e4:	4307      	orrs	r7, r0
 800e1e6:	81a7      	strh	r7, [r4, #12]
 800e1e8:	e7cb      	b.n	800e182 <__smakebuf_r+0x1a>
 800e1ea:	46c0      	nop			; (mov r8, r8)
 800e1ec:	0800df55 	.word	0x0800df55

0800e1f0 <_malloc_usable_size_r>:
 800e1f0:	1f0b      	subs	r3, r1, #4
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	1f18      	subs	r0, r3, #4
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	da01      	bge.n	800e1fe <_malloc_usable_size_r+0xe>
 800e1fa:	580b      	ldr	r3, [r1, r0]
 800e1fc:	18c0      	adds	r0, r0, r3
 800e1fe:	4770      	bx	lr

0800e200 <_raise_r>:
 800e200:	b570      	push	{r4, r5, r6, lr}
 800e202:	0004      	movs	r4, r0
 800e204:	000d      	movs	r5, r1
 800e206:	291f      	cmp	r1, #31
 800e208:	d904      	bls.n	800e214 <_raise_r+0x14>
 800e20a:	2316      	movs	r3, #22
 800e20c:	6003      	str	r3, [r0, #0]
 800e20e:	2001      	movs	r0, #1
 800e210:	4240      	negs	r0, r0
 800e212:	bd70      	pop	{r4, r5, r6, pc}
 800e214:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e216:	2b00      	cmp	r3, #0
 800e218:	d004      	beq.n	800e224 <_raise_r+0x24>
 800e21a:	008a      	lsls	r2, r1, #2
 800e21c:	189b      	adds	r3, r3, r2
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	2a00      	cmp	r2, #0
 800e222:	d108      	bne.n	800e236 <_raise_r+0x36>
 800e224:	0020      	movs	r0, r4
 800e226:	f000 f831 	bl	800e28c <_getpid_r>
 800e22a:	002a      	movs	r2, r5
 800e22c:	0001      	movs	r1, r0
 800e22e:	0020      	movs	r0, r4
 800e230:	f000 f81a 	bl	800e268 <_kill_r>
 800e234:	e7ed      	b.n	800e212 <_raise_r+0x12>
 800e236:	2000      	movs	r0, #0
 800e238:	2a01      	cmp	r2, #1
 800e23a:	d0ea      	beq.n	800e212 <_raise_r+0x12>
 800e23c:	1c51      	adds	r1, r2, #1
 800e23e:	d103      	bne.n	800e248 <_raise_r+0x48>
 800e240:	2316      	movs	r3, #22
 800e242:	3001      	adds	r0, #1
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	e7e4      	b.n	800e212 <_raise_r+0x12>
 800e248:	2400      	movs	r4, #0
 800e24a:	0028      	movs	r0, r5
 800e24c:	601c      	str	r4, [r3, #0]
 800e24e:	4790      	blx	r2
 800e250:	0020      	movs	r0, r4
 800e252:	e7de      	b.n	800e212 <_raise_r+0x12>

0800e254 <raise>:
 800e254:	b510      	push	{r4, lr}
 800e256:	4b03      	ldr	r3, [pc, #12]	; (800e264 <raise+0x10>)
 800e258:	0001      	movs	r1, r0
 800e25a:	6818      	ldr	r0, [r3, #0]
 800e25c:	f7ff ffd0 	bl	800e200 <_raise_r>
 800e260:	bd10      	pop	{r4, pc}
 800e262:	46c0      	nop			; (mov r8, r8)
 800e264:	2000000c 	.word	0x2000000c

0800e268 <_kill_r>:
 800e268:	2300      	movs	r3, #0
 800e26a:	b570      	push	{r4, r5, r6, lr}
 800e26c:	4d06      	ldr	r5, [pc, #24]	; (800e288 <_kill_r+0x20>)
 800e26e:	0004      	movs	r4, r0
 800e270:	0008      	movs	r0, r1
 800e272:	0011      	movs	r1, r2
 800e274:	602b      	str	r3, [r5, #0]
 800e276:	f7f5 ff89 	bl	800418c <_kill>
 800e27a:	1c43      	adds	r3, r0, #1
 800e27c:	d103      	bne.n	800e286 <_kill_r+0x1e>
 800e27e:	682b      	ldr	r3, [r5, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d000      	beq.n	800e286 <_kill_r+0x1e>
 800e284:	6023      	str	r3, [r4, #0]
 800e286:	bd70      	pop	{r4, r5, r6, pc}
 800e288:	200006d4 	.word	0x200006d4

0800e28c <_getpid_r>:
 800e28c:	b510      	push	{r4, lr}
 800e28e:	f7f5 ff77 	bl	8004180 <_getpid>
 800e292:	bd10      	pop	{r4, pc}

0800e294 <__sread>:
 800e294:	b570      	push	{r4, r5, r6, lr}
 800e296:	000c      	movs	r4, r1
 800e298:	250e      	movs	r5, #14
 800e29a:	5f49      	ldrsh	r1, [r1, r5]
 800e29c:	f000 f8a4 	bl	800e3e8 <_read_r>
 800e2a0:	2800      	cmp	r0, #0
 800e2a2:	db03      	blt.n	800e2ac <__sread+0x18>
 800e2a4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e2a6:	181b      	adds	r3, r3, r0
 800e2a8:	6563      	str	r3, [r4, #84]	; 0x54
 800e2aa:	bd70      	pop	{r4, r5, r6, pc}
 800e2ac:	89a3      	ldrh	r3, [r4, #12]
 800e2ae:	4a02      	ldr	r2, [pc, #8]	; (800e2b8 <__sread+0x24>)
 800e2b0:	4013      	ands	r3, r2
 800e2b2:	81a3      	strh	r3, [r4, #12]
 800e2b4:	e7f9      	b.n	800e2aa <__sread+0x16>
 800e2b6:	46c0      	nop			; (mov r8, r8)
 800e2b8:	ffffefff 	.word	0xffffefff

0800e2bc <__swrite>:
 800e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2be:	001f      	movs	r7, r3
 800e2c0:	898b      	ldrh	r3, [r1, #12]
 800e2c2:	0005      	movs	r5, r0
 800e2c4:	000c      	movs	r4, r1
 800e2c6:	0016      	movs	r6, r2
 800e2c8:	05db      	lsls	r3, r3, #23
 800e2ca:	d505      	bpl.n	800e2d8 <__swrite+0x1c>
 800e2cc:	230e      	movs	r3, #14
 800e2ce:	5ec9      	ldrsh	r1, [r1, r3]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	2302      	movs	r3, #2
 800e2d4:	f000 f874 	bl	800e3c0 <_lseek_r>
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	4a05      	ldr	r2, [pc, #20]	; (800e2f0 <__swrite+0x34>)
 800e2dc:	0028      	movs	r0, r5
 800e2de:	4013      	ands	r3, r2
 800e2e0:	81a3      	strh	r3, [r4, #12]
 800e2e2:	0032      	movs	r2, r6
 800e2e4:	230e      	movs	r3, #14
 800e2e6:	5ee1      	ldrsh	r1, [r4, r3]
 800e2e8:	003b      	movs	r3, r7
 800e2ea:	f000 f81f 	bl	800e32c <_write_r>
 800e2ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2f0:	ffffefff 	.word	0xffffefff

0800e2f4 <__sseek>:
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	000c      	movs	r4, r1
 800e2f8:	250e      	movs	r5, #14
 800e2fa:	5f49      	ldrsh	r1, [r1, r5]
 800e2fc:	f000 f860 	bl	800e3c0 <_lseek_r>
 800e300:	89a3      	ldrh	r3, [r4, #12]
 800e302:	1c42      	adds	r2, r0, #1
 800e304:	d103      	bne.n	800e30e <__sseek+0x1a>
 800e306:	4a05      	ldr	r2, [pc, #20]	; (800e31c <__sseek+0x28>)
 800e308:	4013      	ands	r3, r2
 800e30a:	81a3      	strh	r3, [r4, #12]
 800e30c:	bd70      	pop	{r4, r5, r6, pc}
 800e30e:	2280      	movs	r2, #128	; 0x80
 800e310:	0152      	lsls	r2, r2, #5
 800e312:	4313      	orrs	r3, r2
 800e314:	81a3      	strh	r3, [r4, #12]
 800e316:	6560      	str	r0, [r4, #84]	; 0x54
 800e318:	e7f8      	b.n	800e30c <__sseek+0x18>
 800e31a:	46c0      	nop			; (mov r8, r8)
 800e31c:	ffffefff 	.word	0xffffefff

0800e320 <__sclose>:
 800e320:	b510      	push	{r4, lr}
 800e322:	230e      	movs	r3, #14
 800e324:	5ec9      	ldrsh	r1, [r1, r3]
 800e326:	f000 f815 	bl	800e354 <_close_r>
 800e32a:	bd10      	pop	{r4, pc}

0800e32c <_write_r>:
 800e32c:	b570      	push	{r4, r5, r6, lr}
 800e32e:	0004      	movs	r4, r0
 800e330:	0008      	movs	r0, r1
 800e332:	0011      	movs	r1, r2
 800e334:	001a      	movs	r2, r3
 800e336:	2300      	movs	r3, #0
 800e338:	4d05      	ldr	r5, [pc, #20]	; (800e350 <_write_r+0x24>)
 800e33a:	602b      	str	r3, [r5, #0]
 800e33c:	f7f5 ff5f 	bl	80041fe <_write>
 800e340:	1c43      	adds	r3, r0, #1
 800e342:	d103      	bne.n	800e34c <_write_r+0x20>
 800e344:	682b      	ldr	r3, [r5, #0]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d000      	beq.n	800e34c <_write_r+0x20>
 800e34a:	6023      	str	r3, [r4, #0]
 800e34c:	bd70      	pop	{r4, r5, r6, pc}
 800e34e:	46c0      	nop			; (mov r8, r8)
 800e350:	200006d4 	.word	0x200006d4

0800e354 <_close_r>:
 800e354:	2300      	movs	r3, #0
 800e356:	b570      	push	{r4, r5, r6, lr}
 800e358:	4d06      	ldr	r5, [pc, #24]	; (800e374 <_close_r+0x20>)
 800e35a:	0004      	movs	r4, r0
 800e35c:	0008      	movs	r0, r1
 800e35e:	602b      	str	r3, [r5, #0]
 800e360:	f7f5 ff69 	bl	8004236 <_close>
 800e364:	1c43      	adds	r3, r0, #1
 800e366:	d103      	bne.n	800e370 <_close_r+0x1c>
 800e368:	682b      	ldr	r3, [r5, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d000      	beq.n	800e370 <_close_r+0x1c>
 800e36e:	6023      	str	r3, [r4, #0]
 800e370:	bd70      	pop	{r4, r5, r6, pc}
 800e372:	46c0      	nop			; (mov r8, r8)
 800e374:	200006d4 	.word	0x200006d4

0800e378 <_fstat_r>:
 800e378:	2300      	movs	r3, #0
 800e37a:	b570      	push	{r4, r5, r6, lr}
 800e37c:	4d06      	ldr	r5, [pc, #24]	; (800e398 <_fstat_r+0x20>)
 800e37e:	0004      	movs	r4, r0
 800e380:	0008      	movs	r0, r1
 800e382:	0011      	movs	r1, r2
 800e384:	602b      	str	r3, [r5, #0]
 800e386:	f7f5 ff60 	bl	800424a <_fstat>
 800e38a:	1c43      	adds	r3, r0, #1
 800e38c:	d103      	bne.n	800e396 <_fstat_r+0x1e>
 800e38e:	682b      	ldr	r3, [r5, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d000      	beq.n	800e396 <_fstat_r+0x1e>
 800e394:	6023      	str	r3, [r4, #0]
 800e396:	bd70      	pop	{r4, r5, r6, pc}
 800e398:	200006d4 	.word	0x200006d4

0800e39c <_isatty_r>:
 800e39c:	2300      	movs	r3, #0
 800e39e:	b570      	push	{r4, r5, r6, lr}
 800e3a0:	4d06      	ldr	r5, [pc, #24]	; (800e3bc <_isatty_r+0x20>)
 800e3a2:	0004      	movs	r4, r0
 800e3a4:	0008      	movs	r0, r1
 800e3a6:	602b      	str	r3, [r5, #0]
 800e3a8:	f7f5 ff5d 	bl	8004266 <_isatty>
 800e3ac:	1c43      	adds	r3, r0, #1
 800e3ae:	d103      	bne.n	800e3b8 <_isatty_r+0x1c>
 800e3b0:	682b      	ldr	r3, [r5, #0]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d000      	beq.n	800e3b8 <_isatty_r+0x1c>
 800e3b6:	6023      	str	r3, [r4, #0]
 800e3b8:	bd70      	pop	{r4, r5, r6, pc}
 800e3ba:	46c0      	nop			; (mov r8, r8)
 800e3bc:	200006d4 	.word	0x200006d4

0800e3c0 <_lseek_r>:
 800e3c0:	b570      	push	{r4, r5, r6, lr}
 800e3c2:	0004      	movs	r4, r0
 800e3c4:	0008      	movs	r0, r1
 800e3c6:	0011      	movs	r1, r2
 800e3c8:	001a      	movs	r2, r3
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	4d05      	ldr	r5, [pc, #20]	; (800e3e4 <_lseek_r+0x24>)
 800e3ce:	602b      	str	r3, [r5, #0]
 800e3d0:	f7f5 ff52 	bl	8004278 <_lseek>
 800e3d4:	1c43      	adds	r3, r0, #1
 800e3d6:	d103      	bne.n	800e3e0 <_lseek_r+0x20>
 800e3d8:	682b      	ldr	r3, [r5, #0]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d000      	beq.n	800e3e0 <_lseek_r+0x20>
 800e3de:	6023      	str	r3, [r4, #0]
 800e3e0:	bd70      	pop	{r4, r5, r6, pc}
 800e3e2:	46c0      	nop			; (mov r8, r8)
 800e3e4:	200006d4 	.word	0x200006d4

0800e3e8 <_read_r>:
 800e3e8:	b570      	push	{r4, r5, r6, lr}
 800e3ea:	0004      	movs	r4, r0
 800e3ec:	0008      	movs	r0, r1
 800e3ee:	0011      	movs	r1, r2
 800e3f0:	001a      	movs	r2, r3
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	4d05      	ldr	r5, [pc, #20]	; (800e40c <_read_r+0x24>)
 800e3f6:	602b      	str	r3, [r5, #0]
 800e3f8:	f7f5 fee4 	bl	80041c4 <_read>
 800e3fc:	1c43      	adds	r3, r0, #1
 800e3fe:	d103      	bne.n	800e408 <_read_r+0x20>
 800e400:	682b      	ldr	r3, [r5, #0]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d000      	beq.n	800e408 <_read_r+0x20>
 800e406:	6023      	str	r3, [r4, #0]
 800e408:	bd70      	pop	{r4, r5, r6, pc}
 800e40a:	46c0      	nop			; (mov r8, r8)
 800e40c:	200006d4 	.word	0x200006d4

0800e410 <_init>:
 800e410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e412:	46c0      	nop			; (mov r8, r8)
 800e414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e416:	bc08      	pop	{r3}
 800e418:	469e      	mov	lr, r3
 800e41a:	4770      	bx	lr

0800e41c <_fini>:
 800e41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41e:	46c0      	nop			; (mov r8, r8)
 800e420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e422:	bc08      	pop	{r3}
 800e424:	469e      	mov	lr, r3
 800e426:	4770      	bx	lr
